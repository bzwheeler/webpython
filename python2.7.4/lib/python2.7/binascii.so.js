// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
// Capture the output of this into a variable, if you want
(function(FUNCTION_TABLE_OFFSET, globalScope) {
  var Module = {};
  var args = [];
  Module.arguments = [];
// === Auto-generated preamble library stuff ===
//========================================
// Runtime essentials
//========================================
function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.pop();
    var func = callback.func;
    if (typeof func === 'number') {
      func = FUNCTION_TABLE[func];
    }
    func(callback.arg === undefined ? null : callback.arg);
  }
}
var __ATINIT__ = []; // functions called during startup
function initRuntime() {
  callRuntimeCallbacks(__ATINIT__);
}
// === Body ===
var _table_hex;
var _table_b2a_hqx;
var _table_b2a_base64;
var _table_a2b_hqx;
var _table_a2b_base64;
var _doc_unhexlify;
var _doc_rledecode_hqx;
var _doc_rlecode_hqx;
var _doc_hexlify;
var _doc_crc_hqx;
var _doc_crc32;
var _doc_binascii;
var _doc_b2a_uu;
var _doc_b2a_qp;
var _doc_b2a_hqx;
var _doc_b2a_base64;
var _doc_a2b_uu;
var _doc_a2b_qp;
var _doc_a2b_hqx;
var _doc_a2b_base64;
var _crctab_hqx;
var _crc_32_tab;
var _binascii_module_methods;
var _binascii_b2a_qp_kwlist;
var _binascii_a2b_qp_kwlist;
var __str9;
var __str8;
var __str7;
var __str6;
var __str58;
var __str57;
var __str56;
var __str55;
var __str54;
var __str53;
var __str52;
var __str51;
var __str50;
var __str5;
var __str49;
var __str48;
var __str47;
var __str46;
var __str45;
var __str44;
var __str43;
var __str42;
var __str41;
var __str40;
var __str4;
var __str39;
var __str38;
var __str37;
var __str36;
var __str35;
var __str34;
var __str33;
var __str32;
var __str31;
var __str30;
var __str3;
var __str29;
var __str28;
var __str27;
var __str26;
var __str25;
var __str24;
var __str23;
var __str22;
var __str21;
var __str20;
var __str2;
var __str19;
var __str18;
var __str17;
var __str16;
var __str15;
var __str14;
var __str13;
var __str12;
var __str11;
var __str10;
var __str1;
var __str;
var ___func___binascii_unhexlify;
var ___func___binascii_rledecode_hqx;
var ___func___binascii_rlecode_hqx;
var ___func___binascii_hexlify;
var ___func___binascii_b2a_hqx;
var ___func___binascii_b2a_base64;
var ___func___binascii_a2b_uu;
var ___func___binascii_a2b_hqx;
var ___func___binascii_a2b_base64;
var _Incomplete;
var _Error;
_table_hex=allocatei8", ALLOC_NORMAL);
_table_b2a_hqx=allocate([33,34,35,36,37,38,39,40,41,42,43,44,45,48,49,50,51,52,53,54,56,57,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,80,81,82,83,84,85,86,88,89,90,91,96,97,98,99,100,101,102,104,105,106,107,108,109,112,113,114,0,0,0,0], "i8", ALLOC_NORMAL);
_table_b2a_base64=allocate([65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,48,49,50,51,52,53,54,55,56,57,43,47,0,0,0,0], "i8", ALLOC_NORMAL);
_table_a2b_hqx=allocate([125,125,125,125,125,125,125,125,125,125,126,125,125,126,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,0,1,2,3,4,5,6,7,8,9,10,11,12,125,125,13,14,15,16,17,18,19,125,20,21,127,125,125,125,125,125,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,125,37,38,39,40,41,42,43,125,44,45,46,47,125,125,125,125,48,49,50,51,52,53,54,125,55,56,57,58,59,60,125,125,61,62,63,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125], "i8", ALLOC_NORMAL);
_table_a2b_base64=allocate([255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,62,255,255,255,63,52,53,54,55,56,57,58,59,60,61,255,255,255,0,255,255,255,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,255,255,255,255,255,255,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,255,255,255,255,255], "i8", ALLOC_NORMAL);
_doc_unhexlify=allocate([97,50,98,95,104,101,120,40,104,101,120,115,116,114,41,32,45,62,32,115,59,32,66,105,110,97,114,121,32,100,97,116,97,32,111,102,32,104,101,120,97,100,101,99,105,109,97,108,32,114,101,112,114,101,115,101,110,116,97,116,105,111,110,46,10,10,104,101,120,115,116,114,32,109,117,115,116,32,99,111,110,116,97,105,110,32,97,110,32,101,118,101,110,32,110,117,109,98,101,114,32,111,102,32,104,101,120,32,100,105,103,105,116,115,32,40,117,112,112,101,114,32,111,114,32,108,111,119,101,114,32,99,97,115,101,41,46,10,84,104,105,115,32,102,117,110,99,116,105,111,110,32,105,115,32,97,108,115,111,32,97,118,97,105,108,97,98,108,101,32,97,115,32,34,117,110,104,101,120,108,105,102,121,40,41,34,0,0], "i8", ALLOC_NORMAL);
_doc_rledecode_hqx=allocate([68,101,99,111,100,101,32,104,101,120,98,105,110,32,82,76,69,45,99,111,100,101,100,32,115,116,114,105,110,103,0,0], "i8", ALLOC_NORMAL);
_doc_rlecode_hqx=allocate([66,105,110,104,101,120,32,82,76,69,45,99,111,100,101,32,98,105,110,97,114,121,32,100,97,116,97,0], "i8", ALLOC_NORMAL);
_doc_hexlify=allocate([98,50,97,95,104,101,120,40,100,97,116,97,41,32,45,62,32,115,59,32,72,101,120,97,100,101,99,105,109,97,108,32,114,101,112,114,101,115,101,110,116,97,116,105,111,110,32,111,102,32,98,105,110,97,114,121,32,100,97,116,97,46,10,10,84,104,105,115,32,102,117,110,99,116,105,111,110,32,105,115,32,97,108,115,111,32,97,118,97,105,108,97,98,108,101,32,97,115,32,34,104,101,120,108,105,102,121,40,41,34,46,0], "i8", ALLOC_NORMAL);
_doc_crc_hqx=allocate([40,100,97,116,97,44,32,111,108,100,99,114,99,41,32,45,62,32,110,101,119,99,114,99,46,32,67,111,109,112,117,116,101,32,104,113,120,32,67,82,67,32,105,110,99,114,101,109,101,110,116,97,108,108,121,0], "i8", ALLOC_NORMAL);
_doc_crc32=allocate([40,100,97,116,97,44,32,111,108,100,99,114,99,32,61,32,48,41,32,45,62,32,110,101,119,99,114,99,46,32,67,111,109,112,117,116,101,32,67,82,67,45,51,50,32,105,110,99,114,101,109,101,110,116,97,108,108,121,0,0], "i8", ALLOC_NORMAL);
_doc_binascii=allocate([67,111,110,118,101,114,115,105,111,110,32,98,101,116,119,101,101,110,32,98,105,110,97,114,121,32,100,97,116,97,32,97,110,100,32,65,83,67,73,73,0,0,0,0], "i8", ALLOC_NORMAL);
_doc_b2a_uu=allocate([40,98,105,110,41,32,45,62,32,97,115,99,105,105,46,32,85,117,101,110,99,111,100,101,32,108,105,110,101,32,111,102,32,100,97,116,97,0,0,0], "i8", ALLOC_NORMAL);
_doc_b2a_qp=allocate([98,50,97,95,113,112,40,100,97,116,97,44,32,113,117,111,116,101,116,97,98,115,61,48,44,32,105,115,116,101,120,116,61,49,44,32,104,101,97,100,101,114,61,48,41,32,45,62,32,115,59,32,10,32,69,110,99,111,100,101,32,97,32,115,116,114,105,110,103,32,117,115,105,110,103,32,113,117,111,116,101,100,45,112,114,105,110,116,97,98,108,101,32,101,110,99,111,100,105,110,103,46,32,10,10,79,110,32,101,110,99,111,100,105,110,103,44,32,119,104,101,110,32,105,115,116,101,120,116,32,105,115,32,115,101,116,44,32,110,101,119,108,105,110,101,115,32,97,114,101,32,110,111,116,32,101,110,99,111,100,101,100,44,32,97,110,100,32,119,104,105,116,101,32,10,115,112,97,99,101,32,97,116,32,101,110,100,32,111,102,32,108,105,110,101,115,32,105,115,46,32,32,87,104,101,110,32,105,115,116,101,120,116,32,105,115,32,110,111,116,32,115,101,116,44,32,92,114,32,97,110,100,32,92,110,32,40,67,82,47,76,70,41,32,97,114,101,32,10,98,111,116,104,32,101,110,99,111,100,101,100,46,32,32,87,104,101,110,32,113,117,111,116,101,116,97,98,115,32,105,115,32,115,101,116,44,32,115,112,97,99,101,32,97,110,100,32,116,97,98,115,32,97,114,101,32,101,110,99,111,100,101,100,46,0,0], "i8", ALLOC_NORMAL);
_doc_b2a_hqx=allocate([69,110,99,111,100,101,32,46,104,113,120,32,100,97,116,97,0,0,0,0], "i8", ALLOC_NORMAL);
_doc_b2a_base64=allocate([40,98,105,110,41,32,45,62,32,97,115,99,105,105,46,32,66,97,115,101,54,52,45,99,111,100,101,32,108,105,110,101,32,111,102,32,100,97,116,97,0,0,0,0], "i8", ALLOC_NORMAL);
_doc_a2b_uu=allocate([40,97,115,99,105,105,41,32,45,62,32,98,105,110,46,32,68,101,99,111,100,101,32,97,32,108,105,110,101,32,111,102,32,117,117,101,110,99,111,100,101,100,32,100,97,116,97,0], "i8", ALLOC_NORMAL);
_doc_a2b_qp=allocate([68,101,99,111,100,101,32,97,32,115,116,114,105,110,103,32,111,102,32,113,112,45,101,110,99,111,100,101,100,32,100,97,116,97,0,0], "i8", ALLOC_NORMAL);
_doc_a2b_hqx=allocate([97,115,99,105,105,32,45,62,32,98,105,110,44,32,100,111,110,101,46,32,68,101,99,111,100,101,32,46,104,113,120,32,99,111,100,105,110,103,0,0], "i8", ALLOC_NORMAL);
_doc_a2b_base64=allocate([40,97,115,99,105,105,41,32,45,62,32,98,105,110,46,32,68,101,99,111,100,101,32,97,32,108,105,110,101,32,111,102,32,98,97,115,101,54,52,32,100,97,116,97,0,0,0,0], "i8", ALLOC_NORMAL);
_crctab_hqx=allocate([0,0,33,16,66,32,99,48,132,64,165,80,198,96,231,112,8,129,41,145,74,161,107,177,140,193,173,209,206,225,239,241,49,18,16,2,115,50,82,34,181,82,148,66,247,114,214,98,57,147,24,131,123,179,90,163,189,211,156,195,255,243,222,227,98,36,67,52,32,4,1,20,230,100,199,116,164,68,133,84,106,165,75,181,40,133,9,149,238,229,207,245,172,197,141,213,83,54,114,38,17,22,48,6,215,118,246,102,149,86,180,70,91,183,122,167,25,151,56,135,223,247,254,231,157,215,188,199,196,72,229,88,134,104,167,120,64,8,97,24,2,40,35,56,204,201,237,217,142,233,175,249,72,137,105,153,10,169,43,185,245,90,212,74,183,122,150,106,113,26,80,10,51,58,18,42,253,219,220,203,191,251,158,235,121,155,88,139,59,187,26,171,166,108,135,124,228,76,197,92,34,44,3,60,96,12,65,28,174,237,143,253,236,205,205,221,42,173,11,189,104,141,73,157,151,126,182,110,213,94,244,78,19,62,50,46,81,30,112,14,159,255,190,239,221,223,252,207,27,191,58,175,89,159,120,143,136,145,169,129,202,177,235,161,12,209,45,193,78,241,111,225,128,16,161,0,194,48,227,32,4,80,37,64,70,112,103,96,185,131,152,147,251,163,218,179,61,195,28,211,127,227,94,243,177,2,144,18,243,34,210,50,53,66,20,82,119,98,86,114,234,181,203,165,168,149,137,133,110,245,79,229,44,213,13,197,226,52,195,36,160,20,129,4,102,116,71,100,36,84,5,68,219,167,250,183,153,135,184,151,95,231,126,247,29,199,60,215,211,38,242,54,145,6,176,22,87,102,118,118,21,70,52,86,76,217,109,201,14,249,47,233,200,153,233,137,138,185,171,169,68,88,101,72,6,120,39,104,192,24,225,8,130,56,163,40,125,203,92,219,63,235,30,251,249,139,216,155,187,171,154,187,117,74,84,90,55,106,22,122,241,10,208,26,179,42,146,58,46,253,15,237,108,221,77,205,170,189,139,173,232,157,201,141,38,124,7,108,100,92,69,76,162,60,131,44,224,28,193,12,31,239,62,255,93,207,124,223,155,175,186,191,217,143,248,159,23,110,54,126,85,78,116,94,147,46,178,62,209,14,240,30], "i8", ALLOC_NORMAL);
_crc_32_tab=allocate([0,0,0,0,150,48,7,119,44,97,14,238,186,81,9,153,25,196,109,7,143,244,106,112,53,165,99,233,163,149,100,158,50,136,219,14,164,184,220,121,30,233,213,224,136,217,210,151,43,76,182,9,189,124,177,126,7,45,184,231,145,29,191,144,100,16,183,29,242,32,176,106,72,113,185,243,222,65,190,132,125,212,218,26,235,228,221,109,81,181,212,244,199,133,211,131,86,152,108,19,192,168,107,100,122,249,98,253,236,201,101,138,79,92,1,20,217,108,6,99,99,61,15,250,245,13,8,141,200,32,110,59,94,16,105,76,228,65,96,213,114,113,103,162,209,228,3,60,71,212,4,75,253,133,13,210,107,181,10,165,250,168,181,53,108,152,178,66,214,201,187,219,64,249,188,172,227,108,216,50,117,92,223,69,207,13,214,220,89,61,209,171,172,48,217,38,58,0,222,81,128,81,215,200,22,97,208,191,181,244,180,33,35,196,179,86,153,149,186,207,15,165,189,184,158,184,2,40,8,136,5,95,178,217,12,198,36,233,11,177,135,124,111,47,17,76,104,88,171,29,97,193,61,45,102,182,144,65,220,118,6,113,219,1,188,32,210,152,42,16,213,239,137,133,177,113,31,181,182,6,165,228,191,159,51,212,184,232,162,201,7,120,52,249,0,15,142,168,9,150,24,152,14,225,187,13,106,127,45,61,109,8,151,108,100,145,1,92,99,230,244,81,107,107,98,97,108,28,216,48,101,133,78,0,98,242,237,149,6,108,123,165,1,27,193,244,8,130,87,196,15,245,198,217,176,101,80,233,183,18,234,184,190,139,124,136,185,252,223,29,221,98,73,45,218,21,243,124,211,140,101,76,212,251,88,97,178,77,206,81,181,58,116,0,188,163,226,48,187,212,65,165,223,74,215,149,216,61,109,196,209,164,251,244,214,211,106,233,105,67,252,217,110,52,70,136,103,173,208,184,96,218,115,45,4,68,229,29,3,51,95,76,10,170,201,124,13,221,60,113,5,80,170,65,2,39,16,16,11,190,134,32,12,201,37,181,104,87,179,133,111,32,9,212,102,185,159,228,97,206,14,249,222,94,152,201,217,41,34,152,208,176,180,168,215,199,23,61,179,89,129,13,180,46,59,92,189,183,173,108,186,192,32,131,184,237,182,179,191,154,12,226,182,3,154,210,177,116,57,71,213,234,175,119,210,157,21,38,219,4,131,22,220,115,18,11,99,227,132,59,100,148,62,106,109,13,168,90,106,122,11,207,14,228,157,255,9,147,39,174,0,10,177,158,7,125,68,147,15,240,210,163,8,135,104,242,1,30,254,194,6,105,93,87,98,247,203,103,101,128,113,54,108,25,231,6,107,110,118,27,212,254,224,43,211,137,90,122,218,16,204,74,221,103,111,223,185,249,249,239,190,142,67,190,183,23,213,142,176,96,232,163,214,214,126,147,209,161,196,194,216,56,82,242,223,79,241,103,187,209,103,87,188,166,221,6,181,63,75,54,178,72,218,43,13,216,76,27,10,175,246,74,3,54,96,122,4,65,195,239,96,223,85,223,103,168,239,142,110,49,121,190,105,70,140,179,97,203,26,131,102,188,160,210,111,37,54,226,104,82,149,119,12,204,3,71,11,187,185,22,2,34,47,38,5,85,190,59,186,197,40,11,189,178,146,90,180,43,4,106,179,92,167,255,215,194,49,207,208,181,139,158,217,44,29,174,222,91,176,194,100,155,38,242,99,236,156,163,106,117,10,147,109,2,169,6,9,156,63,54,14,235,133,103,7,114,19,87,0,5,130,74,191,149,20,122,184,226,174,43,177,123,56,27,182,12,155,142,210,146,13,190,213,229,183,239,220,124,33,223,219,11,212,210,211,134,66,226,212,241,248,179,221,104,110,131,218,31,205,22,190,129,91,38,185,246,225,119,176,111,119,71,183,24,230,90,8,136,112,106,15,255,202,59,6,102,92,11,1,17,255,158,101,143,105,174,98,248,211,255,107,97,69,207,108,22,120,226,10,160,238,210,13,215,84,131,4,78,194,179,3,57,97,38,103,167,247,22,96,208,77,71,105,73,219,119,110,62,74,106,209,174,220,90,214,217,102,11,223,64,240,59,216,55,83,174,188,169,197,158,187,222,127,207,178,71,233,255,181,48,28,242,189,189,138,194,186,202,48,147,179,83,166,163,180,36,5,54,208,186,147,6,215,205,41,87,222,84,191,103,217,35,46,122,102,179,184,74,97,196,2,27,104,93,148,43,111,42,55,190,11,180,161,142,12,195,27,223,5,90,141,239,2,45], "i8", ALLOC_NORMAL);
_binascii_module_methods=allocate([0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_binascii_b2a_qp_kwlist=allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_binascii_a2b_qp_kwlist=allocate([0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
__str9=allocate([98,50,97,95,98,97,115,101,54,52,0,0], "i8", ALLOC_NORMAL);
__str8=allocate([97,50,98,95,98,97,115,101,54,52,0,0], "i8", ALLOC_NORMAL);
__str7=allocate([98,50,97,95,117,117,0,0], "i8", ALLOC_NORMAL);
__str6=allocate([97,50,98,95,117,117,0,0], "i8", ALLOC_NORMAL);
__str58=allocate([84,114,97,105,108,105,110,103,32,103,97,114,98,97,103,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str57=allocate([115,42,58,97,50,98,95,117,117,0,0,0], "i8", ALLOC_NORMAL);
__str56=allocate([65,116,32,109,111,115,116,32,52,53,32,98,121,116,101,115,32,97,116,32,111,110,99,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str55=allocate([115,42,58,98,50,97,95,117,117,0,0,0], "i8", ALLOC_NORMAL);
__str54=allocate([73,110,99,111,114,114,101,99,116,32,112,97,100,100,105,110,103,0,0,0], "i8", ALLOC_NORMAL);
__str53=allocate([97,115,99,105,105,95,108,101,110,32,62,61,32,48,0,0], "i8", ALLOC_NORMAL);
__str52=allocate([115,42,58,97,50,98,95,98,97,115,101,54,52,0,0,0], "i8", ALLOC_NORMAL);
__str51=allocate([84,111,111,32,109,117,99,104,32,100,97,116,97,32,102,111,114,32,98,97,115,101,54,52,32,108,105,110,101,0,0,0], "i8", ALLOC_NORMAL);
__str50=allocate([98,105,110,95,108,101,110,32,62,61,32,48,0,0,0,0], "i8", ALLOC_NORMAL);
__str5=allocate([73,110,99,111,109,112,108,101,116,101,0,0], "i8", ALLOC_NORMAL);
__str49=allocate([115,42,58,98,50,97,95,98,97,115,101,54,52,0,0,0], "i8", ALLOC_NORMAL);
__str48=allocate([79,105,0,0], "i8", ALLOC_NORMAL);
__str47=allocate([83,116,114,105,110,103,32,104,97,115,32,105,110,99,111,109,112,108,101,116,101,32,110,117,109,98,101,114,32,111,102,32,98,121,116,101,115,0,0,0], "i8", ALLOC_NORMAL);
__str46=allocate([73,108,108,101,103,97,108,32,99,104,97,114,0,0,0,0], "i8", ALLOC_NORMAL);
__str45=allocate([115,42,58,97,50,98,95,104,113,120,0,0], "i8", ALLOC_NORMAL);
__str44=allocate([115,42,58,98,50,97,95,104,113,120,0,0], "i8", ALLOC_NORMAL);
__str43=allocate([115,42,58,98,50,97,95,104,101,120,0,0], "i8", ALLOC_NORMAL);
__str42=allocate([78,111,110,45,104,101,120,97,100,101,99,105,109,97,108,32,100,105,103,105,116,32,102,111,117,110,100,0], "i8", ALLOC_NORMAL);
__str41=allocate([79,100,100,45,108,101,110,103,116,104,32,115,116,114,105,110,103,0,0,0], "i8", ALLOC_NORMAL);
__str40=allocate([97,114,103,108,101,110,32,62,61,32,48,0], "i8", ALLOC_NORMAL);
__str4=allocate([98,105,110,97,115,99,105,105,46,73,110,99,111,109,112,108,101,116,101,0], "i8", ALLOC_NORMAL);
__str39=allocate([115,42,58,97,50,98,95,104,101,120,0,0], "i8", ALLOC_NORMAL);
__str38=allocate([108,101,110,32,62,61,32,48,0,0,0,0], "i8", ALLOC_NORMAL);
__str37=allocate([115,42,58,114,108,101,99,111,100,101,95,104,113,120,0,0], "i8", ALLOC_NORMAL);
__str36=allocate([79,114,112,104,97,110,101,100,32,82,76,69,32,99,111,100,101,32,97,116,32,115,116,97,114,116,0,0], "i8", ALLOC_NORMAL);
__str35=allocate([0,0,0,0], "i8", ALLOC_NORMAL);
__str34=allocate([105,110,95,108,101,110,32,62,61,32,48,0], "i8", ALLOC_NORMAL);
__str33=allocate([46,46,47,77,111,100,117,108,101,115,47,98,105,110,97,115,99,105,105,46,99,0,0,0], "i8", ALLOC_NORMAL);
__str32=allocate([115,42,58,114,108,101,100,101,99,111,100,101,95,104,113,120,0,0,0,0], "i8", ALLOC_NORMAL);
__str31=allocate([105,0,0,0], "i8", ALLOC_NORMAL);
__str30=allocate([115,42,105,58,99,114,99,95,104,113,120,0], "i8", ALLOC_NORMAL);
__str3=allocate([69,114,114,111,114,0,0,0], "i8", ALLOC_NORMAL);
__str29=allocate([115,42,124,73,58,99,114,99,51,50,0,0], "i8", ALLOC_NORMAL);
__str28=allocate([115,42,124,105,0,0,0,0], "i8", ALLOC_NORMAL);
__str27=allocate([48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,0,0,0,0], "i8", ALLOC_NORMAL);
__str26=allocate([115,42,124,105,105,105,0,0], "i8", ALLOC_NORMAL);
__str25=allocate([104,101,97,100,101,114,0,0], "i8", ALLOC_NORMAL);
__str24=allocate([105,115,116,101,120,116,0,0], "i8", ALLOC_NORMAL);
__str23=allocate([113,117,111,116,101,116,97,98,115,0,0,0], "i8", ALLOC_NORMAL);
__str22=allocate([100,97,116,97,0,0,0,0], "i8", ALLOC_NORMAL);
__str21=allocate([98,50,97,95,113,112,0,0], "i8", ALLOC_NORMAL);
__str20=allocate([97,50,98,95,113,112,0,0], "i8", ALLOC_NORMAL);
__str2=allocate([98,105,110,97,115,99,105,105,46,69,114,114,111,114,0,0], "i8", ALLOC_NORMAL);
__str19=allocate([99,114,99,51,50,0,0,0], "i8", ALLOC_NORMAL);
__str18=allocate([99,114,99,95,104,113,120,0], "i8", ALLOC_NORMAL);
__str17=allocate([114,108,101,100,101,99,111,100,101,95,104,113,120,0,0,0], "i8", ALLOC_NORMAL);
__str16=allocate([114,108,101,99,111,100,101,95,104,113,120,0], "i8", ALLOC_NORMAL);
__str15=allocate([117,110,104,101,120,108,105,102,121,0,0,0], "i8", ALLOC_NORMAL);
__str14=allocate([104,101,120,108,105,102,121,0], "i8", ALLOC_NORMAL);
__str13=allocate([97,50,98,95,104,101,120,0], "i8", ALLOC_NORMAL);
__str12=allocate([98,50,97,95,104,101,120,0], "i8", ALLOC_NORMAL);
__str11=allocate([98,50,97,95,104,113,120,0], "i8", ALLOC_NORMAL);
__str10=allocate([97,50,98,95,104,113,120,0], "i8", ALLOC_NORMAL);
__str1=allocate([95,95,100,111,99,95,95,0], "i8", ALLOC_NORMAL);
__str=allocate([98,105,110,97,115,99,105,105,0,0,0,0], "i8", ALLOC_NORMAL);
___func___binascii_unhexlify=allocate([98,105,110,97,115,99,105,105,95,117,110,104,101,120,108,105,102,121,0,0], "i8", ALLOC_NORMAL);
___func___binascii_rledecode_hqx=allocate([98,105,110,97,115,99,105,105,95,114,108,101,100,101,99,111,100,101,95,104,113,120,0,0], "i8", ALLOC_NORMAL);
___func___binascii_rlecode_hqx=allocate([98,105,110,97,115,99,105,105,95,114,108,101,99,111,100,101,95,104,113,120,0,0,0,0], "i8", ALLOC_NORMAL);
___func___binascii_hexlify=allocate([98,105,110,97,115,99,105,105,95,104,101,120,108,105,102,121,0,0,0,0], "i8", ALLOC_NORMAL);
___func___binascii_b2a_hqx=allocate([98,105,110,97,115,99,105,105,95,98,50,97,95,104,113,120,0,0,0,0], "i8", ALLOC_NORMAL);
___func___binascii_b2a_base64=allocate([98,105,110,97,115,99,105,105,95,98,50,97,95,98,97,115,101,54,52,0], "i8", ALLOC_NORMAL);
___func___binascii_a2b_uu=allocate([98,105,110,97,115,99,105,105,95,97,50,98,95,117,117,0], "i8", ALLOC_NORMAL);
___func___binascii_a2b_hqx=allocate([98,105,110,97,115,99,105,105,95,97,50,98,95,104,113,120,0,0,0,0], "i8", ALLOC_NORMAL);
___func___binascii_a2b_base64=allocate([98,105,110,97,115,99,105,105,95,97,50,98,95,98,97,115,101,54,52,0], "i8", ALLOC_NORMAL);
_Incomplete=allocate([0,0,0,0], "i8", ALLOC_NORMAL);
_Error=allocate([0,0,0,0], "i8", ALLOC_NORMAL);
/* no memory initializer */
function runPostSets() {
HEAP32[((_binascii_module_methods)>>2)]=((__str6)|0);
HEAP32[(((_binascii_module_methods)+(4))>>2)]=(FUNCTION_TABLE_OFFSET + 26);
HEAP32[(((_binascii_module_methods)+(12))>>2)]=((_doc_a2b_uu)|0);
HEAP32[(((_binascii_module_methods)+(16))>>2)]=((__str7)|0);
HEAP32[(((_binascii_module_methods)+(20))>>2)]=(FUNCTION_TABLE_OFFSET + 2);
HEAP32[(((_binascii_module_methods)+(28))>>2)]=((_doc_b2a_uu)|0);
HEAP32[(((_binascii_module_methods)+(32))>>2)]=((__str8)|0);
HEAP32[(((_binascii_module_methods)+(36))>>2)]=(FUNCTION_TABLE_OFFSET + 16);
HEAP32[(((_binascii_module_methods)+(44))>>2)]=((_doc_a2b_base64)|0);
HEAP32[(((_binascii_module_methods)+(48))>>2)]=((__str9)|0);
HEAP32[(((_binascii_module_methods)+(52))>>2)]=(FUNCTION_TABLE_OFFSET + 24);
HEAP32[(((_binascii_module_methods)+(60))>>2)]=((_doc_b2a_base64)|0);
HEAP32[(((_binascii_module_methods)+(64))>>2)]=((__str10)|0);
HEAP32[(((_binascii_module_methods)+(68))>>2)]=(FUNCTION_TABLE_OFFSET + 20);
HEAP32[(((_binascii_module_methods)+(76))>>2)]=((_doc_a2b_hqx)|0);
HEAP32[(((_binascii_module_methods)+(80))>>2)]=((__str11)|0);
HEAP32[(((_binascii_module_methods)+(84))>>2)]=(FUNCTION_TABLE_OFFSET + 6);
HEAP32[(((_binascii_module_methods)+(92))>>2)]=((_doc_b2a_hqx)|0);
HEAP32[(((_binascii_module_methods)+(96))>>2)]=((__str12)|0);
HEAP32[(((_binascii_module_methods)+(100))>>2)]=(FUNCTION_TABLE_OFFSET + 4);
HEAP32[(((_binascii_module_methods)+(108))>>2)]=((_doc_hexlify)|0);
HEAP32[(((_binascii_module_methods)+(112))>>2)]=((__str13)|0);
HEAP32[(((_binascii_module_methods)+(116))>>2)]=(FUNCTION_TABLE_OFFSET + 10);
HEAP32[(((_binascii_module_methods)+(124))>>2)]=((_doc_unhexlify)|0);
HEAP32[(((_binascii_module_methods)+(128))>>2)]=((__str14)|0);
HEAP32[(((_binascii_module_methods)+(132))>>2)]=(FUNCTION_TABLE_OFFSET + 4);
HEAP32[(((_binascii_module_methods)+(140))>>2)]=((_doc_hexlify)|0);
HEAP32[(((_binascii_module_methods)+(144))>>2)]=((__str15)|0);
HEAP32[(((_binascii_module_methods)+(148))>>2)]=(FUNCTION_TABLE_OFFSET + 10);
HEAP32[(((_binascii_module_methods)+(156))>>2)]=((_doc_unhexlify)|0);
HEAP32[(((_binascii_module_methods)+(160))>>2)]=((__str16)|0);
HEAP32[(((_binascii_module_methods)+(164))>>2)]=(FUNCTION_TABLE_OFFSET + 8);
HEAP32[(((_binascii_module_methods)+(172))>>2)]=((_doc_rlecode_hqx)|0);
HEAP32[(((_binascii_module_methods)+(176))>>2)]=((__str17)|0);
HEAP32[(((_binascii_module_methods)+(180))>>2)]=(FUNCTION_TABLE_OFFSET + 14);
HEAP32[(((_binascii_module_methods)+(188))>>2)]=((_doc_rledecode_hqx)|0);
HEAP32[(((_binascii_module_methods)+(192))>>2)]=((__str18)|0);
HEAP32[(((_binascii_module_methods)+(196))>>2)]=(FUNCTION_TABLE_OFFSET + 18);
HEAP32[(((_binascii_module_methods)+(204))>>2)]=((_doc_crc_hqx)|0);
HEAP32[(((_binascii_module_methods)+(208))>>2)]=((__str19)|0);
HEAP32[(((_binascii_module_methods)+(212))>>2)]=(FUNCTION_TABLE_OFFSET + 12);
HEAP32[(((_binascii_module_methods)+(220))>>2)]=((_doc_crc32)|0);
HEAP32[(((_binascii_module_methods)+(224))>>2)]=((__str20)|0);
HEAP32[(((_binascii_module_methods)+(228))>>2)]=((FUNCTION_TABLE_OFFSET + 28));
HEAP32[(((_binascii_module_methods)+(236))>>2)]=((_doc_a2b_qp)|0);
HEAP32[(((_binascii_module_methods)+(240))>>2)]=((__str21)|0);
HEAP32[(((_binascii_module_methods)+(244))>>2)]=((FUNCTION_TABLE_OFFSET + 22));
HEAP32[(((_binascii_module_methods)+(252))>>2)]=((_doc_b2a_qp)|0);
HEAP32[((_binascii_b2a_qp_kwlist)>>2)]=((__str22)|0);
HEAP32[(((_binascii_b2a_qp_kwlist)+(4))>>2)]=((__str23)|0);
HEAP32[(((_binascii_b2a_qp_kwlist)+(8))>>2)]=((__str24)|0);
HEAP32[(((_binascii_b2a_qp_kwlist)+(12))>>2)]=((__str25)|0);
HEAP32[((_binascii_a2b_qp_kwlist)>>2)]=((__str22)|0);
HEAP32[(((_binascii_a2b_qp_kwlist)+(4))>>2)]=((__str25)|0);
}
if (!awaitingMemoryInitializer) runPostSets();
FUNCTION_TABLE.push.apply(FUNCTION_TABLE, [0,0,_binascii_b2a_uu,0,_binascii_hexlify,0,_binascii_b2a_hqx,0,_binascii_rlecode_hqx,0,_binascii_unhexlify
,0,_binascii_crc32,0,_binascii_rledecode_hqx,0,_binascii_a2b_base64,0,_binascii_crc_hqx,0,_binascii_a2b_hqx,0,_binascii_b2a_qp,0,_binascii_b2a_base64,0,_binascii_a2b_uu,0,_binascii_a2b_qp,0]);
// EMSCRIPTEN_START_FUNCS
function _initbinascii() {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $m;
      var $d;
      var $x;
      var $1=_Py_InitModule4(((__str)|0), ((_binascii_module_methods)|0), 0, 0, 1013);
      $m=$1;
      var $2=$m;
      var $3=(($2)|(0))==0;
      if ($3) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 14; break;
    case 3: 
      var $6=$m;
      var $7=_PyModule_GetDict($6);
      $d=$7;
      var $8=_PyString_FromString(((_doc_binascii)|0));
      $x=$8;
      var $9=$d;
      var $10=$x;
      var $11=_PyDict_SetItemString($9, ((__str1)|0), $10);
      label = 4; break;
    case 4: 
      var $13=$x;
      var $14=(($13)|(0))==0;
      if ($14) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 12; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $18=$x;
      var $19=(($18)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=((($20)-(1))|0);
      HEAP32[(($19)>>2)]=$21;
      var $22=(($21)|(0))!=0;
      if ($22) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 10; break;
    case 9: 
      var $25=$x;
      var $26=(($25+4)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27+24)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=$x;
      FUNCTION_TABLE[$29]($30);
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $35=_PyErr_NewException(((__str2)|0), 0, 0);
      HEAP32[((_Error)>>2)]=$35;
      var $36=$d;
      var $37=HEAP32[((_Error)>>2)];
      var $38=_PyDict_SetItemString($36, ((__str3)|0), $37);
      var $39=_PyErr_NewException(((__str4)|0), 0, 0);
      HEAP32[((_Incomplete)>>2)]=$39;
      var $40=$d;
      var $41=HEAP32[((_Incomplete)>>2)];
      var $42=_PyDict_SetItemString($40, ((__str5)|0), $41);
      label = 14; break;
    case 14: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_initbinascii"] = _initbinascii;
function _binascii_b2a_uu($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $pbin=__stackBase__;
      var $ascii_data;
      var $bin_data;
      var $leftbits;
      var $this_ch;
      var $leftchar;
      var $rv=(__stackBase__)+(52);
      var $bin_len;
      $2=$self;
      $3=$args;
      $leftbits=0;
      $leftchar=0;
      var $4=$3;
      var $5=__PyArg_ParseTuple_SizeT($4, ((__str55)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$pbin,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 27; break;
    case 3: 
      var $9=(($pbin)|0);
      var $10=HEAP32[(($9)>>2)];
      $bin_data=$10;
      var $11=(($pbin+8)|0);
      var $12=HEAP32[(($11)>>2)];
      $bin_len=$12;
      var $13=$bin_len;
      var $14=(($13)|(0)) > 45;
      if ($14) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $16=HEAP32[((_Error)>>2)];
      _PyErr_SetString($16, ((__str56)|0));
      _PyBuffer_Release($pbin);
      $1=0;
      label = 27; break;
    case 5: 
      var $18=$bin_len;
      var $19=((($18)+(2))|0);
      var $20=((((($19)|(0)))/(3))&-1);
      var $21=($20<<2);
      var $22=((($21)+(2))|0);
      var $23=_PyString_FromStringAndSize(0, $22);
      HEAP32[(($rv)>>2)]=$23;
      var $24=(($23)|(0))==0;
      if ($24) { label = 6; break; } else { label = 7; break; }
    case 6: 
      _PyBuffer_Release($pbin);
      $1=0;
      label = 27; break;
    case 7: 
      var $27=HEAP32[(($rv)>>2)];
      var $28=$27;
      var $29=(($28+20)|0);
      var $30=(($29)|0);
      $ascii_data=$30;
      var $31=$bin_len;
      var $32=$31 & 63;
      var $33=((($32)+(32))|0);
      var $34=(($33) & 255);
      var $35=$ascii_data;
      var $36=(($35+1)|0);
      $ascii_data=$36;
      HEAP8[($35)]=$34;
      label = 8; break;
    case 8: 
      var $38=$bin_len;
      var $39=(($38)|(0)) > 0;
      if ($39) { var $44 = 1;label = 10; break; } else { label = 9; break; }
    case 9: 
      var $41=$leftbits;
      var $42=(($41)|(0))!=0;
      var $44 = $42;label = 10; break;
    case 10: 
      var $44;
      if ($44) { label = 11; break; } else { label = 19; break; }
    case 11: 
      var $46=$bin_len;
      var $47=(($46)|(0)) > 0;
      if ($47) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $49=$leftchar;
      var $50=$49 << 8;
      var $51=$bin_data;
      var $52=HEAP8[($51)];
      var $53=(($52)&(255));
      var $54=$50 | $53;
      $leftchar=$54;
      label = 14; break;
    case 13: 
      var $56=$leftchar;
      var $57=$56 << 8;
      $leftchar=$57;
      label = 14; break;
    case 14: 
      var $59=$leftbits;
      var $60=((($59)+(8))|0);
      $leftbits=$60;
      label = 15; break;
    case 15: 
      var $62=$leftbits;
      var $63=(($62)|(0)) >= 6;
      if ($63) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $65=$leftchar;
      var $66=$leftbits;
      var $67=((($66)-(6))|0);
      var $68=$65 >>> (($67)>>>(0));
      var $69=$68 & 63;
      var $70=(($69) & 255);
      $this_ch=$70;
      var $71=$leftbits;
      var $72=((($71)-(6))|0);
      $leftbits=$72;
      var $73=$this_ch;
      var $74=(($73)&(255));
      var $75=((($74)+(32))|0);
      var $76=(($75) & 255);
      var $77=$ascii_data;
      var $78=(($77+1)|0);
      $ascii_data=$78;
      HEAP8[($77)]=$76;
      label = 15; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $81=$bin_len;
      var $82=((($81)-(1))|0);
      $bin_len=$82;
      var $83=$bin_data;
      var $84=(($83+1)|0);
      $bin_data=$84;
      label = 8; break;
    case 19: 
      var $86=$ascii_data;
      var $87=(($86+1)|0);
      $ascii_data=$87;
      HEAP8[($86)]=10;
      var $88=$ascii_data;
      var $89=HEAP32[(($rv)>>2)];
      var $90=$89;
      var $91=(($90+20)|0);
      var $92=(($91)|0);
      var $93=$88;
      var $94=$92;
      var $95=((($93)-($94))|0);
      var $96=__PyString_Resize($rv, $95);
      var $97=(($96)|(0)) < 0;
      if ($97) { label = 20; break; } else { label = 26; break; }
    case 20: 
      label = 21; break;
    case 21: 
      var $100=HEAP32[(($rv)>>2)];
      var $101=(($100)|0);
      var $102=HEAP32[(($101)>>2)];
      var $103=((($102)-(1))|0);
      HEAP32[(($101)>>2)]=$103;
      var $104=(($103)|(0))!=0;
      if ($104) { label = 22; break; } else { label = 23; break; }
    case 22: 
      label = 24; break;
    case 23: 
      var $107=HEAP32[(($rv)>>2)];
      var $108=(($107+4)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=(($109+24)|0);
      var $111=HEAP32[(($110)>>2)];
      var $112=HEAP32[(($rv)>>2)];
      FUNCTION_TABLE[$111]($112);
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      HEAP32[(($rv)>>2)]=0;
      label = 26; break;
    case 26: 
      _PyBuffer_Release($pbin);
      var $116=HEAP32[(($rv)>>2)];
      $1=$116;
      label = 27; break;
    case 27: 
      var $118=$1;
      STACKTOP = __stackBase__;
      return $118;
    default: assert(0, "bad label: " + label);
  }
}
function _binascii_a2b_uu($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 52)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $pascii=__stackBase__;
      var $ascii_data;
      var $bin_data;
      var $leftbits;
      var $this_ch;
      var $leftchar;
      var $rv;
      var $ascii_len;
      var $bin_len;
      $2=$self;
      $3=$args;
      $leftbits=0;
      $leftchar=0;
      var $4=$3;
      var $5=__PyArg_ParseTuple_SizeT($4, ((__str57)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$pascii,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 44; break;
    case 3: 
      var $9=(($pascii)|0);
      var $10=HEAP32[(($9)>>2)];
      $ascii_data=$10;
      var $11=(($pascii+8)|0);
      var $12=HEAP32[(($11)>>2)];
      $ascii_len=$12;
      var $13=$ascii_len;
      var $14=(($13)|(0)) >= 0;
      if ($14) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 6; break;
    case 5: 
      ___assert_func(((__str33)|0), 204, ((___func___binascii_a2b_uu)|0), ((__str53)|0));
      throw "Reached an unreachable!";
      label = 6; break;
    case 6: 
      var $19=$ascii_data;
      var $20=(($19+1)|0);
      $ascii_data=$20;
      var $21=HEAP8[($19)];
      var $22=(($21)&(255));
      var $23=((($22)-(32))|0);
      var $24=$23 & 63;
      $bin_len=$24;
      var $25=$ascii_len;
      var $26=((($25)-(1))|0);
      $ascii_len=$26;
      var $27=$bin_len;
      var $28=_PyString_FromStringAndSize(0, $27);
      $rv=$28;
      var $29=(($28)|(0))==0;
      if ($29) { label = 7; break; } else { label = 8; break; }
    case 7: 
      _PyBuffer_Release($pascii);
      $1=0;
      label = 44; break;
    case 8: 
      var $32=$rv;
      var $33=$32;
      var $34=(($33+20)|0);
      var $35=(($34)|0);
      $bin_data=$35;
      label = 9; break;
    case 9: 
      var $37=$bin_len;
      var $38=(($37)|(0)) > 0;
      if ($38) { label = 10; break; } else { label = 30; break; }
    case 10: 
      var $40=$ascii_len;
      var $41=(($40)|(0)) > 0;
      if ($41) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $43=$ascii_data;
      var $44=HEAP8[($43)];
      var $45=(($44)&(255));
      var $48 = $45;label = 13; break;
    case 12: 
      var $48 = 0;label = 13; break;
    case 13: 
      var $48;
      var $49=(($48) & 255);
      $this_ch=$49;
      var $50=$this_ch;
      var $51=(($50)&(255));
      var $52=(($51)|(0))==10;
      if ($52) { label = 16; break; } else { label = 14; break; }
    case 14: 
      var $54=$this_ch;
      var $55=(($54)&(255));
      var $56=(($55)|(0))==13;
      if ($56) { label = 16; break; } else { label = 15; break; }
    case 15: 
      var $58=$ascii_len;
      var $59=(($58)|(0)) <= 0;
      if ($59) { label = 16; break; } else { label = 17; break; }
    case 16: 
      $this_ch=0;
      label = 26; break;
    case 17: 
      var $62=$this_ch;
      var $63=(($62)&(255));
      var $64=(($63)|(0)) < 32;
      if ($64) { label = 19; break; } else { label = 18; break; }
    case 18: 
      var $66=$this_ch;
      var $67=(($66)&(255));
      var $68=(($67)|(0)) > 96;
      if ($68) { label = 19; break; } else { label = 25; break; }
    case 19: 
      var $70=HEAP32[((_Error)>>2)];
      _PyErr_SetString($70, ((__str46)|0));
      _PyBuffer_Release($pascii);
      label = 20; break;
    case 20: 
      var $72=$rv;
      var $73=(($72)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=((($74)-(1))|0);
      HEAP32[(($73)>>2)]=$75;
      var $76=(($75)|(0))!=0;
      if ($76) { label = 21; break; } else { label = 22; break; }
    case 21: 
      label = 23; break;
    case 22: 
      var $79=$rv;
      var $80=(($79+4)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=(($81+24)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=$rv;
      FUNCTION_TABLE[$83]($84);
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      $1=0;
      label = 44; break;
    case 25: 
      var $88=$this_ch;
      var $89=(($88)&(255));
      var $90=((($89)-(32))|0);
      var $91=$90 & 63;
      var $92=(($91) & 255);
      $this_ch=$92;
      label = 26; break;
    case 26: 
      var $94=$leftchar;
      var $95=$94 << 6;
      var $96=$this_ch;
      var $97=(($96)&(255));
      var $98=$95 | $97;
      $leftchar=$98;
      var $99=$leftbits;
      var $100=((($99)+(6))|0);
      $leftbits=$100;
      var $101=$leftbits;
      var $102=(($101)|(0)) >= 8;
      if ($102) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $104=$leftbits;
      var $105=((($104)-(8))|0);
      $leftbits=$105;
      var $106=$leftchar;
      var $107=$leftbits;
      var $108=$106 >>> (($107)>>>(0));
      var $109=$108 & 255;
      var $110=(($109) & 255);
      var $111=$bin_data;
      var $112=(($111+1)|0);
      $bin_data=$112;
      HEAP8[($111)]=$110;
      var $113=$leftbits;
      var $114=1 << $113;
      var $115=((($114)-(1))|0);
      var $116=$leftchar;
      var $117=$116 & $115;
      $leftchar=$117;
      var $118=$bin_len;
      var $119=((($118)-(1))|0);
      $bin_len=$119;
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $122=$ascii_len;
      var $123=((($122)-(1))|0);
      $ascii_len=$123;
      var $124=$ascii_data;
      var $125=(($124+1)|0);
      $ascii_data=$125;
      label = 9; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $128=$ascii_len;
      var $129=((($128)-(1))|0);
      $ascii_len=$129;
      var $130=(($128)|(0)) > 0;
      if ($130) { label = 32; break; } else { label = 43; break; }
    case 32: 
      var $132=$ascii_data;
      var $133=(($132+1)|0);
      $ascii_data=$133;
      var $134=HEAP8[($132)];
      $this_ch=$134;
      var $135=$this_ch;
      var $136=(($135)&(255));
      var $137=(($136)|(0))!=32;
      if ($137) { label = 33; break; } else { label = 42; break; }
    case 33: 
      var $139=$this_ch;
      var $140=(($139)&(255));
      var $141=(($140)|(0))!=96;
      if ($141) { label = 34; break; } else { label = 42; break; }
    case 34: 
      var $143=$this_ch;
      var $144=(($143)&(255));
      var $145=(($144)|(0))!=10;
      if ($145) { label = 35; break; } else { label = 42; break; }
    case 35: 
      var $147=$this_ch;
      var $148=(($147)&(255));
      var $149=(($148)|(0))!=13;
      if ($149) { label = 36; break; } else { label = 42; break; }
    case 36: 
      var $151=HEAP32[((_Error)>>2)];
      _PyErr_SetString($151, ((__str58)|0));
      _PyBuffer_Release($pascii);
      label = 37; break;
    case 37: 
      var $153=$rv;
      var $154=(($153)|0);
      var $155=HEAP32[(($154)>>2)];
      var $156=((($155)-(1))|0);
      HEAP32[(($154)>>2)]=$156;
      var $157=(($156)|(0))!=0;
      if ($157) { label = 38; break; } else { label = 39; break; }
    case 38: 
      label = 40; break;
    case 39: 
      var $160=$rv;
      var $161=(($160+4)|0);
      var $162=HEAP32[(($161)>>2)];
      var $163=(($162+24)|0);
      var $164=HEAP32[(($163)>>2)];
      var $165=$rv;
      FUNCTION_TABLE[$164]($165);
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      $1=0;
      label = 44; break;
    case 42: 
      label = 31; break;
    case 43: 
      _PyBuffer_Release($pascii);
      var $170=$rv;
      $1=$170;
      label = 44; break;
    case 44: 
      var $172=$1;
      STACKTOP = __stackBase__;
      return $172;
    default: assert(0, "bad label: " + label);
  }
}
function _binascii_a2b_base64($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $pascii=__stackBase__;
      var $ascii_data;
      var $bin_data;
      var $leftbits;
      var $this_ch;
      var $leftchar;
      var $rv=(__stackBase__)+(52);
      var $ascii_len;
      var $bin_len;
      var $quad_pos;
      $2=$self;
      $3=$args;
      $leftbits=0;
      $leftchar=0;
      $quad_pos=0;
      var $4=$3;
      var $5=__PyArg_ParseTuple_SizeT($4, ((__str52)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$pascii,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 52; break;
    case 3: 
      var $9=(($pascii)|0);
      var $10=HEAP32[(($9)>>2)];
      $ascii_data=$10;
      var $11=(($pascii+8)|0);
      var $12=HEAP32[(($11)>>2)];
      $ascii_len=$12;
      var $13=$ascii_len;
      var $14=(($13)|(0)) >= 0;
      if ($14) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 6; break;
    case 5: 
      ___assert_func(((__str33)|0), 378, ((___func___binascii_a2b_base64)|0), ((__str53)|0));
      throw "Reached an unreachable!";
      label = 6; break;
    case 6: 
      var $19=$ascii_len;
      var $20=(($19)|(0)) > 2147483644;
      if ($20) { label = 7; break; } else { label = 8; break; }
    case 7: 
      _PyBuffer_Release($pascii);
      var $22=_PyErr_NoMemory();
      $1=$22;
      label = 52; break;
    case 8: 
      var $24=$ascii_len;
      var $25=((($24)+(3))|0);
      var $26=((((($25)|(0)))/(4))&-1);
      var $27=((($26)*(3))&-1);
      $bin_len=$27;
      var $28=$bin_len;
      var $29=_PyString_FromStringAndSize(0, $28);
      HEAP32[(($rv)>>2)]=$29;
      var $30=(($29)|(0))==0;
      if ($30) { label = 9; break; } else { label = 10; break; }
    case 9: 
      _PyBuffer_Release($pascii);
      $1=0;
      label = 52; break;
    case 10: 
      var $33=HEAP32[(($rv)>>2)];
      var $34=$33;
      var $35=(($34+20)|0);
      var $36=(($35)|0);
      $bin_data=$36;
      $bin_len=0;
      label = 11; break;
    case 11: 
      var $38=$ascii_len;
      var $39=(($38)|(0)) > 0;
      if ($39) { label = 12; break; } else { label = 29; break; }
    case 12: 
      var $41=$ascii_data;
      var $42=HEAP8[($41)];
      $this_ch=$42;
      var $43=$this_ch;
      var $44=(($43)&(255));
      var $45=(($44)|(0)) > 127;
      if ($45) { label = 16; break; } else { label = 13; break; }
    case 13: 
      var $47=$this_ch;
      var $48=(($47)&(255));
      var $49=(($48)|(0))==13;
      if ($49) { label = 16; break; } else { label = 14; break; }
    case 14: 
      var $51=$this_ch;
      var $52=(($51)&(255));
      var $53=(($52)|(0))==10;
      if ($53) { label = 16; break; } else { label = 15; break; }
    case 15: 
      var $55=$this_ch;
      var $56=(($55)&(255));
      var $57=(($56)|(0))==32;
      if ($57) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 28; break;
    case 17: 
      var $60=$this_ch;
      var $61=(($60)&(255));
      var $62=(($61)|(0))==61;
      if ($62) { label = 18; break; } else { label = 23; break; }
    case 18: 
      var $64=$quad_pos;
      var $65=(($64)|(0)) < 2;
      if ($65) { label = 21; break; } else { label = 19; break; }
    case 19: 
      var $67=$quad_pos;
      var $68=(($67)|(0))==2;
      if ($68) { label = 20; break; } else { label = 22; break; }
    case 20: 
      var $70=$ascii_data;
      var $71=$ascii_len;
      var $72=_binascii_find_valid($70, $71, 1);
      var $73=(($72)|(0))!=61;
      if ($73) { label = 21; break; } else { label = 22; break; }
    case 21: 
      label = 28; break;
    case 22: 
      $leftbits=0;
      label = 29; break;
    case 23: 
      var $77=$ascii_data;
      var $78=HEAP8[($77)];
      var $79=(($78)&(255));
      var $80=((_table_a2b_base64+$79)|0);
      var $81=HEAP8[($80)];
      $this_ch=$81;
      var $82=$this_ch;
      var $83=(($82)&(255));
      var $84=(($83)|(0))==255;
      if ($84) { label = 24; break; } else { label = 25; break; }
    case 24: 
      label = 28; break;
    case 25: 
      var $87=$quad_pos;
      var $88=((($87)+(1))|0);
      var $89=$88 & 3;
      $quad_pos=$89;
      var $90=$leftchar;
      var $91=$90 << 6;
      var $92=$this_ch;
      var $93=(($92)&(255));
      var $94=$91 | $93;
      $leftchar=$94;
      var $95=$leftbits;
      var $96=((($95)+(6))|0);
      $leftbits=$96;
      var $97=$leftbits;
      var $98=(($97)|(0)) >= 8;
      if ($98) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $100=$leftbits;
      var $101=((($100)-(8))|0);
      $leftbits=$101;
      var $102=$leftchar;
      var $103=$leftbits;
      var $104=$102 >>> (($103)>>>(0));
      var $105=$104 & 255;
      var $106=(($105) & 255);
      var $107=$bin_data;
      var $108=(($107+1)|0);
      $bin_data=$108;
      HEAP8[($107)]=$106;
      var $109=$bin_len;
      var $110=((($109)+(1))|0);
      $bin_len=$110;
      var $111=$leftbits;
      var $112=1 << $111;
      var $113=((($112)-(1))|0);
      var $114=$leftchar;
      var $115=$114 & $113;
      $leftchar=$115;
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      var $118=$ascii_len;
      var $119=((($118)-(1))|0);
      $ascii_len=$119;
      var $120=$ascii_data;
      var $121=(($120+1)|0);
      $ascii_data=$121;
      label = 11; break;
    case 29: 
      var $123=$leftbits;
      var $124=(($123)|(0))!=0;
      if ($124) { label = 30; break; } else { label = 36; break; }
    case 30: 
      _PyBuffer_Release($pascii);
      var $126=HEAP32[((_Error)>>2)];
      _PyErr_SetString($126, ((__str54)|0));
      label = 31; break;
    case 31: 
      var $128=HEAP32[(($rv)>>2)];
      var $129=(($128)|0);
      var $130=HEAP32[(($129)>>2)];
      var $131=((($130)-(1))|0);
      HEAP32[(($129)>>2)]=$131;
      var $132=(($131)|(0))!=0;
      if ($132) { label = 32; break; } else { label = 33; break; }
    case 32: 
      label = 34; break;
    case 33: 
      var $135=HEAP32[(($rv)>>2)];
      var $136=(($135+4)|0);
      var $137=HEAP32[(($136)>>2)];
      var $138=(($137+24)|0);
      var $139=HEAP32[(($138)>>2)];
      var $140=HEAP32[(($rv)>>2)];
      FUNCTION_TABLE[$139]($140);
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      $1=0;
      label = 52; break;
    case 36: 
      var $144=$bin_len;
      var $145=(($144)|(0)) > 0;
      if ($145) { label = 37; break; } else { label = 45; break; }
    case 37: 
      var $147=$bin_len;
      var $148=__PyString_Resize($rv, $147);
      var $149=(($148)|(0)) < 0;
      if ($149) { label = 38; break; } else { label = 44; break; }
    case 38: 
      label = 39; break;
    case 39: 
      var $152=HEAP32[(($rv)>>2)];
      var $153=(($152)|0);
      var $154=HEAP32[(($153)>>2)];
      var $155=((($154)-(1))|0);
      HEAP32[(($153)>>2)]=$155;
      var $156=(($155)|(0))!=0;
      if ($156) { label = 40; break; } else { label = 41; break; }
    case 40: 
      label = 42; break;
    case 41: 
      var $159=HEAP32[(($rv)>>2)];
      var $160=(($159+4)|0);
      var $161=HEAP32[(($160)>>2)];
      var $162=(($161+24)|0);
      var $163=HEAP32[(($162)>>2)];
      var $164=HEAP32[(($rv)>>2)];
      FUNCTION_TABLE[$163]($164);
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      HEAP32[(($rv)>>2)]=0;
      label = 44; break;
    case 44: 
      label = 51; break;
    case 45: 
      label = 46; break;
    case 46: 
      var $170=HEAP32[(($rv)>>2)];
      var $171=(($170)|0);
      var $172=HEAP32[(($171)>>2)];
      var $173=((($172)-(1))|0);
      HEAP32[(($171)>>2)]=$173;
      var $174=(($173)|(0))!=0;
      if ($174) { label = 47; break; } else { label = 48; break; }
    case 47: 
      label = 49; break;
    case 48: 
      var $177=HEAP32[(($rv)>>2)];
      var $178=(($177+4)|0);
      var $179=HEAP32[(($178)>>2)];
      var $180=(($179+24)|0);
      var $181=HEAP32[(($180)>>2)];
      var $182=HEAP32[(($rv)>>2)];
      FUNCTION_TABLE[$181]($182);
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      var $185=_PyString_FromStringAndSize(((__str35)|0), 0);
      HEAP32[(($rv)>>2)]=$185;
      label = 51; break;
    case 51: 
      _PyBuffer_Release($pascii);
      var $187=HEAP32[(($rv)>>2)];
      $1=$187;
      label = 52; break;
    case 52: 
      var $189=$1;
      STACKTOP = __stackBase__;
      return $189;
    default: assert(0, "bad label: " + label);
  }
}
function _binascii_b2a_base64($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $pbuf=__stackBase__;
      var $ascii_data;
      var $bin_data;
      var $leftbits;
      var $this_ch;
      var $leftchar;
      var $rv=(__stackBase__)+(52);
      var $bin_len;
      $2=$self;
      $3=$args;
      $leftbits=0;
      $leftchar=0;
      var $4=$3;
      var $5=__PyArg_ParseTuple_SizeT($4, ((__str49)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$pbuf,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 30; break;
    case 3: 
      var $9=(($pbuf)|0);
      var $10=HEAP32[(($9)>>2)];
      $bin_data=$10;
      var $11=(($pbuf+8)|0);
      var $12=HEAP32[(($11)>>2)];
      $bin_len=$12;
      var $13=$bin_len;
      var $14=(($13)|(0)) >= 0;
      if ($14) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 6; break;
    case 5: 
      ___assert_func(((__str33)|0), 486, ((___func___binascii_b2a_base64)|0), ((__str50)|0));
      throw "Reached an unreachable!";
      label = 6; break;
    case 6: 
      var $19=$bin_len;
      var $20=(($19)>>>(0)) > 1073741796;
      if ($20) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $22=HEAP32[((_Error)>>2)];
      _PyErr_SetString($22, ((__str51)|0));
      _PyBuffer_Release($pbuf);
      $1=0;
      label = 30; break;
    case 8: 
      var $24=$bin_len;
      var $25=($24<<1);
      var $26=((($25)+(3))|0);
      var $27=_PyString_FromStringAndSize(0, $26);
      HEAP32[(($rv)>>2)]=$27;
      var $28=(($27)|(0))==0;
      if ($28) { label = 9; break; } else { label = 10; break; }
    case 9: 
      _PyBuffer_Release($pbuf);
      $1=0;
      label = 30; break;
    case 10: 
      var $31=HEAP32[(($rv)>>2)];
      var $32=$31;
      var $33=(($32+20)|0);
      var $34=(($33)|0);
      $ascii_data=$34;
      label = 11; break;
    case 11: 
      var $36=$bin_len;
      var $37=(($36)|(0)) > 0;
      if ($37) { label = 12; break; } else { label = 17; break; }
    case 12: 
      var $39=$leftchar;
      var $40=$39 << 8;
      var $41=$bin_data;
      var $42=HEAP8[($41)];
      var $43=(($42)&(255));
      var $44=$40 | $43;
      $leftchar=$44;
      var $45=$leftbits;
      var $46=((($45)+(8))|0);
      $leftbits=$46;
      label = 13; break;
    case 13: 
      var $48=$leftbits;
      var $49=(($48)|(0)) >= 6;
      if ($49) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $51=$leftchar;
      var $52=$leftbits;
      var $53=((($52)-(6))|0);
      var $54=$51 >>> (($53)>>>(0));
      var $55=$54 & 63;
      var $56=(($55) & 255);
      $this_ch=$56;
      var $57=$leftbits;
      var $58=((($57)-(6))|0);
      $leftbits=$58;
      var $59=$this_ch;
      var $60=(($59)&(255));
      var $61=((_table_b2a_base64+$60)|0);
      var $62=HEAP8[($61)];
      var $63=$ascii_data;
      var $64=(($63+1)|0);
      $ascii_data=$64;
      HEAP8[($63)]=$62;
      label = 13; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $67=$bin_len;
      var $68=((($67)-(1))|0);
      $bin_len=$68;
      var $69=$bin_data;
      var $70=(($69+1)|0);
      $bin_data=$70;
      label = 11; break;
    case 17: 
      var $72=$leftbits;
      var $73=(($72)|(0))==2;
      if ($73) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $75=$leftchar;
      var $76=$75 & 3;
      var $77=$76 << 4;
      var $78=((_table_b2a_base64+$77)|0);
      var $79=HEAP8[($78)];
      var $80=$ascii_data;
      var $81=(($80+1)|0);
      $ascii_data=$81;
      HEAP8[($80)]=$79;
      var $82=$ascii_data;
      var $83=(($82+1)|0);
      $ascii_data=$83;
      HEAP8[($82)]=61;
      var $84=$ascii_data;
      var $85=(($84+1)|0);
      $ascii_data=$85;
      HEAP8[($84)]=61;
      label = 22; break;
    case 19: 
      var $87=$leftbits;
      var $88=(($87)|(0))==4;
      if ($88) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $90=$leftchar;
      var $91=$90 & 15;
      var $92=$91 << 2;
      var $93=((_table_b2a_base64+$92)|0);
      var $94=HEAP8[($93)];
      var $95=$ascii_data;
      var $96=(($95+1)|0);
      $ascii_data=$96;
      HEAP8[($95)]=$94;
      var $97=$ascii_data;
      var $98=(($97+1)|0);
      $ascii_data=$98;
      HEAP8[($97)]=61;
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $101=$ascii_data;
      var $102=(($101+1)|0);
      $ascii_data=$102;
      HEAP8[($101)]=10;
      var $103=$ascii_data;
      var $104=HEAP32[(($rv)>>2)];
      var $105=$104;
      var $106=(($105+20)|0);
      var $107=(($106)|0);
      var $108=$103;
      var $109=$107;
      var $110=((($108)-($109))|0);
      var $111=__PyString_Resize($rv, $110);
      var $112=(($111)|(0)) < 0;
      if ($112) { label = 23; break; } else { label = 29; break; }
    case 23: 
      label = 24; break;
    case 24: 
      var $115=HEAP32[(($rv)>>2)];
      var $116=(($115)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=((($117)-(1))|0);
      HEAP32[(($116)>>2)]=$118;
      var $119=(($118)|(0))!=0;
      if ($119) { label = 25; break; } else { label = 26; break; }
    case 25: 
      label = 27; break;
    case 26: 
      var $122=HEAP32[(($rv)>>2)];
      var $123=(($122+4)|0);
      var $124=HEAP32[(($123)>>2)];
      var $125=(($124+24)|0);
      var $126=HEAP32[(($125)>>2)];
      var $127=HEAP32[(($rv)>>2)];
      FUNCTION_TABLE[$126]($127);
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      HEAP32[(($rv)>>2)]=0;
      label = 29; break;
    case 29: 
      _PyBuffer_Release($pbuf);
      var $131=HEAP32[(($rv)>>2)];
      $1=$131;
      label = 30; break;
    case 30: 
      var $133=$1;
      STACKTOP = __stackBase__;
      return $133;
    default: assert(0, "bad label: " + label);
  }
}
function _binascii_a2b_hqx($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $pascii=__stackBase__;
      var $ascii_data;
      var $bin_data;
      var $leftbits;
      var $this_ch;
      var $leftchar;
      var $rv=(__stackBase__)+(52);
      var $len;
      var $done;
      var $rrv;
      $2=$self;
      $3=$args;
      $leftbits=0;
      $leftchar=0;
      $done=0;
      var $4=$3;
      var $5=__PyArg_ParseTuple_SizeT($4, ((__str45)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$pascii,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 50; break;
    case 3: 
      var $9=(($pascii)|0);
      var $10=HEAP32[(($9)>>2)];
      $ascii_data=$10;
      var $11=(($pascii+8)|0);
      var $12=HEAP32[(($11)>>2)];
      $len=$12;
      var $13=$len;
      var $14=(($13)|(0)) >= 0;
      if ($14) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 6; break;
    case 5: 
      ___assert_func(((__str33)|0), 554, ((___func___binascii_a2b_hqx)|0), ((__str38)|0));
      throw "Reached an unreachable!";
      label = 6; break;
    case 6: 
      var $19=$len;
      var $20=(($19)|(0)) > 2147483645;
      if ($20) { label = 7; break; } else { label = 8; break; }
    case 7: 
      _PyBuffer_Release($pascii);
      var $22=_PyErr_NoMemory();
      $1=$22;
      label = 50; break;
    case 8: 
      var $24=$len;
      var $25=((($24)+(2))|0);
      var $26=_PyString_FromStringAndSize(0, $25);
      HEAP32[(($rv)>>2)]=$26;
      var $27=(($26)|(0))==0;
      if ($27) { label = 9; break; } else { label = 10; break; }
    case 9: 
      _PyBuffer_Release($pascii);
      $1=0;
      label = 50; break;
    case 10: 
      var $30=HEAP32[(($rv)>>2)];
      var $31=$30;
      var $32=(($31+20)|0);
      var $33=(($32)|0);
      $bin_data=$33;
      label = 11; break;
    case 11: 
      var $35=$len;
      var $36=(($35)|(0)) > 0;
      if ($36) { label = 12; break; } else { label = 27; break; }
    case 12: 
      var $38=$ascii_data;
      var $39=HEAP8[($38)];
      var $40=(($39)&(255));
      var $41=((_table_a2b_hqx+$40)|0);
      var $42=HEAP8[($41)];
      $this_ch=$42;
      var $43=$this_ch;
      var $44=(($43)&(255));
      var $45=(($44)|(0))==126;
      if ($45) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 26; break;
    case 14: 
      var $48=$this_ch;
      var $49=(($48)&(255));
      var $50=(($49)|(0))==125;
      if ($50) { label = 15; break; } else { label = 21; break; }
    case 15: 
      var $52=HEAP32[((_Error)>>2)];
      _PyErr_SetString($52, ((__str46)|0));
      _PyBuffer_Release($pascii);
      label = 16; break;
    case 16: 
      var $54=HEAP32[(($rv)>>2)];
      var $55=(($54)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=((($56)-(1))|0);
      HEAP32[(($55)>>2)]=$57;
      var $58=(($57)|(0))!=0;
      if ($58) { label = 17; break; } else { label = 18; break; }
    case 17: 
      label = 19; break;
    case 18: 
      var $61=HEAP32[(($rv)>>2)];
      var $62=(($61+4)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=(($63+24)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=HEAP32[(($rv)>>2)];
      FUNCTION_TABLE[$65]($66);
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      $1=0;
      label = 50; break;
    case 21: 
      var $70=$this_ch;
      var $71=(($70)&(255));
      var $72=(($71)|(0))==127;
      if ($72) { label = 22; break; } else { label = 23; break; }
    case 22: 
      $done=1;
      label = 27; break;
    case 23: 
      var $75=$leftchar;
      var $76=$75 << 6;
      var $77=$this_ch;
      var $78=(($77)&(255));
      var $79=$76 | $78;
      $leftchar=$79;
      var $80=$leftbits;
      var $81=((($80)+(6))|0);
      $leftbits=$81;
      var $82=$leftbits;
      var $83=(($82)|(0)) >= 8;
      if ($83) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $85=$leftbits;
      var $86=((($85)-(8))|0);
      $leftbits=$86;
      var $87=$leftchar;
      var $88=$leftbits;
      var $89=$87 >>> (($88)>>>(0));
      var $90=$89 & 255;
      var $91=(($90) & 255);
      var $92=$bin_data;
      var $93=(($92+1)|0);
      $bin_data=$93;
      HEAP8[($92)]=$91;
      var $94=$leftbits;
      var $95=1 << $94;
      var $96=((($95)-(1))|0);
      var $97=$leftchar;
      var $98=$97 & $96;
      $leftchar=$98;
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $101=$len;
      var $102=((($101)-(1))|0);
      $len=$102;
      var $103=$ascii_data;
      var $104=(($103+1)|0);
      $ascii_data=$104;
      label = 11; break;
    case 27: 
      var $106=$leftbits;
      var $107=(($106)|(0))!=0;
      if ($107) { label = 28; break; } else { label = 35; break; }
    case 28: 
      var $109=$done;
      var $110=(($109)|(0))!=0;
      if ($110) { label = 35; break; } else { label = 29; break; }
    case 29: 
      var $112=HEAP32[((_Incomplete)>>2)];
      _PyErr_SetString($112, ((__str47)|0));
      _PyBuffer_Release($pascii);
      label = 30; break;
    case 30: 
      var $114=HEAP32[(($rv)>>2)];
      var $115=(($114)|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=((($116)-(1))|0);
      HEAP32[(($115)>>2)]=$117;
      var $118=(($117)|(0))!=0;
      if ($118) { label = 31; break; } else { label = 32; break; }
    case 31: 
      label = 33; break;
    case 32: 
      var $121=HEAP32[(($rv)>>2)];
      var $122=(($121+4)|0);
      var $123=HEAP32[(($122)>>2)];
      var $124=(($123+24)|0);
      var $125=HEAP32[(($124)>>2)];
      var $126=HEAP32[(($rv)>>2)];
      FUNCTION_TABLE[$125]($126);
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      $1=0;
      label = 50; break;
    case 35: 
      var $130=$bin_data;
      var $131=HEAP32[(($rv)>>2)];
      var $132=$131;
      var $133=(($132+20)|0);
      var $134=(($133)|0);
      var $135=$130;
      var $136=$134;
      var $137=((($135)-($136))|0);
      var $138=__PyString_Resize($rv, $137);
      var $139=(($138)|(0)) < 0;
      if ($139) { label = 36; break; } else { label = 42; break; }
    case 36: 
      label = 37; break;
    case 37: 
      var $142=HEAP32[(($rv)>>2)];
      var $143=(($142)|0);
      var $144=HEAP32[(($143)>>2)];
      var $145=((($144)-(1))|0);
      HEAP32[(($143)>>2)]=$145;
      var $146=(($145)|(0))!=0;
      if ($146) { label = 38; break; } else { label = 39; break; }
    case 38: 
      label = 40; break;
    case 39: 
      var $149=HEAP32[(($rv)>>2)];
      var $150=(($149+4)|0);
      var $151=HEAP32[(($150)>>2)];
      var $152=(($151+24)|0);
      var $153=HEAP32[(($152)>>2)];
      var $154=HEAP32[(($rv)>>2)];
      FUNCTION_TABLE[$153]($154);
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      HEAP32[(($rv)>>2)]=0;
      label = 42; break;
    case 42: 
      var $158=HEAP32[(($rv)>>2)];
      var $159=(($158)|(0))!=0;
      if ($159) { label = 43; break; } else { label = 49; break; }
    case 43: 
      var $161=HEAP32[(($rv)>>2)];
      var $162=$done;
      var $163=__Py_BuildValue_SizeT(((__str48)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$161,HEAP32[(((tempInt)+(4))>>2)]=$162,tempInt));
      $rrv=$163;
      _PyBuffer_Release($pascii);
      label = 44; break;
    case 44: 
      var $165=HEAP32[(($rv)>>2)];
      var $166=(($165)|0);
      var $167=HEAP32[(($166)>>2)];
      var $168=((($167)-(1))|0);
      HEAP32[(($166)>>2)]=$168;
      var $169=(($168)|(0))!=0;
      if ($169) { label = 45; break; } else { label = 46; break; }
    case 45: 
      label = 47; break;
    case 46: 
      var $172=HEAP32[(($rv)>>2)];
      var $173=(($172+4)|0);
      var $174=HEAP32[(($173)>>2)];
      var $175=(($174+24)|0);
      var $176=HEAP32[(($175)>>2)];
      var $177=HEAP32[(($rv)>>2)];
      FUNCTION_TABLE[$176]($177);
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      var $180=$rrv;
      $1=$180;
      label = 50; break;
    case 49: 
      _PyBuffer_Release($pascii);
      $1=0;
      label = 50; break;
    case 50: 
      var $183=$1;
      STACKTOP = __stackBase__;
      return $183;
    default: assert(0, "bad label: " + label);
  }
}
function _binascii_b2a_hqx($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $pbin=__stackBase__;
      var $ascii_data;
      var $bin_data;
      var $leftbits;
      var $this_ch;
      var $leftchar;
      var $rv=(__stackBase__)+(52);
      var $len;
      $2=$self;
      $3=$args;
      $leftbits=0;
      $leftchar=0;
      var $4=$3;
      var $5=__PyArg_ParseTuple_SizeT($4, ((__str44)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$pbin,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 27; break;
    case 3: 
      var $9=(($pbin)|0);
      var $10=HEAP32[(($9)>>2)];
      $bin_data=$10;
      var $11=(($pbin+8)|0);
      var $12=HEAP32[(($11)>>2)];
      $len=$12;
      var $13=$len;
      var $14=(($13)|(0)) >= 0;
      if ($14) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 6; break;
    case 5: 
      ___assert_func(((__str33)|0), 703, ((___func___binascii_b2a_hqx)|0), ((__str38)|0));
      throw "Reached an unreachable!";
      label = 6; break;
    case 6: 
      var $19=$len;
      var $20=(($19)|(0)) > 1073741821;
      if ($20) { label = 7; break; } else { label = 8; break; }
    case 7: 
      _PyBuffer_Release($pbin);
      var $22=_PyErr_NoMemory();
      $1=$22;
      label = 27; break;
    case 8: 
      var $24=$len;
      var $25=($24<<1);
      var $26=((($25)+(2))|0);
      var $27=_PyString_FromStringAndSize(0, $26);
      HEAP32[(($rv)>>2)]=$27;
      var $28=(($27)|(0))==0;
      if ($28) { label = 9; break; } else { label = 10; break; }
    case 9: 
      _PyBuffer_Release($pbin);
      $1=0;
      label = 27; break;
    case 10: 
      var $31=HEAP32[(($rv)>>2)];
      var $32=$31;
      var $33=(($32+20)|0);
      var $34=(($33)|0);
      $ascii_data=$34;
      label = 11; break;
    case 11: 
      var $36=$len;
      var $37=(($36)|(0)) > 0;
      if ($37) { label = 12; break; } else { label = 17; break; }
    case 12: 
      var $39=$leftchar;
      var $40=$39 << 8;
      var $41=$bin_data;
      var $42=HEAP8[($41)];
      var $43=(($42)&(255));
      var $44=$40 | $43;
      $leftchar=$44;
      var $45=$leftbits;
      var $46=((($45)+(8))|0);
      $leftbits=$46;
      label = 13; break;
    case 13: 
      var $48=$leftbits;
      var $49=(($48)|(0)) >= 6;
      if ($49) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $51=$leftchar;
      var $52=$leftbits;
      var $53=((($52)-(6))|0);
      var $54=$51 >>> (($53)>>>(0));
      var $55=$54 & 63;
      var $56=(($55) & 255);
      $this_ch=$56;
      var $57=$leftbits;
      var $58=((($57)-(6))|0);
      $leftbits=$58;
      var $59=$this_ch;
      var $60=(($59)&(255));
      var $61=((_table_b2a_hqx+$60)|0);
      var $62=HEAP8[($61)];
      var $63=$ascii_data;
      var $64=(($63+1)|0);
      $ascii_data=$64;
      HEAP8[($63)]=$62;
      label = 13; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $67=$len;
      var $68=((($67)-(1))|0);
      $len=$68;
      var $69=$bin_data;
      var $70=(($69+1)|0);
      $bin_data=$70;
      label = 11; break;
    case 17: 
      var $72=$leftbits;
      var $73=(($72)|(0))!=0;
      if ($73) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $75=$leftbits;
      var $76=(((6)-($75))|0);
      var $77=$leftchar;
      var $78=$77 << $76;
      $leftchar=$78;
      var $79=$leftchar;
      var $80=$79 & 63;
      var $81=((_table_b2a_hqx+$80)|0);
      var $82=HEAP8[($81)];
      var $83=$ascii_data;
      var $84=(($83+1)|0);
      $ascii_data=$84;
      HEAP8[($83)]=$82;
      label = 19; break;
    case 19: 
      var $86=$ascii_data;
      var $87=HEAP32[(($rv)>>2)];
      var $88=$87;
      var $89=(($88+20)|0);
      var $90=(($89)|0);
      var $91=$86;
      var $92=$90;
      var $93=((($91)-($92))|0);
      var $94=__PyString_Resize($rv, $93);
      var $95=(($94)|(0)) < 0;
      if ($95) { label = 20; break; } else { label = 26; break; }
    case 20: 
      label = 21; break;
    case 21: 
      var $98=HEAP32[(($rv)>>2)];
      var $99=(($98)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=((($100)-(1))|0);
      HEAP32[(($99)>>2)]=$101;
      var $102=(($101)|(0))!=0;
      if ($102) { label = 22; break; } else { label = 23; break; }
    case 22: 
      label = 24; break;
    case 23: 
      var $105=HEAP32[(($rv)>>2)];
      var $106=(($105+4)|0);
      var $107=HEAP32[(($106)>>2)];
      var $108=(($107+24)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=HEAP32[(($rv)>>2)];
      FUNCTION_TABLE[$109]($110);
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      HEAP32[(($rv)>>2)]=0;
      label = 26; break;
    case 26: 
      _PyBuffer_Release($pbin);
      var $114=HEAP32[(($rv)>>2)];
      $1=$114;
      label = 27; break;
    case 27: 
      var $116=$1;
      STACKTOP = __stackBase__;
      return $116;
    default: assert(0, "bad label: " + label);
  }
}
function _binascii_hexlify($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 52)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $parg=__stackBase__;
      var $argbuf;
      var $arglen;
      var $retval;
      var $retbuf;
      var $i;
      var $j;
      var $c;
      $2=$self;
      $3=$args;
      var $4=$3;
      var $5=__PyArg_ParseTuple_SizeT($4, ((__str43)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$parg,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 21; break;
    case 3: 
      var $9=(($parg)|0);
      var $10=HEAP32[(($9)>>2)];
      $argbuf=$10;
      var $11=(($parg+8)|0);
      var $12=HEAP32[(($11)>>2)];
      $arglen=$12;
      var $13=$arglen;
      var $14=(($13)|(0)) >= 0;
      if ($14) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 6; break;
    case 5: 
      ___assert_func(((__str33)|0), 1069, ((___func___binascii_hexlify)|0), ((__str40)|0));
      throw "Reached an unreachable!";
      label = 6; break;
    case 6: 
      var $19=$arglen;
      var $20=(($19)|(0)) > 1073741823;
      if ($20) { label = 7; break; } else { label = 8; break; }
    case 7: 
      _PyBuffer_Release($parg);
      var $22=_PyErr_NoMemory();
      $1=$22;
      label = 21; break;
    case 8: 
      var $24=$arglen;
      var $25=($24<<1);
      var $26=_PyString_FromStringAndSize(0, $25);
      $retval=$26;
      var $27=$retval;
      var $28=(($27)|(0))!=0;
      if ($28) { label = 10; break; } else { label = 9; break; }
    case 9: 
      _PyBuffer_Release($parg);
      $1=0;
      label = 21; break;
    case 10: 
      var $31=$retval;
      var $32=$31;
      var $33=(($32+20)|0);
      var $34=(($33)|0);
      $retbuf=$34;
      $j=0;
      $i=0;
      label = 11; break;
    case 11: 
      var $36=$i;
      var $37=$arglen;
      var $38=(($36)|(0)) < (($37)|(0));
      if ($38) { label = 12; break; } else { label = 20; break; }
    case 12: 
      var $40=$i;
      var $41=$argbuf;
      var $42=(($41+$40)|0);
      var $43=HEAP8[($42)];
      var $44=(($43 << 24) >> 24);
      var $45=$44 >> 4;
      var $46=$45 & 15;
      var $47=(($46) & 255);
      $c=$47;
      var $48=$c;
      var $49=(($48 << 24) >> 24);
      var $50=(($49)|(0)) > 9;
      if ($50) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $52=$c;
      var $53=(($52 << 24) >> 24);
      var $54=((($53)+(97))|0);
      var $55=((($54)-(10))|0);
      var $61 = $55;label = 15; break;
    case 14: 
      var $57=$c;
      var $58=(($57 << 24) >> 24);
      var $59=((($58)+(48))|0);
      var $61 = $59;label = 15; break;
    case 15: 
      var $61;
      var $62=(($61) & 255);
      $c=$62;
      var $63=$c;
      var $64=$j;
      var $65=((($64)+(1))|0);
      $j=$65;
      var $66=$retbuf;
      var $67=(($66+$64)|0);
      HEAP8[($67)]=$63;
      var $68=$i;
      var $69=$argbuf;
      var $70=(($69+$68)|0);
      var $71=HEAP8[($70)];
      var $72=(($71 << 24) >> 24);
      var $73=$72 & 15;
      var $74=(($73) & 255);
      $c=$74;
      var $75=$c;
      var $76=(($75 << 24) >> 24);
      var $77=(($76)|(0)) > 9;
      if ($77) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $79=$c;
      var $80=(($79 << 24) >> 24);
      var $81=((($80)+(97))|0);
      var $82=((($81)-(10))|0);
      var $88 = $82;label = 18; break;
    case 17: 
      var $84=$c;
      var $85=(($84 << 24) >> 24);
      var $86=((($85)+(48))|0);
      var $88 = $86;label = 18; break;
    case 18: 
      var $88;
      var $89=(($88) & 255);
      $c=$89;
      var $90=$c;
      var $91=$j;
      var $92=((($91)+(1))|0);
      $j=$92;
      var $93=$retbuf;
      var $94=(($93+$91)|0);
      HEAP8[($94)]=$90;
      label = 19; break;
    case 19: 
      var $96=$i;
      var $97=((($96)+(1))|0);
      $i=$97;
      label = 11; break;
    case 20: 
      _PyBuffer_Release($parg);
      var $99=$retval;
      $1=$99;
      label = 21; break;
    case 21: 
      var $101=$1;
      STACKTOP = __stackBase__;
      return $101;
    default: assert(0, "bad label: " + label);
  }
}
function _binascii_unhexlify($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 52)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $parg=__stackBase__;
      var $argbuf;
      var $arglen;
      var $retval;
      var $retbuf;
      var $i;
      var $j;
      var $top;
      var $bot;
      $2=$self;
      $3=$args;
      var $4=$3;
      var $5=__PyArg_ParseTuple_SizeT($4, ((__str39)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$parg,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 24; break;
    case 3: 
      var $9=(($parg)|0);
      var $10=HEAP32[(($9)>>2)];
      $argbuf=$10;
      var $11=(($parg+8)|0);
      var $12=HEAP32[(($11)>>2)];
      $arglen=$12;
      var $13=$arglen;
      var $14=(($13)|(0)) >= 0;
      if ($14) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 6; break;
    case 5: 
      ___assert_func(((__str33)|0), 1132, ((___func___binascii_unhexlify)|0), ((__str40)|0));
      throw "Reached an unreachable!";
      label = 6; break;
    case 6: 
      var $19=$arglen;
      var $20=((($19)|(0)))%(2);
      var $21=(($20)|(0))!=0;
      if ($21) { label = 7; break; } else { label = 8; break; }
    case 7: 
      _PyBuffer_Release($parg);
      var $23=HEAP32[((_PyExc_TypeError)>>2)];
      _PyErr_SetString($23, ((__str41)|0));
      $1=0;
      label = 24; break;
    case 8: 
      var $25=$arglen;
      var $26=((((($25)|(0)))/(2))&-1);
      var $27=_PyString_FromStringAndSize(0, $26);
      $retval=$27;
      var $28=$retval;
      var $29=(($28)|(0))!=0;
      if ($29) { label = 10; break; } else { label = 9; break; }
    case 9: 
      _PyBuffer_Release($parg);
      $1=0;
      label = 24; break;
    case 10: 
      var $32=$retval;
      var $33=$32;
      var $34=(($33+20)|0);
      var $35=(($34)|0);
      $retbuf=$35;
      $j=0;
      $i=0;
      label = 11; break;
    case 11: 
      var $37=$i;
      var $38=$arglen;
      var $39=(($37)|(0)) < (($38)|(0));
      if ($39) { label = 12; break; } else { label = 17; break; }
    case 12: 
      var $41=$i;
      var $42=$argbuf;
      var $43=(($42+$41)|0);
      var $44=HEAP8[($43)];
      var $45=(($44 << 24) >> 24);
      var $46=$45 & 255;
      var $47=(($46) & 255);
      var $48=(($47)&(255));
      var $49=_to_int($48);
      $top=$49;
      var $50=$i;
      var $51=((($50)+(1))|0);
      var $52=$argbuf;
      var $53=(($52+$51)|0);
      var $54=HEAP8[($53)];
      var $55=(($54 << 24) >> 24);
      var $56=$55 & 255;
      var $57=(($56) & 255);
      var $58=(($57)&(255));
      var $59=_to_int($58);
      $bot=$59;
      var $60=$top;
      var $61=(($60)|(0))==-1;
      if ($61) { label = 14; break; } else { label = 13; break; }
    case 13: 
      var $63=$bot;
      var $64=(($63)|(0))==-1;
      if ($64) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $66=HEAP32[((_PyExc_TypeError)>>2)];
      _PyErr_SetString($66, ((__str42)|0));
      label = 18; break;
    case 15: 
      var $68=$top;
      var $69=$68 << 4;
      var $70=$bot;
      var $71=((($69)+($70))|0);
      var $72=(($71) & 255);
      var $73=$j;
      var $74=((($73)+(1))|0);
      $j=$74;
      var $75=$retbuf;
      var $76=(($75+$73)|0);
      HEAP8[($76)]=$72;
      label = 16; break;
    case 16: 
      var $78=$i;
      var $79=((($78)+(2))|0);
      $i=$79;
      label = 11; break;
    case 17: 
      _PyBuffer_Release($parg);
      var $81=$retval;
      $1=$81;
      label = 24; break;
    case 18: 
      _PyBuffer_Release($parg);
      label = 19; break;
    case 19: 
      var $84=$retval;
      var $85=(($84)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=((($86)-(1))|0);
      HEAP32[(($85)>>2)]=$87;
      var $88=(($87)|(0))!=0;
      if ($88) { label = 20; break; } else { label = 21; break; }
    case 20: 
      label = 22; break;
    case 21: 
      var $91=$retval;
      var $92=(($91+4)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=(($93+24)|0);
      var $95=HEAP32[(($94)>>2)];
      var $96=$retval;
      FUNCTION_TABLE[$95]($96);
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      $1=0;
      label = 24; break;
    case 24: 
      var $100=$1;
      STACKTOP = __stackBase__;
      return $100;
    default: assert(0, "bad label: " + label);
  }
}
function _binascii_rlecode_hqx($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $pbuf=__stackBase__;
      var $in_data;
      var $out_data;
      var $rv=(__stackBase__)+(52);
      var $ch;
      var $in;
      var $inend;
      var $len;
      $2=$self;
      $3=$args;
      var $4=$3;
      var $5=__PyArg_ParseTuple_SizeT($4, ((__str37)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$pbuf,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 35; break;
    case 3: 
      var $9=(($pbuf)|0);
      var $10=HEAP32[(($9)>>2)];
      $in_data=$10;
      var $11=(($pbuf+8)|0);
      var $12=HEAP32[(($11)>>2)];
      $len=$12;
      var $13=$len;
      var $14=(($13)|(0)) >= 0;
      if ($14) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 6; break;
    case 5: 
      ___assert_func(((__str33)|0), 637, ((___func___binascii_rlecode_hqx)|0), ((__str38)|0));
      throw "Reached an unreachable!";
      label = 6; break;
    case 6: 
      var $19=$len;
      var $20=(($19)|(0)) > 1073741821;
      if ($20) { label = 7; break; } else { label = 8; break; }
    case 7: 
      _PyBuffer_Release($pbuf);
      var $22=_PyErr_NoMemory();
      $1=$22;
      label = 35; break;
    case 8: 
      var $24=$len;
      var $25=($24<<1);
      var $26=((($25)+(2))|0);
      var $27=_PyString_FromStringAndSize(0, $26);
      HEAP32[(($rv)>>2)]=$27;
      var $28=(($27)|(0))==0;
      if ($28) { label = 9; break; } else { label = 10; break; }
    case 9: 
      _PyBuffer_Release($pbuf);
      $1=0;
      label = 35; break;
    case 10: 
      var $31=HEAP32[(($rv)>>2)];
      var $32=$31;
      var $33=(($32+20)|0);
      var $34=(($33)|0);
      $out_data=$34;
      $in=0;
      label = 11; break;
    case 11: 
      var $36=$in;
      var $37=$len;
      var $38=(($36)|(0)) < (($37)|(0));
      if ($38) { label = 12; break; } else { label = 27; break; }
    case 12: 
      var $40=$in;
      var $41=$in_data;
      var $42=(($41+$40)|0);
      var $43=HEAP8[($42)];
      $ch=$43;
      var $44=$ch;
      var $45=(($44)&(255));
      var $46=(($45)|(0))==144;
      if ($46) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $48=$out_data;
      var $49=(($48+1)|0);
      $out_data=$49;
      HEAP8[($48)]=-112;
      var $50=$out_data;
      var $51=(($50+1)|0);
      $out_data=$51;
      HEAP8[($50)]=0;
      label = 25; break;
    case 14: 
      var $53=$in;
      var $54=((($53)+(1))|0);
      $inend=$54;
      label = 15; break;
    case 15: 
      var $56=$inend;
      var $57=$len;
      var $58=(($56)|(0)) < (($57)|(0));
      if ($58) { label = 16; break; } else { var $74 = 0;label = 18; break; }
    case 16: 
      var $60=$inend;
      var $61=$in_data;
      var $62=(($61+$60)|0);
      var $63=HEAP8[($62)];
      var $64=(($63)&(255));
      var $65=$ch;
      var $66=(($65)&(255));
      var $67=(($64)|(0))==(($66)|(0));
      if ($67) { label = 17; break; } else { var $74 = 0;label = 18; break; }
    case 17: 
      var $69=$inend;
      var $70=$in;
      var $71=((($70)+(255))|0);
      var $72=(($69)|(0)) < (($71)|(0));
      var $74 = $72;label = 18; break;
    case 18: 
      var $74;
      if ($74) { label = 19; break; } else { label = 21; break; }
    case 19: 
      label = 20; break;
    case 20: 
      var $77=$inend;
      var $78=((($77)+(1))|0);
      $inend=$78;
      label = 15; break;
    case 21: 
      var $80=$inend;
      var $81=$in;
      var $82=((($80)-($81))|0);
      var $83=(($82)|(0)) > 3;
      if ($83) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $85=$ch;
      var $86=$out_data;
      var $87=(($86+1)|0);
      $out_data=$87;
      HEAP8[($86)]=$85;
      var $88=$out_data;
      var $89=(($88+1)|0);
      $out_data=$89;
      HEAP8[($88)]=-112;
      var $90=$inend;
      var $91=$in;
      var $92=((($90)-($91))|0);
      var $93=(($92) & 255);
      var $94=$out_data;
      var $95=(($94+1)|0);
      $out_data=$95;
      HEAP8[($94)]=$93;
      var $96=$inend;
      var $97=((($96)-(1))|0);
      $in=$97;
      label = 24; break;
    case 23: 
      var $99=$ch;
      var $100=$out_data;
      var $101=(($100+1)|0);
      $out_data=$101;
      HEAP8[($100)]=$99;
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $105=$in;
      var $106=((($105)+(1))|0);
      $in=$106;
      label = 11; break;
    case 27: 
      var $108=$out_data;
      var $109=HEAP32[(($rv)>>2)];
      var $110=$109;
      var $111=(($110+20)|0);
      var $112=(($111)|0);
      var $113=$108;
      var $114=$112;
      var $115=((($113)-($114))|0);
      var $116=__PyString_Resize($rv, $115);
      var $117=(($116)|(0)) < 0;
      if ($117) { label = 28; break; } else { label = 34; break; }
    case 28: 
      label = 29; break;
    case 29: 
      var $120=HEAP32[(($rv)>>2)];
      var $121=(($120)|0);
      var $122=HEAP32[(($121)>>2)];
      var $123=((($122)-(1))|0);
      HEAP32[(($121)>>2)]=$123;
      var $124=(($123)|(0))!=0;
      if ($124) { label = 30; break; } else { label = 31; break; }
    case 30: 
      label = 32; break;
    case 31: 
      var $127=HEAP32[(($rv)>>2)];
      var $128=(($127+4)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=(($129+24)|0);
      var $131=HEAP32[(($130)>>2)];
      var $132=HEAP32[(($rv)>>2)];
      FUNCTION_TABLE[$131]($132);
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      HEAP32[(($rv)>>2)]=0;
      label = 34; break;
    case 34: 
      _PyBuffer_Release($pbuf);
      var $136=HEAP32[(($rv)>>2)];
      $1=$136;
      label = 35; break;
    case 35: 
      var $138=$1;
      STACKTOP = __stackBase__;
      return $138;
    default: assert(0, "bad label: " + label);
  }
}
function _binascii_crc_hqx($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $pin=__stackBase__;
      var $bin_data;
      var $crc=(__stackBase__)+(52);
      var $len;
      $2=$self;
      $3=$args;
      var $4=$3;
      var $5=__PyArg_ParseTuple_SizeT($4, ((__str30)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$pin,HEAP32[(((tempInt)+(4))>>2)]=$crc,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 7; break;
    case 3: 
      var $9=(($pin)|0);
      var $10=HEAP32[(($9)>>2)];
      $bin_data=$10;
      var $11=(($pin+8)|0);
      var $12=HEAP32[(($11)>>2)];
      $len=$12;
      label = 4; break;
    case 4: 
      var $14=$len;
      var $15=((($14)-(1))|0);
      $len=$15;
      var $16=(($14)|(0)) > 0;
      if ($16) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $18=HEAP32[(($crc)>>2)];
      var $19=$18 << 8;
      var $20=$19 & 65280;
      var $21=HEAP32[(($crc)>>2)];
      var $22=$21 >>> 8;
      var $23=$22 & 255;
      var $24=$bin_data;
      var $25=(($24+1)|0);
      $bin_data=$25;
      var $26=HEAP8[($24)];
      var $27=(($26)&(255));
      var $28=$23 ^ $27;
      var $29=((_crctab_hqx+($28<<1))|0);
      var $30=HEAP16[(($29)>>1)];
      var $31=(($30)&(65535));
      var $32=$20 ^ $31;
      HEAP32[(($crc)>>2)]=$32;
      label = 4; break;
    case 6: 
      _PyBuffer_Release($pin);
      var $34=HEAP32[(($crc)>>2)];
      var $35=__Py_BuildValue_SizeT(((__str31)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$34,tempInt));
      $1=$35;
      label = 7; break;
    case 7: 
      var $37=$1;
      STACKTOP = __stackBase__;
      return $37;
    default: assert(0, "bad label: " + label);
  }
}
function _binascii_rledecode_hqx($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $pin=__stackBase__;
      var $in_data;
      var $out_data;
      var $in_byte;
      var $in_repeat;
      var $rv=(__stackBase__)+(52);
      var $in_len;
      var $out_len;
      var $out_len_left;
      $2=$self;
      $3=$args;
      var $4=$3;
      var $5=__PyArg_ParseTuple_SizeT($4, ((__str32)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$pin,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 144; break;
    case 3: 
      var $9=(($pin)|0);
      var $10=HEAP32[(($9)>>2)];
      $in_data=$10;
      var $11=(($pin+8)|0);
      var $12=HEAP32[(($11)>>2)];
      $in_len=$12;
      var $13=$in_len;
      var $14=(($13)|(0)) >= 0;
      if ($14) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 6; break;
    case 5: 
      ___assert_func(((__str33)|0), 758, ((___func___binascii_rledecode_hqx)|0), ((__str34)|0));
      throw "Reached an unreachable!";
      label = 6; break;
    case 6: 
      var $19=$in_len;
      var $20=(($19)|(0))==0;
      if ($20) { label = 7; break; } else { label = 8; break; }
    case 7: 
      _PyBuffer_Release($pin);
      var $22=_PyString_FromStringAndSize(((__str35)|0), 0);
      $1=$22;
      label = 144; break;
    case 8: 
      var $24=$in_len;
      var $25=(($24)|(0)) > 1073741823;
      if ($25) { label = 9; break; } else { label = 10; break; }
    case 9: 
      _PyBuffer_Release($pin);
      var $27=_PyErr_NoMemory();
      $1=$27;
      label = 144; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $30=$in_len;
      var $31=($30<<1);
      $out_len=$31;
      var $32=$out_len;
      var $33=_PyString_FromStringAndSize(0, $32);
      HEAP32[(($rv)>>2)]=$33;
      var $34=(($33)|(0))==0;
      if ($34) { label = 12; break; } else { label = 13; break; }
    case 12: 
      _PyBuffer_Release($pin);
      $1=0;
      label = 144; break;
    case 13: 
      var $37=$out_len;
      $out_len_left=$37;
      var $38=HEAP32[(($rv)>>2)];
      var $39=$38;
      var $40=(($39+20)|0);
      var $41=(($40)|0);
      $out_data=$41;
      label = 14; break;
    case 14: 
      var $43=$in_len;
      var $44=((($43)-(1))|0);
      $in_len=$44;
      var $45=(($44)|(0)) < 0;
      if ($45) { label = 15; break; } else { label = 21; break; }
    case 15: 
      var $47=HEAP32[((_Incomplete)>>2)];
      _PyErr_SetString($47, ((__str35)|0));
      label = 16; break;
    case 16: 
      var $49=HEAP32[(($rv)>>2)];
      var $50=(($49)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=((($51)-(1))|0);
      HEAP32[(($50)>>2)]=$52;
      var $53=(($52)|(0))!=0;
      if ($53) { label = 17; break; } else { label = 18; break; }
    case 17: 
      label = 19; break;
    case 18: 
      var $56=HEAP32[(($rv)>>2)];
      var $57=(($56+4)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=(($58+24)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=HEAP32[(($rv)>>2)];
      FUNCTION_TABLE[$60]($61);
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      _PyBuffer_Release($pin);
      $1=0;
      label = 144; break;
    case 21: 
      var $65=$in_data;
      var $66=(($65+1)|0);
      $in_data=$66;
      var $67=HEAP8[($65)];
      $in_byte=$67;
      label = 22; break;
    case 22: 
      var $69=$in_byte;
      var $70=(($69)&(255));
      var $71=(($70)|(0))==144;
      if ($71) { label = 23; break; } else { label = 53; break; }
    case 23: 
      label = 24; break;
    case 24: 
      var $74=$in_len;
      var $75=((($74)-(1))|0);
      $in_len=$75;
      var $76=(($75)|(0)) < 0;
      if ($76) { label = 25; break; } else { label = 31; break; }
    case 25: 
      var $78=HEAP32[((_Incomplete)>>2)];
      _PyErr_SetString($78, ((__str35)|0));
      label = 26; break;
    case 26: 
      var $80=HEAP32[(($rv)>>2)];
      var $81=(($80)|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=((($82)-(1))|0);
      HEAP32[(($81)>>2)]=$83;
      var $84=(($83)|(0))!=0;
      if ($84) { label = 27; break; } else { label = 28; break; }
    case 27: 
      label = 29; break;
    case 28: 
      var $87=HEAP32[(($rv)>>2)];
      var $88=(($87+4)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=(($89+24)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=HEAP32[(($rv)>>2)];
      FUNCTION_TABLE[$91]($92);
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      _PyBuffer_Release($pin);
      $1=0;
      label = 144; break;
    case 31: 
      var $96=$in_data;
      var $97=(($96+1)|0);
      $in_data=$97;
      var $98=HEAP8[($96)];
      $in_repeat=$98;
      label = 32; break;
    case 32: 
      var $100=$in_repeat;
      var $101=(($100)&(255));
      var $102=(($101)|(0))!=0;
      if ($102) { label = 33; break; } else { label = 39; break; }
    case 33: 
      var $104=HEAP32[((_Error)>>2)];
      _PyErr_SetString($104, ((__str36)|0));
      _PyBuffer_Release($pin);
      label = 34; break;
    case 34: 
      var $106=HEAP32[(($rv)>>2)];
      var $107=(($106)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=((($108)-(1))|0);
      HEAP32[(($107)>>2)]=$109;
      var $110=(($109)|(0))!=0;
      if ($110) { label = 35; break; } else { label = 36; break; }
    case 35: 
      label = 37; break;
    case 36: 
      var $113=HEAP32[(($rv)>>2)];
      var $114=(($113+4)|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=(($115+24)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=HEAP32[(($rv)>>2)];
      FUNCTION_TABLE[$117]($118);
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      $1=0;
      label = 144; break;
    case 39: 
      label = 40; break;
    case 40: 
      var $123=$out_len_left;
      var $124=((($123)-(1))|0);
      $out_len_left=$124;
      var $125=(($124)|(0)) < 0;
      if ($125) { label = 41; break; } else { label = 51; break; }
    case 41: 
      var $127=$out_len;
      var $128=(($127)|(0)) > 1073741823;
      if ($128) { label = 42; break; } else { label = 43; break; }
    case 42: 
      var $130=_PyErr_NoMemory();
      $1=$130;
      label = 144; break;
    case 43: 
      var $132=$out_len;
      var $133=($132<<1);
      var $134=__PyString_Resize($rv, $133);
      var $135=(($134)|(0)) < 0;
      if ($135) { label = 44; break; } else { label = 50; break; }
    case 44: 
      label = 45; break;
    case 45: 
      var $138=HEAP32[(($rv)>>2)];
      var $139=(($138)|0);
      var $140=HEAP32[(($139)>>2)];
      var $141=((($140)-(1))|0);
      HEAP32[(($139)>>2)]=$141;
      var $142=(($141)|(0))!=0;
      if ($142) { label = 46; break; } else { label = 47; break; }
    case 46: 
      label = 48; break;
    case 47: 
      var $145=HEAP32[(($rv)>>2)];
      var $146=(($145+4)|0);
      var $147=HEAP32[(($146)>>2)];
      var $148=(($147+24)|0);
      var $149=HEAP32[(($148)>>2)];
      var $150=HEAP32[(($rv)>>2)];
      FUNCTION_TABLE[$149]($150);
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      _PyBuffer_Release($pin);
      $1=0;
      label = 144; break;
    case 50: 
      var $154=HEAP32[(($rv)>>2)];
      var $155=$154;
      var $156=(($155+20)|0);
      var $157=(($156)|0);
      var $158=$out_len;
      var $159=(($157+$158)|0);
      $out_data=$159;
      var $160=$out_len;
      var $161=((($160)-(1))|0);
      $out_len_left=$161;
      var $162=$out_len;
      var $163=($162<<1);
      $out_len=$163;
      label = 51; break;
    case 51: 
      var $165=$out_data;
      var $166=(($165+1)|0);
      $out_data=$166;
      HEAP8[($165)]=-112;
      label = 52; break;
    case 52: 
      label = 67; break;
    case 53: 
      label = 54; break;
    case 54: 
      var $170=$out_len_left;
      var $171=((($170)-(1))|0);
      $out_len_left=$171;
      var $172=(($171)|(0)) < 0;
      if ($172) { label = 55; break; } else { label = 65; break; }
    case 55: 
      var $174=$out_len;
      var $175=(($174)|(0)) > 1073741823;
      if ($175) { label = 56; break; } else { label = 57; break; }
    case 56: 
      var $177=_PyErr_NoMemory();
      $1=$177;
      label = 144; break;
    case 57: 
      var $179=$out_len;
      var $180=($179<<1);
      var $181=__PyString_Resize($rv, $180);
      var $182=(($181)|(0)) < 0;
      if ($182) { label = 58; break; } else { label = 64; break; }
    case 58: 
      label = 59; break;
    case 59: 
      var $185=HEAP32[(($rv)>>2)];
      var $186=(($185)|0);
      var $187=HEAP32[(($186)>>2)];
      var $188=((($187)-(1))|0);
      HEAP32[(($186)>>2)]=$188;
      var $189=(($188)|(0))!=0;
      if ($189) { label = 60; break; } else { label = 61; break; }
    case 60: 
      label = 62; break;
    case 61: 
      var $192=HEAP32[(($rv)>>2)];
      var $193=(($192+4)|0);
      var $194=HEAP32[(($193)>>2)];
      var $195=(($194+24)|0);
      var $196=HEAP32[(($195)>>2)];
      var $197=HEAP32[(($rv)>>2)];
      FUNCTION_TABLE[$196]($197);
      label = 62; break;
    case 62: 
      label = 63; break;
    case 63: 
      _PyBuffer_Release($pin);
      $1=0;
      label = 144; break;
    case 64: 
      var $201=HEAP32[(($rv)>>2)];
      var $202=$201;
      var $203=(($202+20)|0);
      var $204=(($203)|0);
      var $205=$out_len;
      var $206=(($204+$205)|0);
      $out_data=$206;
      var $207=$out_len;
      var $208=((($207)-(1))|0);
      $out_len_left=$208;
      var $209=$out_len;
      var $210=($209<<1);
      $out_len=$210;
      label = 65; break;
    case 65: 
      var $212=$in_byte;
      var $213=$out_data;
      var $214=(($213+1)|0);
      $out_data=$214;
      HEAP8[($213)]=$212;
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      label = 68; break;
    case 68: 
      var $218=$in_len;
      var $219=(($218)|(0)) > 0;
      if ($219) { label = 69; break; } else { label = 136; break; }
    case 69: 
      label = 70; break;
    case 70: 
      var $222=$in_len;
      var $223=((($222)-(1))|0);
      $in_len=$223;
      var $224=(($223)|(0)) < 0;
      if ($224) { label = 71; break; } else { label = 77; break; }
    case 71: 
      var $226=HEAP32[((_Incomplete)>>2)];
      _PyErr_SetString($226, ((__str35)|0));
      label = 72; break;
    case 72: 
      var $228=HEAP32[(($rv)>>2)];
      var $229=(($228)|0);
      var $230=HEAP32[(($229)>>2)];
      var $231=((($230)-(1))|0);
      HEAP32[(($229)>>2)]=$231;
      var $232=(($231)|(0))!=0;
      if ($232) { label = 73; break; } else { label = 74; break; }
    case 73: 
      label = 75; break;
    case 74: 
      var $235=HEAP32[(($rv)>>2)];
      var $236=(($235+4)|0);
      var $237=HEAP32[(($236)>>2)];
      var $238=(($237+24)|0);
      var $239=HEAP32[(($238)>>2)];
      var $240=HEAP32[(($rv)>>2)];
      FUNCTION_TABLE[$239]($240);
      label = 75; break;
    case 75: 
      label = 76; break;
    case 76: 
      _PyBuffer_Release($pin);
      $1=0;
      label = 144; break;
    case 77: 
      var $244=$in_data;
      var $245=(($244+1)|0);
      $in_data=$245;
      var $246=HEAP8[($244)];
      $in_byte=$246;
      label = 78; break;
    case 78: 
      var $248=$in_byte;
      var $249=(($248)&(255));
      var $250=(($249)|(0))==144;
      if ($250) { label = 79; break; } else { label = 121; break; }
    case 79: 
      label = 80; break;
    case 80: 
      var $253=$in_len;
      var $254=((($253)-(1))|0);
      $in_len=$254;
      var $255=(($254)|(0)) < 0;
      if ($255) { label = 81; break; } else { label = 87; break; }
    case 81: 
      var $257=HEAP32[((_Incomplete)>>2)];
      _PyErr_SetString($257, ((__str35)|0));
      label = 82; break;
    case 82: 
      var $259=HEAP32[(($rv)>>2)];
      var $260=(($259)|0);
      var $261=HEAP32[(($260)>>2)];
      var $262=((($261)-(1))|0);
      HEAP32[(($260)>>2)]=$262;
      var $263=(($262)|(0))!=0;
      if ($263) { label = 83; break; } else { label = 84; break; }
    case 83: 
      label = 85; break;
    case 84: 
      var $266=HEAP32[(($rv)>>2)];
      var $267=(($266+4)|0);
      var $268=HEAP32[(($267)>>2)];
      var $269=(($268+24)|0);
      var $270=HEAP32[(($269)>>2)];
      var $271=HEAP32[(($rv)>>2)];
      FUNCTION_TABLE[$270]($271);
      label = 85; break;
    case 85: 
      label = 86; break;
    case 86: 
      _PyBuffer_Release($pin);
      $1=0;
      label = 144; break;
    case 87: 
      var $275=$in_data;
      var $276=(($275+1)|0);
      $in_data=$276;
      var $277=HEAP8[($275)];
      $in_repeat=$277;
      label = 88; break;
    case 88: 
      var $279=$in_repeat;
      var $280=(($279)&(255));
      var $281=(($280)|(0))==0;
      if ($281) { label = 89; break; } else { label = 103; break; }
    case 89: 
      label = 90; break;
    case 90: 
      var $284=$out_len_left;
      var $285=((($284)-(1))|0);
      $out_len_left=$285;
      var $286=(($285)|(0)) < 0;
      if ($286) { label = 91; break; } else { label = 101; break; }
    case 91: 
      var $288=$out_len;
      var $289=(($288)|(0)) > 1073741823;
      if ($289) { label = 92; break; } else { label = 93; break; }
    case 92: 
      var $291=_PyErr_NoMemory();
      $1=$291;
      label = 144; break;
    case 93: 
      var $293=$out_len;
      var $294=($293<<1);
      var $295=__PyString_Resize($rv, $294);
      var $296=(($295)|(0)) < 0;
      if ($296) { label = 94; break; } else { label = 100; break; }
    case 94: 
      label = 95; break;
    case 95: 
      var $299=HEAP32[(($rv)>>2)];
      var $300=(($299)|0);
      var $301=HEAP32[(($300)>>2)];
      var $302=((($301)-(1))|0);
      HEAP32[(($300)>>2)]=$302;
      var $303=(($302)|(0))!=0;
      if ($303) { label = 96; break; } else { label = 97; break; }
    case 96: 
      label = 98; break;
    case 97: 
      var $306=HEAP32[(($rv)>>2)];
      var $307=(($306+4)|0);
      var $308=HEAP32[(($307)>>2)];
      var $309=(($308+24)|0);
      var $310=HEAP32[(($309)>>2)];
      var $311=HEAP32[(($rv)>>2)];
      FUNCTION_TABLE[$310]($311);
      label = 98; break;
    case 98: 
      label = 99; break;
    case 99: 
      _PyBuffer_Release($pin);
      $1=0;
      label = 144; break;
    case 100: 
      var $315=HEAP32[(($rv)>>2)];
      var $316=$315;
      var $317=(($316+20)|0);
      var $318=(($317)|0);
      var $319=$out_len;
      var $320=(($318+$319)|0);
      $out_data=$320;
      var $321=$out_len;
      var $322=((($321)-(1))|0);
      $out_len_left=$322;
      var $323=$out_len;
      var $324=($323<<1);
      $out_len=$324;
      label = 101; break;
    case 101: 
      var $326=$out_data;
      var $327=(($326+1)|0);
      $out_data=$327;
      HEAP8[($326)]=-112;
      label = 102; break;
    case 102: 
      label = 120; break;
    case 103: 
      var $330=$out_data;
      var $331=((($330)-(1))|0);
      var $332=HEAP8[($331)];
      $in_byte=$332;
      label = 104; break;
    case 104: 
      var $334=$in_repeat;
      var $335=((($334)-(1))&255);
      $in_repeat=$335;
      var $336=(($335)&(255));
      var $337=(($336)|(0)) > 0;
      if ($337) { label = 105; break; } else { label = 119; break; }
    case 105: 
      label = 106; break;
    case 106: 
      var $340=$out_len_left;
      var $341=((($340)-(1))|0);
      $out_len_left=$341;
      var $342=(($341)|(0)) < 0;
      if ($342) { label = 107; break; } else { label = 117; break; }
    case 107: 
      var $344=$out_len;
      var $345=(($344)|(0)) > 1073741823;
      if ($345) { label = 108; break; } else { label = 109; break; }
    case 108: 
      var $347=_PyErr_NoMemory();
      $1=$347;
      label = 144; break;
    case 109: 
      var $349=$out_len;
      var $350=($349<<1);
      var $351=__PyString_Resize($rv, $350);
      var $352=(($351)|(0)) < 0;
      if ($352) { label = 110; break; } else { label = 116; break; }
    case 110: 
      label = 111; break;
    case 111: 
      var $355=HEAP32[(($rv)>>2)];
      var $356=(($355)|0);
      var $357=HEAP32[(($356)>>2)];
      var $358=((($357)-(1))|0);
      HEAP32[(($356)>>2)]=$358;
      var $359=(($358)|(0))!=0;
      if ($359) { label = 112; break; } else { label = 113; break; }
    case 112: 
      label = 114; break;
    case 113: 
      var $362=HEAP32[(($rv)>>2)];
      var $363=(($362+4)|0);
      var $364=HEAP32[(($363)>>2)];
      var $365=(($364+24)|0);
      var $366=HEAP32[(($365)>>2)];
      var $367=HEAP32[(($rv)>>2)];
      FUNCTION_TABLE[$366]($367);
      label = 114; break;
    case 114: 
      label = 115; break;
    case 115: 
      _PyBuffer_Release($pin);
      $1=0;
      label = 144; break;
    case 116: 
      var $371=HEAP32[(($rv)>>2)];
      var $372=$371;
      var $373=(($372+20)|0);
      var $374=(($373)|0);
      var $375=$out_len;
      var $376=(($374+$375)|0);
      $out_data=$376;
      var $377=$out_len;
      var $378=((($377)-(1))|0);
      $out_len_left=$378;
      var $379=$out_len;
      var $380=($379<<1);
      $out_len=$380;
      label = 117; break;
    case 117: 
      var $382=$in_byte;
      var $383=$out_data;
      var $384=(($383+1)|0);
      $out_data=$384;
      HEAP8[($383)]=$382;
      label = 118; break;
    case 118: 
      label = 104; break;
    case 119: 
      label = 120; break;
    case 120: 
      label = 135; break;
    case 121: 
      label = 122; break;
    case 122: 
      var $390=$out_len_left;
      var $391=((($390)-(1))|0);
      $out_len_left=$391;
      var $392=(($391)|(0)) < 0;
      if ($392) { label = 123; break; } else { label = 133; break; }
    case 123: 
      var $394=$out_len;
      var $395=(($394)|(0)) > 1073741823;
      if ($395) { label = 124; break; } else { label = 125; break; }
    case 124: 
      var $397=_PyErr_NoMemory();
      $1=$397;
      label = 144; break;
    case 125: 
      var $399=$out_len;
      var $400=($399<<1);
      var $401=__PyString_Resize($rv, $400);
      var $402=(($401)|(0)) < 0;
      if ($402) { label = 126; break; } else { label = 132; break; }
    case 126: 
      label = 127; break;
    case 127: 
      var $405=HEAP32[(($rv)>>2)];
      var $406=(($405)|0);
      var $407=HEAP32[(($406)>>2)];
      var $408=((($407)-(1))|0);
      HEAP32[(($406)>>2)]=$408;
      var $409=(($408)|(0))!=0;
      if ($409) { label = 128; break; } else { label = 129; break; }
    case 128: 
      label = 130; break;
    case 129: 
      var $412=HEAP32[(($rv)>>2)];
      var $413=(($412+4)|0);
      var $414=HEAP32[(($413)>>2)];
      var $415=(($414+24)|0);
      var $416=HEAP32[(($415)>>2)];
      var $417=HEAP32[(($rv)>>2)];
      FUNCTION_TABLE[$416]($417);
      label = 130; break;
    case 130: 
      label = 131; break;
    case 131: 
      _PyBuffer_Release($pin);
      $1=0;
      label = 144; break;
    case 132: 
      var $421=HEAP32[(($rv)>>2)];
      var $422=$421;
      var $423=(($422+20)|0);
      var $424=(($423)|0);
      var $425=$out_len;
      var $426=(($424+$425)|0);
      $out_data=$426;
      var $427=$out_len;
      var $428=((($427)-(1))|0);
      $out_len_left=$428;
      var $429=$out_len;
      var $430=($429<<1);
      $out_len=$430;
      label = 133; break;
    case 133: 
      var $432=$in_byte;
      var $433=$out_data;
      var $434=(($433+1)|0);
      $out_data=$434;
      HEAP8[($433)]=$432;
      label = 134; break;
    case 134: 
      label = 135; break;
    case 135: 
      label = 68; break;
    case 136: 
      var $438=$out_data;
      var $439=HEAP32[(($rv)>>2)];
      var $440=$439;
      var $441=(($440+20)|0);
      var $442=(($441)|0);
      var $443=$438;
      var $444=$442;
      var $445=((($443)-($444))|0);
      var $446=__PyString_Resize($rv, $445);
      var $447=(($446)|(0)) < 0;
      if ($447) { label = 137; break; } else { label = 143; break; }
    case 137: 
      label = 138; break;
    case 138: 
      var $450=HEAP32[(($rv)>>2)];
      var $451=(($450)|0);
      var $452=HEAP32[(($451)>>2)];
      var $453=((($452)-(1))|0);
      HEAP32[(($451)>>2)]=$453;
      var $454=(($453)|(0))!=0;
      if ($454) { label = 139; break; } else { label = 140; break; }
    case 139: 
      label = 141; break;
    case 140: 
      var $457=HEAP32[(($rv)>>2)];
      var $458=(($457+4)|0);
      var $459=HEAP32[(($458)>>2)];
      var $460=(($459+24)|0);
      var $461=HEAP32[(($460)>>2)];
      var $462=HEAP32[(($rv)>>2)];
      FUNCTION_TABLE[$461]($462);
      label = 141; break;
    case 141: 
      label = 142; break;
    case 142: 
      HEAP32[(($rv)>>2)]=0;
      label = 143; break;
    case 143: 
      _PyBuffer_Release($pin);
      var $466=HEAP32[(($rv)>>2)];
      $1=$466;
      label = 144; break;
    case 144: 
      var $468=$1;
      STACKTOP = __stackBase__;
      return $468;
    default: assert(0, "bad label: " + label);
  }
}
function _binascii_crc32($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $pbin=__stackBase__;
      var $bin_data;
      var $crc=(__stackBase__)+(52);
      var $len;
      var $result;
      $2=$self;
      $3=$args;
      HEAP32[(($crc)>>2)]=0;
      var $4=$3;
      var $5=__PyArg_ParseTuple_SizeT($4, ((__str29)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$pbin,HEAP32[(((tempInt)+(4))>>2)]=$crc,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 7; break;
    case 3: 
      var $9=(($pbin)|0);
      var $10=HEAP32[(($9)>>2)];
      $bin_data=$10;
      var $11=(($pbin+8)|0);
      var $12=HEAP32[(($11)>>2)];
      $len=$12;
      var $13=HEAP32[(($crc)>>2)];
      var $14=$13 ^ -1;
      HEAP32[(($crc)>>2)]=$14;
      label = 4; break;
    case 4: 
      var $16=$len;
      var $17=((($16)-(1))|0);
      $len=$17;
      var $18=(($16)|(0)) > 0;
      if ($18) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $20=HEAP32[(($crc)>>2)];
      var $21=$bin_data;
      var $22=(($21+1)|0);
      $bin_data=$22;
      var $23=HEAP8[($21)];
      var $24=(($23)&(255));
      var $25=$20 ^ $24;
      var $26=$25 & 255;
      var $27=((_crc_32_tab+($26<<2))|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=HEAP32[(($crc)>>2)];
      var $30=$29 >>> 8;
      var $31=$28 ^ $30;
      HEAP32[(($crc)>>2)]=$31;
      label = 4; break;
    case 6: 
      var $33=HEAP32[(($crc)>>2)];
      var $34=$33 ^ -1;
      $result=$34;
      _PyBuffer_Release($pbin);
      var $35=$result;
      var $36=_PyInt_FromLong($35);
      $1=$36;
      label = 7; break;
    case 7: 
      var $38=$1;
      STACKTOP = __stackBase__;
      return $38;
    default: assert(0, "bad label: " + label);
  }
}
function _binascii_a2b_qp($self, $args, $kwargs) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $in;
      var $out;
      var $ch;
      var $pdata=__stackBase__;
      var $data;
      var $odata;
      var $datalen;
      var $rv;
      var $header=(__stackBase__)+(52);
      $2=$self;
      $3=$args;
      $4=$kwargs;
      $datalen=0;
      HEAP32[(($header)>>2)]=0;
      var $5=$3;
      var $6=$4;
      var $7=__PyArg_ParseTupleAndKeywords_SizeT($5, $6, ((__str28)|0), ((_binascii_a2b_qp_kwlist)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$pdata,HEAP32[(((tempInt)+(4))>>2)]=$header,tempInt));
      var $8=(($7)|(0))!=0;
      if ($8) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 50; break;
    case 3: 
      var $11=(($pdata)|0);
      var $12=HEAP32[(($11)>>2)];
      $data=$12;
      var $13=(($pdata+8)|0);
      var $14=HEAP32[(($13)>>2)];
      $datalen=$14;
      var $15=$datalen;
      var $16=_PyMem_Malloc($15);
      $odata=$16;
      var $17=$odata;
      var $18=(($17)|(0))==0;
      if ($18) { label = 4; break; } else { label = 5; break; }
    case 4: 
      _PyBuffer_Release($pdata);
      var $20=_PyErr_NoMemory();
      $1=0;
      label = 50; break;
    case 5: 
      var $22=$odata;
      var $23=$datalen;
      _memset($22, 0, $23);
      $out=0;
      $in=0;
      label = 6; break;
    case 6: 
      var $25=$in;
      var $26=$datalen;
      var $27=(($25)|(0)) < (($26)|(0));
      if ($27) { label = 7; break; } else { label = 47; break; }
    case 7: 
      var $29=$in;
      var $30=$data;
      var $31=(($30+$29)|0);
      var $32=HEAP8[($31)];
      var $33=(($32)&(255));
      var $34=(($33)|(0))==61;
      if ($34) { label = 8; break; } else { label = 41; break; }
    case 8: 
      var $36=$in;
      var $37=((($36)+(1))|0);
      $in=$37;
      var $38=$in;
      var $39=$datalen;
      var $40=(($38)|(0)) >= (($39)|(0));
      if ($40) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 47; break;
    case 10: 
      var $43=$in;
      var $44=$data;
      var $45=(($44+$43)|0);
      var $46=HEAP8[($45)];
      var $47=(($46)&(255));
      var $48=(($47)|(0))==10;
      if ($48) { label = 12; break; } else { label = 11; break; }
    case 11: 
      var $50=$in;
      var $51=$data;
      var $52=(($51+$50)|0);
      var $53=HEAP8[($52)];
      var $54=(($53)&(255));
      var $55=(($54)|(0))==13;
      if ($55) { label = 12; break; } else { label = 22; break; }
    case 12: 
      var $57=$in;
      var $58=$data;
      var $59=(($58+$57)|0);
      var $60=HEAP8[($59)];
      var $61=(($60)&(255));
      var $62=(($61)|(0))!=10;
      if ($62) { label = 13; break; } else { label = 19; break; }
    case 13: 
      label = 14; break;
    case 14: 
      var $65=$in;
      var $66=$datalen;
      var $67=(($65)|(0)) < (($66)|(0));
      if ($67) { label = 15; break; } else { var $76 = 0;label = 16; break; }
    case 15: 
      var $69=$in;
      var $70=$data;
      var $71=(($70+$69)|0);
      var $72=HEAP8[($71)];
      var $73=(($72)&(255));
      var $74=(($73)|(0))!=10;
      var $76 = $74;label = 16; break;
    case 16: 
      var $76;
      if ($76) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $78=$in;
      var $79=((($78)+(1))|0);
      $in=$79;
      label = 14; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $82=$in;
      var $83=$datalen;
      var $84=(($82)|(0)) < (($83)|(0));
      if ($84) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $86=$in;
      var $87=((($86)+(1))|0);
      $in=$87;
      label = 21; break;
    case 21: 
      label = 40; break;
    case 22: 
      var $90=$in;
      var $91=$data;
      var $92=(($91+$90)|0);
      var $93=HEAP8[($92)];
      var $94=(($93)&(255));
      var $95=(($94)|(0))==61;
      if ($95) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $97=$out;
      var $98=((($97)+(1))|0);
      $out=$98;
      var $99=$odata;
      var $100=(($99+$97)|0);
      HEAP8[($100)]=61;
      var $101=$in;
      var $102=((($101)+(1))|0);
      $in=$102;
      label = 39; break;
    case 24: 
      var $104=$in;
      var $105=$data;
      var $106=(($105+$104)|0);
      var $107=HEAP8[($106)];
      var $108=(($107)&(255));
      var $109=(($108)|(0)) >= 65;
      if ($109) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $111=$in;
      var $112=$data;
      var $113=(($112+$111)|0);
      var $114=HEAP8[($113)];
      var $115=(($114)&(255));
      var $116=(($115)|(0)) <= 70;
      if ($116) { label = 30; break; } else { label = 26; break; }
    case 26: 
      var $118=$in;
      var $119=$data;
      var $120=(($119+$118)|0);
      var $121=HEAP8[($120)];
      var $122=(($121)&(255));
      var $123=(($122)|(0)) >= 97;
      if ($123) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $125=$in;
      var $126=$data;
      var $127=(($126+$125)|0);
      var $128=HEAP8[($127)];
      var $129=(($128)&(255));
      var $130=(($129)|(0)) <= 102;
      if ($130) { label = 30; break; } else { label = 28; break; }
    case 28: 
      var $132=$in;
      var $133=$data;
      var $134=(($133+$132)|0);
      var $135=HEAP8[($134)];
      var $136=(($135)&(255));
      var $137=(($136)|(0)) >= 48;
      if ($137) { label = 29; break; } else { label = 37; break; }
    case 29: 
      var $139=$in;
      var $140=$data;
      var $141=(($140+$139)|0);
      var $142=HEAP8[($141)];
      var $143=(($142)&(255));
      var $144=(($143)|(0)) <= 57;
      if ($144) { label = 30; break; } else { label = 37; break; }
    case 30: 
      var $146=$in;
      var $147=((($146)+(1))|0);
      var $148=$data;
      var $149=(($148+$147)|0);
      var $150=HEAP8[($149)];
      var $151=(($150)&(255));
      var $152=(($151)|(0)) >= 65;
      if ($152) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $154=$in;
      var $155=((($154)+(1))|0);
      var $156=$data;
      var $157=(($156+$155)|0);
      var $158=HEAP8[($157)];
      var $159=(($158)&(255));
      var $160=(($159)|(0)) <= 70;
      if ($160) { label = 36; break; } else { label = 32; break; }
    case 32: 
      var $162=$in;
      var $163=((($162)+(1))|0);
      var $164=$data;
      var $165=(($164+$163)|0);
      var $166=HEAP8[($165)];
      var $167=(($166)&(255));
      var $168=(($167)|(0)) >= 97;
      if ($168) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $170=$in;
      var $171=((($170)+(1))|0);
      var $172=$data;
      var $173=(($172+$171)|0);
      var $174=HEAP8[($173)];
      var $175=(($174)&(255));
      var $176=(($175)|(0)) <= 102;
      if ($176) { label = 36; break; } else { label = 34; break; }
    case 34: 
      var $178=$in;
      var $179=((($178)+(1))|0);
      var $180=$data;
      var $181=(($180+$179)|0);
      var $182=HEAP8[($181)];
      var $183=(($182)&(255));
      var $184=(($183)|(0)) >= 48;
      if ($184) { label = 35; break; } else { label = 37; break; }
    case 35: 
      var $186=$in;
      var $187=((($186)+(1))|0);
      var $188=$data;
      var $189=(($188+$187)|0);
      var $190=HEAP8[($189)];
      var $191=(($190)&(255));
      var $192=(($191)|(0)) <= 57;
      if ($192) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $194=$in;
      var $195=$data;
      var $196=(($195+$194)|0);
      var $197=HEAP8[($196)];
      var $198=(($197)&(255));
      var $199=((_table_hex+($198<<2))|0);
      var $200=HEAP32[(($199)>>2)];
      var $201=$200 << 4;
      var $202=(($201) & 255);
      $ch=$202;
      var $203=$in;
      var $204=((($203)+(1))|0);
      $in=$204;
      var $205=$in;
      var $206=$data;
      var $207=(($206+$205)|0);
      var $208=HEAP8[($207)];
      var $209=(($208)&(255));
      var $210=((_table_hex+($209<<2))|0);
      var $211=HEAP32[(($210)>>2)];
      var $212=$ch;
      var $213=(($212 << 24) >> 24);
      var $214=$213 | $211;
      var $215=(($214) & 255);
      $ch=$215;
      var $216=$in;
      var $217=((($216)+(1))|0);
      $in=$217;
      var $218=$ch;
      var $219=$out;
      var $220=((($219)+(1))|0);
      $out=$220;
      var $221=$odata;
      var $222=(($221+$219)|0);
      HEAP8[($222)]=$218;
      label = 38; break;
    case 37: 
      var $224=$out;
      var $225=((($224)+(1))|0);
      $out=$225;
      var $226=$odata;
      var $227=(($226+$224)|0);
      HEAP8[($227)]=61;
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      label = 46; break;
    case 41: 
      var $232=HEAP32[(($header)>>2)];
      var $233=(($232)|(0))!=0;
      if ($233) { label = 42; break; } else { label = 44; break; }
    case 42: 
      var $235=$in;
      var $236=$data;
      var $237=(($236+$235)|0);
      var $238=HEAP8[($237)];
      var $239=(($238)&(255));
      var $240=(($239)|(0))==95;
      if ($240) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $242=$out;
      var $243=((($242)+(1))|0);
      $out=$243;
      var $244=$odata;
      var $245=(($244+$242)|0);
      HEAP8[($245)]=32;
      var $246=$in;
      var $247=((($246)+(1))|0);
      $in=$247;
      label = 45; break;
    case 44: 
      var $249=$in;
      var $250=$data;
      var $251=(($250+$249)|0);
      var $252=HEAP8[($251)];
      var $253=$out;
      var $254=$odata;
      var $255=(($254+$253)|0);
      HEAP8[($255)]=$252;
      var $256=$in;
      var $257=((($256)+(1))|0);
      $in=$257;
      var $258=$out;
      var $259=((($258)+(1))|0);
      $out=$259;
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      label = 6; break;
    case 47: 
      var $263=$odata;
      var $264=$out;
      var $265=_PyString_FromStringAndSize($263, $264);
      $rv=$265;
      var $266=(($265)|(0))==0;
      if ($266) { label = 48; break; } else { label = 49; break; }
    case 48: 
      _PyBuffer_Release($pdata);
      var $268=$odata;
      _PyMem_Free($268);
      $1=0;
      label = 50; break;
    case 49: 
      _PyBuffer_Release($pdata);
      var $270=$odata;
      _PyMem_Free($270);
      var $271=$rv;
      $1=$271;
      label = 50; break;
    case 50: 
      var $273=$1;
      STACKTOP = __stackBase__;
      return $273;
    default: assert(0, "bad label: " + label);
  }
}
function _binascii_b2a_qp($self, $args, $kwargs) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 64)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $in;
      var $out;
      var $pdata=__stackBase__;
      var $data;
      var $odata;
      var $datalen;
      var $odatalen;
      var $rv;
      var $linelen;
      var $istext=(__stackBase__)+(52);
      var $quotetabs=(__stackBase__)+(56);
      var $header=(__stackBase__)+(60);
      var $ch;
      var $crlf;
      var $p;
      $2=$self;
      $3=$args;
      $4=$kwargs;
      $datalen=0;
      $odatalen=0;
      $linelen=0;
      HEAP32[(($istext)>>2)]=1;
      HEAP32[(($quotetabs)>>2)]=0;
      HEAP32[(($header)>>2)]=0;
      $crlf=0;
      var $5=$3;
      var $6=$4;
      var $7=__PyArg_ParseTupleAndKeywords_SizeT($5, $6, ((__str26)|0), ((_binascii_b2a_qp_kwlist)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$pdata,HEAP32[(((tempInt)+(4))>>2)]=$quotetabs,HEAP32[(((tempInt)+(8))>>2)]=$istext,HEAP32[(((tempInt)+(12))>>2)]=$header,tempInt));
      var $8=(($7)|(0))!=0;
      if ($8) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 125; break;
    case 3: 
      var $11=(($pdata)|0);
      var $12=HEAP32[(($11)>>2)];
      $data=$12;
      var $13=(($pdata+8)|0);
      var $14=HEAP32[(($13)>>2)];
      $datalen=$14;
      var $15=$data;
      var $16=$datalen;
      var $17=_memchr($15, 10, $16);
      $p=$17;
      var $18=$p;
      var $19=(($18)|(0))!=0;
      if ($19) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $21=$p;
      var $22=$data;
      var $23=(($21)>>>(0)) > (($22)>>>(0));
      if ($23) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $25=$p;
      var $26=((($25)-(1))|0);
      var $27=HEAP8[($26)];
      var $28=(($27)&(255));
      var $29=(($28)|(0))==13;
      if ($29) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $crlf=1;
      label = 7; break;
    case 7: 
      $in=0;
      label = 8; break;
    case 8: 
      var $33=$in;
      var $34=$datalen;
      var $35=(($33)|(0)) < (($34)|(0));
      if ($35) { label = 9; break; } else { label = 63; break; }
    case 9: 
      var $37=$in;
      var $38=$data;
      var $39=(($38+$37)|0);
      var $40=HEAP8[($39)];
      var $41=(($40)&(255));
      var $42=(($41)|(0)) > 126;
      if ($42) { label = 31; break; } else { label = 10; break; }
    case 10: 
      var $44=$in;
      var $45=$data;
      var $46=(($45+$44)|0);
      var $47=HEAP8[($46)];
      var $48=(($47)&(255));
      var $49=(($48)|(0))==61;
      if ($49) { label = 31; break; } else { label = 11; break; }
    case 11: 
      var $51=HEAP32[(($header)>>2)];
      var $52=(($51)|(0))!=0;
      if ($52) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $54=$in;
      var $55=$data;
      var $56=(($55+$54)|0);
      var $57=HEAP8[($56)];
      var $58=(($57)&(255));
      var $59=(($58)|(0))==95;
      if ($59) { label = 31; break; } else { label = 13; break; }
    case 13: 
      var $61=$in;
      var $62=$data;
      var $63=(($62+$61)|0);
      var $64=HEAP8[($63)];
      var $65=(($64)&(255));
      var $66=(($65)|(0))==46;
      if ($66) { label = 14; break; } else { label = 18; break; }
    case 14: 
      var $68=$linelen;
      var $69=(($68)|(0))==0;
      if ($69) { label = 15; break; } else { label = 18; break; }
    case 15: 
      var $71=$in;
      var $72=((($71)+(1))|0);
      var $73=$data;
      var $74=(($73+$72)|0);
      var $75=HEAP8[($74)];
      var $76=(($75)&(255));
      var $77=(($76)|(0))==10;
      if ($77) { label = 31; break; } else { label = 16; break; }
    case 16: 
      var $79=$in;
      var $80=((($79)+(1))|0);
      var $81=$data;
      var $82=(($81+$80)|0);
      var $83=HEAP8[($82)];
      var $84=(($83)&(255));
      var $85=(($84)|(0))==13;
      if ($85) { label = 31; break; } else { label = 17; break; }
    case 17: 
      var $87=$in;
      var $88=((($87)+(1))|0);
      var $89=$data;
      var $90=(($89+$88)|0);
      var $91=HEAP8[($90)];
      var $92=(($91)&(255));
      var $93=(($92)|(0))==0;
      if ($93) { label = 31; break; } else { label = 18; break; }
    case 18: 
      var $95=HEAP32[(($istext)>>2)];
      var $96=(($95)|(0))!=0;
      if ($96) { label = 21; break; } else { label = 19; break; }
    case 19: 
      var $98=$in;
      var $99=$data;
      var $100=(($99+$98)|0);
      var $101=HEAP8[($100)];
      var $102=(($101)&(255));
      var $103=(($102)|(0))==13;
      if ($103) { label = 31; break; } else { label = 20; break; }
    case 20: 
      var $105=$in;
      var $106=$data;
      var $107=(($106+$105)|0);
      var $108=HEAP8[($107)];
      var $109=(($108)&(255));
      var $110=(($109)|(0))==10;
      if ($110) { label = 31; break; } else { label = 21; break; }
    case 21: 
      var $112=$in;
      var $113=$data;
      var $114=(($113+$112)|0);
      var $115=HEAP8[($114)];
      var $116=(($115)&(255));
      var $117=(($116)|(0))==9;
      if ($117) { label = 23; break; } else { label = 22; break; }
    case 22: 
      var $119=$in;
      var $120=$data;
      var $121=(($120+$119)|0);
      var $122=HEAP8[($121)];
      var $123=(($122)&(255));
      var $124=(($123)|(0))==32;
      if ($124) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $126=$in;
      var $127=((($126)+(1))|0);
      var $128=$datalen;
      var $129=(($127)|(0))==(($128)|(0));
      if ($129) { label = 31; break; } else { label = 24; break; }
    case 24: 
      var $131=$in;
      var $132=$data;
      var $133=(($132+$131)|0);
      var $134=HEAP8[($133)];
      var $135=(($134)&(255));
      var $136=(($135)|(0)) < 33;
      if ($136) { label = 25; break; } else { label = 37; break; }
    case 25: 
      var $138=$in;
      var $139=$data;
      var $140=(($139+$138)|0);
      var $141=HEAP8[($140)];
      var $142=(($141)&(255));
      var $143=(($142)|(0))!=13;
      if ($143) { label = 26; break; } else { label = 37; break; }
    case 26: 
      var $145=$in;
      var $146=$data;
      var $147=(($146+$145)|0);
      var $148=HEAP8[($147)];
      var $149=(($148)&(255));
      var $150=(($149)|(0))!=10;
      if ($150) { label = 27; break; } else { label = 37; break; }
    case 27: 
      var $152=HEAP32[(($quotetabs)>>2)];
      var $153=(($152)|(0))!=0;
      if ($153) { label = 31; break; } else { label = 28; break; }
    case 28: 
      var $155=HEAP32[(($quotetabs)>>2)];
      var $156=(($155)|(0))!=0;
      if ($156) { label = 37; break; } else { label = 29; break; }
    case 29: 
      var $158=$in;
      var $159=$data;
      var $160=(($159+$158)|0);
      var $161=HEAP8[($160)];
      var $162=(($161)&(255));
      var $163=(($162)|(0))!=9;
      if ($163) { label = 30; break; } else { label = 37; break; }
    case 30: 
      var $165=$in;
      var $166=$data;
      var $167=(($166+$165)|0);
      var $168=HEAP8[($167)];
      var $169=(($168)&(255));
      var $170=(($169)|(0))!=32;
      if ($170) { label = 31; break; } else { label = 37; break; }
    case 31: 
      var $172=$linelen;
      var $173=((($172)+(3))|0);
      var $174=(($173)>>>(0)) >= 76;
      if ($174) { label = 32; break; } else { label = 36; break; }
    case 32: 
      $linelen=0;
      var $176=$crlf;
      var $177=(($176)|(0))!=0;
      if ($177) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $179=$odatalen;
      var $180=((($179)+(3))|0);
      $odatalen=$180;
      label = 35; break;
    case 34: 
      var $182=$odatalen;
      var $183=((($182)+(2))|0);
      $odatalen=$183;
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $186=$linelen;
      var $187=((($186)+(3))|0);
      $linelen=$187;
      var $188=$odatalen;
      var $189=((($188)+(3))|0);
      $odatalen=$189;
      var $190=$in;
      var $191=((($190)+(1))|0);
      $in=$191;
      label = 62; break;
    case 37: 
      var $193=HEAP32[(($istext)>>2)];
      var $194=(($193)|(0))!=0;
      if ($194) { label = 38; break; } else { label = 53; break; }
    case 38: 
      var $196=$in;
      var $197=$data;
      var $198=(($197+$196)|0);
      var $199=HEAP8[($198)];
      var $200=(($199)&(255));
      var $201=(($200)|(0))==10;
      if ($201) { label = 42; break; } else { label = 39; break; }
    case 39: 
      var $203=$in;
      var $204=((($203)+(1))|0);
      var $205=$datalen;
      var $206=(($204)|(0)) < (($205)|(0));
      if ($206) { label = 40; break; } else { label = 53; break; }
    case 40: 
      var $208=$in;
      var $209=$data;
      var $210=(($209+$208)|0);
      var $211=HEAP8[($210)];
      var $212=(($211)&(255));
      var $213=(($212)|(0))==13;
      if ($213) { label = 41; break; } else { label = 53; break; }
    case 41: 
      var $215=$in;
      var $216=((($215)+(1))|0);
      var $217=$data;
      var $218=(($217+$216)|0);
      var $219=HEAP8[($218)];
      var $220=(($219)&(255));
      var $221=(($220)|(0))==10;
      if ($221) { label = 42; break; } else { label = 53; break; }
    case 42: 
      $linelen=0;
      var $223=$in;
      var $224=(($223)|(0))!=0;
      if ($224) { label = 43; break; } else { label = 46; break; }
    case 43: 
      var $226=$in;
      var $227=((($226)-(1))|0);
      var $228=$data;
      var $229=(($228+$227)|0);
      var $230=HEAP8[($229)];
      var $231=(($230)&(255));
      var $232=(($231)|(0))==32;
      if ($232) { label = 45; break; } else { label = 44; break; }
    case 44: 
      var $234=$in;
      var $235=((($234)-(1))|0);
      var $236=$data;
      var $237=(($236+$235)|0);
      var $238=HEAP8[($237)];
      var $239=(($238)&(255));
      var $240=(($239)|(0))==9;
      if ($240) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $242=$odatalen;
      var $243=((($242)+(2))|0);
      $odatalen=$243;
      label = 46; break;
    case 46: 
      var $245=$crlf;
      var $246=(($245)|(0))!=0;
      if ($246) { label = 47; break; } else { label = 48; break; }
    case 47: 
      var $248=$odatalen;
      var $249=((($248)+(2))|0);
      $odatalen=$249;
      label = 49; break;
    case 48: 
      var $251=$odatalen;
      var $252=((($251)+(1))|0);
      $odatalen=$252;
      label = 49; break;
    case 49: 
      var $254=$in;
      var $255=$data;
      var $256=(($255+$254)|0);
      var $257=HEAP8[($256)];
      var $258=(($257)&(255));
      var $259=(($258)|(0))==13;
      if ($259) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $261=$in;
      var $262=((($261)+(2))|0);
      $in=$262;
      label = 52; break;
    case 51: 
      var $264=$in;
      var $265=((($264)+(1))|0);
      $in=$265;
      label = 52; break;
    case 52: 
      label = 61; break;
    case 53: 
      var $268=$in;
      var $269=((($268)+(1))|0);
      var $270=$datalen;
      var $271=(($269)|(0))!=(($270)|(0));
      if ($271) { label = 54; break; } else { label = 60; break; }
    case 54: 
      var $273=$in;
      var $274=((($273)+(1))|0);
      var $275=$data;
      var $276=(($275+$274)|0);
      var $277=HEAP8[($276)];
      var $278=(($277)&(255));
      var $279=(($278)|(0))!=10;
      if ($279) { label = 55; break; } else { label = 60; break; }
    case 55: 
      var $281=$linelen;
      var $282=((($281)+(1))|0);
      var $283=(($282)>>>(0)) >= 76;
      if ($283) { label = 56; break; } else { label = 60; break; }
    case 56: 
      $linelen=0;
      var $285=$crlf;
      var $286=(($285)|(0))!=0;
      if ($286) { label = 57; break; } else { label = 58; break; }
    case 57: 
      var $288=$odatalen;
      var $289=((($288)+(3))|0);
      $odatalen=$289;
      label = 59; break;
    case 58: 
      var $291=$odatalen;
      var $292=((($291)+(2))|0);
      $odatalen=$292;
      label = 59; break;
    case 59: 
      label = 60; break;
    case 60: 
      var $295=$linelen;
      var $296=((($295)+(1))|0);
      $linelen=$296;
      var $297=$odatalen;
      var $298=((($297)+(1))|0);
      $odatalen=$298;
      var $299=$in;
      var $300=((($299)+(1))|0);
      $in=$300;
      label = 61; break;
    case 61: 
      label = 62; break;
    case 62: 
      label = 8; break;
    case 63: 
      var $304=$odatalen;
      var $305=_PyMem_Malloc($304);
      $odata=$305;
      var $306=$odata;
      var $307=(($306)|(0))==0;
      if ($307) { label = 64; break; } else { label = 65; break; }
    case 64: 
      _PyBuffer_Release($pdata);
      var $309=_PyErr_NoMemory();
      $1=0;
      label = 125; break;
    case 65: 
      var $311=$odata;
      var $312=$odatalen;
      _memset($311, 0, $312);
      $linelen=0;
      $out=0;
      $in=0;
      label = 66; break;
    case 66: 
      var $314=$in;
      var $315=$datalen;
      var $316=(($314)|(0)) < (($315)|(0));
      if ($316) { label = 67; break; } else { label = 122; break; }
    case 67: 
      var $318=$in;
      var $319=$data;
      var $320=(($319+$318)|0);
      var $321=HEAP8[($320)];
      var $322=(($321)&(255));
      var $323=(($322)|(0)) > 126;
      if ($323) { label = 89; break; } else { label = 68; break; }
    case 68: 
      var $325=$in;
      var $326=$data;
      var $327=(($326+$325)|0);
      var $328=HEAP8[($327)];
      var $329=(($328)&(255));
      var $330=(($329)|(0))==61;
      if ($330) { label = 89; break; } else { label = 69; break; }
    case 69: 
      var $332=HEAP32[(($header)>>2)];
      var $333=(($332)|(0))!=0;
      if ($333) { label = 70; break; } else { label = 71; break; }
    case 70: 
      var $335=$in;
      var $336=$data;
      var $337=(($336+$335)|0);
      var $338=HEAP8[($337)];
      var $339=(($338)&(255));
      var $340=(($339)|(0))==95;
      if ($340) { label = 89; break; } else { label = 71; break; }
    case 71: 
      var $342=$in;
      var $343=$data;
      var $344=(($343+$342)|0);
      var $345=HEAP8[($344)];
      var $346=(($345)&(255));
      var $347=(($346)|(0))==46;
      if ($347) { label = 72; break; } else { label = 76; break; }
    case 72: 
      var $349=$linelen;
      var $350=(($349)|(0))==0;
      if ($350) { label = 73; break; } else { label = 76; break; }
    case 73: 
      var $352=$in;
      var $353=((($352)+(1))|0);
      var $354=$data;
      var $355=(($354+$353)|0);
      var $356=HEAP8[($355)];
      var $357=(($356)&(255));
      var $358=(($357)|(0))==10;
      if ($358) { label = 89; break; } else { label = 74; break; }
    case 74: 
      var $360=$in;
      var $361=((($360)+(1))|0);
      var $362=$data;
      var $363=(($362+$361)|0);
      var $364=HEAP8[($363)];
      var $365=(($364)&(255));
      var $366=(($365)|(0))==13;
      if ($366) { label = 89; break; } else { label = 75; break; }
    case 75: 
      var $368=$in;
      var $369=((($368)+(1))|0);
      var $370=$data;
      var $371=(($370+$369)|0);
      var $372=HEAP8[($371)];
      var $373=(($372)&(255));
      var $374=(($373)|(0))==0;
      if ($374) { label = 89; break; } else { label = 76; break; }
    case 76: 
      var $376=HEAP32[(($istext)>>2)];
      var $377=(($376)|(0))!=0;
      if ($377) { label = 79; break; } else { label = 77; break; }
    case 77: 
      var $379=$in;
      var $380=$data;
      var $381=(($380+$379)|0);
      var $382=HEAP8[($381)];
      var $383=(($382)&(255));
      var $384=(($383)|(0))==13;
      if ($384) { label = 89; break; } else { label = 78; break; }
    case 78: 
      var $386=$in;
      var $387=$data;
      var $388=(($387+$386)|0);
      var $389=HEAP8[($388)];
      var $390=(($389)&(255));
      var $391=(($390)|(0))==10;
      if ($391) { label = 89; break; } else { label = 79; break; }
    case 79: 
      var $393=$in;
      var $394=$data;
      var $395=(($394+$393)|0);
      var $396=HEAP8[($395)];
      var $397=(($396)&(255));
      var $398=(($397)|(0))==9;
      if ($398) { label = 81; break; } else { label = 80; break; }
    case 80: 
      var $400=$in;
      var $401=$data;
      var $402=(($401+$400)|0);
      var $403=HEAP8[($402)];
      var $404=(($403)&(255));
      var $405=(($404)|(0))==32;
      if ($405) { label = 81; break; } else { label = 82; break; }
    case 81: 
      var $407=$in;
      var $408=((($407)+(1))|0);
      var $409=$datalen;
      var $410=(($408)|(0))==(($409)|(0));
      if ($410) { label = 89; break; } else { label = 82; break; }
    case 82: 
      var $412=$in;
      var $413=$data;
      var $414=(($413+$412)|0);
      var $415=HEAP8[($414)];
      var $416=(($415)&(255));
      var $417=(($416)|(0)) < 33;
      if ($417) { label = 83; break; } else { label = 94; break; }
    case 83: 
      var $419=$in;
      var $420=$data;
      var $421=(($420+$419)|0);
      var $422=HEAP8[($421)];
      var $423=(($422)&(255));
      var $424=(($423)|(0))!=13;
      if ($424) { label = 84; break; } else { label = 94; break; }
    case 84: 
      var $426=$in;
      var $427=$data;
      var $428=(($427+$426)|0);
      var $429=HEAP8[($428)];
      var $430=(($429)&(255));
      var $431=(($430)|(0))!=10;
      if ($431) { label = 85; break; } else { label = 94; break; }
    case 85: 
      var $433=HEAP32[(($quotetabs)>>2)];
      var $434=(($433)|(0))!=0;
      if ($434) { label = 89; break; } else { label = 86; break; }
    case 86: 
      var $436=HEAP32[(($quotetabs)>>2)];
      var $437=(($436)|(0))!=0;
      if ($437) { label = 94; break; } else { label = 87; break; }
    case 87: 
      var $439=$in;
      var $440=$data;
      var $441=(($440+$439)|0);
      var $442=HEAP8[($441)];
      var $443=(($442)&(255));
      var $444=(($443)|(0))!=9;
      if ($444) { label = 88; break; } else { label = 94; break; }
    case 88: 
      var $446=$in;
      var $447=$data;
      var $448=(($447+$446)|0);
      var $449=HEAP8[($448)];
      var $450=(($449)&(255));
      var $451=(($450)|(0))!=32;
      if ($451) { label = 89; break; } else { label = 94; break; }
    case 89: 
      var $453=$linelen;
      var $454=((($453)+(3))|0);
      var $455=(($454)>>>(0)) >= 76;
      if ($455) { label = 90; break; } else { label = 93; break; }
    case 90: 
      var $457=$out;
      var $458=((($457)+(1))|0);
      $out=$458;
      var $459=$odata;
      var $460=(($459+$457)|0);
      HEAP8[($460)]=61;
      var $461=$crlf;
      var $462=(($461)|(0))!=0;
      if ($462) { label = 91; break; } else { label = 92; break; }
    case 91: 
      var $464=$out;
      var $465=((($464)+(1))|0);
      $out=$465;
      var $466=$odata;
      var $467=(($466+$464)|0);
      HEAP8[($467)]=13;
      label = 92; break;
    case 92: 
      var $469=$out;
      var $470=((($469)+(1))|0);
      $out=$470;
      var $471=$odata;
      var $472=(($471+$469)|0);
      HEAP8[($472)]=10;
      $linelen=0;
      label = 93; break;
    case 93: 
      var $474=$out;
      var $475=((($474)+(1))|0);
      $out=$475;
      var $476=$odata;
      var $477=(($476+$474)|0);
      HEAP8[($477)]=61;
      var $478=$in;
      var $479=$data;
      var $480=(($479+$478)|0);
      var $481=HEAP8[($480)];
      var $482=$out;
      var $483=$odata;
      var $484=(($483+$482)|0);
      var $485=_to_hex($481, $484);
      var $486=$out;
      var $487=((($486)+(2))|0);
      $out=$487;
      var $488=$in;
      var $489=((($488)+(1))|0);
      $in=$489;
      var $490=$linelen;
      var $491=((($490)+(3))|0);
      $linelen=$491;
      label = 121; break;
    case 94: 
      var $493=HEAP32[(($istext)>>2)];
      var $494=(($493)|(0))!=0;
      if ($494) { label = 95; break; } else { label = 109; break; }
    case 95: 
      var $496=$in;
      var $497=$data;
      var $498=(($497+$496)|0);
      var $499=HEAP8[($498)];
      var $500=(($499)&(255));
      var $501=(($500)|(0))==10;
      if ($501) { label = 99; break; } else { label = 96; break; }
    case 96: 
      var $503=$in;
      var $504=((($503)+(1))|0);
      var $505=$datalen;
      var $506=(($504)|(0)) < (($505)|(0));
      if ($506) { label = 97; break; } else { label = 109; break; }
    case 97: 
      var $508=$in;
      var $509=$data;
      var $510=(($509+$508)|0);
      var $511=HEAP8[($510)];
      var $512=(($511)&(255));
      var $513=(($512)|(0))==13;
      if ($513) { label = 98; break; } else { label = 109; break; }
    case 98: 
      var $515=$in;
      var $516=((($515)+(1))|0);
      var $517=$data;
      var $518=(($517+$516)|0);
      var $519=HEAP8[($518)];
      var $520=(($519)&(255));
      var $521=(($520)|(0))==10;
      if ($521) { label = 99; break; } else { label = 109; break; }
    case 99: 
      $linelen=0;
      var $523=$out;
      var $524=(($523)|(0))!=0;
      if ($524) { label = 100; break; } else { label = 103; break; }
    case 100: 
      var $526=$out;
      var $527=((($526)-(1))|0);
      var $528=$odata;
      var $529=(($528+$527)|0);
      var $530=HEAP8[($529)];
      var $531=(($530)&(255));
      var $532=(($531)|(0))==32;
      if ($532) { label = 102; break; } else { label = 101; break; }
    case 101: 
      var $534=$out;
      var $535=((($534)-(1))|0);
      var $536=$odata;
      var $537=(($536+$535)|0);
      var $538=HEAP8[($537)];
      var $539=(($538)&(255));
      var $540=(($539)|(0))==9;
      if ($540) { label = 102; break; } else { label = 103; break; }
    case 102: 
      var $542=$out;
      var $543=((($542)-(1))|0);
      var $544=$odata;
      var $545=(($544+$543)|0);
      var $546=HEAP8[($545)];
      $ch=$546;
      var $547=$out;
      var $548=((($547)-(1))|0);
      var $549=$odata;
      var $550=(($549+$548)|0);
      HEAP8[($550)]=61;
      var $551=$ch;
      var $552=$out;
      var $553=$odata;
      var $554=(($553+$552)|0);
      var $555=_to_hex($551, $554);
      var $556=$out;
      var $557=((($556)+(2))|0);
      $out=$557;
      label = 103; break;
    case 103: 
      var $559=$crlf;
      var $560=(($559)|(0))!=0;
      if ($560) { label = 104; break; } else { label = 105; break; }
    case 104: 
      var $562=$out;
      var $563=((($562)+(1))|0);
      $out=$563;
      var $564=$odata;
      var $565=(($564+$562)|0);
      HEAP8[($565)]=13;
      label = 105; break;
    case 105: 
      var $567=$out;
      var $568=((($567)+(1))|0);
      $out=$568;
      var $569=$odata;
      var $570=(($569+$567)|0);
      HEAP8[($570)]=10;
      var $571=$in;
      var $572=$data;
      var $573=(($572+$571)|0);
      var $574=HEAP8[($573)];
      var $575=(($574)&(255));
      var $576=(($575)|(0))==13;
      if ($576) { label = 106; break; } else { label = 107; break; }
    case 106: 
      var $578=$in;
      var $579=((($578)+(2))|0);
      $in=$579;
      label = 108; break;
    case 107: 
      var $581=$in;
      var $582=((($581)+(1))|0);
      $in=$582;
      label = 108; break;
    case 108: 
      label = 120; break;
    case 109: 
      var $585=$in;
      var $586=((($585)+(1))|0);
      var $587=$datalen;
      var $588=(($586)|(0))!=(($587)|(0));
      if ($588) { label = 110; break; } else { label = 115; break; }
    case 110: 
      var $590=$in;
      var $591=((($590)+(1))|0);
      var $592=$data;
      var $593=(($592+$591)|0);
      var $594=HEAP8[($593)];
      var $595=(($594)&(255));
      var $596=(($595)|(0))!=10;
      if ($596) { label = 111; break; } else { label = 115; break; }
    case 111: 
      var $598=$linelen;
      var $599=((($598)+(1))|0);
      var $600=(($599)>>>(0)) >= 76;
      if ($600) { label = 112; break; } else { label = 115; break; }
    case 112: 
      var $602=$out;
      var $603=((($602)+(1))|0);
      $out=$603;
      var $604=$odata;
      var $605=(($604+$602)|0);
      HEAP8[($605)]=61;
      var $606=$crlf;
      var $607=(($606)|(0))!=0;
      if ($607) { label = 113; break; } else { label = 114; break; }
    case 113: 
      var $609=$out;
      var $610=((($609)+(1))|0);
      $out=$610;
      var $611=$odata;
      var $612=(($611+$609)|0);
      HEAP8[($612)]=13;
      label = 114; break;
    case 114: 
      var $614=$out;
      var $615=((($614)+(1))|0);
      $out=$615;
      var $616=$odata;
      var $617=(($616+$614)|0);
      HEAP8[($617)]=10;
      $linelen=0;
      label = 115; break;
    case 115: 
      var $619=$linelen;
      var $620=((($619)+(1))|0);
      $linelen=$620;
      var $621=HEAP32[(($header)>>2)];
      var $622=(($621)|(0))!=0;
      if ($622) { label = 116; break; } else { label = 118; break; }
    case 116: 
      var $624=$in;
      var $625=$data;
      var $626=(($625+$624)|0);
      var $627=HEAP8[($626)];
      var $628=(($627)&(255));
      var $629=(($628)|(0))==32;
      if ($629) { label = 117; break; } else { label = 118; break; }
    case 117: 
      var $631=$out;
      var $632=((($631)+(1))|0);
      $out=$632;
      var $633=$odata;
      var $634=(($633+$631)|0);
      HEAP8[($634)]=95;
      var $635=$in;
      var $636=((($635)+(1))|0);
      $in=$636;
      label = 119; break;
    case 118: 
      var $638=$in;
      var $639=((($638)+(1))|0);
      $in=$639;
      var $640=$data;
      var $641=(($640+$638)|0);
      var $642=HEAP8[($641)];
      var $643=$out;
      var $644=((($643)+(1))|0);
      $out=$644;
      var $645=$odata;
      var $646=(($645+$643)|0);
      HEAP8[($646)]=$642;
      label = 119; break;
    case 119: 
      label = 120; break;
    case 120: 
      label = 121; break;
    case 121: 
      label = 66; break;
    case 122: 
      var $651=$odata;
      var $652=$out;
      var $653=_PyString_FromStringAndSize($651, $652);
      $rv=$653;
      var $654=(($653)|(0))==0;
      if ($654) { label = 123; break; } else { label = 124; break; }
    case 123: 
      _PyBuffer_Release($pdata);
      var $656=$odata;
      _PyMem_Free($656);
      $1=0;
      label = 125; break;
    case 124: 
      _PyBuffer_Release($pdata);
      var $658=$odata;
      _PyMem_Free($658);
      var $659=$rv;
      $1=$659;
      label = 125; break;
    case 125: 
      var $661=$1;
      STACKTOP = __stackBase__;
      return $661;
    default: assert(0, "bad label: " + label);
  }
}
function _to_hex($ch, $s) {
  var label = 0;
  var $1;
  var $2;
  var $uvalue;
  $1=$ch;
  $2=$s;
  var $3=$1;
  var $4=(($3)&(255));
  $uvalue=$4;
  var $5=$uvalue;
  var $6=((($5)>>>(0)))%(16);
  var $7=((__str27+$6)|0);
  var $8=HEAP8[($7)];
  var $9=$2;
  var $10=(($9+1)|0);
  HEAP8[($10)]=$8;
  var $11=$uvalue;
  var $12=Math.floor(((($11)>>>(0)))/(16));
  $uvalue=$12;
  var $13=$uvalue;
  var $14=((($13)>>>(0)))%(16);
  var $15=((__str27+$14)|0);
  var $16=HEAP8[($15)];
  var $17=$2;
  var $18=(($17)|0);
  HEAP8[($18)]=$16;
  return 0;
}
function _binascii_find_valid($s, $slen, $num) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $ret;
      var $c;
      var $b64val;
      $1=$s;
      $2=$slen;
      $3=$num;
      $ret=-1;
      label = 2; break;
    case 2: 
      var $5=$2;
      var $6=(($5)|(0)) > 0;
      if ($6) { label = 3; break; } else { var $11 = 0;label = 4; break; }
    case 3: 
      var $8=$ret;
      var $9=(($8)|(0))==-1;
      var $11 = $9;label = 4; break;
    case 4: 
      var $11;
      if ($11) { label = 5; break; } else { label = 11; break; }
    case 5: 
      var $13=$1;
      var $14=HEAP8[($13)];
      $c=$14;
      var $15=$c;
      var $16=(($15)&(255));
      var $17=$16 & 127;
      var $18=((_table_a2b_base64+$17)|0);
      var $19=HEAP8[($18)];
      $b64val=$19;
      var $20=$c;
      var $21=(($20)&(255));
      var $22=(($21)|(0)) <= 127;
      if ($22) { label = 6; break; } else { label = 10; break; }
    case 6: 
      var $24=$b64val;
      var $25=(($24)&(255));
      var $26=(($25)|(0))!=255;
      if ($26) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $28=$3;
      var $29=(($28)|(0))==0;
      if ($29) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $31=$1;
      var $32=HEAP8[($31)];
      var $33=(($32)&(255));
      $ret=$33;
      label = 9; break;
    case 9: 
      var $35=$3;
      var $36=((($35)-(1))|0);
      $3=$36;
      label = 10; break;
    case 10: 
      var $38=$1;
      var $39=(($38+1)|0);
      $1=$39;
      var $40=$2;
      var $41=((($40)-(1))|0);
      $2=$41;
      label = 2; break;
    case 11: 
      var $43=$ret;
      return $43;
    default: assert(0, "bad label: " + label);
  }
}
function _to_int($c) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $2=$c;
      var $3=$2;
      var $4=_isdigit($3);
      var $5=(($4)|(0))!=0;
      if ($5) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $7=$2;
      var $8=((($7)-(48))|0);
      $1=$8;
      label = 10; break;
    case 3: 
      var $10=$2;
      var $11=$10 & 255;
      var $12=(($11) & 255);
      var $13=(($12)&(255));
      var $14=((__Py_ctype_table+($13<<2))|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=$15 & 2;
      var $17=(($16)|(0))!=0;
      if ($17) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $19=$2;
      var $20=$19 & 255;
      var $21=(($20) & 255);
      var $22=(($21)&(255));
      var $23=((__Py_ctype_tolower+$22)|0);
      var $24=HEAP8[($23)];
      var $25=(($24)&(255));
      $2=$25;
      label = 5; break;
    case 5: 
      var $27=$2;
      var $28=(($27)|(0)) >= 97;
      if ($28) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $30=$2;
      var $31=(($30)|(0)) <= 102;
      if ($31) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $33=$2;
      var $34=((($33)-(97))|0);
      var $35=((($34)+(10))|0);
      $1=$35;
      label = 10; break;
    case 8: 
      label = 9; break;
    case 9: 
      $1=-1;
      label = 10; break;
    case 10: 
      var $39=$1;
      return $39;
    default: assert(0, "bad label: " + label);
  }
}
// EMSCRIPTEN_END_FUNCS
// EMSCRIPTEN_END_FUNCS
// Warning: printing of i64 values may be slightly rounded! No deep i64 math used, so precise i64 code not included
var i64Math = null;
// === Auto-generated postamble setup entry stuff ===
function run(args) {
  initRuntime();
}
Module['run'] = run;
// {{PRE_RUN_ADDITIONS}}
run();
// {{POST_RUN_ADDITIONS}}
  // {{MODULE_ADDITIONS}}
  return Module;
});
