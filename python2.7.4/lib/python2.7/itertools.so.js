// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
// Capture the output of this into a variable, if you want
(function(FUNCTION_TABLE_OFFSET, globalScope) {
  var Module = {};
  var args = [];
  Module.arguments = [];
// === Auto-generated preamble library stuff ===
//========================================
// Runtime essentials
//========================================
function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.pop();
    var func = callback.func;
    if (typeof func === 'number') {
      func = FUNCTION_TABLE[func];
    }
    func(callback.arg === undefined ? null : callback.arg);
  }
}
var __ATINIT__ = []; // functions called during startup
function initRuntime() {
  callRuntimeCallbacks(__ATINIT__);
}
// === Body ===
var _teeobject_doc;
var _teedataobject_type;
var _teedataobject_doc;
var _teecopy_doc;
var _tee_type;
var _tee_methods;
var _tee_doc;
var _takewhile_type;
var _takewhile_doc;
var _starmap_type;
var _starmap_doc;
var _repeat_type;
var _repeat_new_kwargs;
var _repeat_methods;
var _repeat_doc;
var _product_type;
var _product_new_kwlist;
var _product_doc;
var _permutations_type;
var _permutations_new_kwargs;
var _permutations_doc;
var _module_methods;
var _module_doc;
var _length_hint_doc;
var _iziplongest_type;
var _izip_type;
var _izip_longest_doc;
var _izip_doc;
var _islice_type;
var _islice_doc;
var _inititertools_typelist;
var _imap_type;
var _imap_doc;
var _ifilterfalse_type;
var _ifilterfalse_doc;
var _ifilter_type;
var _ifilter_doc;
var _groupby_type;
var _groupby_new_kwargs;
var _groupby_doc;
var _dropwhile_type;
var _dropwhile_doc;
var _cycle_type;
var _cycle_doc;
var _cwr_type;
var _cwr_new_kwargs;
var _cwr_doc;
var _count_type;
var _count_reduce_doc;
var _count_new_kwlist;
var _count_methods;
var _count_doc;
var _compress_type;
var _compress_new_kwargs;
var _compress_doc;
var _combinations_type;
var _combinations_new_kwargs;
var _combinations_doc;
var _chain_type;
var _chain_methods;
var _chain_from_iterable_doc;
var _chain_doc;
var __str96;
var __str95;
var __str94;
var __str93;
var __str92;
var __str91;
var __str90;
var __str9;
var __str89;
var __str88;
var __str87;
var __str86;
var __str85;
var __str84;
var __str83;
var __str82;
var __str81;
var __str80;
var __str8;
var __str79;
var __str78;
var __str77;
var __str76;
var __str75;
var __str74;
var __str73;
var __str72;
var __str71;
var __str70;
var __str7;
var __str69;
var __str68;
var __str67;
var __str66;
var __str65;
var __str64;
var __str63;
var __str62;
var __str61;
var __str60;
var __str6;
var __str59;
var __str58;
var __str57;
var __str56;
var __str55;
var __str54;
var __str53;
var __str52;
var __str51;
var __str50;
var __str5;
var __str49;
var __str48;
var __str47;
var __str46;
var __str45;
var __str44;
var __str43;
var __str42;
var __str41;
var __str40;
var __str4;
var __str39;
var __str38;
var __str37;
var __str36;
var __str35;
var __str34;
var __str33;
var __str32;
var __str31;
var __str30;
var __str3;
var __str29;
var __str28;
var __str27;
var __str26;
var __str25;
var __str24;
var __str23;
var __str22;
var __str21;
var __str20;
var __str2;
var __str19;
var __str18;
var __str17;
var __str16;
var __str15;
var __str14;
var __str13;
var __str12;
var __str11;
var __str10;
var __str1;
var __str;
var __grouper_type;
var ___func___teedataobject_getitem;
var ___func___product_next;
var ___func___product_new;
var ___func___permutations_next;
var ___func___izip_new;
var ___func___izip_longest_new;
var ___func___inititertools;
var ___func___cwr_next;
var ___func___count_nextlong;
var ___func___count_new;
var ___func___combinations_next;
var ___func____grouper_next;
_teeobject_doc=allocate([73,116,101,114,97,116,111,114,32,119,114,97,112,112,101,100,32,116,111,32,109,97,107,101,32,105,116,32,99,111,112,121,97,98,108,101,0,0,0,0], "i8", ALLOC_NORMAL);
_teedataobject_type=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,65,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_teedataobject_doc=allocate([68,97,116,97,32,99,111,110,116,97,105,110,101,114,32,99,111,109,109,111,110,32,116,111,32,109,117,108,116,105,112,108,101,32,116,101,101,32,111,98,106,101,99,116,115,46,0,0], "i8", ALLOC_NORMAL);
_teecopy_doc=allocate([82,101,116,117,114,110,115,32,97,110,32,105,110,100,101,112,101,110,100,101,110,116,32,105,116,101,114,97,116,111,114,46,0,0,0,0], "i8", ALLOC_NORMAL);
_tee_type=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,65,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_tee_methods=allocate([0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_tee_doc=allocate([116,101,101,40,105,116,101,114,97,98,108,101,44,32,110,61,50,41,32,45,45,62,32,116,117,112,108,101,32,111,102,32,110,32,105,110,100,101,112,101,110,100,101,110,116,32,105,116,101,114,97,116,111,114,115,46,0,0,0,0], "i8", ALLOC_NORMAL);
_takewhile_type=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,69,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_takewhile_doc=allocate([116,97,107,101,119,104,105,108,101,40,112,114,101,100,105,99,97,116,101,44,32,105,116,101,114,97,98,108,101,41,32,45,45,62,32,116,97,107,101,119,104,105,108,101,32,111,98,106,101,99,116,10,10,82,101,116,117,114,110,32,115,117,99,99,101,115,115,105,118,101,32,101,110,116,114,105,101,115,32,102,114,111,109,32,97,110,32,105,116,101,114,97,98,108,101,32,97,115,32,108,111,110,103,32,97,115,32,116,104,101,32,10,112,114,101,100,105,99,97,116,101,32,101,118,97,108,117,97,116,101,115,32,116,111,32,116,114,117,101,32,102,111,114,32,101,97,99,104,32,101,110,116,114,121,46,0], "i8", ALLOC_NORMAL);
_starmap_type=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,69,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_starmap_doc=allocate([115,116,97,114,109,97,112,40,102,117,110,99,116,105,111,110,44,32,115,101,113,117,101,110,99,101,41,32,45,45,62,32,115,116,97,114,109,97,112,32,111,98,106,101,99,116,10,10,82,101,116,117,114,110,32,97,110,32,105,116,101,114,97,116,111,114,32,119,104,111,115,101,32,118,97,108,117,101,115,32,97,114,101,32,114,101,116,117,114,110,101,100,32,102,114,111,109,32,116,104,101,32,102,117,110,99,116,105,111,110,32,101,118,97,108,117,97,116,101,100,10,119,105,116,104,32,97,32,97,114,103,117,109,101,110,116,32,116,117,112,108,101,32,116,97,107,101,110,32,102,114,111,109,32,116,104,101,32,103,105,118,101,110,32,115,101,113,117,101,110,99,101,46,0,0,0], "i8", ALLOC_NORMAL);
_repeat_type=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,69,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_repeat_new_kwargs=allocate([0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_repeat_methods=allocate([0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_repeat_doc=allocate([114,101,112,101,97,116,40,111,98,106,101,99,116,32,91,44,116,105,109,101,115,93,41,32,45,62,32,99,114,101,97,116,101,32,97,110,32,105,116,101,114,97,116,111,114,32,119,104,105,99,104,32,114,101,116,117,114,110,115,32,116,104,101,32,111,98,106,101,99,116,10,102,111,114,32,116,104,101,32,115,112,101,99,105,102,105,101,100,32,110,117,109,98,101,114,32,111,102,32,116,105,109,101,115,46,32,32,73,102,32,110,111,116,32,115,112,101,99,105,102,105,101,100,44,32,114,101,116,117,114,110,115,32,116,104,101,32,111,98,106,101,99,116,10,101,110,100,108,101,115,115,108,121,46,0,0], "i8", ALLOC_NORMAL);
_product_type=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,69,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_product_new_kwlist=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_product_doc=allocate([112,114,111,100,117,99,116,40,42,105,116,101,114,97,98,108,101,115,41,32,45,45,62,32,112,114,111,100,117,99,116,32,111,98,106,101,99,116,10,10,67,97,114,116,101,115,105,97,110,32,112,114,111,100,117,99,116,32,111,102,32,105,110,112,117,116,32,105,116,101,114,97,98,108,101,115,46,32,32,69,113,117,105,118,97,108,101,110,116,32,116,111,32,110,101,115,116,101,100,32,102,111,114,45,108,111,111,112,115,46,10,10,70,111,114,32,101,120,97,109,112,108,101,44,32,112,114,111,100,117,99,116,40,65,44,32,66,41,32,114,101,116,117,114,110,115,32,116,104,101,32,115,97,109,101,32,97,115,58,32,32,40,40,120,44,121,41,32,102,111,114,32,120,32,105,110,32,65,32,102,111,114,32,121,32,105,110,32,66,41,46,10,84,104,101,32,108,101,102,116,109,111,115,116,32,105,116,101,114,97,116,111,114,115,32,97,114,101,32,105,110,32,116,104,101,32,111,117,116,101,114,109,111,115,116,32,102,111,114,45,108,111,111,112,44,32,115,111,32,116,104,101,32,111,117,116,112,117,116,32,116,117,112,108,101,115,10,99,121,99,108,101,32,105,110,32,97,32,109,97,110,110,101,114,32,115,105,109,105,108,97,114,32,116,111,32,97,110,32,111,100,111,109,101,116,101,114,32,40,119,105,116,104,32,116,104,101,32,114,105,103,104,116,109,111,115,116,32,101,108,101,109,101,110,116,32,99,104,97,110,103,105,110,103,10,111,110,32,101,118,101,114,121,32,105,116,101,114,97,116,105,111,110,41,46,10,10,84,111,32,99,111,109,112,117,116,101,32,116,104,101,32,112,114,111,100,117,99,116,32,111,102,32,97,110,32,105,116,101,114,97,98,108,101,32,119,105,116,104,32,105,116,115,101,108,102,44,32,115,112,101,99,105,102,121,32,116,104,101,32,110,117,109,98,101,114,10,111,102,32,114,101,112,101,116,105,116,105,111,110,115,32,119,105,116,104,32,116,104,101,32,111,112,116,105,111,110,97,108,32,114,101,112,101,97,116,32,107,101,121,119,111,114,100,32,97,114,103,117,109,101,110,116,46,32,70,111,114,32,101,120,97,109,112,108,101,44,10,112,114,111,100,117,99,116,40,65,44,32,114,101,112,101,97,116,61,52,41,32,109,101,97,110,115,32,116,104,101,32,115,97,109,101,32,97,115,32,112,114,111,100,117,99,116,40,65,44,32,65,44,32,65,44,32,65,41,46,10,10,112,114,111,100,117,99,116,40,39,97,98,39,44,32,114,97,110,103,101,40,51,41,41,32,45,45,62,32,40,39,97,39,44,48,41,32,40,39,97,39,44,49,41,32,40,39,97,39,44,50,41,32,40,39,98,39,44,48,41,32,40,39,98,39,44,49,41,32,40,39,98,39,44,50,41,10,112,114,111,100,117,99,116,40,40,48,44,49,41,44,32,40,48,44,49,41,44,32,40,48,44,49,41,41,32,45,45,62,32,40,48,44,48,44,48,41,32,40,48,44,48,44,49,41,32,40,48,44,49,44,48,41,32,40,48,44,49,44,49,41,32,40,49,44,48,44,48,41,32,46,46,46,0,0,0], "i8", ALLOC_NORMAL);
_permutations_type=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,69,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_permutations_new_kwargs=allocate([0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_permutations_doc=allocate([112,101,114,109,117,116,97,116,105,111,110,115,40,105,116,101,114,97,98,108,101,91,44,32,114,93,41,32,45,45,62,32,112,101,114,109,117,116,97,116,105,111,110,115,32,111,98,106,101,99,116,10,10,82,101,116,117,114,110,32,115,117,99,99,101,115,115,105,118,101,32,114,45,108,101,110,103,116,104,32,112,101,114,109,117,116,97,116,105,111,110,115,32,111,102,32,101,108,101,109,101,110,116,115,32,105,110,32,116,104,101,32,105,116,101,114,97,98,108,101,46,10,10,112,101,114,109,117,116,97,116,105,111,110,115,40,114,97,110,103,101,40,51,41,44,32,50,41,32,45,45,62,32,40,48,44,49,41,44,32,40,48,44,50,41,44,32,40,49,44,48,41,44,32,40,49,44,50,41,44,32,40,50,44,48,41,44,32,40,50,44,49,41,0,0,0], "i8", ALLOC_NORMAL);
_module_methods=allocate([0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_module_doc=allocate([70,117,110,99,116,105,111,110,97,108,32,116,111,111,108,115,32,102,111,114,32,99,114,101,97,116,105,110,103,32,97,110,100,32,117,115,105,110,103,32,105,116,101,114,97,116,111,114,115,46,10,10,73,110,102,105,110,105,116,101,32,105,116,101,114,97,116,111,114,115,58,10,99,111,117,110,116,40,91,110,93,41,32,45,45,62,32,110,44,32,110,43,49,44,32,110,43,50,44,32,46,46,46,10,99,121,99,108,101,40,112,41,32,45,45,62,32,112,48,44,32,112,49,44,32,46,46,46,32,112,108,97,115,116,44,32,112,48,44,32,112,49,44,32,46,46,46,10,114,101,112,101,97,116,40,101,108,101,109,32,91,44,110,93,41,32,45,45,62,32,101,108,101,109,44,32,101,108,101,109,44,32,101,108,101,109,44,32,46,46,46,32,101,110,100,108,101,115,115,108,121,32,111,114,32,117,112,32,116,111,32,110,32,116,105,109,101,115,10,10,73,116,101,114,97,116,111,114,115,32,116,101,114,109,105,110,97,116,105,110,103,32,111,110,32,116,104,101,32,115,104,111,114,116,101,115,116,32,105,110,112,117,116,32,115,101,113,117,101,110,99,101,58,10,99,104,97,105,110,40,112,44,32,113,44,32,46,46,46,41,32,45,45,62,32,112,48,44,32,112,49,44,32,46,46,46,32,112,108,97,115,116,44,32,113,48,44,32,113,49,44,32,46,46,46,32,10,99,111,109,112,114,101,115,115,40,100,97,116,97,44,32,115,101,108,101,99,116,111,114,115,41,32,45,45,62,32,40,100,91,48,93,32,105,102,32,115,91,48,93,41,44,32,40,100,91,49,93,32,105,102,32,115,91,49,93,41,44,32,46,46,46,10,100,114,111,112,119,104,105,108,101,40,112,114,101,100,44,32,115,101,113,41,32,45,45,62,32,115,101,113,91,110,93,44,32,115,101,113,91,110,43,49,93,44,32,115,116,97,114,116,105,110,103,32,119,104,101,110,32,112,114,101,100,32,102,97,105,108,115,10,103,114,111,117,112,98,121,40,105,116,101,114,97,98,108,101,91,44,32,107,101,121,102,117,110,99,93,41,32,45,45,62,32,115,117,98,45,105,116,101,114,97,116,111,114,115,32,103,114,111,117,112,101,100,32,98,121,32,118,97,108,117,101,32,111,102,32,107,101,121,102,117,110,99,40,118,41,10,105,102,105,108,116,101,114,40,112,114,101,100,44,32,115,101,113,41,32,45,45,62,32,101,108,101,109,101,110,116,115,32,111,102,32,115,101,113,32,119,104,101,114,101,32,112,114,101,100,40,101,108,101,109,41,32,105,115,32,84,114,117,101,10,105,102,105,108,116,101,114,102,97,108,115,101,40,112,114,101,100,44,32,115,101,113,41,32,45,45,62,32,101,108,101,109,101,110,116,115,32,111,102,32,115,101,113,32,119,104,101,114,101,32,112,114,101,100,40,101,108,101,109,41,32,105,115,32,70,97,108,115,101,10,105,115,108,105,99,101,40,115,101,113,44,32,91,115,116,97,114,116,44,93,32,115,116,111,112,32,91,44,32,115,116,101,112,93,41,32,45,45,62,32,101,108,101,109,101,110,116,115,32,102,114,111,109,10,32,32,32,32,32,32,32,115,101,113,91,115,116,97,114,116,58,115,116,111,112,58,115,116,101,112,93,10,105,109,97,112,40,102,117,110,44,32,112,44,32,113,44,32,46,46,46,41,32,45,45,62,32,102,117,110,40,112,48,44,32,113,48,41,44,32,102,117,110,40,112,49,44,32,113,49,41,44,32,46,46,46,10,115,116,97,114,109,97,112,40,102,117,110,44,32,115,101,113,41,32,45,45,62,32,102,117,110,40,42,115,101,113,91,48,93,41,44,32,102,117,110,40,42,115,101,113,91,49,93,41,44,32,46,46,46,10,116,101,101,40,105,116,44,32,110,61,50,41,32,45,45,62,32,40,105,116,49,44,32,105,116,50,32,44,32,46,46,46,32,105,116,110,41,32,115,112,108,105,116,115,32,111,110,101,32,105,116,101,114,97,116,111,114,32,105,110,116,111,32,110,10,116,97,107,101,119,104,105,108,101,40,112,114,101,100,44,32,115,101,113,41,32,45,45,62,32,115,101,113,91,48,93,44,32,115,101,113,91,49,93,44,32,117,110,116,105,108,32,112,114,101,100,32,102,97,105,108,115,10,105,122,105,112,40,112,44,32,113,44,32,46,46,46,41,32,45,45,62,32,40,112,91,48,93,44,32,113,91,48,93,41,44,32,40,112,91,49,93,44,32,113,91,49,93,41,44,32,46,46,46,32,10,105,122,105,112,95,108,111,110,103,101,115,116,40,112,44,32,113,44,32,46,46,46,41,32,45,45,62,32,40,112,91,48,93,44,32,113,91,48,93,41,44,32,40,112,91,49,93,44,32,113,91,49,93,41,44,32,46,46,46,32,10,10,67,111,109,98,105,110,97,116,111,114,105,99,32,103,101,110,101,114,97,116,111,114,115,58,10,112,114,111,100,117,99,116,40,112,44,32,113,44,32,46,46,46,32,91,114,101,112,101,97,116,61,49,93,41,32,45,45,62,32,99,97,114,116,101,115,105,97,110,32,112,114,111,100,117,99,116,10,112,101,114,109,117,116,97,116,105,111,110,115,40,112,91,44,32,114,93,41,10,99,111,109,98,105,110,97,116,105,111,110,115,40,112,44,32,114,41,10,99,111,109,98,105,110,97,116,105,111,110,115,95,119,105,116,104,95,114,101,112,108,97,99,101,109,101,110,116,40,112,44,32,114,41,10,0], "i8", ALLOC_NORMAL);
_length_hint_doc=allocate([80,114,105,118,97,116,101,32,109,101,116,104,111,100,32,114,101,116,117,114,110,105,110,103,32,97,110,32,101,115,116,105,109,97,116,101,32,111,102,32,108,101,110,40,108,105,115,116,40,105,116,41,41,46,0,0], "i8", ALLOC_NORMAL);
_iziplongest_type=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,69,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_izip_type=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,69,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_izip_longest_doc=allocate([105,122,105,112,95,108,111,110,103,101,115,116,40,105,116,101,114,49,32,91,44,105,116,101,114,50,32,91,46,46,46,93,93,44,32,91,102,105,108,108,118,97,108,117,101,61,78,111,110,101,93,41,32,45,45,62,32,105,122,105,112,95,108,111,110,103,101,115,116,32,111,98,106,101,99,116,10,10,82,101,116,117,114,110,32,97,110,32,105,122,105,112,95,108,111,110,103,101,115,116,32,111,98,106,101,99,116,32,119,104,111,115,101,32,46,110,101,120,116,40,41,32,109,101,116,104,111,100,32,114,101,116,117,114,110,115,32,97,32,116,117,112,108,101,32,119,104,101,114,101,10,116,104,101,32,105,45,116,104,32,101,108,101,109,101,110,116,32,99,111,109,101,115,32,102,114,111,109,32,116,104,101,32,105,45,116,104,32,105,116,101,114,97,98,108,101,32,97,114,103,117,109,101,110,116,46,32,32,84,104,101,32,46,110,101,120,116,40,41,10,109,101,116,104,111,100,32,99,111,110,116,105,110,117,101,115,32,117,110,116,105,108,32,116,104,101,32,108,111,110,103,101,115,116,32,105,116,101,114,97,98,108,101,32,105,110,32,116,104,101,32,97,114,103,117,109,101,110,116,32,115,101,113,117,101,110,99,101,10,105,115,32,101,120,104,97,117,115,116,101,100,32,97,110,100,32,116,104,101,110,32,105,116,32,114,97,105,115,101,115,32,83,116,111,112,73,116,101,114,97,116,105,111,110,46,32,32,87,104,101,110,32,116,104,101,32,115,104,111,114,116,101,114,32,105,116,101,114,97,98,108,101,115,10,97,114,101,32,101,120,104,97,117,115,116,101,100,44,32,116,104,101,32,102,105,108,108,118,97,108,117,101,32,105,115,32,115,117,98,115,116,105,116,117,116,101,100,32,105,110,32,116,104,101,105,114,32,112,108,97,99,101,46,32,32,84,104,101,32,102,105,108,108,118,97,108,117,101,10,100,101,102,97,117,108,116,115,32,116,111,32,78,111,110,101,32,111,114,32,99,97,110,32,98,101,32,115,112,101,99,105,102,105,101,100,32,98,121,32,97,32,107,101,121,119,111,114,100,32,97,114,103,117,109,101,110,116,46,10,0], "i8", ALLOC_NORMAL);
_izip_doc=allocate([105,122,105,112,40,105,116,101,114,49,32,91,44,105,116,101,114,50,32,91,46,46,46,93,93,41,32,45,45,62,32,105,122,105,112,32,111,98,106,101,99,116,10,10,82,101,116,117,114,110,32,97,32,105,122,105,112,32,111,98,106,101,99,116,32,119,104,111,115,101,32,46,110,101,120,116,40,41,32,109,101,116,104,111,100,32,114,101,116,117,114,110,115,32,97,32,116,117,112,108,101,32,119,104,101,114,101,10,116,104,101,32,105,45,116,104,32,101,108,101,109,101,110,116,32,99,111,109,101,115,32,102,114,111,109,32,116,104,101,32,105,45,116,104,32,105,116,101,114,97,98,108,101,32,97,114,103,117,109,101,110,116,46,32,32,84,104,101,32,46,110,101,120,116,40,41,10,109,101,116,104,111,100,32,99,111,110,116,105,110,117,101,115,32,117,110,116,105,108,32,116,104,101,32,115,104,111,114,116,101,115,116,32,105,116,101,114,97,98,108,101,32,105,110,32,116,104,101,32,97,114,103,117,109,101,110,116,32,115,101,113,117,101,110,99,101,10,105,115,32,101,120,104,97,117,115,116,101,100,32,97,110,100,32,116,104,101,110,32,105,116,32,114,97,105,115,101,115,32,83,116,111,112,73,116,101,114,97,116,105,111,110,46,32,32,87,111,114,107,115,32,108,105,107,101,32,116,104,101,32,122,105,112,40,41,10,102,117,110,99,116,105,111,110,32,98,117,116,32,99,111,110,115,117,109,101,115,32,108,101,115,115,32,109,101,109,111,114,121,32,98,121,32,114,101,116,117,114,110,105,110,103,32,97,110,32,105,116,101,114,97,116,111,114,32,105,110,115,116,101,97,100,32,111,102,10,97,32,108,105,115,116,46,0,0,0], "i8", ALLOC_NORMAL);
_islice_type=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,69,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_islice_doc=allocate([105,115,108,105,99,101,40,105,116,101,114,97,98,108,101,44,32,91,115,116,97,114,116,44,93,32,115,116,111,112,32,91,44,32,115,116,101,112,93,41,32,45,45,62,32,105,115,108,105,99,101,32,111,98,106,101,99,116,10,10,82,101,116,117,114,110,32,97,110,32,105,116,101,114,97,116,111,114,32,119,104,111,115,101,32,110,101,120,116,40,41,32,109,101,116,104,111,100,32,114,101,116,117,114,110,115,32,115,101,108,101,99,116,101,100,32,118,97,108,117,101,115,32,102,114,111,109,32,97,110,10,105,116,101,114,97,98,108,101,46,32,32,73,102,32,115,116,97,114,116,32,105,115,32,115,112,101,99,105,102,105,101,100,44,32,119,105,108,108,32,115,107,105,112,32,97,108,108,32,112,114,101,99,101,100,105,110,103,32,101,108,101,109,101,110,116,115,59,10,111,116,104,101,114,119,105,115,101,44,32,115,116,97,114,116,32,100,101,102,97,117,108,116,115,32,116,111,32,122,101,114,111,46,32,32,83,116,101,112,32,100,101,102,97,117,108,116,115,32,116,111,32,111,110,101,46,32,32,73,102,10,115,112,101,99,105,102,105,101,100,32,97,115,32,97,110,111,116,104,101,114,32,118,97,108,117,101,44,32,115,116,101,112,32,100,101,116,101,114,109,105,110,101,115,32,104,111,119,32,109,97,110,121,32,118,97,108,117,101,115,32,97,114,101,32,10,115,107,105,112,112,101,100,32,98,101,116,119,101,101,110,32,115,117,99,99,101,115,115,105,118,101,32,99,97,108,108,115,46,32,32,87,111,114,107,115,32,108,105,107,101,32,97,32,115,108,105,99,101,40,41,32,111,110,32,97,32,108,105,115,116,10,98,117,116,32,114,101,116,117,114,110,115,32,97,110,32,105,116,101,114,97,116,111,114,46,0,0,0,0], "i8", ALLOC_NORMAL);
_inititertools_typelist=allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_imap_type=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,69,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_imap_doc=allocate([105,109,97,112,40,102,117,110,99,44,32,42,105,116,101,114,97,98,108,101,115,41,32,45,45,62,32,105,109,97,112,32,111,98,106,101,99,116,10,10,77,97,107,101,32,97,110,32,105,116,101,114,97,116,111,114,32,116,104,97,116,32,99,111,109,112,117,116,101,115,32,116,104,101,32,102,117,110,99,116,105,111,110,32,117,115,105,110,103,32,97,114,103,117,109,101,110,116,115,32,102,114,111,109,10,101,97,99,104,32,111,102,32,116,104,101,32,105,116,101,114,97,98,108,101,115,46,32,32,76,105,107,101,32,109,97,112,40,41,32,101,120,99,101,112,116,32,116,104,97,116,32,105,116,32,114,101,116,117,114,110,115,10,97,110,32,105,116,101,114,97,116,111,114,32,105,110,115,116,101,97,100,32,111,102,32,97,32,108,105,115,116,32,97,110,100,32,116,104,97,116,32,105,116,32,115,116,111,112,115,32,119,104,101,110,32,116,104,101,32,115,104,111,114,116,101,115,116,10,105,116,101,114,97,98,108,101,32,105,115,32,101,120,104,97,117,115,116,101,100,32,105,110,115,116,101,97,100,32,111,102,32,102,105,108,108,105,110,103,32,105,110,32,78,111,110,101,32,102,111,114,32,115,104,111,114,116,101,114,10,105,116,101,114,97,98,108,101,115,46,0,0,0,0], "i8", ALLOC_NORMAL);
_ifilterfalse_type=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,69,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_ifilterfalse_doc=allocate([105,102,105,108,116,101,114,102,97,108,115,101,40,102,117,110,99,116,105,111,110,32,111,114,32,78,111,110,101,44,32,115,101,113,117,101,110,99,101,41,32,45,45,62,32,105,102,105,108,116,101,114,102,97,108,115,101,32,111,98,106,101,99,116,10,10,82,101,116,117,114,110,32,116,104,111,115,101,32,105,116,101,109,115,32,111,102,32,115,101,113,117,101,110,99,101,32,102,111,114,32,119,104,105,99,104,32,102,117,110,99,116,105,111,110,40,105,116,101,109,41,32,105,115,32,102,97,108,115,101,46,10,73,102,32,102,117,110,99,116,105,111,110,32,105,115,32,78,111,110,101,44,32,114,101,116,117,114,110,32,116,104,101,32,105,116,101,109,115,32,116,104,97,116,32,97,114,101,32,102,97,108,115,101,46,0,0,0], "i8", ALLOC_NORMAL);
_ifilter_type=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,69,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_ifilter_doc=allocate([105,102,105,108,116,101,114,40,102,117,110,99,116,105,111,110,32,111,114,32,78,111,110,101,44,32,115,101,113,117,101,110,99,101,41,32,45,45,62,32,105,102,105,108,116,101,114,32,111,98,106,101,99,116,10,10,82,101,116,117,114,110,32,116,104,111,115,101,32,105,116,101,109,115,32,111,102,32,115,101,113,117,101,110,99,101,32,102,111,114,32,119,104,105,99,104,32,102,117,110,99,116,105,111,110,40,105,116,101,109,41,32,105,115,32,116,114,117,101,46,10,73,102,32,102,117,110,99,116,105,111,110,32,105,115,32,78,111,110,101,44,32,114,101,116,117,114,110,32,116,104,101,32,105,116,101,109,115,32,116,104,97,116,32,97,114,101,32,116,114,117,101,46,0,0,0], "i8", ALLOC_NORMAL);
_groupby_type=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,69,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_groupby_new_kwargs=allocate([0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_groupby_doc=allocate([103,114,111,117,112,98,121,40,105,116,101,114,97,98,108,101,91,44,32,107,101,121,102,117,110,99,93,41,32,45,62,32,99,114,101,97,116,101,32,97,110,32,105,116,101,114,97,116,111,114,32,119,104,105,99,104,32,114,101,116,117,114,110,115,10,40,107,101,121,44,32,115,117,98,45,105,116,101,114,97,116,111,114,41,32,103,114,111,117,112,101,100,32,98,121,32,101,97,99,104,32,118,97,108,117,101,32,111,102,32,107,101,121,40,118,97,108,117,101,41,46,10,0,0], "i8", ALLOC_NORMAL);
_dropwhile_type=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,69,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_dropwhile_doc=allocate([100,114,111,112,119,104,105,108,101,40,112,114,101,100,105,99,97,116,101,44,32,105,116,101,114,97,98,108,101,41,32,45,45,62,32,100,114,111,112,119,104,105,108,101,32,111,98,106,101,99,116,10,10,68,114,111,112,32,105,116,101,109,115,32,102,114,111,109,32,116,104,101,32,105,116,101,114,97,98,108,101,32,119,104,105,108,101,32,112,114,101,100,105,99,97,116,101,40,105,116,101,109,41,32,105,115,32,116,114,117,101,46,10,65,102,116,101,114,119,97,114,100,115,44,32,114,101,116,117,114,110,32,101,118,101,114,121,32,101,108,101,109,101,110,116,32,117,110,116,105,108,32,116,104,101,32,105,116,101,114,97,98,108,101,32,105,115,32,101,120,104,97,117,115,116,101,100,46,0,0], "i8", ALLOC_NORMAL);
_cycle_type=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,69,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_cycle_doc=allocate([99,121,99,108,101,40,105,116,101,114,97,98,108,101,41,32,45,45,62,32,99,121,99,108,101,32,111,98,106,101,99,116,10,10,82,101,116,117,114,110,32,101,108,101,109,101,110,116,115,32,102,114,111,109,32,116,104,101,32,105,116,101,114,97,98,108,101,32,117,110,116,105,108,32,105,116,32,105,115,32,101,120,104,97,117,115,116,101,100,46,10,84,104,101,110,32,114,101,112,101,97,116,32,116,104,101,32,115,101,113,117,101,110,99,101,32,105,110,100,101,102,105,110,105,116,101,108,121,46,0,0,0], "i8", ALLOC_NORMAL);
_cwr_type=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,69,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_cwr_new_kwargs=allocate([0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_cwr_doc=allocate([99,111,109,98,105,110,97,116,105,111,110,115,95,119,105,116,104,95,114,101,112,108,97,99,101,109,101,110,116,40,105,116,101,114,97,98,108,101,44,32,114,41,32,45,45,62,32,99,111,109,98,105,110,97,116,105,111,110,115,95,119,105,116,104,95,114,101,112,108,97,99,101,109,101,110,116,32,111,98,106,101,99,116,10,10,82,101,116,117,114,110,32,115,117,99,99,101,115,115,105,118,101,32,114,45,108,101,110,103,116,104,32,99,111,109,98,105,110,97,116,105,111,110,115,32,111,102,32,101,108,101,109,101,110,116,115,32,105,110,32,116,104,101,32,105,116,101,114,97,98,108,101,10,97,108,108,111,119,105,110,103,32,105,110,100,105,118,105,100,117,97,108,32,101,108,101,109,101,110,116,115,32,116,111,32,104,97,118,101,32,115,117,99,99,101,115,115,105,118,101,32,114,101,112,101,97,116,115,46,10,99,111,109,98,105,110,97,116,105,111,110,115,95,119,105,116,104,95,114,101,112,108,97,99,101,109,101,110,116,40,39,65,66,67,39,44,32,50,41,32,45,45,62,32,65,65,32,65,66,32,65,67,32,66,66,32,66,67,32,67,67,0], "i8", ALLOC_NORMAL);
_count_type=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,69,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_count_reduce_doc=allocate([82,101,116,117,114,110,32,115,116,97,116,101,32,105,110,102,111,114,109,97,116,105,111,110,32,102,111,114,32,112,105,99,107,108,105,110,103,46,0,0], "i8", ALLOC_NORMAL);
_count_new_kwlist=allocate([0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_count_methods=allocate([0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_count_doc=allocate([99,111,117,110,116,40,115,116,97,114,116,61,48,44,32,115,116,101,112,61,49,41,32,45,45,62,32,99,111,117,110,116,32,111,98,106,101,99,116,10,10,82,101,116,117,114,110,32,97,32,99,111,117,110,116,32,111,98,106,101,99,116,32,119,104,111,115,101,32,46,110,101,120,116,40,41,32,109,101,116,104,111,100,32,114,101,116,117,114,110,115,32,99,111,110,115,101,99,117,116,105,118,101,32,118,97,108,117,101,115,46,10,69,113,117,105,118,97,108,101,110,116,32,116,111,58,10,10,32,32,32,32,100,101,102,32,99,111,117,110,116,40,102,105,114,115,116,118,97,108,61,48,44,32,115,116,101,112,61,49,41,58,10,32,32,32,32,120,32,61,32,102,105,114,115,116,118,97,108,10,32,32,32,32,119,104,105,108,101,32,49,58,10,32,32,32,32,32,32,32,32,121,105,101,108,100,32,120,10,32,32,32,32,32,32,32,32,120,32,43,61,32,115,116,101,112,10,0], "i8", ALLOC_NORMAL);
_compress_type=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,69,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_compress_new_kwargs=allocate([0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_compress_doc=allocate([99,111,109,112,114,101,115,115,40,100,97,116,97,44,32,115,101,108,101,99,116,111,114,115,41,32,45,45,62,32,105,116,101,114,97,116,111,114,32,111,118,101,114,32,115,101,108,101,99,116,101,100,32,100,97,116,97,10,10,82,101,116,117,114,110,32,100,97,116,97,32,101,108,101,109,101,110,116,115,32,99,111,114,114,101,115,112,111,110,100,105,110,103,32,116,111,32,116,114,117,101,32,115,101,108,101,99,116,111,114,32,101,108,101,109,101,110,116,115,46,10,70,111,114,109,115,32,97,32,115,104,111,114,116,101,114,32,105,116,101,114,97,116,111,114,32,102,114,111,109,32,115,101,108,101,99,116,101,100,32,100,97,116,97,32,101,108,101,109,101,110,116,115,32,117,115,105,110,103,32,116,104,101,10,115,101,108,101,99,116,111,114,115,32,116,111,32,99,104,111,111,115,101,32,116,104,101,32,100,97,116,97,32,101,108,101,109,101,110,116,115,46,0,0], "i8", ALLOC_NORMAL);
_combinations_type=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,69,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_combinations_new_kwargs=allocate([0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_combinations_doc=allocate([99,111,109,98,105,110,97,116,105,111,110,115,40,105,116,101,114,97,98,108,101,44,32,114,41,32,45,45,62,32,99,111,109,98,105,110,97,116,105,111,110,115,32,111,98,106,101,99,116,10,10,82,101,116,117,114,110,32,115,117,99,99,101,115,115,105,118,101,32,114,45,108,101,110,103,116,104,32,99,111,109,98,105,110,97,116,105,111,110,115,32,111,102,32,101,108,101,109,101,110,116,115,32,105,110,32,116,104,101,32,105,116,101,114,97,98,108,101,46,10,10,99,111,109,98,105,110,97,116,105,111,110,115,40,114,97,110,103,101,40,52,41,44,32,51,41,32,45,45,62,32,40,48,44,49,44,50,41,44,32,40,48,44,49,44,51,41,44,32,40,48,44,50,44,51,41,44,32,40,49,44,50,44,51,41,0,0,0], "i8", ALLOC_NORMAL);
_chain_type=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,69,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_chain_methods=allocate([0,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_chain_from_iterable_doc=allocate([99,104,97,105,110,46,102,114,111,109,95,105,116,101,114,97,98,108,101,40,105,116,101,114,97,98,108,101,41,32,45,45,62,32,99,104,97,105,110,32,111,98,106,101,99,116,10,10,65,108,116,101,114,110,97,116,101,32,99,104,97,105,110,40,41,32,99,111,110,116,114,117,99,116,111,114,32,116,97,107,105,110,103,32,97,32,115,105,110,103,108,101,32,105,116,101,114,97,98,108,101,32,97,114,103,117,109,101,110,116,10,116,104,97,116,32,101,118,97,108,117,97,116,101,115,32,108,97,122,105,108,121,46,0,0,0], "i8", ALLOC_NORMAL);
_chain_doc=allocate([99,104,97,105,110,40,42,105,116,101,114,97,98,108,101,115,41,32,45,45,62,32,99,104,97,105,110,32,111,98,106,101,99,116,10,10,82,101,116,117,114,110,32,97,32,99,104,97,105,110,32,111,98,106,101,99,116,32,119,104,111,115,101,32,46,110,101,120,116,40,41,32,109,101,116,104,111,100,32,114,101,116,117,114,110,115,32,101,108,101,109,101,110,116,115,32,102,114,111,109,32,116,104,101,10,102,105,114,115,116,32,105,116,101,114,97,98,108,101,32,117,110,116,105,108,32,105,116,32,105,115,32,101,120,104,97,117,115,116,101,100,44,32,116,104,101,110,32,101,108,101,109,101,110,116,115,32,102,114,111,109,32,116,104,101,32,110,101,120,116,10,105,116,101,114,97,98,108,101,44,32,117,110,116,105,108,32,97,108,108,32,111,102,32,116,104,101,32,105,116,101,114,97,98,108,101,115,32,97,114,101,32,101,120,104,97,117,115,116,101,100,46,0,0], "i8", ALLOC_NORMAL);
__str96=allocate([79,110,58,99,111,109,98,105,110,97,116,105,111,110,115,0], "i8", ALLOC_NORMAL);
__str95=allocate([105,116,101,114,116,111,111,108,115,46,99,111,109,98,105,110,97,116,105,111,110,115,0,0], "i8", ALLOC_NORMAL);
__str94=allocate([79,110,58,99,111,109,98,105,110,97,116,105,111,110,115,95,119,105,116,104,95,114,101,112,108,97,99,101,109,101,110,116,0,0,0,0], "i8", ALLOC_NORMAL);
__str93=allocate([105,116,101,114,116,111,111,108,115,46,99,111,109,98,105,110,97,116,105,111,110,115,95,119,105,116,104,95,114,101,112,108,97,99,101,109,101,110,116,0], "i8", ALLOC_NORMAL);
__str92=allocate([99,121,99,108,101,0,0,0], "i8", ALLOC_NORMAL);
__str91=allocate([99,121,99,108,101,40,41,0], "i8", ALLOC_NORMAL);
__str90=allocate([105,116,101,114,116,111,111,108,115,46,99,121,99,108,101,0], "i8", ALLOC_NORMAL);
__str9=allocate([105,32,60,32,76,73,78,75,67,69,76,76,83,0,0,0], "i8", ALLOC_NORMAL);
__str89=allocate([100,114,111,112,119,104,105,108,101,0,0,0], "i8", ALLOC_NORMAL);
__str88=allocate([100,114,111,112,119,104,105,108,101,40,41,0], "i8", ALLOC_NORMAL);
__str87=allocate([105,116,101,114,116,111,111,108,115,46,100,114,111,112,119,104,105,108,101,0], "i8", ALLOC_NORMAL);
__str86=allocate([116,97,107,101,119,104,105,108,101,0,0,0], "i8", ALLOC_NORMAL);
__str85=allocate([116,97,107,101,119,104,105,108,101,40,41,0], "i8", ALLOC_NORMAL);
__str84=allocate([105,116,101,114,116,111,111,108,115,46,116,97,107,101,119,104,105,108,101,0], "i8", ALLOC_NORMAL);
__str83=allocate([83,116,101,112,32,102,111,114,32,105,115,108,105,99,101,40,41,32,109,117,115,116,32,98,101,32,97,32,112,111,115,105,116,105,118,101,32,105,110,116,101,103,101,114,32,111,114,32,78,111,110,101,46,0,0,0], "i8", ALLOC_NORMAL);
__str82=allocate([73,110,100,105,99,101,115,32,102,111,114,32,105,115,108,105,99,101,40,41,32,109,117,115,116,32,98,101,32,78,111,110,101,32,111,114,32,97,110,32,105,110,116,101,103,101,114,58,32,48,32,60,61,32,120,32,60,61,32,109,97,120,105,110,116,46,0,0], "i8", ALLOC_NORMAL);
__str81=allocate([83,116,111,112,32,97,114,103,117,109,101,110,116,32,102,111,114,32,105,115,108,105,99,101,40,41,32,109,117,115,116,32,98,101,32,78,111,110,101,32,111,114,32,97,110,32,105,110,116,101,103,101,114,58,32,48,32,60,61,32,120,32,60,61,32,109,97,120,105,110,116,46,0,0,0,0], "i8", ALLOC_NORMAL);
__str80=allocate([105,115,108,105,99,101,0,0], "i8", ALLOC_NORMAL);
__str8=allocate([95,95,99,111,112,121,95,95,0,0,0,0], "i8", ALLOC_NORMAL);
__str79=allocate([105,115,108,105,99,101,40,41,0,0,0,0], "i8", ALLOC_NORMAL);
__str78=allocate([105,116,101,114,116,111,111,108,115,46,105,115,108,105,99,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str77=allocate([115,116,97,114,109,97,112,0], "i8", ALLOC_NORMAL);
__str76=allocate([115,116,97,114,109,97,112,40,41,0,0,0], "i8", ALLOC_NORMAL);
__str75=allocate([105,116,101,114,116,111,111,108,115,46,115,116,97,114,109,97,112,0,0,0], "i8", ALLOC_NORMAL);
__str74=allocate([105,109,97,112,40,41,32,109,117,115,116,32,104,97,118,101,32,97,116,32,108,101,97,115,116,32,116,119,111,32,97,114,103,117,109,101,110,116,115,46,0,0,0,0], "i8", ALLOC_NORMAL);
__str73=allocate([105,109,97,112,40,41,0,0], "i8", ALLOC_NORMAL);
__str72=allocate([105,116,101,114,116,111,111,108,115,46,105,109,97,112,0,0], "i8", ALLOC_NORMAL);
__str71=allocate([102,114,111,109,95,105,116,101,114,97,98,108,101,0,0,0], "i8", ALLOC_NORMAL);
__str70=allocate([99,104,97,105,110,40,41,0], "i8", ALLOC_NORMAL);
__str7=allocate([116,101,101,0], "i8", ALLOC_NORMAL);
__str69=allocate([105,116,101,114,116,111,111,108,115,46,99,104,97,105,110,0], "i8", ALLOC_NORMAL);
__str68=allocate([79,79,58,99,111,109,112,114,101,115,115,0], "i8", ALLOC_NORMAL);
__str67=allocate([115,101,108,101,99,116,111,114,115,0,0,0], "i8", ALLOC_NORMAL);
__str66=allocate([100,97,116,97,0,0,0,0], "i8", ALLOC_NORMAL);
__str65=allocate([105,116,101,114,116,111,111,108,115,46,99,111,109,112,114,101,115,115,0,0], "i8", ALLOC_NORMAL);
__str64=allocate([105,102,105,108,116,101,114,0], "i8", ALLOC_NORMAL);
__str63=allocate([105,102,105,108,116,101,114,40,41,0,0,0], "i8", ALLOC_NORMAL);
__str62=allocate([105,116,101,114,116,111,111,108,115,46,105,102,105,108,116,101,114,0,0,0], "i8", ALLOC_NORMAL);
__str61=allocate([105,102,105,108,116,101,114,102,97,108,115,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str60=allocate([105,102,105,108,116,101,114,102,97,108,115,101,40,41,0,0], "i8", ALLOC_NORMAL);
__str6=allocate([105,116,101,114,116,111,111,108,115,46,116,101,101,0,0,0], "i8", ALLOC_NORMAL);
__str59=allocate([105,116,101,114,116,111,111,108,115,46,105,102,105,108,116,101,114,102,97,108,115,101,0,0], "i8", ALLOC_NORMAL);
__str58=allocate([99,111,117,110,116,40,37,115,44,32,37,115,41,0,0,0], "i8", ALLOC_NORMAL);
__str57=allocate([99,111,117,110,116,40,37,115,41,0,0,0], "i8", ALLOC_NORMAL);
__str56=allocate([99,111,117,110,116,40,37,122,100,41,0,0], "i8", ALLOC_NORMAL);
__str55=allocate([108,122,45,62,99,110,116,32,61,61,32,80,89,95,83,83,73,90,69,95,84,95,77,65,88,32,38,38,32,108,111,110,103,95,99,110,116,32,33,61,32,78,85,76,76,0,0,0], "i8", ALLOC_NORMAL);
__str54=allocate([79,40,110,41,0,0,0,0], "i8", ALLOC_NORMAL);
__str53=allocate([79,40,79,79,41,0,0,0], "i8", ALLOC_NORMAL);
__str52=allocate([95,95,114,101,100,117,99,101,95,95,0,0], "i8", ALLOC_NORMAL);
__str51=allocate([115,108,111,119,95,109,111,100,101,32,124,124,32,40,80,121,73,110,116,95,67,104,101,99,107,40,108,111,110,103,95,115,116,101,112,41,32,38,38,32,80,121,73,110,116,95,65,83,95,76,79,78,71,40,108,111,110,103,95,115,116,101,112,41,32,61,61,32,49,41,0,0], "i8", ALLOC_NORMAL);
__str50=allocate([40,99,110,116,32,33,61,32,80,89,95,83,83,73,90,69,95,84,95,77,65,88,32,38,38,32,108,111,110,103,95,99,110,116,32,61,61,32,78,85,76,76,32,38,38,32,33,115,108,111,119,95,109,111,100,101,41,32,124,124,32,40,99,110,116,32,61,61,32,80,89,95,83,83,73,90,69,95,84,95,77,65,88,32,38,38,32,108,111,110,103,95,99,110,116,32,33,61,32,78,85,76,76,32,38,38,32,115,108,111,119,95,109,111,100,101,41,0,0,0], "i8", ALLOC_NORMAL);
__str5=allocate([103,98,111,45,62,99,117,114,114,107,101,121,32,33,61,32,78,85,76,76,0,0,0,0], "i8", ALLOC_NORMAL);
__str49=allocate([108,111,110,103,95,99,110,116,32,33,61,32,78,85,76,76,32,38,38,32,108,111,110,103,95,115,116,101,112,32,33,61,32,78,85,76,76,0,0,0], "i8", ALLOC_NORMAL);
__str48=allocate([97,32,110,117,109,98,101,114,32,105,115,32,114,101,113,117,105,114,101,100,0,0,0,0], "i8", ALLOC_NORMAL);
__str47=allocate([124,79,79,58,99,111,117,110,116,0,0,0], "i8", ALLOC_NORMAL);
__str46=allocate([115,116,101,112,0,0,0,0], "i8", ALLOC_NORMAL);
__str45=allocate([115,116,97,114,116,0,0,0], "i8", ALLOC_NORMAL);
__str44=allocate([105,116,101,114,116,111,111,108,115,46,99,111,117,110,116,0], "i8", ALLOC_NORMAL);
__str43=allocate([105,122,105,112,32,97,114,103,117,109,101,110,116,32,35,37,122,100,32,109,117,115,116,32,115,117,112,112,111,114,116,32,105,116,101,114,97,116,105,111,110,0,0,0], "i8", ALLOC_NORMAL);
__str42=allocate([105,122,105,112,40,41,0,0], "i8", ALLOC_NORMAL);
__str41=allocate([105,116,101,114,116,111,111,108,115,46,105,122,105,112,0,0], "i8", ALLOC_NORMAL);
__str40=allocate([105,122,105,112,95,108,111,110,103,101,115,116,32,97,114,103,117,109,101,110,116,32,35,37,122,100,32,109,117,115,116,32,115,117,112,112,111,114,116,32,105,116,101,114,97,116,105,111,110,0,0,0], "i8", ALLOC_NORMAL);
__str4=allocate([103,98,111,45,62,99,117,114,114,107,101,121,32,61,61,32,78,85,76,76,0,0,0,0], "i8", ALLOC_NORMAL);
__str39=allocate([105,122,105,112,95,108,111,110,103,101,115,116,40,41,32,103,111,116,32,97,110,32,117,110,101,120,112,101,99,116,101,100,32,107,101,121,119,111,114,100,32,97,114,103,117,109,101,110,116,0,0,0], "i8", ALLOC_NORMAL);
__str38=allocate([102,105,108,108,118,97,108,117,101,0,0,0], "i8", ALLOC_NORMAL);
__str37=allocate([105,116,101,114,116,111,111,108,115,46,105,122,105,112,95,108,111,110,103,101,115,116,0,0], "i8", ALLOC_NORMAL);
__str36=allocate([114,32,61,61,32,48,32,124,124,32,80,121,95,82,69,70,67,78,84,40,114,101,115,117,108,116,41,32,61,61,32,49,0,0,0,0], "i8", ALLOC_NORMAL);
__str35=allocate([114,32,109,117,115,116,32,98,101,32,110,111,110,45,110,101,103,97,116,105,118,101,0,0], "i8", ALLOC_NORMAL);
__str34=allocate([79,124,79,58,112,101,114,109,117,116,97,116,105,111,110,115,0,0,0,0], "i8", ALLOC_NORMAL);
__str33=allocate([114,0,0,0], "i8", ALLOC_NORMAL);
__str32=allocate([105,116,101,114,116,111,111,108,115,46,112,101,114,109,117,116,97,116,105,111,110,115,0,0], "i8", ALLOC_NORMAL);
__str31=allocate([110,112,111,111,108,115,61,61,48,32,124,124,32,80,121,95,82,69,70,67,78,84,40,114,101,115,117,108,116,41,32,61,61,32,49,0], "i8", ALLOC_NORMAL);
__str30=allocate([80,121,84,117,112,108,101,95,67,104,101,99,107,40,97,114,103,115,41,0], "i8", ALLOC_NORMAL);
__str3=allocate([105,116,101,114,116,111,111,108,115,46,95,103,114,111,117,112,101,114,0,0], "i8", ALLOC_NORMAL);
__str29=allocate([114,101,112,101,97,116,32,97,114,103,117,109,101,110,116,32,99,97,110,110,111,116,32,98,101,32,110,101,103,97,116,105,118,101,0,0], "i8", ALLOC_NORMAL);
__str28=allocate([124,110,58,112,114,111,100,117,99,116,0,0], "i8", ALLOC_NORMAL);
__str27=allocate([114,101,112,101,97,116,0,0], "i8", ALLOC_NORMAL);
__str26=allocate([105,116,101,114,116,111,111,108,115,46,112,114,111,100,117,99,116,0,0,0], "i8", ALLOC_NORMAL);
__str25=allocate([114,101,112,101,97,116,40,37,115,44,32,37,122,100,41,0], "i8", ALLOC_NORMAL);
__str24=allocate([114,101,112,101,97,116,40,37,115,41,0,0], "i8", ALLOC_NORMAL);
__str23=allocate([108,101,110,40,41,32,111,102,32,117,110,115,105,122,101,100,32,111,98,106,101,99,116,0], "i8", ALLOC_NORMAL);
__str22=allocate([95,95,108,101,110,103,116,104,95,104,105,110,116,95,95,0], "i8", ALLOC_NORMAL);
__str21=allocate([79,124,110,58,114,101,112,101,97,116,0,0], "i8", ALLOC_NORMAL);
__str20=allocate([116,105,109,101,115,0,0,0], "i8", ALLOC_NORMAL);
__str2=allocate([110,97,109,101,32,33,61,32,78,85,76,76,0,0,0,0], "i8", ALLOC_NORMAL);
__str19=allocate([111,98,106,101,99,116,0,0], "i8", ALLOC_NORMAL);
__str18=allocate([105,116,101,114,116,111,111,108,115,46,114,101,112,101,97,116,0,0,0,0], "i8", ALLOC_NORMAL);
__str17=allocate([79,124,79,58,103,114,111,117,112,98,121,0], "i8", ALLOC_NORMAL);
__str16=allocate([107,101,121,0], "i8", ALLOC_NORMAL);
__str15=allocate([105,116,101,114,97,98,108,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str14=allocate([105,116,101,114,116,111,111,108,115,46,103,114,111,117,112,98,121,0,0,0], "i8", ALLOC_NORMAL);
__str13=allocate([105,116,101,114,116,111,111,108,115,46,116,101,101,95,100,97,116,97,111,98,106,101,99,116,0,0,0,0], "i8", ALLOC_NORMAL);
__str12=allocate([110,32,109,117,115,116,32,98,101,32,62,61,32,48,0,0], "i8", ALLOC_NORMAL);
__str11=allocate([79,124,110,0], "i8", ALLOC_NORMAL);
__str10=allocate([105,32,61,61,32,116,100,111,45,62,110,117,109,114,101,97,100,0,0,0], "i8", ALLOC_NORMAL);
__str1=allocate([46,46,47,77,111,100,117,108,101,115,47,105,116,101,114,116,111,111,108,115,109,111,100,117,108,101,46,99,0,0,0,0], "i8", ALLOC_NORMAL);
__str=allocate([105,116,101,114,116,111,111,108,115,0,0,0], "i8", ALLOC_NORMAL);
__grouper_type=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,65,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
___func___teedataobject_getitem=allocate([116,101,101,100,97,116,97,111,98,106,101,99,116,95,103,101,116,105,116,101,109,0,0,0], "i8", ALLOC_NORMAL);
___func___product_next=allocate([112,114,111,100,117,99,116,95,110,101,120,116,0,0,0,0], "i8", ALLOC_NORMAL);
___func___product_new=allocate([112,114,111,100,117,99,116,95,110,101,119,0], "i8", ALLOC_NORMAL);
___func___permutations_next=allocate([112,101,114,109,117,116,97,116,105,111,110,115,95,110,101,120,116,0,0,0], "i8", ALLOC_NORMAL);
___func___izip_new=allocate([105,122,105,112,95,110,101,119,0,0,0,0], "i8", ALLOC_NORMAL);
___func___izip_longest_new=allocate([105,122,105,112,95,108,111,110,103,101,115,116,95,110,101,119,0,0,0,0], "i8", ALLOC_NORMAL);
___func___inititertools=allocate([105,110,105,116,105,116,101,114,116,111,111,108,115,0,0,0], "i8", ALLOC_NORMAL);
___func___cwr_next=allocate([99,119,114,95,110,101,120,116,0,0,0,0], "i8", ALLOC_NORMAL);
___func___count_nextlong=allocate([99,111,117,110,116,95,110,101,120,116,108,111,110,103,0,0], "i8", ALLOC_NORMAL);
___func___count_new=allocate([99,111,117,110,116,95,110,101,119,0,0,0], "i8", ALLOC_NORMAL);
___func___combinations_next=allocate([99,111,109,98,105,110,97,116,105,111,110,115,95,110,101,120,116,0,0,0], "i8", ALLOC_NORMAL);
___func____grouper_next=allocate([95,103,114,111,117,112,101,114,95,110,101,120,116,0,0,0], "i8", ALLOC_NORMAL);
/* no memory initializer */
function runPostSets() {
HEAP32[(((_teedataobject_type)+(12))>>2)]=((__str13)|0);
HEAP32[(((_teedataobject_type)+(24))>>2)]=((FUNCTION_TABLE_OFFSET + 152));
HEAP32[(((_teedataobject_type)+(72))>>2)]=(FUNCTION_TABLE_OFFSET + 166);
HEAP32[(((_teedataobject_type)+(88))>>2)]=((_teedataobject_doc)|0);
HEAP32[(((_teedataobject_type)+(92))>>2)]=((FUNCTION_TABLE_OFFSET + 180));
HEAP32[(((_teedataobject_type)+(96))>>2)]=((FUNCTION_TABLE_OFFSET + 82));
HEAP32[(((_teedataobject_type)+(160))>>2)]=(FUNCTION_TABLE_OFFSET + 192);
HEAP32[(((_tee_type)+(12))>>2)]=((__str6)|0);
HEAP32[(((_tee_type)+(24))>>2)]=((FUNCTION_TABLE_OFFSET + 54));
HEAP32[(((_tee_type)+(88))>>2)]=((_teeobject_doc)|0);
HEAP32[(((_tee_type)+(92))>>2)]=((FUNCTION_TABLE_OFFSET + 78));
HEAP32[(((_tee_type)+(96))>>2)]=((FUNCTION_TABLE_OFFSET + 132));
HEAP32[(((_tee_type)+(108))>>2)]=(FUNCTION_TABLE_OFFSET + 32);
HEAP32[(((_tee_type)+(112))>>2)]=((FUNCTION_TABLE_OFFSET + 4));
HEAP32[(((_tee_type)+(116))>>2)]=((_tee_methods)|0);
HEAP32[(((_tee_type)+(156))>>2)]=(FUNCTION_TABLE_OFFSET + 142);
HEAP32[(((_tee_type)+(160))>>2)]=(FUNCTION_TABLE_OFFSET + 192);
HEAP32[((_tee_methods)>>2)]=((__str8)|0);
HEAP32[(((_tee_methods)+(4))>>2)]=((FUNCTION_TABLE_OFFSET + 2));
HEAP32[(((_tee_methods)+(12))>>2)]=((_teecopy_doc)|0);
HEAP32[(((_takewhile_type)+(12))>>2)]=((__str84)|0);
HEAP32[(((_takewhile_type)+(24))>>2)]=((FUNCTION_TABLE_OFFSET + 170));
HEAP32[(((_takewhile_type)+(72))>>2)]=(FUNCTION_TABLE_OFFSET + 166);
HEAP32[(((_takewhile_type)+(88))>>2)]=((_takewhile_doc)|0);
HEAP32[(((_takewhile_type)+(92))>>2)]=((FUNCTION_TABLE_OFFSET + 164));
HEAP32[(((_takewhile_type)+(108))>>2)]=(FUNCTION_TABLE_OFFSET + 32);
HEAP32[(((_takewhile_type)+(112))>>2)]=((FUNCTION_TABLE_OFFSET + 76));
HEAP32[(((_takewhile_type)+(156))>>2)]=(FUNCTION_TABLE_OFFSET + 66);
HEAP32[(((_takewhile_type)+(160))>>2)]=(FUNCTION_TABLE_OFFSET + 192);
HEAP32[(((_starmap_type)+(12))>>2)]=((__str75)|0);
HEAP32[(((_starmap_type)+(24))>>2)]=((FUNCTION_TABLE_OFFSET + 124));
HEAP32[(((_starmap_type)+(72))>>2)]=(FUNCTION_TABLE_OFFSET + 166);
HEAP32[(((_starmap_type)+(88))>>2)]=((_starmap_doc)|0);
HEAP32[(((_starmap_type)+(92))>>2)]=((FUNCTION_TABLE_OFFSET + 190));
HEAP32[(((_starmap_type)+(108))>>2)]=(FUNCTION_TABLE_OFFSET + 32);
HEAP32[(((_starmap_type)+(112))>>2)]=((FUNCTION_TABLE_OFFSET + 138));
HEAP32[(((_starmap_type)+(156))>>2)]=(FUNCTION_TABLE_OFFSET + 98);
HEAP32[(((_starmap_type)+(160))>>2)]=(FUNCTION_TABLE_OFFSET + 192);
HEAP32[(((_repeat_type)+(12))>>2)]=((__str18)|0);
HEAP32[(((_repeat_type)+(24))>>2)]=((FUNCTION_TABLE_OFFSET + 42));
HEAP32[(((_repeat_type)+(44))>>2)]=((FUNCTION_TABLE_OFFSET + 116));
HEAP32[(((_repeat_type)+(72))>>2)]=(FUNCTION_TABLE_OFFSET + 166);
HEAP32[(((_repeat_type)+(88))>>2)]=((_repeat_doc)|0);
HEAP32[(((_repeat_type)+(92))>>2)]=((FUNCTION_TABLE_OFFSET + 100));
HEAP32[(((_repeat_type)+(108))>>2)]=(FUNCTION_TABLE_OFFSET + 32);
HEAP32[(((_repeat_type)+(112))>>2)]=((FUNCTION_TABLE_OFFSET + 36));
HEAP32[(((_repeat_type)+(116))>>2)]=((_repeat_methods)|0);
HEAP32[(((_repeat_type)+(156))>>2)]=(FUNCTION_TABLE_OFFSET + 106);
HEAP32[(((_repeat_type)+(160))>>2)]=(FUNCTION_TABLE_OFFSET + 192);
HEAP32[((_repeat_new_kwargs)>>2)]=((__str19)|0);
HEAP32[(((_repeat_new_kwargs)+(4))>>2)]=((__str20)|0);
HEAP32[((_repeat_methods)>>2)]=((__str22)|0);
HEAP32[(((_repeat_methods)+(4))>>2)]=((FUNCTION_TABLE_OFFSET + 118));
HEAP32[(((_repeat_methods)+(12))>>2)]=((_length_hint_doc)|0);
HEAP32[(((_product_type)+(12))>>2)]=((__str26)|0);
HEAP32[(((_product_type)+(24))>>2)]=((FUNCTION_TABLE_OFFSET + 74));
HEAP32[(((_product_type)+(72))>>2)]=(FUNCTION_TABLE_OFFSET + 166);
HEAP32[(((_product_type)+(88))>>2)]=((_product_doc)|0);
HEAP32[(((_product_type)+(92))>>2)]=((FUNCTION_TABLE_OFFSET + 52));
HEAP32[(((_product_type)+(108))>>2)]=(FUNCTION_TABLE_OFFSET + 32);
HEAP32[(((_product_type)+(112))>>2)]=((FUNCTION_TABLE_OFFSET + 134));
HEAP32[(((_product_type)+(156))>>2)]=(FUNCTION_TABLE_OFFSET + 94);
HEAP32[(((_product_type)+(160))>>2)]=(FUNCTION_TABLE_OFFSET + 192);
HEAP32[((_product_new_kwlist)>>2)]=((__str27)|0);
HEAP32[(((_permutations_type)+(12))>>2)]=((__str32)|0);
HEAP32[(((_permutations_type)+(24))>>2)]=((FUNCTION_TABLE_OFFSET + 34));
HEAP32[(((_permutations_type)+(72))>>2)]=(FUNCTION_TABLE_OFFSET + 166);
HEAP32[(((_permutations_type)+(88))>>2)]=((_permutations_doc)|0);
HEAP32[(((_permutations_type)+(92))>>2)]=((FUNCTION_TABLE_OFFSET + 96));
HEAP32[(((_permutations_type)+(108))>>2)]=(FUNCTION_TABLE_OFFSET + 32);
HEAP32[(((_permutations_type)+(112))>>2)]=((FUNCTION_TABLE_OFFSET + 38));
HEAP32[(((_permutations_type)+(156))>>2)]=(FUNCTION_TABLE_OFFSET + 20);
HEAP32[(((_permutations_type)+(160))>>2)]=(FUNCTION_TABLE_OFFSET + 192);
HEAP32[((_permutations_new_kwargs)>>2)]=((__str15)|0);
HEAP32[(((_permutations_new_kwargs)+(4))>>2)]=((__str33)|0);
HEAP32[((_module_methods)>>2)]=((__str7)|0);
HEAP32[(((_module_methods)+(4))>>2)]=(FUNCTION_TABLE_OFFSET + 40);
HEAP32[(((_module_methods)+(12))>>2)]=((_tee_doc)|0);
HEAP32[(((_iziplongest_type)+(12))>>2)]=((__str37)|0);
HEAP32[(((_iziplongest_type)+(24))>>2)]=((FUNCTION_TABLE_OFFSET + 14));
HEAP32[(((_iziplongest_type)+(72))>>2)]=(FUNCTION_TABLE_OFFSET + 166);
HEAP32[(((_iziplongest_type)+(88))>>2)]=((_izip_longest_doc)|0);
HEAP32[(((_iziplongest_type)+(92))>>2)]=((FUNCTION_TABLE_OFFSET + 150));
HEAP32[(((_iziplongest_type)+(108))>>2)]=(FUNCTION_TABLE_OFFSET + 32);
HEAP32[(((_iziplongest_type)+(112))>>2)]=((FUNCTION_TABLE_OFFSET + 148));
HEAP32[(((_iziplongest_type)+(156))>>2)]=(FUNCTION_TABLE_OFFSET + 174);
HEAP32[(((_iziplongest_type)+(160))>>2)]=(FUNCTION_TABLE_OFFSET + 192);
HEAP32[(((_izip_type)+(12))>>2)]=((__str41)|0);
HEAP32[(((_izip_type)+(24))>>2)]=((FUNCTION_TABLE_OFFSET + 112));
HEAP32[(((_izip_type)+(72))>>2)]=(FUNCTION_TABLE_OFFSET + 166);
HEAP32[(((_izip_type)+(88))>>2)]=((_izip_doc)|0);
HEAP32[(((_izip_type)+(92))>>2)]=((FUNCTION_TABLE_OFFSET + 154));
HEAP32[(((_izip_type)+(108))>>2)]=(FUNCTION_TABLE_OFFSET + 32);
HEAP32[(((_izip_type)+(112))>>2)]=((FUNCTION_TABLE_OFFSET + 6));
HEAP32[(((_izip_type)+(156))>>2)]=(FUNCTION_TABLE_OFFSET + 64);
HEAP32[(((_izip_type)+(160))>>2)]=(FUNCTION_TABLE_OFFSET + 192);
HEAP32[(((_islice_type)+(12))>>2)]=((__str78)|0);
HEAP32[(((_islice_type)+(24))>>2)]=((FUNCTION_TABLE_OFFSET + 12));
HEAP32[(((_islice_type)+(72))>>2)]=(FUNCTION_TABLE_OFFSET + 166);
HEAP32[(((_islice_type)+(88))>>2)]=((_islice_doc)|0);
HEAP32[(((_islice_type)+(92))>>2)]=((FUNCTION_TABLE_OFFSET + 146));
HEAP32[(((_islice_type)+(108))>>2)]=(FUNCTION_TABLE_OFFSET + 32);
HEAP32[(((_islice_type)+(112))>>2)]=((FUNCTION_TABLE_OFFSET + 8));
HEAP32[(((_islice_type)+(156))>>2)]=(FUNCTION_TABLE_OFFSET + 86);
HEAP32[(((_islice_type)+(160))>>2)]=(FUNCTION_TABLE_OFFSET + 192);
HEAP32[((_inititertools_typelist)>>2)]=_combinations_type;
HEAP32[(((_inititertools_typelist)+(4))>>2)]=_cwr_type;
HEAP32[(((_inititertools_typelist)+(8))>>2)]=_cycle_type;
HEAP32[(((_inititertools_typelist)+(12))>>2)]=_dropwhile_type;
HEAP32[(((_inititertools_typelist)+(16))>>2)]=_takewhile_type;
HEAP32[(((_inititertools_typelist)+(20))>>2)]=_islice_type;
HEAP32[(((_inititertools_typelist)+(24))>>2)]=_starmap_type;
HEAP32[(((_inititertools_typelist)+(28))>>2)]=_imap_type;
HEAP32[(((_inititertools_typelist)+(32))>>2)]=_chain_type;
HEAP32[(((_inititertools_typelist)+(36))>>2)]=_compress_type;
HEAP32[(((_inititertools_typelist)+(40))>>2)]=_ifilter_type;
HEAP32[(((_inititertools_typelist)+(44))>>2)]=_ifilterfalse_type;
HEAP32[(((_inititertools_typelist)+(48))>>2)]=_count_type;
HEAP32[(((_inititertools_typelist)+(52))>>2)]=_izip_type;
HEAP32[(((_inititertools_typelist)+(56))>>2)]=_iziplongest_type;
HEAP32[(((_inititertools_typelist)+(60))>>2)]=_permutations_type;
HEAP32[(((_inititertools_typelist)+(64))>>2)]=_product_type;
HEAP32[(((_inititertools_typelist)+(68))>>2)]=_repeat_type;
HEAP32[(((_inititertools_typelist)+(72))>>2)]=_groupby_type;
HEAP32[(((_imap_type)+(12))>>2)]=((__str72)|0);
HEAP32[(((_imap_type)+(24))>>2)]=((FUNCTION_TABLE_OFFSET + 114));
HEAP32[(((_imap_type)+(72))>>2)]=(FUNCTION_TABLE_OFFSET + 166);
HEAP32[(((_imap_type)+(88))>>2)]=((_imap_doc)|0);
HEAP32[(((_imap_type)+(92))>>2)]=((FUNCTION_TABLE_OFFSET + 120));
HEAP32[(((_imap_type)+(108))>>2)]=(FUNCTION_TABLE_OFFSET + 32);
HEAP32[(((_imap_type)+(112))>>2)]=((FUNCTION_TABLE_OFFSET + 30));
HEAP32[(((_imap_type)+(156))>>2)]=(FUNCTION_TABLE_OFFSET + 184);
HEAP32[(((_imap_type)+(160))>>2)]=(FUNCTION_TABLE_OFFSET + 192);
HEAP32[(((_ifilterfalse_type)+(12))>>2)]=((__str59)|0);
HEAP32[(((_ifilterfalse_type)+(24))>>2)]=((FUNCTION_TABLE_OFFSET + 80));
HEAP32[(((_ifilterfalse_type)+(72))>>2)]=(FUNCTION_TABLE_OFFSET + 166);
HEAP32[(((_ifilterfalse_type)+(88))>>2)]=((_ifilterfalse_doc)|0);
HEAP32[(((_ifilterfalse_type)+(92))>>2)]=((FUNCTION_TABLE_OFFSET + 60));
HEAP32[(((_ifilterfalse_type)+(108))>>2)]=(FUNCTION_TABLE_OFFSET + 32);
HEAP32[(((_ifilterfalse_type)+(112))>>2)]=((FUNCTION_TABLE_OFFSET + 182));
HEAP32[(((_ifilterfalse_type)+(156))>>2)]=(FUNCTION_TABLE_OFFSET + 50);
HEAP32[(((_ifilterfalse_type)+(160))>>2)]=(FUNCTION_TABLE_OFFSET + 192);
HEAP32[(((_ifilter_type)+(12))>>2)]=((__str62)|0);
HEAP32[(((_ifilter_type)+(24))>>2)]=((FUNCTION_TABLE_OFFSET + 72));
HEAP32[(((_ifilter_type)+(72))>>2)]=(FUNCTION_TABLE_OFFSET + 166);
HEAP32[(((_ifilter_type)+(88))>>2)]=((_ifilter_doc)|0);
HEAP32[(((_ifilter_type)+(92))>>2)]=((FUNCTION_TABLE_OFFSET + 102));
HEAP32[(((_ifilter_type)+(108))>>2)]=(FUNCTION_TABLE_OFFSET + 32);
HEAP32[(((_ifilter_type)+(112))>>2)]=((FUNCTION_TABLE_OFFSET + 88));
HEAP32[(((_ifilter_type)+(156))>>2)]=(FUNCTION_TABLE_OFFSET + 156);
HEAP32[(((_ifilter_type)+(160))>>2)]=(FUNCTION_TABLE_OFFSET + 192);
HEAP32[(((_groupby_type)+(12))>>2)]=((__str14)|0);
HEAP32[(((_groupby_type)+(24))>>2)]=((FUNCTION_TABLE_OFFSET + 168));
HEAP32[(((_groupby_type)+(72))>>2)]=(FUNCTION_TABLE_OFFSET + 166);
HEAP32[(((_groupby_type)+(88))>>2)]=((_groupby_doc)|0);
HEAP32[(((_groupby_type)+(92))>>2)]=((FUNCTION_TABLE_OFFSET + 126));
HEAP32[(((_groupby_type)+(108))>>2)]=(FUNCTION_TABLE_OFFSET + 32);
HEAP32[(((_groupby_type)+(112))>>2)]=((FUNCTION_TABLE_OFFSET + 28));
HEAP32[(((_groupby_type)+(156))>>2)]=(FUNCTION_TABLE_OFFSET + 104);
HEAP32[(((_groupby_type)+(160))>>2)]=(FUNCTION_TABLE_OFFSET + 192);
HEAP32[((_groupby_new_kwargs)>>2)]=((__str15)|0);
HEAP32[(((_groupby_new_kwargs)+(4))>>2)]=((__str16)|0);
HEAP32[(((_dropwhile_type)+(12))>>2)]=((__str87)|0);
HEAP32[(((_dropwhile_type)+(24))>>2)]=((FUNCTION_TABLE_OFFSET + 92));
HEAP32[(((_dropwhile_type)+(72))>>2)]=(FUNCTION_TABLE_OFFSET + 166);
HEAP32[(((_dropwhile_type)+(88))>>2)]=((_dropwhile_doc)|0);
HEAP32[(((_dropwhile_type)+(92))>>2)]=((FUNCTION_TABLE_OFFSET + 46));
HEAP32[(((_dropwhile_type)+(108))>>2)]=(FUNCTION_TABLE_OFFSET + 32);
HEAP32[(((_dropwhile_type)+(112))>>2)]=((FUNCTION_TABLE_OFFSET + 136));
HEAP32[(((_dropwhile_type)+(156))>>2)]=(FUNCTION_TABLE_OFFSET + 128);
HEAP32[(((_dropwhile_type)+(160))>>2)]=(FUNCTION_TABLE_OFFSET + 192);
HEAP32[(((_cycle_type)+(12))>>2)]=((__str90)|0);
HEAP32[(((_cycle_type)+(24))>>2)]=((FUNCTION_TABLE_OFFSET + 122));
HEAP32[(((_cycle_type)+(72))>>2)]=(FUNCTION_TABLE_OFFSET + 166);
HEAP32[(((_cycle_type)+(88))>>2)]=((_cycle_doc)|0);
HEAP32[(((_cycle_type)+(92))>>2)]=((FUNCTION_TABLE_OFFSET + 108));
HEAP32[(((_cycle_type)+(108))>>2)]=(FUNCTION_TABLE_OFFSET + 32);
HEAP32[(((_cycle_type)+(112))>>2)]=((FUNCTION_TABLE_OFFSET + 162));
HEAP32[(((_cycle_type)+(156))>>2)]=(FUNCTION_TABLE_OFFSET + 158);
HEAP32[(((_cycle_type)+(160))>>2)]=(FUNCTION_TABLE_OFFSET + 192);
HEAP32[(((_cwr_type)+(12))>>2)]=((__str93)|0);
HEAP32[(((_cwr_type)+(24))>>2)]=((FUNCTION_TABLE_OFFSET + 160));
HEAP32[(((_cwr_type)+(72))>>2)]=(FUNCTION_TABLE_OFFSET + 166);
HEAP32[(((_cwr_type)+(88))>>2)]=((_cwr_doc)|0);
HEAP32[(((_cwr_type)+(92))>>2)]=((FUNCTION_TABLE_OFFSET + 186));
HEAP32[(((_cwr_type)+(108))>>2)]=(FUNCTION_TABLE_OFFSET + 32);
HEAP32[(((_cwr_type)+(112))>>2)]=((FUNCTION_TABLE_OFFSET + 44));
HEAP32[(((_cwr_type)+(156))>>2)]=(FUNCTION_TABLE_OFFSET + 130);
HEAP32[(((_cwr_type)+(160))>>2)]=(FUNCTION_TABLE_OFFSET + 192);
HEAP32[((_cwr_new_kwargs)>>2)]=((__str15)|0);
HEAP32[(((_cwr_new_kwargs)+(4))>>2)]=((__str33)|0);
HEAP32[(((_count_type)+(12))>>2)]=((__str44)|0);
HEAP32[(((_count_type)+(24))>>2)]=((FUNCTION_TABLE_OFFSET + 70));
HEAP32[(((_count_type)+(44))>>2)]=((FUNCTION_TABLE_OFFSET + 84));
HEAP32[(((_count_type)+(72))>>2)]=(FUNCTION_TABLE_OFFSET + 166);
HEAP32[(((_count_type)+(88))>>2)]=((_count_doc)|0);
HEAP32[(((_count_type)+(92))>>2)]=((FUNCTION_TABLE_OFFSET + 68));
HEAP32[(((_count_type)+(108))>>2)]=(FUNCTION_TABLE_OFFSET + 32);
HEAP32[(((_count_type)+(112))>>2)]=((FUNCTION_TABLE_OFFSET + 172));
HEAP32[(((_count_type)+(116))>>2)]=((_count_methods)|0);
HEAP32[(((_count_type)+(156))>>2)]=(FUNCTION_TABLE_OFFSET + 110);
HEAP32[(((_count_type)+(160))>>2)]=(FUNCTION_TABLE_OFFSET + 192);
HEAP32[((_count_new_kwlist)>>2)]=((__str45)|0);
HEAP32[(((_count_new_kwlist)+(4))>>2)]=((__str46)|0);
HEAP32[((_count_methods)>>2)]=((__str52)|0);
HEAP32[(((_count_methods)+(4))>>2)]=((FUNCTION_TABLE_OFFSET + 48));
HEAP32[(((_count_methods)+(12))>>2)]=((_count_reduce_doc)|0);
HEAP32[(((_compress_type)+(12))>>2)]=((__str65)|0);
HEAP32[(((_compress_type)+(24))>>2)]=((FUNCTION_TABLE_OFFSET + 90));
HEAP32[(((_compress_type)+(72))>>2)]=(FUNCTION_TABLE_OFFSET + 166);
HEAP32[(((_compress_type)+(88))>>2)]=((_compress_doc)|0);
HEAP32[(((_compress_type)+(92))>>2)]=((FUNCTION_TABLE_OFFSET + 58));
HEAP32[(((_compress_type)+(108))>>2)]=(FUNCTION_TABLE_OFFSET + 32);
HEAP32[(((_compress_type)+(112))>>2)]=((FUNCTION_TABLE_OFFSET + 26));
HEAP32[(((_compress_type)+(156))>>2)]=(FUNCTION_TABLE_OFFSET + 10);
HEAP32[(((_compress_type)+(160))>>2)]=(FUNCTION_TABLE_OFFSET + 192);
HEAP32[((_compress_new_kwargs)>>2)]=((__str66)|0);
HEAP32[(((_compress_new_kwargs)+(4))>>2)]=((__str67)|0);
HEAP32[(((_combinations_type)+(12))>>2)]=((__str95)|0);
HEAP32[(((_combinations_type)+(24))>>2)]=((FUNCTION_TABLE_OFFSET + 194));
HEAP32[(((_combinations_type)+(72))>>2)]=(FUNCTION_TABLE_OFFSET + 166);
HEAP32[(((_combinations_type)+(88))>>2)]=((_combinations_doc)|0);
HEAP32[(((_combinations_type)+(92))>>2)]=((FUNCTION_TABLE_OFFSET + 176));
HEAP32[(((_combinations_type)+(108))>>2)]=(FUNCTION_TABLE_OFFSET + 32);
HEAP32[(((_combinations_type)+(112))>>2)]=((FUNCTION_TABLE_OFFSET + 178));
HEAP32[(((_combinations_type)+(156))>>2)]=(FUNCTION_TABLE_OFFSET + 24);
HEAP32[(((_combinations_type)+(160))>>2)]=(FUNCTION_TABLE_OFFSET + 192);
HEAP32[((_combinations_new_kwargs)>>2)]=((__str15)|0);
HEAP32[(((_combinations_new_kwargs)+(4))>>2)]=((__str33)|0);
HEAP32[(((_chain_type)+(12))>>2)]=((__str69)|0);
HEAP32[(((_chain_type)+(24))>>2)]=((FUNCTION_TABLE_OFFSET + 16));
HEAP32[(((_chain_type)+(72))>>2)]=(FUNCTION_TABLE_OFFSET + 166);
HEAP32[(((_chain_type)+(88))>>2)]=((_chain_doc)|0);
HEAP32[(((_chain_type)+(92))>>2)]=((FUNCTION_TABLE_OFFSET + 188));
HEAP32[(((_chain_type)+(108))>>2)]=(FUNCTION_TABLE_OFFSET + 32);
HEAP32[(((_chain_type)+(112))>>2)]=((FUNCTION_TABLE_OFFSET + 22));
HEAP32[(((_chain_type)+(116))>>2)]=((_chain_methods)|0);
HEAP32[(((_chain_type)+(156))>>2)]=(FUNCTION_TABLE_OFFSET + 18);
HEAP32[(((_chain_type)+(160))>>2)]=(FUNCTION_TABLE_OFFSET + 192);
HEAP32[((_chain_methods)>>2)]=((__str71)|0);
HEAP32[(((_chain_methods)+(4))>>2)]=((FUNCTION_TABLE_OFFSET + 62));
HEAP32[(((_chain_methods)+(12))>>2)]=((_chain_from_iterable_doc)|0);
HEAP32[(((__grouper_type)+(12))>>2)]=((__str3)|0);
HEAP32[(((__grouper_type)+(24))>>2)]=((FUNCTION_TABLE_OFFSET + 144));
HEAP32[(((__grouper_type)+(72))>>2)]=(FUNCTION_TABLE_OFFSET + 166);
HEAP32[(((__grouper_type)+(92))>>2)]=((FUNCTION_TABLE_OFFSET + 140));
HEAP32[(((__grouper_type)+(108))>>2)]=(FUNCTION_TABLE_OFFSET + 32);
HEAP32[(((__grouper_type)+(112))>>2)]=((FUNCTION_TABLE_OFFSET + 56));
HEAP32[(((__grouper_type)+(160))>>2)]=(FUNCTION_TABLE_OFFSET + 192);
}
if (!awaitingMemoryInitializer) runPostSets();
FUNCTION_TABLE.push.apply(FUNCTION_TABLE, [0,0,_tee_copy,0,_tee_next,0,_izip_next,0,_islice_next,0,_compress_new
,0,_islice_dealloc,0,_izip_longest_dealloc,0,_chain_dealloc,0,_chain_new,0,_permutations_new
,0,_chain_next,0,_combinations_new,0,_compress_next,0,_groupby_next,0,_imap_next
,0,_PyObject_SelfIter,0,_permutations_dealloc,0,_repeat_next,0,_permutations_next,0,_tee
,0,_repeat_dealloc,0,_cwr_next,0,_dropwhile_traverse,0,_count_reduce,0,_ifilterfalse_new
,0,_product_traverse,0,_tee_dealloc,0,__grouper_next,0,_compress_traverse,0,_ifilterfalse_traverse
,0,_chain_new_from_iterable,0,_izip_new,0,_takewhile_new,0,_count_traverse,0,_count_dealloc
,0,_ifilter_dealloc,0,_product_dealloc,0,_takewhile_next,0,_tee_traverse,0,_ifilterfalse_dealloc
,0,_teedataobject_clear,0,_count_repr,0,_islice_new,0,_ifilter_next,0,_compress_dealloc
,0,_dropwhile_dealloc,0,_product_new,0,_permutations_traverse,0,_starmap_new,0,_repeat_traverse
,0,_ifilter_traverse,0,_groupby_new,0,_repeat_new,0,_cycle_traverse,0,_count_new
,0,_izip_dealloc,0,_imap_dealloc,0,_repeat_repr,0,_repeat_len,0,_imap_traverse
,0,_cycle_dealloc,0,_starmap_dealloc,0,_groupby_traverse,0,_dropwhile_new,0,_cwr_new
,0,_tee_clear,0,_product_next,0,_dropwhile_next,0,_starmap_next,0,__grouper_traverse
,0,_tee_new,0,__grouper_dealloc,0,_islice_traverse,0,_izip_longest_next,0,_izip_longest_traverse
,0,_teedataobject_dealloc,0,_izip_traverse,0,_ifilter_new,0,_cycle_new,0,_cwr_dealloc
,0,_cycle_next,0,_takewhile_traverse,0,_PyObject_GenericGetAttr,0,_groupby_dealloc,0,_takewhile_dealloc
,0,_count_next,0,_izip_longest_new,0,_combinations_traverse,0,_combinations_next,0,_teedataobject_traverse
,0,_ifilterfalse_next,0,_imap_new,0,_cwr_traverse,0,_chain_traverse,0,_starmap_traverse,0,_PyObject_GC_Del,0,_combinations_dealloc,0]);
// EMSCRIPTEN_START_FUNCS
function __grouper_dealloc($igo) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$igo;
      var $2=$1;
      var $3=$2;
      _PyObject_GC_UnTrack($3);
      label = 2; break;
    case 2: 
      var $5=$1;
      var $6=(($5+8)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=((($9)-(1))|0);
      HEAP32[(($8)>>2)]=$10;
      var $11=(($10)|(0))!=0;
      if ($11) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 5; break;
    case 4: 
      var $14=$1;
      var $15=(($14+8)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16+4)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18+24)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=$1;
      var $22=(($21+8)|0);
      var $23=HEAP32[(($22)>>2)];
      FUNCTION_TABLE[$20]($23);
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $27=$1;
      var $28=(($27+12)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=((($31)-(1))|0);
      HEAP32[(($30)>>2)]=$32;
      var $33=(($32)|(0))!=0;
      if ($33) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 10; break;
    case 9: 
      var $36=$1;
      var $37=(($36+12)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38+4)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40+24)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=$1;
      var $44=(($43+12)|0);
      var $45=HEAP32[(($44)>>2)];
      FUNCTION_TABLE[$42]($45);
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $48=$1;
      var $49=$48;
      _PyObject_GC_Del($49);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __grouper_traverse($igo, $visit, $arg) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $vret;
      var $vret1;
      $2=$igo;
      $3=$visit;
      $4=$arg;
      label = 2; break;
    case 2: 
      var $6=$2;
      var $7=(($6+8)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $11=$3;
      var $12=$2;
      var $13=(($12+8)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$4;
      var $16=FUNCTION_TABLE[$11]($14, $15);
      $vret=$16;
      var $17=$vret;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $20=$vret;
      $1=$20;
      label = 14; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $25=$2;
      var $26=(($25+12)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27)|(0))!=0;
      if ($28) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $30=$3;
      var $31=$2;
      var $32=(($31+12)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=$4;
      var $35=FUNCTION_TABLE[$30]($33, $34);
      $vret1=$35;
      var $36=$vret1;
      var $37=(($36)|(0))!=0;
      if ($37) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $39=$vret1;
      $1=$39;
      label = 14; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      $1=0;
      label = 14; break;
    case 14: 
      var $44=$1;
      return $44;
    default: assert(0, "bad label: " + label);
  }
}
function _tee_dealloc($to) {
  var label = 0;
  var $1;
  $1=$to;
  var $2=$1;
  var $3=$2;
  _PyObject_GC_UnTrack($3);
  var $4=$1;
  var $5=_tee_clear($4);
  var $6=$1;
  var $7=$6;
  _PyObject_GC_Del($7);
  return;
}
function _tee_traverse($to, $visit, $arg) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $vret;
      $2=$to;
      $3=$visit;
      $4=$arg;
      label = 2; break;
    case 2: 
      var $6=$2;
      var $7=(($6+8)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=$8;
      var $10=(($9)|(0))!=0;
      if ($10) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $12=$3;
      var $13=$2;
      var $14=(($13+8)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=$15;
      var $17=$4;
      var $18=FUNCTION_TABLE[$12]($16, $17);
      $vret=$18;
      var $19=$vret;
      var $20=(($19)|(0))!=0;
      if ($20) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $22=$vret;
      $1=$22;
      label = 8; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      $1=0;
      label = 8; break;
    case 8: 
      var $27=$1;
      return $27;
    default: assert(0, "bad label: " + label);
  }
}
function _tee_clear($to) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $_py_tmp;
      $1=$to;
      var $2=$1;
      var $3=(($2+16)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=(($4)|(0))!=0;
      if ($5) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $7=$1;
      var $8=$7;
      _PyObject_ClearWeakRefs($8);
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $11=$1;
      var $12=(($11+8)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13)|(0))!=0;
      if ($14) { label = 5; break; } else { label = 11; break; }
    case 5: 
      var $16=$1;
      var $17=(($16+8)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=$18;
      $_py_tmp=$19;
      var $20=$1;
      var $21=(($20+8)|0);
      HEAP32[(($21)>>2)]=0;
      label = 6; break;
    case 6: 
      var $23=$_py_tmp;
      var $24=(($23)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=((($25)-(1))|0);
      HEAP32[(($24)>>2)]=$26;
      var $27=(($26)|(0))!=0;
      if ($27) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 9; break;
    case 8: 
      var $30=$_py_tmp;
      var $31=(($30+4)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32+24)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=$_py_tmp;
      FUNCTION_TABLE[$34]($35);
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      return 0;
    default: assert(0, "bad label: " + label);
  }
}
function _tee_next($to) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $value;
      var $link;
      $2=$to;
      var $3=$2;
      var $4=(($3+12)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0)) >= 57;
      if ($6) { label = 2; break; } else { label = 10; break; }
    case 2: 
      var $8=$2;
      var $9=(($8+8)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=_teedataobject_jumplink($10);
      $link=$11;
      var $12=$link;
      var $13=(($12)|(0))==0;
      if ($13) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=0;
      label = 13; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $17=$2;
      var $18=(($17+8)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=$19;
      var $21=(($20)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=((($22)-(1))|0);
      HEAP32[(($21)>>2)]=$23;
      var $24=(($23)|(0))!=0;
      if ($24) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 8; break;
    case 7: 
      var $27=$2;
      var $28=(($27+8)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=$29;
      var $31=(($30+4)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32+24)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=$2;
      var $36=(($35+8)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=$37;
      FUNCTION_TABLE[$34]($38);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $41=$link;
      var $42=$41;
      var $43=$2;
      var $44=(($43+8)|0);
      HEAP32[(($44)>>2)]=$42;
      var $45=$2;
      var $46=(($45+12)|0);
      HEAP32[(($46)>>2)]=0;
      label = 10; break;
    case 10: 
      var $48=$2;
      var $49=(($48+8)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=$2;
      var $52=(($51+12)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=_teedataobject_getitem($50, $53);
      $value=$54;
      var $55=$value;
      var $56=(($55)|(0))==0;
      if ($56) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $1=0;
      label = 13; break;
    case 12: 
      var $59=$2;
      var $60=(($59+12)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=((($61)+(1))|0);
      HEAP32[(($60)>>2)]=$62;
      var $63=$value;
      $1=$63;
      label = 13; break;
    case 13: 
      var $65=$1;
      return $65;
    default: assert(0, "bad label: " + label);
  }
}
function _tee_new($type, $args, $kw) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $iterable=__stackBase__;
      $2=$type;
      $3=$args;
      $4=$kw;
      var $5=$3;
      var $6=_PyArg_UnpackTuple($5, ((__str7)|0), 1, 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$iterable,tempInt));
      var $7=(($6)|(0))!=0;
      if ($7) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 4; break;
    case 3: 
      var $10=HEAP32[(($iterable)>>2)];
      var $11=_tee_fromiterable($10);
      $1=$11;
      label = 4; break;
    case 4: 
      var $13=$1;
      STACKTOP = __stackBase__;
      return $13;
    default: assert(0, "bad label: " + label);
  }
}
function _tee_fromiterable($iterable) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $to;
      var $it;
      $2=$iterable;
      $it=0;
      var $3=$2;
      var $4=_PyObject_GetIter($3);
      $it=$4;
      var $5=$it;
      var $6=(($5)|(0))==0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 22; break;
    case 3: 
      var $9=$it;
      var $10=(($9+4)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))==((_tee_type)|(0));
      if ($12) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $14=$it;
      var $15=(($14+4)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=_PyType_IsSubtype($16, _tee_type);
      var $18=(($17)|(0))!=0;
      if ($18) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $20=$it;
      var $21=$20;
      var $22=_tee_copy($21);
      var $23=$22;
      $to=$23;
      label = 11; break;
    case 6: 
      var $25=__PyObject_GC_New(_tee_type);
      var $26=$25;
      $to=$26;
      var $27=$to;
      var $28=(($27)|(0))==0;
      if ($28) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 11; break;
    case 8: 
      var $31=$it;
      var $32=_teedataobject_new($31);
      var $33=$32;
      var $34=$to;
      var $35=(($34+8)|0);
      HEAP32[(($35)>>2)]=$33;
      var $36=$to;
      var $37=(($36+8)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38)|(0))!=0;
      if ($39) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $41=$to;
      var $42=$41;
      _PyObject_GC_Del($42);
      $to=0;
      label = 11; break;
    case 10: 
      var $44=$to;
      var $45=(($44+12)|0);
      HEAP32[(($45)>>2)]=0;
      var $46=$to;
      var $47=(($46+16)|0);
      HEAP32[(($47)>>2)]=0;
      var $48=$to;
      var $49=$48;
      _PyObject_GC_Track($49);
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $52=$it;
      var $53=(($52)|(0))==0;
      if ($53) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 20; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $57=$it;
      var $58=(($57)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=((($59)-(1))|0);
      HEAP32[(($58)>>2)]=$60;
      var $61=(($60)|(0))!=0;
      if ($61) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 18; break;
    case 17: 
      var $64=$it;
      var $65=(($64+4)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66+24)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=$it;
      FUNCTION_TABLE[$68]($69);
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $74=$to;
      var $75=$74;
      $1=$75;
      label = 22; break;
    case 22: 
      var $77=$1;
      return $77;
    default: assert(0, "bad label: " + label);
  }
}
function _tee_copy($to) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $newto;
      $2=$to;
      var $3=__PyObject_GC_New(_tee_type);
      var $4=$3;
      $newto=$4;
      var $5=$newto;
      var $6=(($5)|(0))==0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 4; break;
    case 3: 
      var $9=$2;
      var $10=(($9+8)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=$11;
      var $13=(($12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=((($14)+(1))|0);
      HEAP32[(($13)>>2)]=$15;
      var $16=$2;
      var $17=(($16+8)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=$newto;
      var $20=(($19+8)|0);
      HEAP32[(($20)>>2)]=$18;
      var $21=$2;
      var $22=(($21+12)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=$newto;
      var $25=(($24+12)|0);
      HEAP32[(($25)>>2)]=$23;
      var $26=$newto;
      var $27=(($26+16)|0);
      HEAP32[(($27)>>2)]=0;
      var $28=$newto;
      var $29=$28;
      _PyObject_GC_Track($29);
      var $30=$newto;
      var $31=$30;
      $1=$31;
      label = 4; break;
    case 4: 
      var $33=$1;
      return $33;
    default: assert(0, "bad label: " + label);
  }
}
function _inititertools() {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 80)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $i;
      var $m;
      var $name;
      var $typelist=__stackBase__;
      var $1=$typelist;
      assert(80 % 1 === 0);_memcpy($1, _inititertools_typelist, 80);
      HEAP32[((((_teedataobject_type+4)|0))>>2)]=_PyType_Type;
      var $2=_Py_InitModule4(((__str)|0), ((_module_methods)|0), ((_module_doc)|0), 0, 1013);
      $m=$2;
      var $3=$m;
      var $4=(($3)|(0))==0;
      if ($4) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 18; break;
    case 3: 
      $i=0;
      label = 4; break;
    case 4: 
      var $8=$i;
      var $9=(($typelist+($8<<2))|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|(0))!=0;
      if ($11) { label = 5; break; } else { label = 12; break; }
    case 5: 
      var $13=$i;
      var $14=(($typelist+($13<<2))|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=_PyType_Ready($15);
      var $17=(($16)|(0)) < 0;
      if ($17) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 18; break;
    case 7: 
      var $20=$i;
      var $21=(($typelist+($20<<2))|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22+12)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=_strchr($24, 46);
      $name=$25;
      var $26=$name;
      var $27=(($26)|(0))!=0;
      if ($27) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 10; break;
    case 9: 
      ___assert_func(((__str1)|0), 4114, ((___func___inititertools)|0), ((__str2)|0));
      throw "Reached an unreachable!";
      label = 10; break;
    case 10: 
      var $32=$i;
      var $33=(($typelist+($32<<2))|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=$34;
      var $36=(($35)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=((($37)+(1))|0);
      HEAP32[(($36)>>2)]=$38;
      var $39=$m;
      var $40=$name;
      var $41=(($40+1)|0);
      var $42=$i;
      var $43=(($typelist+($42<<2))|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=$44;
      var $46=_PyModule_AddObject($39, $41, $45);
      label = 11; break;
    case 11: 
      var $48=$i;
      var $49=((($48)+(1))|0);
      $i=$49;
      label = 4; break;
    case 12: 
      var $51=_PyType_Ready(_teedataobject_type);
      var $52=(($51)|(0)) < 0;
      if ($52) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 18; break;
    case 14: 
      var $55=_PyType_Ready(_tee_type);
      var $56=(($55)|(0)) < 0;
      if ($56) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 18; break;
    case 16: 
      var $59=_PyType_Ready(__grouper_type);
      var $60=(($59)|(0)) < 0;
      if ($60) { label = 17; break; } else { label = 18; break; }
    case 17: 
      label = 18; break;
    case 18: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_inititertools"] = _inititertools;
function __grouper_next($igo) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $gbo;
      var $newvalue;
      var $newkey;
      var $r;
      var $rcmp;
      var $_py_tmp;
      $2=$igo;
      var $3=$2;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=$5;
      $gbo=$6;
      var $7=$gbo;
      var $8=(($7+24)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9)|(0))==0;
      if ($10) { label = 2; break; } else { label = 18; break; }
    case 2: 
      var $12=$gbo;
      var $13=(($12+8)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=_PyIter_Next($14);
      $newvalue=$15;
      var $16=$newvalue;
      var $17=(($16)|(0))==0;
      if ($17) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=0;
      label = 33; break;
    case 4: 
      var $20=$gbo;
      var $21=(($20+12)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22)|(0))==((__Py_NoneStruct)|(0));
      if ($23) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $25=$newvalue;
      $newkey=$25;
      var $26=$newvalue;
      var $27=(($26)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=((($28)+(1))|0);
      HEAP32[(($27)>>2)]=$29;
      label = 14; break;
    case 6: 
      var $31=$gbo;
      var $32=(($31+12)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=$newvalue;
      var $35=_PyObject_CallFunctionObjArgs($33, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$34,HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
      $newkey=$35;
      var $36=$newkey;
      var $37=(($36)|(0))==0;
      if ($37) { label = 7; break; } else { label = 13; break; }
    case 7: 
      label = 8; break;
    case 8: 
      var $40=$newvalue;
      var $41=(($40)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=((($42)-(1))|0);
      HEAP32[(($41)>>2)]=$43;
      var $44=(($43)|(0))!=0;
      if ($44) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 11; break;
    case 10: 
      var $47=$newvalue;
      var $48=(($47+4)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=(($49+24)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=$newvalue;
      FUNCTION_TABLE[$51]($52);
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      $1=0;
      label = 33; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $57=$gbo;
      var $58=(($57+20)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=(($59)|(0))==0;
      if ($60) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 17; break;
    case 16: 
      ___assert_func(((__str1)|0), 254, ((___func____grouper_next)|0), ((__str4)|0));
      throw "Reached an unreachable!";
      label = 17; break;
    case 17: 
      var $65=$newkey;
      var $66=$gbo;
      var $67=(($66+20)|0);
      HEAP32[(($67)>>2)]=$65;
      var $68=$newvalue;
      var $69=$gbo;
      var $70=(($69+24)|0);
      HEAP32[(($70)>>2)]=$68;
      label = 18; break;
    case 18: 
      var $72=$gbo;
      var $73=(($72+20)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=(($74)|(0))!=0;
      if ($75) { label = 19; break; } else { label = 20; break; }
    case 19: 
      label = 21; break;
    case 20: 
      ___assert_func(((__str1)|0), 259, ((___func____grouper_next)|0), ((__str5)|0));
      throw "Reached an unreachable!";
      label = 21; break;
    case 21: 
      var $80=$2;
      var $81=(($80+12)|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=$gbo;
      var $84=(($83+20)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=_PyObject_RichCompareBool($82, $85, 2);
      $rcmp=$86;
      var $87=$rcmp;
      var $88=(($87)|(0)) <= 0;
      if ($88) { label = 22; break; } else { label = 23; break; }
    case 22: 
      $1=0;
      label = 33; break;
    case 23: 
      var $91=$gbo;
      var $92=(($91+24)|0);
      var $93=HEAP32[(($92)>>2)];
      $r=$93;
      var $94=$gbo;
      var $95=(($94+24)|0);
      HEAP32[(($95)>>2)]=0;
      label = 24; break;
    case 24: 
      var $97=$gbo;
      var $98=(($97+20)|0);
      var $99=HEAP32[(($98)>>2)];
      var $100=(($99)|(0))!=0;
      if ($100) { label = 25; break; } else { label = 31; break; }
    case 25: 
      var $102=$gbo;
      var $103=(($102+20)|0);
      var $104=HEAP32[(($103)>>2)];
      $_py_tmp=$104;
      var $105=$gbo;
      var $106=(($105+20)|0);
      HEAP32[(($106)>>2)]=0;
      label = 26; break;
    case 26: 
      var $108=$_py_tmp;
      var $109=(($108)|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=((($110)-(1))|0);
      HEAP32[(($109)>>2)]=$111;
      var $112=(($111)|(0))!=0;
      if ($112) { label = 27; break; } else { label = 28; break; }
    case 27: 
      label = 29; break;
    case 28: 
      var $115=$_py_tmp;
      var $116=(($115+4)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=(($117+24)|0);
      var $119=HEAP32[(($118)>>2)];
      var $120=$_py_tmp;
      FUNCTION_TABLE[$119]($120);
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      var $125=$r;
      $1=$125;
      label = 33; break;
    case 33: 
      var $127=$1;
      STACKTOP = __stackBase__;
      return $127;
    default: assert(0, "bad label: " + label);
  }
}
function _teedataobject_new($it) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $tdo;
      $2=$it;
      var $3=__PyObject_GC_New(_teedataobject_type);
      var $4=$3;
      $tdo=$4;
      var $5=$tdo;
      var $6=(($5)|(0))==0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 4; break;
    case 3: 
      var $9=$tdo;
      var $10=(($9+12)|0);
      HEAP32[(($10)>>2)]=0;
      var $11=$tdo;
      var $12=(($11+16)|0);
      HEAP32[(($12)>>2)]=0;
      var $13=$2;
      var $14=(($13)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=((($15)+(1))|0);
      HEAP32[(($14)>>2)]=$16;
      var $17=$2;
      var $18=$tdo;
      var $19=(($18+8)|0);
      HEAP32[(($19)>>2)]=$17;
      var $20=$tdo;
      var $21=$20;
      _PyObject_GC_Track($21);
      var $22=$tdo;
      var $23=$22;
      $1=$23;
      label = 4; break;
    case 4: 
      var $25=$1;
      return $25;
    default: assert(0, "bad label: " + label);
  }
}
function _teedataobject_jumplink($tdo) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$tdo;
      var $2=$1;
      var $3=(($2+16)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=(($4)|(0))==0;
      if ($5) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $7=$1;
      var $8=(($7+8)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=_teedataobject_new($9);
      var $11=$1;
      var $12=(($11+16)|0);
      HEAP32[(($12)>>2)]=$10;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $15=$1;
      var $16=(($15+16)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17)|(0))==0;
      if ($18) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 7; break;
    case 6: 
      var $21=$1;
      var $22=(($21+16)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=((($25)+(1))|0);
      HEAP32[(($24)>>2)]=$26;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $29=$1;
      var $30=(($29+16)|0);
      var $31=HEAP32[(($30)>>2)];
      return $31;
    default: assert(0, "bad label: " + label);
  }
}
function _tee($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $i;
      var $n=__stackBase__;
      var $it;
      var $iterable=(__stackBase__)+(4);
      var $copyable;
      var $result;
      $2=$self;
      $3=$args;
      HEAP32[(($n)>>2)]=2;
      var $4=$3;
      var $5=_PyArg_ParseTuple($4, ((__str11)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$iterable,HEAP32[(((tempInt)+(4))>>2)]=$n,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 43; break;
    case 3: 
      var $9=HEAP32[(($n)>>2)];
      var $10=(($9)|(0)) < 0;
      if ($10) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $12=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($12, ((__str12)|0));
      $1=0;
      label = 43; break;
    case 5: 
      var $14=HEAP32[(($n)>>2)];
      var $15=_PyTuple_New($14);
      $result=$15;
      var $16=$result;
      var $17=(($16)|(0))==0;
      if ($17) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $1=0;
      label = 43; break;
    case 7: 
      var $20=HEAP32[(($n)>>2)];
      var $21=(($20)|(0))==0;
      if ($21) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $23=$result;
      $1=$23;
      label = 43; break;
    case 9: 
      var $25=HEAP32[(($iterable)>>2)];
      var $26=_PyObject_GetIter($25);
      $it=$26;
      var $27=$it;
      var $28=(($27)|(0))==0;
      if ($28) { label = 10; break; } else { label = 16; break; }
    case 10: 
      label = 11; break;
    case 11: 
      var $31=$result;
      var $32=(($31)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=((($33)-(1))|0);
      HEAP32[(($32)>>2)]=$34;
      var $35=(($34)|(0))!=0;
      if ($35) { label = 12; break; } else { label = 13; break; }
    case 12: 
      label = 14; break;
    case 13: 
      var $38=$result;
      var $39=(($38+4)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40+24)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=$result;
      FUNCTION_TABLE[$42]($43);
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      $1=0;
      label = 43; break;
    case 16: 
      var $47=$it;
      var $48=_PyObject_HasAttrString($47, ((__str8)|0));
      var $49=(($48)|(0))!=0;
      if ($49) { label = 30; break; } else { label = 17; break; }
    case 17: 
      var $51=$it;
      var $52=_tee_fromiterable($51);
      $copyable=$52;
      label = 18; break;
    case 18: 
      var $54=$it;
      var $55=(($54)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=((($56)-(1))|0);
      HEAP32[(($55)>>2)]=$57;
      var $58=(($57)|(0))!=0;
      if ($58) { label = 19; break; } else { label = 20; break; }
    case 19: 
      label = 21; break;
    case 20: 
      var $61=$it;
      var $62=(($61+4)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=(($63+24)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=$it;
      FUNCTION_TABLE[$65]($66);
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $69=$copyable;
      var $70=(($69)|(0))==0;
      if ($70) { label = 23; break; } else { label = 29; break; }
    case 23: 
      label = 24; break;
    case 24: 
      var $73=$result;
      var $74=(($73)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=((($75)-(1))|0);
      HEAP32[(($74)>>2)]=$76;
      var $77=(($76)|(0))!=0;
      if ($77) { label = 25; break; } else { label = 26; break; }
    case 25: 
      label = 27; break;
    case 26: 
      var $80=$result;
      var $81=(($80+4)|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=(($82+24)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=$result;
      FUNCTION_TABLE[$84]($85);
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      $1=0;
      label = 43; break;
    case 29: 
      label = 31; break;
    case 30: 
      var $90=$it;
      $copyable=$90;
      label = 31; break;
    case 31: 
      var $92=$copyable;
      var $93=$result;
      var $94=$93;
      var $95=(($94+12)|0);
      var $96=(($95)|0);
      HEAP32[(($96)>>2)]=$92;
      $i=1;
      label = 32; break;
    case 32: 
      var $98=$i;
      var $99=HEAP32[(($n)>>2)];
      var $100=(($98)|(0)) < (($99)|(0));
      if ($100) { label = 33; break; } else { label = 42; break; }
    case 33: 
      var $102=$copyable;
      var $103=_PyObject_CallMethod($102, ((__str8)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $copyable=$103;
      var $104=$copyable;
      var $105=(($104)|(0))==0;
      if ($105) { label = 34; break; } else { label = 40; break; }
    case 34: 
      label = 35; break;
    case 35: 
      var $108=$result;
      var $109=(($108)|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=((($110)-(1))|0);
      HEAP32[(($109)>>2)]=$111;
      var $112=(($111)|(0))!=0;
      if ($112) { label = 36; break; } else { label = 37; break; }
    case 36: 
      label = 38; break;
    case 37: 
      var $115=$result;
      var $116=(($115+4)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=(($117+24)|0);
      var $119=HEAP32[(($118)>>2)];
      var $120=$result;
      FUNCTION_TABLE[$119]($120);
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      $1=0;
      label = 43; break;
    case 40: 
      var $124=$copyable;
      var $125=$i;
      var $126=$result;
      var $127=$126;
      var $128=(($127+12)|0);
      var $129=(($128+($125<<2))|0);
      HEAP32[(($129)>>2)]=$124;
      label = 41; break;
    case 41: 
      var $131=$i;
      var $132=((($131)+(1))|0);
      $i=$132;
      label = 32; break;
    case 42: 
      var $134=$result;
      $1=$134;
      label = 43; break;
    case 43: 
      var $136=$1;
      STACKTOP = __stackBase__;
      return $136;
    default: assert(0, "bad label: " + label);
  }
}
function _teedataobject_dealloc($tdo) {
  var label = 0;
  var $1;
  $1=$tdo;
  var $2=$1;
  var $3=$2;
  _PyObject_GC_UnTrack($3);
  var $4=$1;
  var $5=_teedataobject_clear($4);
  var $6=$1;
  var $7=$6;
  _PyObject_GC_Del($7);
  return;
}
function _teedataobject_traverse($tdo, $visit, $arg) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $i;
      var $vret;
      var $vret1;
      var $vret2;
      $2=$tdo;
      $3=$visit;
      $4=$arg;
      label = 2; break;
    case 2: 
      var $6=$2;
      var $7=(($6+8)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $11=$3;
      var $12=$2;
      var $13=(($12+8)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$4;
      var $16=FUNCTION_TABLE[$11]($14, $15);
      $vret=$16;
      var $17=$vret;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $20=$vret;
      $1=$20;
      label = 24; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      $i=0;
      label = 8; break;
    case 8: 
      var $25=$i;
      var $26=$2;
      var $27=(($26+12)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($25)|(0)) < (($28)|(0));
      if ($29) { label = 9; break; } else { label = 17; break; }
    case 9: 
      label = 10; break;
    case 10: 
      var $32=$i;
      var $33=$2;
      var $34=(($33+20)|0);
      var $35=(($34+($32<<2))|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36)|(0))!=0;
      if ($37) { label = 11; break; } else { label = 14; break; }
    case 11: 
      var $39=$3;
      var $40=$i;
      var $41=$2;
      var $42=(($41+20)|0);
      var $43=(($42+($40<<2))|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=$4;
      var $46=FUNCTION_TABLE[$39]($44, $45);
      $vret1=$46;
      var $47=$vret1;
      var $48=(($47)|(0))!=0;
      if ($48) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $50=$vret1;
      $1=$50;
      label = 24; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $55=$i;
      var $56=((($55)+(1))|0);
      $i=$56;
      label = 8; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $59=$2;
      var $60=(($59+16)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=(($61)|(0))!=0;
      if ($62) { label = 19; break; } else { label = 22; break; }
    case 19: 
      var $64=$3;
      var $65=$2;
      var $66=(($65+16)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=$4;
      var $69=FUNCTION_TABLE[$64]($67, $68);
      $vret2=$69;
      var $70=$vret2;
      var $71=(($70)|(0))!=0;
      if ($71) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $73=$vret2;
      $1=$73;
      label = 24; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      $1=0;
      label = 24; break;
    case 24: 
      var $78=$1;
      return $78;
    default: assert(0, "bad label: " + label);
  }
}
function _teedataobject_clear($tdo) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $i;
      var $tmp;
      var $_py_tmp;
      var $_py_tmp1;
      $1=$tdo;
      label = 2; break;
    case 2: 
      var $3=$1;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 9; break; }
    case 3: 
      var $8=$1;
      var $9=(($8+8)|0);
      var $10=HEAP32[(($9)>>2)];
      $_py_tmp=$10;
      var $11=$1;
      var $12=(($11+8)|0);
      HEAP32[(($12)>>2)]=0;
      label = 4; break;
    case 4: 
      var $14=$_py_tmp;
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=((($16)-(1))|0);
      HEAP32[(($15)>>2)]=$17;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 7; break;
    case 6: 
      var $21=$_py_tmp;
      var $22=(($21+4)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+24)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=$_py_tmp;
      FUNCTION_TABLE[$25]($26);
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      $i=0;
      label = 11; break;
    case 11: 
      var $32=$i;
      var $33=$1;
      var $34=(($33+12)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($32)|(0)) < (($35)|(0));
      if ($36) { label = 12; break; } else { label = 23; break; }
    case 12: 
      label = 13; break;
    case 13: 
      var $39=$i;
      var $40=$1;
      var $41=(($40+20)|0);
      var $42=(($41+($39<<2))|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($43)|(0))!=0;
      if ($44) { label = 14; break; } else { label = 20; break; }
    case 14: 
      var $46=$i;
      var $47=$1;
      var $48=(($47+20)|0);
      var $49=(($48+($46<<2))|0);
      var $50=HEAP32[(($49)>>2)];
      $_py_tmp1=$50;
      var $51=$i;
      var $52=$1;
      var $53=(($52+20)|0);
      var $54=(($53+($51<<2))|0);
      HEAP32[(($54)>>2)]=0;
      label = 15; break;
    case 15: 
      var $56=$_py_tmp1;
      var $57=(($56)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=((($58)-(1))|0);
      HEAP32[(($57)>>2)]=$59;
      var $60=(($59)|(0))!=0;
      if ($60) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 18; break;
    case 17: 
      var $63=$_py_tmp1;
      var $64=(($63+4)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=(($65+24)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=$_py_tmp1;
      FUNCTION_TABLE[$67]($68);
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $74=$i;
      var $75=((($74)+(1))|0);
      $i=$75;
      label = 11; break;
    case 23: 
      var $77=$1;
      var $78=(($77+16)|0);
      var $79=HEAP32[(($78)>>2)];
      $tmp=$79;
      var $80=$1;
      var $81=(($80+16)|0);
      HEAP32[(($81)>>2)]=0;
      var $82=$tmp;
      _teedataobject_safe_decref($82);
      return 0;
    default: assert(0, "bad label: " + label);
  }
}
function _teedataobject_safe_decref($obj) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $nextlink;
      $1=$obj;
      label = 2; break;
    case 2: 
      var $3=$1;
      var $4=(($3)|(0))!=0;
      if ($4) { label = 3; break; } else { var $16 = 0;label = 5; break; }
    case 3: 
      var $6=$1;
      var $7=(($6+4)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))==((_teedataobject_type)|(0));
      if ($9) { label = 4; break; } else { var $16 = 0;label = 5; break; }
    case 4: 
      var $11=$1;
      var $12=(($11)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13)|(0))==1;
      var $16 = $14;label = 5; break;
    case 5: 
      var $16;
      if ($16) { label = 6; break; } else { label = 12; break; }
    case 6: 
      var $18=$1;
      var $19=$18;
      var $20=(($19+16)|0);
      var $21=HEAP32[(($20)>>2)];
      $nextlink=$21;
      var $22=$1;
      var $23=$22;
      var $24=(($23+16)|0);
      HEAP32[(($24)>>2)]=0;
      label = 7; break;
    case 7: 
      var $26=$1;
      var $27=(($26)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=((($28)-(1))|0);
      HEAP32[(($27)>>2)]=$29;
      var $30=(($29)|(0))!=0;
      if ($30) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 10; break;
    case 9: 
      var $33=$1;
      var $34=(($33+4)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35+24)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=$1;
      FUNCTION_TABLE[$37]($38);
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $41=$nextlink;
      $1=$41;
      label = 2; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $44=$1;
      var $45=(($44)|(0))==0;
      if ($45) { label = 14; break; } else { label = 15; break; }
    case 14: 
      label = 21; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $49=$1;
      var $50=(($49)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=((($51)-(1))|0);
      HEAP32[(($50)>>2)]=$52;
      var $53=(($52)|(0))!=0;
      if ($53) { label = 17; break; } else { label = 18; break; }
    case 17: 
      label = 19; break;
    case 18: 
      var $56=$1;
      var $57=(($56+4)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=(($58+24)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=$1;
      FUNCTION_TABLE[$60]($61);
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _teedataobject_getitem($tdo, $i) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $value;
      $2=$tdo;
      $3=$i;
      var $4=$3;
      var $5=(($4)|(0)) < 57;
      if ($5) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      ___assert_func(((__str1)|0), 377, ((___func___teedataobject_getitem)|0), ((__str9)|0));
      throw "Reached an unreachable!";
      label = 4; break;
    case 4: 
      var $10=$3;
      var $11=$2;
      var $12=(($11+12)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($10)|(0)) < (($13)|(0));
      if ($14) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $16=$3;
      var $17=$2;
      var $18=(($17+20)|0);
      var $19=(($18+($16<<2))|0);
      var $20=HEAP32[(($19)>>2)];
      $value=$20;
      label = 12; break;
    case 6: 
      var $22=$3;
      var $23=$2;
      var $24=(($23+12)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($22)|(0))==(($25)|(0));
      if ($26) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 9; break;
    case 8: 
      ___assert_func(((__str1)|0), 382, ((___func___teedataobject_getitem)|0), ((__str10)|0));
      throw "Reached an unreachable!";
      label = 9; break;
    case 9: 
      var $31=$2;
      var $32=(($31+8)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=_PyIter_Next($33);
      $value=$34;
      var $35=$value;
      var $36=(($35)|(0))==0;
      if ($36) { label = 10; break; } else { label = 11; break; }
    case 10: 
      $1=0;
      label = 13; break;
    case 11: 
      var $39=$2;
      var $40=(($39+12)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=((($41)+(1))|0);
      HEAP32[(($40)>>2)]=$42;
      var $43=$value;
      var $44=$3;
      var $45=$2;
      var $46=(($45+20)|0);
      var $47=(($46+($44<<2))|0);
      HEAP32[(($47)>>2)]=$43;
      label = 12; break;
    case 12: 
      var $49=$value;
      var $50=(($49)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=((($51)+(1))|0);
      HEAP32[(($50)>>2)]=$52;
      var $53=$value;
      $1=$53;
      label = 13; break;
    case 13: 
      var $55=$1;
      return $55;
    default: assert(0, "bad label: " + label);
  }
}
function _groupby_dealloc($gbo) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$gbo;
      var $2=$1;
      var $3=$2;
      _PyObject_GC_UnTrack($3);
      label = 2; break;
    case 2: 
      var $5=$1;
      var $6=(($5+8)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|(0))==0;
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 10; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $12=$1;
      var $13=(($12+8)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=((($16)-(1))|0);
      HEAP32[(($15)>>2)]=$17;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 8; break;
    case 7: 
      var $21=$1;
      var $22=(($21+8)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+4)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25+24)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$1;
      var $29=(($28+8)|0);
      var $30=HEAP32[(($29)>>2)];
      FUNCTION_TABLE[$27]($30);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $36=$1;
      var $37=(($36+12)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38)|(0))==0;
      if ($39) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 20; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $43=$1;
      var $44=(($43+12)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=(($45)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=((($47)-(1))|0);
      HEAP32[(($46)>>2)]=$48;
      var $49=(($48)|(0))!=0;
      if ($49) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 18; break;
    case 17: 
      var $52=$1;
      var $53=(($52+12)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54+4)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=(($56+24)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=$1;
      var $60=(($59+12)|0);
      var $61=HEAP32[(($60)>>2)];
      FUNCTION_TABLE[$58]($61);
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $67=$1;
      var $68=(($67+16)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=(($69)|(0))==0;
      if ($70) { label = 23; break; } else { label = 24; break; }
    case 23: 
      label = 30; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $74=$1;
      var $75=(($74+16)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=(($76)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=((($78)-(1))|0);
      HEAP32[(($77)>>2)]=$79;
      var $80=(($79)|(0))!=0;
      if ($80) { label = 26; break; } else { label = 27; break; }
    case 26: 
      label = 28; break;
    case 27: 
      var $83=$1;
      var $84=(($83+16)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=(($85+4)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=(($87+24)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=$1;
      var $91=(($90+16)|0);
      var $92=HEAP32[(($91)>>2)];
      FUNCTION_TABLE[$89]($92);
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      var $98=$1;
      var $99=(($98+20)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=(($100)|(0))==0;
      if ($101) { label = 33; break; } else { label = 34; break; }
    case 33: 
      label = 40; break;
    case 34: 
      label = 35; break;
    case 35: 
      var $105=$1;
      var $106=(($105+20)|0);
      var $107=HEAP32[(($106)>>2)];
      var $108=(($107)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=((($109)-(1))|0);
      HEAP32[(($108)>>2)]=$110;
      var $111=(($110)|(0))!=0;
      if ($111) { label = 36; break; } else { label = 37; break; }
    case 36: 
      label = 38; break;
    case 37: 
      var $114=$1;
      var $115=(($114+20)|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=(($116+4)|0);
      var $118=HEAP32[(($117)>>2)];
      var $119=(($118+24)|0);
      var $120=HEAP32[(($119)>>2)];
      var $121=$1;
      var $122=(($121+20)|0);
      var $123=HEAP32[(($122)>>2)];
      FUNCTION_TABLE[$120]($123);
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      var $129=$1;
      var $130=(($129+24)|0);
      var $131=HEAP32[(($130)>>2)];
      var $132=(($131)|(0))==0;
      if ($132) { label = 43; break; } else { label = 44; break; }
    case 43: 
      label = 50; break;
    case 44: 
      label = 45; break;
    case 45: 
      var $136=$1;
      var $137=(($136+24)|0);
      var $138=HEAP32[(($137)>>2)];
      var $139=(($138)|0);
      var $140=HEAP32[(($139)>>2)];
      var $141=((($140)-(1))|0);
      HEAP32[(($139)>>2)]=$141;
      var $142=(($141)|(0))!=0;
      if ($142) { label = 46; break; } else { label = 47; break; }
    case 46: 
      label = 48; break;
    case 47: 
      var $145=$1;
      var $146=(($145+24)|0);
      var $147=HEAP32[(($146)>>2)];
      var $148=(($147+4)|0);
      var $149=HEAP32[(($148)>>2)];
      var $150=(($149+24)|0);
      var $151=HEAP32[(($150)>>2)];
      var $152=$1;
      var $153=(($152+24)|0);
      var $154=HEAP32[(($153)>>2)];
      FUNCTION_TABLE[$151]($154);
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      var $159=$1;
      var $160=$159;
      var $161=(($160+4)|0);
      var $162=HEAP32[(($161)>>2)];
      var $163=(($162+160)|0);
      var $164=HEAP32[(($163)>>2)];
      var $165=$1;
      var $166=$165;
      FUNCTION_TABLE[$164]($166);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _groupby_traverse($gbo, $visit, $arg) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $vret;
      var $vret1;
      var $vret2;
      var $vret3;
      var $vret4;
      $2=$gbo;
      $3=$visit;
      $4=$arg;
      label = 2; break;
    case 2: 
      var $6=$2;
      var $7=(($6+8)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $11=$3;
      var $12=$2;
      var $13=(($12+8)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$4;
      var $16=FUNCTION_TABLE[$11]($14, $15);
      $vret=$16;
      var $17=$vret;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $20=$vret;
      $1=$20;
      label = 32; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $25=$2;
      var $26=(($25+12)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27)|(0))!=0;
      if ($28) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $30=$3;
      var $31=$2;
      var $32=(($31+12)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=$4;
      var $35=FUNCTION_TABLE[$30]($33, $34);
      $vret1=$35;
      var $36=$vret1;
      var $37=(($36)|(0))!=0;
      if ($37) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $39=$vret1;
      $1=$39;
      label = 32; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $44=$2;
      var $45=(($44+16)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46)|(0))!=0;
      if ($47) { label = 15; break; } else { label = 18; break; }
    case 15: 
      var $49=$3;
      var $50=$2;
      var $51=(($50+16)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=$4;
      var $54=FUNCTION_TABLE[$49]($52, $53);
      $vret2=$54;
      var $55=$vret2;
      var $56=(($55)|(0))!=0;
      if ($56) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $58=$vret2;
      $1=$58;
      label = 32; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $63=$2;
      var $64=(($63+20)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=(($65)|(0))!=0;
      if ($66) { label = 21; break; } else { label = 24; break; }
    case 21: 
      var $68=$3;
      var $69=$2;
      var $70=(($69+20)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=$4;
      var $73=FUNCTION_TABLE[$68]($71, $72);
      $vret3=$73;
      var $74=$vret3;
      var $75=(($74)|(0))!=0;
      if ($75) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $77=$vret3;
      $1=$77;
      label = 32; break;
    case 23: 
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $82=$2;
      var $83=(($82+24)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=(($84)|(0))!=0;
      if ($85) { label = 27; break; } else { label = 30; break; }
    case 27: 
      var $87=$3;
      var $88=$2;
      var $89=(($88+24)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=$4;
      var $92=FUNCTION_TABLE[$87]($90, $91);
      $vret4=$92;
      var $93=$vret4;
      var $94=(($93)|(0))!=0;
      if ($94) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $96=$vret4;
      $1=$96;
      label = 32; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      $1=0;
      label = 32; break;
    case 32: 
      var $101=$1;
      return $101;
    default: assert(0, "bad label: " + label);
  }
}
function _groupby_next($gbo) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $newvalue;
      var $newkey;
      var $r;
      var $grouper;
      var $tmp;
      var $rcmp;
      $2=$gbo;
      label = 2; break;
    case 2: 
      var $4=$2;
      var $5=(($4+20)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0))==0;
      if ($7) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 13; break;
    case 4: 
      var $10=$2;
      var $11=(($10+16)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12)|(0))==0;
      if ($13) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 46; break;
    case 6: 
      var $16=$2;
      var $17=(($16+16)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=$2;
      var $20=(($19+20)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=_PyObject_RichCompareBool($18, $21, 2);
      $rcmp=$22;
      var $23=$rcmp;
      var $24=(($23)|(0))==-1;
      if ($24) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $1=0;
      label = 64; break;
    case 8: 
      var $27=$rcmp;
      var $28=(($27)|(0))==0;
      if ($28) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 46; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $34=$2;
      var $35=(($34+8)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=_PyIter_Next($36);
      $newvalue=$37;
      var $38=$newvalue;
      var $39=(($38)|(0))==0;
      if ($39) { label = 14; break; } else { label = 15; break; }
    case 14: 
      $1=0;
      label = 64; break;
    case 15: 
      var $42=$2;
      var $43=(($42+12)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=(($44)|(0))==((__Py_NoneStruct)|(0));
      if ($45) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $47=$newvalue;
      $newkey=$47;
      var $48=$newvalue;
      var $49=(($48)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=((($50)+(1))|0);
      HEAP32[(($49)>>2)]=$51;
      label = 25; break;
    case 17: 
      var $53=$2;
      var $54=(($53+12)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=$newvalue;
      var $57=_PyObject_CallFunctionObjArgs($55, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$56,HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
      $newkey=$57;
      var $58=$newkey;
      var $59=(($58)|(0))==0;
      if ($59) { label = 18; break; } else { label = 24; break; }
    case 18: 
      label = 19; break;
    case 19: 
      var $62=$newvalue;
      var $63=(($62)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=((($64)-(1))|0);
      HEAP32[(($63)>>2)]=$65;
      var $66=(($65)|(0))!=0;
      if ($66) { label = 20; break; } else { label = 21; break; }
    case 20: 
      label = 22; break;
    case 21: 
      var $69=$newvalue;
      var $70=(($69+4)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=(($71+24)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=$newvalue;
      FUNCTION_TABLE[$73]($74);
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      $1=0;
      label = 64; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $79=$2;
      var $80=(($79+20)|0);
      var $81=HEAP32[(($80)>>2)];
      $tmp=$81;
      var $82=$newkey;
      var $83=$2;
      var $84=(($83+20)|0);
      HEAP32[(($84)>>2)]=$82;
      label = 26; break;
    case 26: 
      var $86=$tmp;
      var $87=(($86)|(0))==0;
      if ($87) { label = 27; break; } else { label = 28; break; }
    case 27: 
      label = 34; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $91=$tmp;
      var $92=(($91)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=((($93)-(1))|0);
      HEAP32[(($92)>>2)]=$94;
      var $95=(($94)|(0))!=0;
      if ($95) { label = 30; break; } else { label = 31; break; }
    case 30: 
      label = 32; break;
    case 31: 
      var $98=$tmp;
      var $99=(($98+4)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=(($100+24)|0);
      var $102=HEAP32[(($101)>>2)];
      var $103=$tmp;
      FUNCTION_TABLE[$102]($103);
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      var $108=$2;
      var $109=(($108+24)|0);
      var $110=HEAP32[(($109)>>2)];
      $tmp=$110;
      var $111=$newvalue;
      var $112=$2;
      var $113=(($112+24)|0);
      HEAP32[(($113)>>2)]=$111;
      label = 36; break;
    case 36: 
      var $115=$tmp;
      var $116=(($115)|(0))==0;
      if ($116) { label = 37; break; } else { label = 38; break; }
    case 37: 
      label = 44; break;
    case 38: 
      label = 39; break;
    case 39: 
      var $120=$tmp;
      var $121=(($120)|0);
      var $122=HEAP32[(($121)>>2)];
      var $123=((($122)-(1))|0);
      HEAP32[(($121)>>2)]=$123;
      var $124=(($123)|(0))!=0;
      if ($124) { label = 40; break; } else { label = 41; break; }
    case 40: 
      label = 42; break;
    case 41: 
      var $127=$tmp;
      var $128=(($127+4)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=(($129+24)|0);
      var $131=HEAP32[(($130)>>2)];
      var $132=$tmp;
      FUNCTION_TABLE[$131]($132);
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      label = 2; break;
    case 46: 
      var $138=$2;
      var $139=(($138+20)|0);
      var $140=HEAP32[(($139)>>2)];
      var $141=(($140)|0);
      var $142=HEAP32[(($141)>>2)];
      var $143=((($142)+(1))|0);
      HEAP32[(($141)>>2)]=$143;
      var $144=$2;
      var $145=(($144+16)|0);
      var $146=HEAP32[(($145)>>2)];
      $tmp=$146;
      var $147=$2;
      var $148=(($147+20)|0);
      var $149=HEAP32[(($148)>>2)];
      var $150=$2;
      var $151=(($150+16)|0);
      HEAP32[(($151)>>2)]=$149;
      label = 47; break;
    case 47: 
      var $153=$tmp;
      var $154=(($153)|(0))==0;
      if ($154) { label = 48; break; } else { label = 49; break; }
    case 48: 
      label = 55; break;
    case 49: 
      label = 50; break;
    case 50: 
      var $158=$tmp;
      var $159=(($158)|0);
      var $160=HEAP32[(($159)>>2)];
      var $161=((($160)-(1))|0);
      HEAP32[(($159)>>2)]=$161;
      var $162=(($161)|(0))!=0;
      if ($162) { label = 51; break; } else { label = 52; break; }
    case 51: 
      label = 53; break;
    case 52: 
      var $165=$tmp;
      var $166=(($165+4)|0);
      var $167=HEAP32[(($166)>>2)];
      var $168=(($167+24)|0);
      var $169=HEAP32[(($168)>>2)];
      var $170=$tmp;
      FUNCTION_TABLE[$169]($170);
      label = 53; break;
    case 53: 
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      var $175=$2;
      var $176=$2;
      var $177=(($176+16)|0);
      var $178=HEAP32[(($177)>>2)];
      var $179=__grouper_create($175, $178);
      $grouper=$179;
      var $180=$grouper;
      var $181=(($180)|(0))==0;
      if ($181) { label = 57; break; } else { label = 58; break; }
    case 57: 
      $1=0;
      label = 64; break;
    case 58: 
      var $184=$2;
      var $185=(($184+20)|0);
      var $186=HEAP32[(($185)>>2)];
      var $187=$grouper;
      var $188=_PyTuple_Pack(2, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$186,HEAP32[(((tempInt)+(4))>>2)]=$187,tempInt));
      $r=$188;
      label = 59; break;
    case 59: 
      var $190=$grouper;
      var $191=(($190)|0);
      var $192=HEAP32[(($191)>>2)];
      var $193=((($192)-(1))|0);
      HEAP32[(($191)>>2)]=$193;
      var $194=(($193)|(0))!=0;
      if ($194) { label = 60; break; } else { label = 61; break; }
    case 60: 
      label = 62; break;
    case 61: 
      var $197=$grouper;
      var $198=(($197+4)|0);
      var $199=HEAP32[(($198)>>2)];
      var $200=(($199+24)|0);
      var $201=HEAP32[(($200)>>2)];
      var $202=$grouper;
      FUNCTION_TABLE[$201]($202);
      label = 62; break;
    case 62: 
      label = 63; break;
    case 63: 
      var $205=$r;
      $1=$205;
      label = 64; break;
    case 64: 
      var $207=$1;
      STACKTOP = __stackBase__;
      return $207;
    default: assert(0, "bad label: " + label);
  }
}
function _groupby_new($type, $args, $kwds) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $gbo;
      var $it=__stackBase__;
      var $keyfunc=(__stackBase__)+(4);
      $2=$type;
      $3=$args;
      $4=$kwds;
      HEAP32[(($keyfunc)>>2)]=__Py_NoneStruct;
      var $5=$3;
      var $6=$4;
      var $7=_PyArg_ParseTupleAndKeywords($5, $6, ((__str17)|0), ((_groupby_new_kwargs)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$it,HEAP32[(((tempInt)+(4))>>2)]=$keyfunc,tempInt));
      var $8=(($7)|(0))!=0;
      if ($8) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 13; break;
    case 3: 
      var $11=$2;
      var $12=(($11+152)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=$2;
      var $15=FUNCTION_TABLE[$13]($14, 0);
      var $16=$15;
      $gbo=$16;
      var $17=$gbo;
      var $18=(($17)|(0))==0;
      if ($18) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=0;
      label = 13; break;
    case 5: 
      var $21=$gbo;
      var $22=(($21+16)|0);
      HEAP32[(($22)>>2)]=0;
      var $23=$gbo;
      var $24=(($23+20)|0);
      HEAP32[(($24)>>2)]=0;
      var $25=$gbo;
      var $26=(($25+24)|0);
      HEAP32[(($26)>>2)]=0;
      var $27=HEAP32[(($keyfunc)>>2)];
      var $28=$gbo;
      var $29=(($28+12)|0);
      HEAP32[(($29)>>2)]=$27;
      var $30=HEAP32[(($keyfunc)>>2)];
      var $31=(($30)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=((($32)+(1))|0);
      HEAP32[(($31)>>2)]=$33;
      var $34=HEAP32[(($it)>>2)];
      var $35=_PyObject_GetIter($34);
      var $36=$gbo;
      var $37=(($36+8)|0);
      HEAP32[(($37)>>2)]=$35;
      var $38=$gbo;
      var $39=(($38+8)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40)|(0))==0;
      if ($41) { label = 6; break; } else { label = 12; break; }
    case 6: 
      label = 7; break;
    case 7: 
      var $44=$gbo;
      var $45=$44;
      var $46=(($45)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=((($47)-(1))|0);
      HEAP32[(($46)>>2)]=$48;
      var $49=(($48)|(0))!=0;
      if ($49) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 10; break;
    case 9: 
      var $52=$gbo;
      var $53=$52;
      var $54=(($53+4)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=(($55+24)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=$gbo;
      var $59=$58;
      FUNCTION_TABLE[$57]($59);
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      $1=0;
      label = 13; break;
    case 12: 
      var $63=$gbo;
      var $64=$63;
      $1=$64;
      label = 13; break;
    case 13: 
      var $66=$1;
      STACKTOP = __stackBase__;
      return $66;
    default: assert(0, "bad label: " + label);
  }
}
function _repeat_next($ro) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $2=$ro;
      var $3=$2;
      var $4=(($3+12)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))==0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 6; break;
    case 3: 
      var $9=$2;
      var $10=(($9+12)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0)) > 0;
      if ($12) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $14=$2;
      var $15=(($14+12)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=((($16)-(1))|0);
      HEAP32[(($15)>>2)]=$17;
      label = 5; break;
    case 5: 
      var $19=$2;
      var $20=(($19+8)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=((($23)+(1))|0);
      HEAP32[(($22)>>2)]=$24;
      var $25=$2;
      var $26=(($25+8)|0);
      var $27=HEAP32[(($26)>>2)];
      $1=$27;
      label = 6; break;
    case 6: 
      var $29=$1;
      return $29;
    default: assert(0, "bad label: " + label);
  }
}
function __grouper_create($parent, $tgtkey) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $igo;
      $2=$parent;
      $3=$tgtkey;
      var $4=__PyObject_GC_New(__grouper_type);
      var $5=$4;
      $igo=$5;
      var $6=$igo;
      var $7=(($6)|(0))==0;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 4; break;
    case 3: 
      var $10=$2;
      var $11=$10;
      var $12=$igo;
      var $13=(($12+8)|0);
      HEAP32[(($13)>>2)]=$11;
      var $14=$2;
      var $15=$14;
      var $16=(($15)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=((($17)+(1))|0);
      HEAP32[(($16)>>2)]=$18;
      var $19=$3;
      var $20=$igo;
      var $21=(($20+12)|0);
      HEAP32[(($21)>>2)]=$19;
      var $22=$3;
      var $23=(($22)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=((($24)+(1))|0);
      HEAP32[(($23)>>2)]=$25;
      var $26=$igo;
      var $27=$26;
      _PyObject_GC_Track($27);
      var $28=$igo;
      var $29=$28;
      $1=$29;
      label = 4; break;
    case 4: 
      var $31=$1;
      return $31;
    default: assert(0, "bad label: " + label);
  }
}
function _repeat_dealloc($ro) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$ro;
      var $2=$1;
      var $3=$2;
      _PyObject_GC_UnTrack($3);
      label = 2; break;
    case 2: 
      var $5=$1;
      var $6=(($5+8)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|(0))==0;
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 10; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $12=$1;
      var $13=(($12+8)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=((($16)-(1))|0);
      HEAP32[(($15)>>2)]=$17;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 8; break;
    case 7: 
      var $21=$1;
      var $22=(($21+8)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+4)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25+24)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$1;
      var $29=(($28+8)|0);
      var $30=HEAP32[(($29)>>2)];
      FUNCTION_TABLE[$27]($30);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $35=$1;
      var $36=$35;
      var $37=(($36+4)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38+160)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=$1;
      var $42=$41;
      FUNCTION_TABLE[$40]($42);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _repeat_repr($ro) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $result;
      var $objrepr;
      $2=$ro;
      var $3=$2;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=_PyObject_Repr($5);
      $objrepr=$6;
      var $7=$objrepr;
      var $8=(($7)|(0))==0;
      if ($8) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 12; break;
    case 3: 
      var $11=$2;
      var $12=(($11+12)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13)|(0))==-1;
      if ($14) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $16=$objrepr;
      var $17=$16;
      var $18=(($17+20)|0);
      var $19=(($18)|0);
      var $20=_PyString_FromFormat(((__str24)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$19,tempInt));
      $result=$20;
      label = 6; break;
    case 5: 
      var $22=$objrepr;
      var $23=$22;
      var $24=(($23+20)|0);
      var $25=(($24)|0);
      var $26=$2;
      var $27=(($26+12)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=_PyString_FromFormat(((__str25)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$25,HEAP32[(((tempInt)+(4))>>2)]=$28,tempInt));
      $result=$29;
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $32=$objrepr;
      var $33=(($32)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=((($34)-(1))|0);
      HEAP32[(($33)>>2)]=$35;
      var $36=(($35)|(0))!=0;
      if ($36) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 10; break;
    case 9: 
      var $39=$objrepr;
      var $40=(($39+4)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($41+24)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=$objrepr;
      FUNCTION_TABLE[$43]($44);
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $47=$result;
      $1=$47;
      label = 12; break;
    case 12: 
      var $49=$1;
      STACKTOP = __stackBase__;
      return $49;
    default: assert(0, "bad label: " + label);
  }
}
function _repeat_traverse($ro, $visit, $arg) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $vret;
      $2=$ro;
      $3=$visit;
      $4=$arg;
      label = 2; break;
    case 2: 
      var $6=$2;
      var $7=(($6+8)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $11=$3;
      var $12=$2;
      var $13=(($12+8)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$4;
      var $16=FUNCTION_TABLE[$11]($14, $15);
      $vret=$16;
      var $17=$vret;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $20=$vret;
      $1=$20;
      label = 8; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      $1=0;
      label = 8; break;
    case 8: 
      var $25=$1;
      return $25;
    default: assert(0, "bad label: " + label);
  }
}
function _repeat_new($type, $args, $kwds) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ro;
      var $element=__stackBase__;
      var $cnt=(__stackBase__)+(4);
      $2=$type;
      $3=$args;
      $4=$kwds;
      HEAP32[(($cnt)>>2)]=-1;
      var $5=$3;
      var $6=$4;
      var $7=_PyArg_ParseTupleAndKeywords($5, $6, ((__str21)|0), ((_repeat_new_kwargs)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$element,HEAP32[(((tempInt)+(4))>>2)]=$cnt,tempInt));
      var $8=(($7)|(0))!=0;
      if ($8) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 9; break;
    case 3: 
      var $11=$3;
      var $12=_PyTuple_Size($11);
      var $13=(($12)|(0))==2;
      if ($13) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $15=HEAP32[(($cnt)>>2)];
      var $16=(($15)|(0)) < 0;
      if ($16) { label = 5; break; } else { label = 6; break; }
    case 5: 
      HEAP32[(($cnt)>>2)]=0;
      label = 6; break;
    case 6: 
      var $19=$2;
      var $20=(($19+152)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$2;
      var $23=FUNCTION_TABLE[$21]($22, 0);
      var $24=$23;
      $ro=$24;
      var $25=$ro;
      var $26=(($25)|(0))==0;
      if ($26) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $1=0;
      label = 9; break;
    case 8: 
      var $29=HEAP32[(($element)>>2)];
      var $30=(($29)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=((($31)+(1))|0);
      HEAP32[(($30)>>2)]=$32;
      var $33=HEAP32[(($element)>>2)];
      var $34=$ro;
      var $35=(($34+8)|0);
      HEAP32[(($35)>>2)]=$33;
      var $36=HEAP32[(($cnt)>>2)];
      var $37=$ro;
      var $38=(($37+12)|0);
      HEAP32[(($38)>>2)]=$36;
      var $39=$ro;
      var $40=$39;
      $1=$40;
      label = 9; break;
    case 9: 
      var $42=$1;
      STACKTOP = __stackBase__;
      return $42;
    default: assert(0, "bad label: " + label);
  }
}
function _repeat_len($ro) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $2=$ro;
      var $3=$2;
      var $4=(($3+12)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))==-1;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=HEAP32[((_PyExc_TypeError)>>2)];
      _PyErr_SetString($8, ((__str23)|0));
      $1=0;
      label = 4; break;
    case 3: 
      var $10=$2;
      var $11=(($10+12)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=_PyInt_FromSize_t($12);
      $1=$13;
      label = 4; break;
    case 4: 
      var $15=$1;
      return $15;
    default: assert(0, "bad label: " + label);
  }
}
function _product_dealloc($lz) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$lz;
      var $2=$1;
      var $3=$2;
      _PyObject_GC_UnTrack($3);
      label = 2; break;
    case 2: 
      var $5=$1;
      var $6=(($5+8)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|(0))==0;
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 10; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $12=$1;
      var $13=(($12+8)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=((($16)-(1))|0);
      HEAP32[(($15)>>2)]=$17;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 8; break;
    case 7: 
      var $21=$1;
      var $22=(($21+8)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+4)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25+24)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$1;
      var $29=(($28+8)|0);
      var $30=HEAP32[(($29)>>2)];
      FUNCTION_TABLE[$27]($30);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $36=$1;
      var $37=(($36+16)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38)|(0))==0;
      if ($39) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 20; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $43=$1;
      var $44=(($43+16)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=(($45)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=((($47)-(1))|0);
      HEAP32[(($46)>>2)]=$48;
      var $49=(($48)|(0))!=0;
      if ($49) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 18; break;
    case 17: 
      var $52=$1;
      var $53=(($52+16)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54+4)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=(($56+24)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=$1;
      var $60=(($59+16)|0);
      var $61=HEAP32[(($60)>>2)];
      FUNCTION_TABLE[$58]($61);
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $66=$1;
      var $67=(($66+12)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=(($68)|(0))!=0;
      if ($69) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $71=$1;
      var $72=(($71+12)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=$73;
      _PyMem_Free($74);
      label = 23; break;
    case 23: 
      var $76=$1;
      var $77=$76;
      var $78=(($77+4)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=(($79+160)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=$1;
      var $83=$82;
      FUNCTION_TABLE[$81]($83);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _product_traverse($lz, $visit, $arg) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $vret;
      var $vret1;
      $2=$lz;
      $3=$visit;
      $4=$arg;
      label = 2; break;
    case 2: 
      var $6=$2;
      var $7=(($6+8)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $11=$3;
      var $12=$2;
      var $13=(($12+8)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$4;
      var $16=FUNCTION_TABLE[$11]($14, $15);
      $vret=$16;
      var $17=$vret;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $20=$vret;
      $1=$20;
      label = 14; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $25=$2;
      var $26=(($25+16)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27)|(0))!=0;
      if ($28) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $30=$3;
      var $31=$2;
      var $32=(($31+16)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=$4;
      var $35=FUNCTION_TABLE[$30]($33, $34);
      $vret1=$35;
      var $36=$vret1;
      var $37=(($36)|(0))!=0;
      if ($37) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $39=$vret1;
      $1=$39;
      label = 14; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      $1=0;
      label = 14; break;
    case 14: 
      var $44=$1;
      return $44;
    default: assert(0, "bad label: " + label);
  }
}
function _permutations_dealloc($po) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$po;
      var $2=$1;
      var $3=$2;
      _PyObject_GC_UnTrack($3);
      label = 2; break;
    case 2: 
      var $5=$1;
      var $6=(($5+8)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|(0))==0;
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 10; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $12=$1;
      var $13=(($12+8)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=((($16)-(1))|0);
      HEAP32[(($15)>>2)]=$17;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 8; break;
    case 7: 
      var $21=$1;
      var $22=(($21+8)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+4)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25+24)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$1;
      var $29=(($28+8)|0);
      var $30=HEAP32[(($29)>>2)];
      FUNCTION_TABLE[$27]($30);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $36=$1;
      var $37=(($36+20)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38)|(0))==0;
      if ($39) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 20; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $43=$1;
      var $44=(($43+20)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=(($45)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=((($47)-(1))|0);
      HEAP32[(($46)>>2)]=$48;
      var $49=(($48)|(0))!=0;
      if ($49) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 18; break;
    case 17: 
      var $52=$1;
      var $53=(($52+20)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54+4)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=(($56+24)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=$1;
      var $60=(($59+20)|0);
      var $61=HEAP32[(($60)>>2)];
      FUNCTION_TABLE[$58]($61);
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $66=$1;
      var $67=(($66+12)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=$68;
      _PyMem_Free($69);
      var $70=$1;
      var $71=(($70+16)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=$72;
      _PyMem_Free($73);
      var $74=$1;
      var $75=$74;
      var $76=(($75+4)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=(($77+160)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=$1;
      var $81=$80;
      FUNCTION_TABLE[$79]($81);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _product_next($lz) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $pool;
      var $elem;
      var $oldelem;
      var $pools;
      var $result;
      var $npools;
      var $i;
      var $indices;
      var $old_result;
      $2=$lz;
      var $3=$2;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      $pools=$5;
      var $6=$2;
      var $7=(($6+16)|0);
      var $8=HEAP32[(($7)>>2)];
      $result=$8;
      var $9=$pools;
      var $10=$9;
      var $11=(($10+8)|0);
      var $12=HEAP32[(($11)>>2)];
      $npools=$12;
      var $13=$2;
      var $14=(($13+20)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15)|(0))!=0;
      if ($16) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 52; break;
    case 3: 
      var $19=$result;
      var $20=(($19)|(0))==0;
      if ($20) { label = 4; break; } else { label = 13; break; }
    case 4: 
      var $22=$npools;
      var $23=_PyTuple_New($22);
      $result=$23;
      var $24=$result;
      var $25=(($24)|(0))==0;
      if ($25) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 51; break;
    case 6: 
      var $28=$result;
      var $29=$2;
      var $30=(($29+16)|0);
      HEAP32[(($30)>>2)]=$28;
      $i=0;
      label = 7; break;
    case 7: 
      var $32=$i;
      var $33=$npools;
      var $34=(($32)|(0)) < (($33)|(0));
      if ($34) { label = 8; break; } else { label = 12; break; }
    case 8: 
      var $36=$i;
      var $37=$pools;
      var $38=$37;
      var $39=(($38+12)|0);
      var $40=(($39+($36<<2))|0);
      var $41=HEAP32[(($40)>>2)];
      $pool=$41;
      var $42=$pool;
      var $43=$42;
      var $44=(($43+8)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=(($45)|(0))==0;
      if ($46) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 51; break;
    case 10: 
      var $49=$pool;
      var $50=$49;
      var $51=(($50+12)|0);
      var $52=(($51)|0);
      var $53=HEAP32[(($52)>>2)];
      $elem=$53;
      var $54=$elem;
      var $55=(($54)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=((($56)+(1))|0);
      HEAP32[(($55)>>2)]=$57;
      var $58=$elem;
      var $59=$i;
      var $60=$result;
      var $61=$60;
      var $62=(($61+12)|0);
      var $63=(($62+($59<<2))|0);
      HEAP32[(($63)>>2)]=$58;
      label = 11; break;
    case 11: 
      var $65=$i;
      var $66=((($65)+(1))|0);
      $i=$66;
      label = 7; break;
    case 12: 
      label = 50; break;
    case 13: 
      var $69=$2;
      var $70=(($69+12)|0);
      var $71=HEAP32[(($70)>>2)];
      $indices=$71;
      var $72=$result;
      var $73=(($72)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=(($74)|(0)) > 1;
      if ($75) { label = 14; break; } else { label = 26; break; }
    case 14: 
      var $77=$result;
      $old_result=$77;
      var $78=$npools;
      var $79=_PyTuple_New($78);
      $result=$79;
      var $80=$result;
      var $81=(($80)|(0))==0;
      if ($81) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 51; break;
    case 16: 
      var $84=$result;
      var $85=$2;
      var $86=(($85+16)|0);
      HEAP32[(($86)>>2)]=$84;
      $i=0;
      label = 17; break;
    case 17: 
      var $88=$i;
      var $89=$npools;
      var $90=(($88)|(0)) < (($89)|(0));
      if ($90) { label = 18; break; } else { label = 20; break; }
    case 18: 
      var $92=$i;
      var $93=$old_result;
      var $94=$93;
      var $95=(($94+12)|0);
      var $96=(($95+($92<<2))|0);
      var $97=HEAP32[(($96)>>2)];
      $elem=$97;
      var $98=$elem;
      var $99=(($98)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=((($100)+(1))|0);
      HEAP32[(($99)>>2)]=$101;
      var $102=$elem;
      var $103=$i;
      var $104=$result;
      var $105=$104;
      var $106=(($105+12)|0);
      var $107=(($106+($103<<2))|0);
      HEAP32[(($107)>>2)]=$102;
      label = 19; break;
    case 19: 
      var $109=$i;
      var $110=((($109)+(1))|0);
      $i=$110;
      label = 17; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $113=$old_result;
      var $114=(($113)|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=((($115)-(1))|0);
      HEAP32[(($114)>>2)]=$116;
      var $117=(($116)|(0))!=0;
      if ($117) { label = 22; break; } else { label = 23; break; }
    case 22: 
      label = 24; break;
    case 23: 
      var $120=$old_result;
      var $121=(($120+4)|0);
      var $122=HEAP32[(($121)>>2)];
      var $123=(($122+24)|0);
      var $124=HEAP32[(($123)>>2)];
      var $125=$old_result;
      FUNCTION_TABLE[$124]($125);
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $129=$npools;
      var $130=(($129)|(0))==0;
      if ($130) { label = 28; break; } else { label = 27; break; }
    case 27: 
      var $132=$result;
      var $133=(($132)|0);
      var $134=HEAP32[(($133)>>2)];
      var $135=(($134)|(0))==1;
      if ($135) { label = 28; break; } else { label = 29; break; }
    case 28: 
      label = 30; break;
    case 29: 
      ___assert_func(((__str1)|0), 1952, ((___func___product_next)|0), ((__str31)|0));
      throw "Reached an unreachable!";
      label = 30; break;
    case 30: 
      var $140=$npools;
      var $141=((($140)-(1))|0);
      $i=$141;
      label = 31; break;
    case 31: 
      var $143=$i;
      var $144=(($143)|(0)) >= 0;
      if ($144) { label = 32; break; } else { label = 47; break; }
    case 32: 
      var $146=$i;
      var $147=$pools;
      var $148=$147;
      var $149=(($148+12)|0);
      var $150=(($149+($146<<2))|0);
      var $151=HEAP32[(($150)>>2)];
      $pool=$151;
      var $152=$i;
      var $153=$indices;
      var $154=(($153+($152<<2))|0);
      var $155=HEAP32[(($154)>>2)];
      var $156=((($155)+(1))|0);
      HEAP32[(($154)>>2)]=$156;
      var $157=$i;
      var $158=$indices;
      var $159=(($158+($157<<2))|0);
      var $160=HEAP32[(($159)>>2)];
      var $161=$pool;
      var $162=$161;
      var $163=(($162+8)|0);
      var $164=HEAP32[(($163)>>2)];
      var $165=(($160)|(0))==(($164)|(0));
      if ($165) { label = 33; break; } else { label = 39; break; }
    case 33: 
      var $167=$i;
      var $168=$indices;
      var $169=(($168+($167<<2))|0);
      HEAP32[(($169)>>2)]=0;
      var $170=$pool;
      var $171=$170;
      var $172=(($171+12)|0);
      var $173=(($172)|0);
      var $174=HEAP32[(($173)>>2)];
      $elem=$174;
      var $175=$elem;
      var $176=(($175)|0);
      var $177=HEAP32[(($176)>>2)];
      var $178=((($177)+(1))|0);
      HEAP32[(($176)>>2)]=$178;
      var $179=$i;
      var $180=$result;
      var $181=$180;
      var $182=(($181+12)|0);
      var $183=(($182+($179<<2))|0);
      var $184=HEAP32[(($183)>>2)];
      $oldelem=$184;
      var $185=$elem;
      var $186=$i;
      var $187=$result;
      var $188=$187;
      var $189=(($188+12)|0);
      var $190=(($189+($186<<2))|0);
      HEAP32[(($190)>>2)]=$185;
      label = 34; break;
    case 34: 
      var $192=$oldelem;
      var $193=(($192)|0);
      var $194=HEAP32[(($193)>>2)];
      var $195=((($194)-(1))|0);
      HEAP32[(($193)>>2)]=$195;
      var $196=(($195)|(0))!=0;
      if ($196) { label = 35; break; } else { label = 36; break; }
    case 35: 
      label = 37; break;
    case 36: 
      var $199=$oldelem;
      var $200=(($199+4)|0);
      var $201=HEAP32[(($200)>>2)];
      var $202=(($201+24)|0);
      var $203=HEAP32[(($202)>>2)];
      var $204=$oldelem;
      FUNCTION_TABLE[$203]($204);
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      label = 45; break;
    case 39: 
      var $208=$i;
      var $209=$indices;
      var $210=(($209+($208<<2))|0);
      var $211=HEAP32[(($210)>>2)];
      var $212=$pool;
      var $213=$212;
      var $214=(($213+12)|0);
      var $215=(($214+($211<<2))|0);
      var $216=HEAP32[(($215)>>2)];
      $elem=$216;
      var $217=$elem;
      var $218=(($217)|0);
      var $219=HEAP32[(($218)>>2)];
      var $220=((($219)+(1))|0);
      HEAP32[(($218)>>2)]=$220;
      var $221=$i;
      var $222=$result;
      var $223=$222;
      var $224=(($223+12)|0);
      var $225=(($224+($221<<2))|0);
      var $226=HEAP32[(($225)>>2)];
      $oldelem=$226;
      var $227=$elem;
      var $228=$i;
      var $229=$result;
      var $230=$229;
      var $231=(($230+12)|0);
      var $232=(($231+($228<<2))|0);
      HEAP32[(($232)>>2)]=$227;
      label = 40; break;
    case 40: 
      var $234=$oldelem;
      var $235=(($234)|0);
      var $236=HEAP32[(($235)>>2)];
      var $237=((($236)-(1))|0);
      HEAP32[(($235)>>2)]=$237;
      var $238=(($237)|(0))!=0;
      if ($238) { label = 41; break; } else { label = 42; break; }
    case 41: 
      label = 43; break;
    case 42: 
      var $241=$oldelem;
      var $242=(($241+4)|0);
      var $243=HEAP32[(($242)>>2)];
      var $244=(($243+24)|0);
      var $245=HEAP32[(($244)>>2)];
      var $246=$oldelem;
      FUNCTION_TABLE[$245]($246);
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      label = 47; break;
    case 45: 
      label = 46; break;
    case 46: 
      var $251=$i;
      var $252=((($251)-(1))|0);
      $i=$252;
      label = 31; break;
    case 47: 
      var $254=$i;
      var $255=(($254)|(0)) < 0;
      if ($255) { label = 48; break; } else { label = 49; break; }
    case 48: 
      label = 51; break;
    case 49: 
      label = 50; break;
    case 50: 
      var $259=$result;
      var $260=(($259)|0);
      var $261=HEAP32[(($260)>>2)];
      var $262=((($261)+(1))|0);
      HEAP32[(($260)>>2)]=$262;
      var $263=$result;
      $1=$263;
      label = 52; break;
    case 51: 
      var $265=$2;
      var $266=(($265+20)|0);
      HEAP32[(($266)>>2)]=1;
      $1=0;
      label = 52; break;
    case 52: 
      var $268=$1;
      return $268;
    default: assert(0, "bad label: " + label);
  }
}
function _product_new($type, $args, $kwds) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $lz;
      var $nargs;
      var $npools;
      var $repeat=__stackBase__;
      var $pools;
      var $indices;
      var $i;
      var $kwlist=(__stackBase__)+(4);
      var $tmpargs;
      var $item;
      var $pool;
      var $pool1;
      $2=$type;
      $3=$args;
      $4=$kwds;
      HEAP32[(($repeat)>>2)]=1;
      $pools=0;
      $indices=0;
      var $5=$4;
      var $6=(($5)|(0))!=0;
      if ($6) { label = 2; break; } else { label = 19; break; }
    case 2: 
      var $8=$kwlist;
      assert(8 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[((_product_new_kwlist)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[(((_product_new_kwlist)+(4))>>2)];
      var $9=_PyTuple_New(0);
      $tmpargs=$9;
      var $10=$tmpargs;
      var $11=(($10)|(0))==0;
      if ($11) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=0;
      label = 55; break;
    case 4: 
      var $14=$tmpargs;
      var $15=$4;
      var $16=(($kwlist)|0);
      var $17=_PyArg_ParseTupleAndKeywords($14, $15, ((__str28)|0), $16, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$repeat,tempInt));
      var $18=(($17)|(0))!=0;
      if ($18) { label = 11; break; } else { label = 5; break; }
    case 5: 
      label = 6; break;
    case 6: 
      var $21=$tmpargs;
      var $22=(($21)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=((($23)-(1))|0);
      HEAP32[(($22)>>2)]=$24;
      var $25=(($24)|(0))!=0;
      if ($25) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 9; break;
    case 8: 
      var $28=$tmpargs;
      var $29=(($28+4)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=(($30+24)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=$tmpargs;
      FUNCTION_TABLE[$32]($33);
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      $1=0;
      label = 55; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $38=$tmpargs;
      var $39=(($38)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=((($40)-(1))|0);
      HEAP32[(($39)>>2)]=$41;
      var $42=(($41)|(0))!=0;
      if ($42) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 15; break;
    case 14: 
      var $45=$tmpargs;
      var $46=(($45+4)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=(($47+24)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=$tmpargs;
      FUNCTION_TABLE[$49]($50);
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $53=HEAP32[(($repeat)>>2)];
      var $54=(($53)|(0)) < 0;
      if ($54) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $56=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($56, ((__str29)|0));
      $1=0;
      label = 55; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $59=$3;
      var $60=(($59+4)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=(($61+84)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=$63 & 67108864;
      var $65=(($64)|(0))!=0;
      if ($65) { label = 20; break; } else { label = 21; break; }
    case 20: 
      label = 22; break;
    case 21: 
      ___assert_func(((__str1)|0), 1838, ((___func___product_new)|0), ((__str30)|0));
      throw "Reached an unreachable!";
      label = 22; break;
    case 22: 
      var $70=HEAP32[(($repeat)>>2)];
      var $71=(($70)|(0))==0;
      if ($71) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $79 = 0;label = 25; break;
    case 24: 
      var $74=$3;
      var $75=$74;
      var $76=(($75+8)|0);
      var $77=HEAP32[(($76)>>2)];
      var $79 = $77;label = 25; break;
    case 25: 
      var $79;
      $nargs=$79;
      var $80=$nargs;
      var $81=HEAP32[(($repeat)>>2)];
      var $82=Math.imul($80,$81);
      $npools=$82;
      var $83=$npools;
      var $84=($83<<2);
      var $85=_PyMem_Malloc($84);
      var $86=$85;
      $indices=$86;
      var $87=$indices;
      var $88=(($87)|(0))==0;
      if ($88) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $90=_PyErr_NoMemory();
      label = 42; break;
    case 27: 
      var $92=$npools;
      var $93=_PyTuple_New($92);
      $pools=$93;
      var $94=$pools;
      var $95=(($94)|(0))==0;
      if ($95) { label = 28; break; } else { label = 29; break; }
    case 28: 
      label = 42; break;
    case 29: 
      $i=0;
      label = 30; break;
    case 30: 
      var $99=$i;
      var $100=$nargs;
      var $101=(($99)|(0)) < (($100)|(0));
      if ($101) { label = 31; break; } else { label = 35; break; }
    case 31: 
      var $103=$i;
      var $104=$3;
      var $105=$104;
      var $106=(($105+12)|0);
      var $107=(($106+($103<<2))|0);
      var $108=HEAP32[(($107)>>2)];
      $item=$108;
      var $109=$item;
      var $110=_PySequence_Tuple($109);
      $pool=$110;
      var $111=$pool;
      var $112=(($111)|(0))==0;
      if ($112) { label = 32; break; } else { label = 33; break; }
    case 32: 
      label = 42; break;
    case 33: 
      var $115=$pool;
      var $116=$i;
      var $117=$pools;
      var $118=$117;
      var $119=(($118+12)|0);
      var $120=(($119+($116<<2))|0);
      HEAP32[(($120)>>2)]=$115;
      var $121=$i;
      var $122=$indices;
      var $123=(($122+($121<<2))|0);
      HEAP32[(($123)>>2)]=0;
      label = 34; break;
    case 34: 
      var $125=$i;
      var $126=((($125)+(1))|0);
      $i=$126;
      label = 30; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $129=$i;
      var $130=$npools;
      var $131=(($129)|(0)) < (($130)|(0));
      if ($131) { label = 37; break; } else { label = 39; break; }
    case 37: 
      var $133=$i;
      var $134=$nargs;
      var $135=((($133)-($134))|0);
      var $136=$pools;
      var $137=$136;
      var $138=(($137+12)|0);
      var $139=(($138+($135<<2))|0);
      var $140=HEAP32[(($139)>>2)];
      $pool1=$140;
      var $141=$pool1;
      var $142=(($141)|0);
      var $143=HEAP32[(($142)>>2)];
      var $144=((($143)+(1))|0);
      HEAP32[(($142)>>2)]=$144;
      var $145=$pool1;
      var $146=$i;
      var $147=$pools;
      var $148=$147;
      var $149=(($148+12)|0);
      var $150=(($149+($146<<2))|0);
      HEAP32[(($150)>>2)]=$145;
      var $151=$i;
      var $152=$indices;
      var $153=(($152+($151<<2))|0);
      HEAP32[(($153)>>2)]=0;
      label = 38; break;
    case 38: 
      var $155=$i;
      var $156=((($155)+(1))|0);
      $i=$156;
      label = 36; break;
    case 39: 
      var $158=$2;
      var $159=(($158+152)|0);
      var $160=HEAP32[(($159)>>2)];
      var $161=$2;
      var $162=FUNCTION_TABLE[$160]($161, 0);
      var $163=$162;
      $lz=$163;
      var $164=$lz;
      var $165=(($164)|(0))==0;
      if ($165) { label = 40; break; } else { label = 41; break; }
    case 40: 
      label = 42; break;
    case 41: 
      var $168=$pools;
      var $169=$lz;
      var $170=(($169+8)|0);
      HEAP32[(($170)>>2)]=$168;
      var $171=$indices;
      var $172=$lz;
      var $173=(($172+12)|0);
      HEAP32[(($173)>>2)]=$171;
      var $174=$lz;
      var $175=(($174+16)|0);
      HEAP32[(($175)>>2)]=0;
      var $176=$lz;
      var $177=(($176+20)|0);
      HEAP32[(($177)>>2)]=0;
      var $178=$lz;
      var $179=$178;
      $1=$179;
      label = 55; break;
    case 42: 
      var $181=$indices;
      var $182=(($181)|(0))!=0;
      if ($182) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $184=$indices;
      var $185=$184;
      _PyMem_Free($185);
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      var $188=$pools;
      var $189=(($188)|(0))==0;
      if ($189) { label = 46; break; } else { label = 47; break; }
    case 46: 
      label = 53; break;
    case 47: 
      label = 48; break;
    case 48: 
      var $193=$pools;
      var $194=(($193)|0);
      var $195=HEAP32[(($194)>>2)];
      var $196=((($195)-(1))|0);
      HEAP32[(($194)>>2)]=$196;
      var $197=(($196)|(0))!=0;
      if ($197) { label = 49; break; } else { label = 50; break; }
    case 49: 
      label = 51; break;
    case 50: 
      var $200=$pools;
      var $201=(($200+4)|0);
      var $202=HEAP32[(($201)>>2)];
      var $203=(($202+24)|0);
      var $204=HEAP32[(($203)>>2)];
      var $205=$pools;
      FUNCTION_TABLE[$204]($205);
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      label = 54; break;
    case 54: 
      $1=0;
      label = 55; break;
    case 55: 
      var $211=$1;
      STACKTOP = __stackBase__;
      return $211;
    default: assert(0, "bad label: " + label);
  }
}
function _permutations_traverse($po, $visit, $arg) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $vret;
      var $vret1;
      $2=$po;
      $3=$visit;
      $4=$arg;
      label = 2; break;
    case 2: 
      var $6=$2;
      var $7=(($6+8)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $11=$3;
      var $12=$2;
      var $13=(($12+8)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$4;
      var $16=FUNCTION_TABLE[$11]($14, $15);
      $vret=$16;
      var $17=$vret;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $20=$vret;
      $1=$20;
      label = 14; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $25=$2;
      var $26=(($25+20)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27)|(0))!=0;
      if ($28) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $30=$3;
      var $31=$2;
      var $32=(($31+20)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=$4;
      var $35=FUNCTION_TABLE[$30]($33, $34);
      $vret1=$35;
      var $36=$vret1;
      var $37=(($36)|(0))!=0;
      if ($37) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $39=$vret1;
      $1=$39;
      label = 14; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      $1=0;
      label = 14; break;
    case 14: 
      var $44=$1;
      return $44;
    default: assert(0, "bad label: " + label);
  }
}
function _permutations_new($type, $args, $kwds) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $po;
      var $n;
      var $r;
      var $robj=__stackBase__;
      var $pool;
      var $iterable=(__stackBase__)+(4);
      var $indices;
      var $cycles;
      var $i;
      $2=$type;
      $3=$args;
      $4=$kwds;
      HEAP32[(($robj)>>2)]=__Py_NoneStruct;
      $pool=0;
      HEAP32[(($iterable)>>2)]=0;
      $indices=0;
      $cycles=0;
      var $5=$3;
      var $6=$4;
      var $7=_PyArg_ParseTupleAndKeywords($5, $6, ((__str34)|0), ((_permutations_new_kwargs)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$iterable,HEAP32[(((tempInt)+(4))>>2)]=$robj,tempInt));
      var $8=(($7)|(0))!=0;
      if ($8) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 41; break;
    case 3: 
      var $11=HEAP32[(($iterable)>>2)];
      var $12=_PySequence_Tuple($11);
      $pool=$12;
      var $13=$pool;
      var $14=(($13)|(0))==0;
      if ($14) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 26; break;
    case 5: 
      var $17=$pool;
      var $18=$17;
      var $19=(($18+8)|0);
      var $20=HEAP32[(($19)>>2)];
      $n=$20;
      var $21=$n;
      $r=$21;
      var $22=HEAP32[(($robj)>>2)];
      var $23=(($22)|(0))!=((__Py_NoneStruct)|(0));
      if ($23) { label = 6; break; } else { label = 10; break; }
    case 6: 
      var $25=HEAP32[(($robj)>>2)];
      var $26=_PyInt_AsSsize_t($25);
      $r=$26;
      var $27=$r;
      var $28=(($27)|(0))==-1;
      if ($28) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $30=_PyErr_Occurred();
      var $31=(($30)|(0))!=0;
      if ($31) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 26; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $35=$r;
      var $36=(($35)|(0)) < 0;
      if ($36) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $38=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($38, ((__str35)|0));
      label = 26; break;
    case 12: 
      var $40=$n;
      var $41=($40<<2);
      var $42=_PyMem_Malloc($41);
      var $43=$42;
      $indices=$43;
      var $44=$r;
      var $45=($44<<2);
      var $46=_PyMem_Malloc($45);
      var $47=$46;
      $cycles=$47;
      var $48=$indices;
      var $49=(($48)|(0))==0;
      if ($49) { label = 14; break; } else { label = 13; break; }
    case 13: 
      var $51=$cycles;
      var $52=(($51)|(0))==0;
      if ($52) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $54=_PyErr_NoMemory();
      label = 26; break;
    case 15: 
      $i=0;
      label = 16; break;
    case 16: 
      var $57=$i;
      var $58=$n;
      var $59=(($57)|(0)) < (($58)|(0));
      if ($59) { label = 17; break; } else { label = 19; break; }
    case 17: 
      var $61=$i;
      var $62=$i;
      var $63=$indices;
      var $64=(($63+($62<<2))|0);
      HEAP32[(($64)>>2)]=$61;
      label = 18; break;
    case 18: 
      var $66=$i;
      var $67=((($66)+(1))|0);
      $i=$67;
      label = 16; break;
    case 19: 
      $i=0;
      label = 20; break;
    case 20: 
      var $70=$i;
      var $71=$r;
      var $72=(($70)|(0)) < (($71)|(0));
      if ($72) { label = 21; break; } else { label = 23; break; }
    case 21: 
      var $74=$n;
      var $75=$i;
      var $76=((($74)-($75))|0);
      var $77=$i;
      var $78=$cycles;
      var $79=(($78+($77<<2))|0);
      HEAP32[(($79)>>2)]=$76;
      label = 22; break;
    case 22: 
      var $81=$i;
      var $82=((($81)+(1))|0);
      $i=$82;
      label = 20; break;
    case 23: 
      var $84=$2;
      var $85=(($84+152)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=$2;
      var $88=FUNCTION_TABLE[$86]($87, 0);
      var $89=$88;
      $po=$89;
      var $90=$po;
      var $91=(($90)|(0))==0;
      if ($91) { label = 24; break; } else { label = 25; break; }
    case 24: 
      label = 26; break;
    case 25: 
      var $94=$pool;
      var $95=$po;
      var $96=(($95+8)|0);
      HEAP32[(($96)>>2)]=$94;
      var $97=$indices;
      var $98=$po;
      var $99=(($98+12)|0);
      HEAP32[(($99)>>2)]=$97;
      var $100=$cycles;
      var $101=$po;
      var $102=(($101+16)|0);
      HEAP32[(($102)>>2)]=$100;
      var $103=$po;
      var $104=(($103+20)|0);
      HEAP32[(($104)>>2)]=0;
      var $105=$r;
      var $106=$po;
      var $107=(($106+24)|0);
      HEAP32[(($107)>>2)]=$105;
      var $108=$r;
      var $109=$n;
      var $110=(($108)|(0)) > (($109)|(0));
      var $111=$110 ? 1 : 0;
      var $112=$po;
      var $113=(($112+28)|0);
      HEAP32[(($113)>>2)]=$111;
      var $114=$po;
      var $115=$114;
      $1=$115;
      label = 41; break;
    case 26: 
      var $117=$indices;
      var $118=(($117)|(0))!=0;
      if ($118) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $120=$indices;
      var $121=$120;
      _PyMem_Free($121);
      label = 28; break;
    case 28: 
      var $123=$cycles;
      var $124=(($123)|(0))!=0;
      if ($124) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $126=$cycles;
      var $127=$126;
      _PyMem_Free($127);
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $130=$pool;
      var $131=(($130)|(0))==0;
      if ($131) { label = 32; break; } else { label = 33; break; }
    case 32: 
      label = 39; break;
    case 33: 
      label = 34; break;
    case 34: 
      var $135=$pool;
      var $136=(($135)|0);
      var $137=HEAP32[(($136)>>2)];
      var $138=((($137)-(1))|0);
      HEAP32[(($136)>>2)]=$138;
      var $139=(($138)|(0))!=0;
      if ($139) { label = 35; break; } else { label = 36; break; }
    case 35: 
      label = 37; break;
    case 36: 
      var $142=$pool;
      var $143=(($142+4)|0);
      var $144=HEAP32[(($143)>>2)];
      var $145=(($144+24)|0);
      var $146=HEAP32[(($145)>>2)];
      var $147=$pool;
      FUNCTION_TABLE[$146]($147);
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      $1=0;
      label = 41; break;
    case 41: 
      var $153=$1;
      STACKTOP = __stackBase__;
      return $153;
    default: assert(0, "bad label: " + label);
  }
}
function _permutations_next($po) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $elem;
      var $oldelem;
      var $pool;
      var $indices;
      var $cycles;
      var $result;
      var $n;
      var $r;
      var $i;
      var $j;
      var $k;
      var $index;
      var $old_result;
      $2=$po;
      var $3=$2;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      $pool=$5;
      var $6=$2;
      var $7=(($6+12)|0);
      var $8=HEAP32[(($7)>>2)];
      $indices=$8;
      var $9=$2;
      var $10=(($9+16)|0);
      var $11=HEAP32[(($10)>>2)];
      $cycles=$11;
      var $12=$2;
      var $13=(($12+20)|0);
      var $14=HEAP32[(($13)>>2)];
      $result=$14;
      var $15=$pool;
      var $16=$15;
      var $17=(($16+8)|0);
      var $18=HEAP32[(($17)>>2)];
      $n=$18;
      var $19=$2;
      var $20=(($19+24)|0);
      var $21=HEAP32[(($20)>>2)];
      $r=$21;
      var $22=$2;
      var $23=(($22+28)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24)|(0))!=0;
      if ($25) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 55; break;
    case 3: 
      var $28=$result;
      var $29=(($28)|(0))==0;
      if ($29) { label = 4; break; } else { label = 11; break; }
    case 4: 
      var $31=$r;
      var $32=_PyTuple_New($31);
      $result=$32;
      var $33=$result;
      var $34=(($33)|(0))==0;
      if ($34) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 54; break;
    case 6: 
      var $37=$result;
      var $38=$2;
      var $39=(($38+20)|0);
      HEAP32[(($39)>>2)]=$37;
      $i=0;
      label = 7; break;
    case 7: 
      var $41=$i;
      var $42=$r;
      var $43=(($41)|(0)) < (($42)|(0));
      if ($43) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $45=$i;
      var $46=$indices;
      var $47=(($46+($45<<2))|0);
      var $48=HEAP32[(($47)>>2)];
      $index=$48;
      var $49=$index;
      var $50=$pool;
      var $51=$50;
      var $52=(($51+12)|0);
      var $53=(($52+($49<<2))|0);
      var $54=HEAP32[(($53)>>2)];
      $elem=$54;
      var $55=$elem;
      var $56=(($55)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=((($57)+(1))|0);
      HEAP32[(($56)>>2)]=$58;
      var $59=$elem;
      var $60=$i;
      var $61=$result;
      var $62=$61;
      var $63=(($62+12)|0);
      var $64=(($63+($60<<2))|0);
      HEAP32[(($64)>>2)]=$59;
      label = 9; break;
    case 9: 
      var $66=$i;
      var $67=((($66)+(1))|0);
      $i=$67;
      label = 7; break;
    case 10: 
      label = 53; break;
    case 11: 
      var $70=$n;
      var $71=(($70)|(0))==0;
      if ($71) { label = 12; break; } else { label = 13; break; }
    case 12: 
      label = 54; break;
    case 13: 
      var $74=$result;
      var $75=(($74)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=(($76)|(0)) > 1;
      if ($77) { label = 14; break; } else { label = 26; break; }
    case 14: 
      var $79=$result;
      $old_result=$79;
      var $80=$r;
      var $81=_PyTuple_New($80);
      $result=$81;
      var $82=$result;
      var $83=(($82)|(0))==0;
      if ($83) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 54; break;
    case 16: 
      var $86=$result;
      var $87=$2;
      var $88=(($87+20)|0);
      HEAP32[(($88)>>2)]=$86;
      $i=0;
      label = 17; break;
    case 17: 
      var $90=$i;
      var $91=$r;
      var $92=(($90)|(0)) < (($91)|(0));
      if ($92) { label = 18; break; } else { label = 20; break; }
    case 18: 
      var $94=$i;
      var $95=$old_result;
      var $96=$95;
      var $97=(($96+12)|0);
      var $98=(($97+($94<<2))|0);
      var $99=HEAP32[(($98)>>2)];
      $elem=$99;
      var $100=$elem;
      var $101=(($100)|0);
      var $102=HEAP32[(($101)>>2)];
      var $103=((($102)+(1))|0);
      HEAP32[(($101)>>2)]=$103;
      var $104=$elem;
      var $105=$i;
      var $106=$result;
      var $107=$106;
      var $108=(($107+12)|0);
      var $109=(($108+($105<<2))|0);
      HEAP32[(($109)>>2)]=$104;
      label = 19; break;
    case 19: 
      var $111=$i;
      var $112=((($111)+(1))|0);
      $i=$112;
      label = 17; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $115=$old_result;
      var $116=(($115)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=((($117)-(1))|0);
      HEAP32[(($116)>>2)]=$118;
      var $119=(($118)|(0))!=0;
      if ($119) { label = 22; break; } else { label = 23; break; }
    case 22: 
      label = 24; break;
    case 23: 
      var $122=$old_result;
      var $123=(($122+4)|0);
      var $124=HEAP32[(($123)>>2)];
      var $125=(($124+24)|0);
      var $126=HEAP32[(($125)>>2)];
      var $127=$old_result;
      FUNCTION_TABLE[$126]($127);
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $131=$r;
      var $132=(($131)|(0))==0;
      if ($132) { label = 28; break; } else { label = 27; break; }
    case 27: 
      var $134=$result;
      var $135=(($134)|0);
      var $136=HEAP32[(($135)>>2)];
      var $137=(($136)|(0))==1;
      if ($137) { label = 28; break; } else { label = 29; break; }
    case 28: 
      label = 30; break;
    case 29: 
      ___assert_func(((__str1)|0), 2692, ((___func___permutations_next)|0), ((__str36)|0));
      throw "Reached an unreachable!";
      label = 30; break;
    case 30: 
      var $142=$r;
      var $143=((($142)-(1))|0);
      $i=$143;
      label = 31; break;
    case 31: 
      var $145=$i;
      var $146=(($145)|(0)) >= 0;
      if ($146) { label = 32; break; } else { label = 50; break; }
    case 32: 
      var $148=$i;
      var $149=$cycles;
      var $150=(($149+($148<<2))|0);
      var $151=HEAP32[(($150)>>2)];
      var $152=((($151)-(1))|0);
      HEAP32[(($150)>>2)]=$152;
      var $153=$i;
      var $154=$cycles;
      var $155=(($154+($153<<2))|0);
      var $156=HEAP32[(($155)>>2)];
      var $157=(($156)|(0))==0;
      if ($157) { label = 33; break; } else { label = 38; break; }
    case 33: 
      var $159=$i;
      var $160=$indices;
      var $161=(($160+($159<<2))|0);
      var $162=HEAP32[(($161)>>2)];
      $index=$162;
      var $163=$i;
      $j=$163;
      label = 34; break;
    case 34: 
      var $165=$j;
      var $166=$n;
      var $167=((($166)-(1))|0);
      var $168=(($165)|(0)) < (($167)|(0));
      if ($168) { label = 35; break; } else { label = 37; break; }
    case 35: 
      var $170=$j;
      var $171=((($170)+(1))|0);
      var $172=$indices;
      var $173=(($172+($171<<2))|0);
      var $174=HEAP32[(($173)>>2)];
      var $175=$j;
      var $176=$indices;
      var $177=(($176+($175<<2))|0);
      HEAP32[(($177)>>2)]=$174;
      label = 36; break;
    case 36: 
      var $179=$j;
      var $180=((($179)+(1))|0);
      $j=$180;
      label = 34; break;
    case 37: 
      var $182=$index;
      var $183=$n;
      var $184=((($183)-(1))|0);
      var $185=$indices;
      var $186=(($185+($184<<2))|0);
      HEAP32[(($186)>>2)]=$182;
      var $187=$n;
      var $188=$i;
      var $189=((($187)-($188))|0);
      var $190=$i;
      var $191=$cycles;
      var $192=(($191+($190<<2))|0);
      HEAP32[(($192)>>2)]=$189;
      label = 48; break;
    case 38: 
      var $194=$i;
      var $195=$cycles;
      var $196=(($195+($194<<2))|0);
      var $197=HEAP32[(($196)>>2)];
      $j=$197;
      var $198=$i;
      var $199=$indices;
      var $200=(($199+($198<<2))|0);
      var $201=HEAP32[(($200)>>2)];
      $index=$201;
      var $202=$n;
      var $203=$j;
      var $204=((($202)-($203))|0);
      var $205=$indices;
      var $206=(($205+($204<<2))|0);
      var $207=HEAP32[(($206)>>2)];
      var $208=$i;
      var $209=$indices;
      var $210=(($209+($208<<2))|0);
      HEAP32[(($210)>>2)]=$207;
      var $211=$index;
      var $212=$n;
      var $213=$j;
      var $214=((($212)-($213))|0);
      var $215=$indices;
      var $216=(($215+($214<<2))|0);
      HEAP32[(($216)>>2)]=$211;
      var $217=$i;
      $k=$217;
      label = 39; break;
    case 39: 
      var $219=$k;
      var $220=$r;
      var $221=(($219)|(0)) < (($220)|(0));
      if ($221) { label = 40; break; } else { label = 47; break; }
    case 40: 
      var $223=$k;
      var $224=$indices;
      var $225=(($224+($223<<2))|0);
      var $226=HEAP32[(($225)>>2)];
      $index=$226;
      var $227=$index;
      var $228=$pool;
      var $229=$228;
      var $230=(($229+12)|0);
      var $231=(($230+($227<<2))|0);
      var $232=HEAP32[(($231)>>2)];
      $elem=$232;
      var $233=$elem;
      var $234=(($233)|0);
      var $235=HEAP32[(($234)>>2)];
      var $236=((($235)+(1))|0);
      HEAP32[(($234)>>2)]=$236;
      var $237=$k;
      var $238=$result;
      var $239=$238;
      var $240=(($239+12)|0);
      var $241=(($240+($237<<2))|0);
      var $242=HEAP32[(($241)>>2)];
      $oldelem=$242;
      var $243=$elem;
      var $244=$k;
      var $245=$result;
      var $246=$245;
      var $247=(($246+12)|0);
      var $248=(($247+($244<<2))|0);
      HEAP32[(($248)>>2)]=$243;
      label = 41; break;
    case 41: 
      var $250=$oldelem;
      var $251=(($250)|0);
      var $252=HEAP32[(($251)>>2)];
      var $253=((($252)-(1))|0);
      HEAP32[(($251)>>2)]=$253;
      var $254=(($253)|(0))!=0;
      if ($254) { label = 42; break; } else { label = 43; break; }
    case 42: 
      label = 44; break;
    case 43: 
      var $257=$oldelem;
      var $258=(($257+4)|0);
      var $259=HEAP32[(($258)>>2)];
      var $260=(($259+24)|0);
      var $261=HEAP32[(($260)>>2)];
      var $262=$oldelem;
      FUNCTION_TABLE[$261]($262);
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      var $266=$k;
      var $267=((($266)+(1))|0);
      $k=$267;
      label = 39; break;
    case 47: 
      label = 50; break;
    case 48: 
      label = 49; break;
    case 49: 
      var $271=$i;
      var $272=((($271)-(1))|0);
      $i=$272;
      label = 31; break;
    case 50: 
      var $274=$i;
      var $275=(($274)|(0)) < 0;
      if ($275) { label = 51; break; } else { label = 52; break; }
    case 51: 
      label = 54; break;
    case 52: 
      label = 53; break;
    case 53: 
      var $279=$result;
      var $280=(($279)|0);
      var $281=HEAP32[(($280)>>2)];
      var $282=((($281)+(1))|0);
      HEAP32[(($280)>>2)]=$282;
      var $283=$result;
      $1=$283;
      label = 55; break;
    case 54: 
      var $285=$2;
      var $286=(($285+28)|0);
      HEAP32[(($286)>>2)]=1;
      $1=0;
      label = 55; break;
    case 55: 
      var $288=$1;
      return $288;
    default: assert(0, "bad label: " + label);
  }
}
function _izip_longest_dealloc($lz) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$lz;
      var $2=$1;
      var $3=$2;
      _PyObject_GC_UnTrack($3);
      label = 2; break;
    case 2: 
      var $5=$1;
      var $6=(($5+16)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|(0))==0;
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 10; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $12=$1;
      var $13=(($12+16)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=((($16)-(1))|0);
      HEAP32[(($15)>>2)]=$17;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 8; break;
    case 7: 
      var $21=$1;
      var $22=(($21+16)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+4)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25+24)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$1;
      var $29=(($28+16)|0);
      var $30=HEAP32[(($29)>>2)];
      FUNCTION_TABLE[$27]($30);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $36=$1;
      var $37=(($36+20)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38)|(0))==0;
      if ($39) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 20; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $43=$1;
      var $44=(($43+20)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=(($45)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=((($47)-(1))|0);
      HEAP32[(($46)>>2)]=$48;
      var $49=(($48)|(0))!=0;
      if ($49) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 18; break;
    case 17: 
      var $52=$1;
      var $53=(($52+20)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54+4)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=(($56+24)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=$1;
      var $60=(($59+20)|0);
      var $61=HEAP32[(($60)>>2)];
      FUNCTION_TABLE[$58]($61);
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $67=$1;
      var $68=(($67+24)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=(($69)|(0))==0;
      if ($70) { label = 23; break; } else { label = 24; break; }
    case 23: 
      label = 30; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $74=$1;
      var $75=(($74+24)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=(($76)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=((($78)-(1))|0);
      HEAP32[(($77)>>2)]=$79;
      var $80=(($79)|(0))!=0;
      if ($80) { label = 26; break; } else { label = 27; break; }
    case 26: 
      label = 28; break;
    case 27: 
      var $83=$1;
      var $84=(($83+24)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=(($85+4)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=(($87+24)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=$1;
      var $91=(($90+24)|0);
      var $92=HEAP32[(($91)>>2)];
      FUNCTION_TABLE[$89]($92);
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $97=$1;
      var $98=$97;
      var $99=(($98+4)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=(($100+160)|0);
      var $102=HEAP32[(($101)>>2)];
      var $103=$1;
      var $104=$103;
      FUNCTION_TABLE[$102]($104);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _izip_longest_traverse($lz, $visit, $arg) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $vret;
      var $vret1;
      var $vret2;
      $2=$lz;
      $3=$visit;
      $4=$arg;
      label = 2; break;
    case 2: 
      var $6=$2;
      var $7=(($6+16)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $11=$3;
      var $12=$2;
      var $13=(($12+16)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$4;
      var $16=FUNCTION_TABLE[$11]($14, $15);
      $vret=$16;
      var $17=$vret;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $20=$vret;
      $1=$20;
      label = 20; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $25=$2;
      var $26=(($25+20)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27)|(0))!=0;
      if ($28) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $30=$3;
      var $31=$2;
      var $32=(($31+20)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=$4;
      var $35=FUNCTION_TABLE[$30]($33, $34);
      $vret1=$35;
      var $36=$vret1;
      var $37=(($36)|(0))!=0;
      if ($37) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $39=$vret1;
      $1=$39;
      label = 20; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $44=$2;
      var $45=(($44+24)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46)|(0))!=0;
      if ($47) { label = 15; break; } else { label = 18; break; }
    case 15: 
      var $49=$3;
      var $50=$2;
      var $51=(($50+24)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=$4;
      var $54=FUNCTION_TABLE[$49]($52, $53);
      $vret2=$54;
      var $55=$vret2;
      var $56=(($55)|(0))!=0;
      if ($56) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $58=$vret2;
      $1=$58;
      label = 20; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      $1=0;
      label = 20; break;
    case 20: 
      var $63=$1;
      return $63;
    default: assert(0, "bad label: " + label);
  }
}
function _izip_longest_next($lz) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $i;
      var $tuplesize;
      var $result;
      var $it;
      var $item;
      var $olditem;
      $2=$lz;
      var $3=$2;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      $tuplesize=$5;
      var $6=$2;
      var $7=(($6+20)|0);
      var $8=HEAP32[(($7)>>2)];
      $result=$8;
      var $9=$tuplesize;
      var $10=(($9)|(0))==0;
      if ($10) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 62; break;
    case 3: 
      var $13=$2;
      var $14=(($13+12)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15)|(0))==0;
      if ($16) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=0;
      label = 62; break;
    case 5: 
      var $19=$result;
      var $20=(($19)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21)|(0))==1;
      if ($22) { label = 6; break; } else { label = 35; break; }
    case 6: 
      var $24=$result;
      var $25=(($24)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=((($26)+(1))|0);
      HEAP32[(($25)>>2)]=$27;
      $i=0;
      label = 7; break;
    case 7: 
      var $29=$i;
      var $30=$tuplesize;
      var $31=(($29)|(0)) < (($30)|(0));
      if ($31) { label = 8; break; } else { label = 34; break; }
    case 8: 
      var $33=$i;
      var $34=$2;
      var $35=(($34+16)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=$36;
      var $38=(($37+12)|0);
      var $39=(($38+($33<<2))|0);
      var $40=HEAP32[(($39)>>2)];
      $it=$40;
      var $41=$it;
      var $42=(($41)|(0))==0;
      if ($42) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $44=$2;
      var $45=(($44+24)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=((($48)+(1))|0);
      HEAP32[(($47)>>2)]=$49;
      var $50=$2;
      var $51=(($50+24)|0);
      var $52=HEAP32[(($51)>>2)];
      $item=$52;
      label = 27; break;
    case 10: 
      var $54=$it;
      var $55=_PyIter_Next($54);
      $item=$55;
      var $56=$item;
      var $57=(($56)|(0))==0;
      if ($57) { label = 11; break; } else { label = 26; break; }
    case 11: 
      var $59=$2;
      var $60=(($59+12)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=((($61)-(1))|0);
      HEAP32[(($60)>>2)]=$62;
      var $63=$2;
      var $64=(($63+12)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=(($65)|(0))==0;
      if ($66) { label = 13; break; } else { label = 12; break; }
    case 12: 
      var $68=_PyErr_Occurred();
      var $69=(($68)|(0))!=0;
      if ($69) { label = 13; break; } else { label = 19; break; }
    case 13: 
      var $71=$2;
      var $72=(($71+12)|0);
      HEAP32[(($72)>>2)]=0;
      label = 14; break;
    case 14: 
      var $74=$result;
      var $75=(($74)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=((($76)-(1))|0);
      HEAP32[(($75)>>2)]=$77;
      var $78=(($77)|(0))!=0;
      if ($78) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 17; break;
    case 16: 
      var $81=$result;
      var $82=(($81+4)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=(($83+24)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=$result;
      FUNCTION_TABLE[$85]($86);
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      $1=0;
      label = 62; break;
    case 19: 
      var $90=$2;
      var $91=(($90+24)|0);
      var $92=HEAP32[(($91)>>2)];
      var $93=(($92)|0);
      var $94=HEAP32[(($93)>>2)];
      var $95=((($94)+(1))|0);
      HEAP32[(($93)>>2)]=$95;
      var $96=$2;
      var $97=(($96+24)|0);
      var $98=HEAP32[(($97)>>2)];
      $item=$98;
      var $99=$i;
      var $100=$2;
      var $101=(($100+16)|0);
      var $102=HEAP32[(($101)>>2)];
      var $103=$102;
      var $104=(($103+12)|0);
      var $105=(($104+($99<<2))|0);
      HEAP32[(($105)>>2)]=0;
      label = 20; break;
    case 20: 
      var $107=$it;
      var $108=(($107)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=((($109)-(1))|0);
      HEAP32[(($108)>>2)]=$110;
      var $111=(($110)|(0))!=0;
      if ($111) { label = 21; break; } else { label = 22; break; }
    case 21: 
      label = 23; break;
    case 22: 
      var $114=$it;
      var $115=(($114+4)|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=(($116+24)|0);
      var $118=HEAP32[(($117)>>2)];
      var $119=$it;
      FUNCTION_TABLE[$118]($119);
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $125=$i;
      var $126=$result;
      var $127=$126;
      var $128=(($127+12)|0);
      var $129=(($128+($125<<2))|0);
      var $130=HEAP32[(($129)>>2)];
      $olditem=$130;
      var $131=$item;
      var $132=$i;
      var $133=$result;
      var $134=$133;
      var $135=(($134+12)|0);
      var $136=(($135+($132<<2))|0);
      HEAP32[(($136)>>2)]=$131;
      label = 28; break;
    case 28: 
      var $138=$olditem;
      var $139=(($138)|0);
      var $140=HEAP32[(($139)>>2)];
      var $141=((($140)-(1))|0);
      HEAP32[(($139)>>2)]=$141;
      var $142=(($141)|(0))!=0;
      if ($142) { label = 29; break; } else { label = 30; break; }
    case 29: 
      label = 31; break;
    case 30: 
      var $145=$olditem;
      var $146=(($145+4)|0);
      var $147=HEAP32[(($146)>>2)];
      var $148=(($147+24)|0);
      var $149=HEAP32[(($148)>>2)];
      var $150=$olditem;
      FUNCTION_TABLE[$149]($150);
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      var $154=$i;
      var $155=((($154)+(1))|0);
      $i=$155;
      label = 7; break;
    case 34: 
      label = 61; break;
    case 35: 
      var $158=$tuplesize;
      var $159=_PyTuple_New($158);
      $result=$159;
      var $160=$result;
      var $161=(($160)|(0))==0;
      if ($161) { label = 36; break; } else { label = 37; break; }
    case 36: 
      $1=0;
      label = 62; break;
    case 37: 
      $i=0;
      label = 38; break;
    case 38: 
      var $165=$i;
      var $166=$tuplesize;
      var $167=(($165)|(0)) < (($166)|(0));
      if ($167) { label = 39; break; } else { label = 60; break; }
    case 39: 
      var $169=$i;
      var $170=$2;
      var $171=(($170+16)|0);
      var $172=HEAP32[(($171)>>2)];
      var $173=$172;
      var $174=(($173+12)|0);
      var $175=(($174+($169<<2))|0);
      var $176=HEAP32[(($175)>>2)];
      $it=$176;
      var $177=$it;
      var $178=(($177)|(0))==0;
      if ($178) { label = 40; break; } else { label = 41; break; }
    case 40: 
      var $180=$2;
      var $181=(($180+24)|0);
      var $182=HEAP32[(($181)>>2)];
      var $183=(($182)|0);
      var $184=HEAP32[(($183)>>2)];
      var $185=((($184)+(1))|0);
      HEAP32[(($183)>>2)]=$185;
      var $186=$2;
      var $187=(($186+24)|0);
      var $188=HEAP32[(($187)>>2)];
      $item=$188;
      label = 58; break;
    case 41: 
      var $190=$it;
      var $191=_PyIter_Next($190);
      $item=$191;
      var $192=$item;
      var $193=(($192)|(0))==0;
      if ($193) { label = 42; break; } else { label = 57; break; }
    case 42: 
      var $195=$2;
      var $196=(($195+12)|0);
      var $197=HEAP32[(($196)>>2)];
      var $198=((($197)-(1))|0);
      HEAP32[(($196)>>2)]=$198;
      var $199=$2;
      var $200=(($199+12)|0);
      var $201=HEAP32[(($200)>>2)];
      var $202=(($201)|(0))==0;
      if ($202) { label = 44; break; } else { label = 43; break; }
    case 43: 
      var $204=_PyErr_Occurred();
      var $205=(($204)|(0))!=0;
      if ($205) { label = 44; break; } else { label = 50; break; }
    case 44: 
      var $207=$2;
      var $208=(($207+12)|0);
      HEAP32[(($208)>>2)]=0;
      label = 45; break;
    case 45: 
      var $210=$result;
      var $211=(($210)|0);
      var $212=HEAP32[(($211)>>2)];
      var $213=((($212)-(1))|0);
      HEAP32[(($211)>>2)]=$213;
      var $214=(($213)|(0))!=0;
      if ($214) { label = 46; break; } else { label = 47; break; }
    case 46: 
      label = 48; break;
    case 47: 
      var $217=$result;
      var $218=(($217+4)|0);
      var $219=HEAP32[(($218)>>2)];
      var $220=(($219+24)|0);
      var $221=HEAP32[(($220)>>2)];
      var $222=$result;
      FUNCTION_TABLE[$221]($222);
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      $1=0;
      label = 62; break;
    case 50: 
      var $226=$2;
      var $227=(($226+24)|0);
      var $228=HEAP32[(($227)>>2)];
      var $229=(($228)|0);
      var $230=HEAP32[(($229)>>2)];
      var $231=((($230)+(1))|0);
      HEAP32[(($229)>>2)]=$231;
      var $232=$2;
      var $233=(($232+24)|0);
      var $234=HEAP32[(($233)>>2)];
      $item=$234;
      var $235=$i;
      var $236=$2;
      var $237=(($236+16)|0);
      var $238=HEAP32[(($237)>>2)];
      var $239=$238;
      var $240=(($239+12)|0);
      var $241=(($240+($235<<2))|0);
      HEAP32[(($241)>>2)]=0;
      label = 51; break;
    case 51: 
      var $243=$it;
      var $244=(($243)|0);
      var $245=HEAP32[(($244)>>2)];
      var $246=((($245)-(1))|0);
      HEAP32[(($244)>>2)]=$246;
      var $247=(($246)|(0))!=0;
      if ($247) { label = 52; break; } else { label = 53; break; }
    case 52: 
      label = 54; break;
    case 53: 
      var $250=$it;
      var $251=(($250+4)|0);
      var $252=HEAP32[(($251)>>2)];
      var $253=(($252+24)|0);
      var $254=HEAP32[(($253)>>2)];
      var $255=$it;
      FUNCTION_TABLE[$254]($255);
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      var $261=$item;
      var $262=$i;
      var $263=$result;
      var $264=$263;
      var $265=(($264+12)|0);
      var $266=(($265+($262<<2))|0);
      HEAP32[(($266)>>2)]=$261;
      label = 59; break;
    case 59: 
      var $268=$i;
      var $269=((($268)+(1))|0);
      $i=$269;
      label = 38; break;
    case 60: 
      label = 61; break;
    case 61: 
      var $272=$result;
      $1=$272;
      label = 62; break;
    case 62: 
      var $274=$1;
      return $274;
    default: assert(0, "bad label: " + label);
  }
}
function _izip_dealloc($lz) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$lz;
      var $2=$1;
      var $3=$2;
      _PyObject_GC_UnTrack($3);
      label = 2; break;
    case 2: 
      var $5=$1;
      var $6=(($5+12)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|(0))==0;
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 10; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $12=$1;
      var $13=(($12+12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=((($16)-(1))|0);
      HEAP32[(($15)>>2)]=$17;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 8; break;
    case 7: 
      var $21=$1;
      var $22=(($21+12)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+4)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25+24)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$1;
      var $29=(($28+12)|0);
      var $30=HEAP32[(($29)>>2)];
      FUNCTION_TABLE[$27]($30);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $36=$1;
      var $37=(($36+16)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38)|(0))==0;
      if ($39) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 20; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $43=$1;
      var $44=(($43+16)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=(($45)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=((($47)-(1))|0);
      HEAP32[(($46)>>2)]=$48;
      var $49=(($48)|(0))!=0;
      if ($49) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 18; break;
    case 17: 
      var $52=$1;
      var $53=(($52+16)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54+4)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=(($56+24)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=$1;
      var $60=(($59+16)|0);
      var $61=HEAP32[(($60)>>2)];
      FUNCTION_TABLE[$58]($61);
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $66=$1;
      var $67=$66;
      var $68=(($67+4)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=(($69+160)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=$1;
      var $73=$72;
      FUNCTION_TABLE[$71]($73);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _izip_traverse($lz, $visit, $arg) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $vret;
      var $vret1;
      $2=$lz;
      $3=$visit;
      $4=$arg;
      label = 2; break;
    case 2: 
      var $6=$2;
      var $7=(($6+12)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $11=$3;
      var $12=$2;
      var $13=(($12+12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$4;
      var $16=FUNCTION_TABLE[$11]($14, $15);
      $vret=$16;
      var $17=$vret;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $20=$vret;
      $1=$20;
      label = 14; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $25=$2;
      var $26=(($25+16)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27)|(0))!=0;
      if ($28) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $30=$3;
      var $31=$2;
      var $32=(($31+16)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=$4;
      var $35=FUNCTION_TABLE[$30]($33, $34);
      $vret1=$35;
      var $36=$vret1;
      var $37=(($36)|(0))!=0;
      if ($37) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $39=$vret1;
      $1=$39;
      label = 14; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      $1=0;
      label = 14; break;
    case 14: 
      var $44=$1;
      return $44;
    default: assert(0, "bad label: " + label);
  }
}
function _izip_next($lz) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $i;
      var $tuplesize;
      var $result;
      var $it;
      var $item;
      var $olditem;
      $2=$lz;
      var $3=$2;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      $tuplesize=$5;
      var $6=$2;
      var $7=(($6+16)|0);
      var $8=HEAP32[(($7)>>2)];
      $result=$8;
      var $9=$tuplesize;
      var $10=(($9)|(0))==0;
      if ($10) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 36; break;
    case 3: 
      var $13=$result;
      var $14=(($13)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15)|(0))==1;
      if ($16) { label = 4; break; } else { label = 21; break; }
    case 4: 
      var $18=$result;
      var $19=(($18)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=((($20)+(1))|0);
      HEAP32[(($19)>>2)]=$21;
      $i=0;
      label = 5; break;
    case 5: 
      var $23=$i;
      var $24=$tuplesize;
      var $25=(($23)|(0)) < (($24)|(0));
      if ($25) { label = 6; break; } else { label = 20; break; }
    case 6: 
      var $27=$i;
      var $28=$2;
      var $29=(($28+12)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=$30;
      var $32=(($31+12)|0);
      var $33=(($32+($27<<2))|0);
      var $34=HEAP32[(($33)>>2)];
      $it=$34;
      var $35=$it;
      var $36=(($35+4)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37+112)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=$it;
      var $41=FUNCTION_TABLE[$39]($40);
      $item=$41;
      var $42=$item;
      var $43=(($42)|(0))==0;
      if ($43) { label = 7; break; } else { label = 13; break; }
    case 7: 
      label = 8; break;
    case 8: 
      var $46=$result;
      var $47=(($46)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=((($48)-(1))|0);
      HEAP32[(($47)>>2)]=$49;
      var $50=(($49)|(0))!=0;
      if ($50) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 11; break;
    case 10: 
      var $53=$result;
      var $54=(($53+4)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=(($55+24)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=$result;
      FUNCTION_TABLE[$57]($58);
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      $1=0;
      label = 36; break;
    case 13: 
      var $62=$i;
      var $63=$result;
      var $64=$63;
      var $65=(($64+12)|0);
      var $66=(($65+($62<<2))|0);
      var $67=HEAP32[(($66)>>2)];
      $olditem=$67;
      var $68=$item;
      var $69=$i;
      var $70=$result;
      var $71=$70;
      var $72=(($71+12)|0);
      var $73=(($72+($69<<2))|0);
      HEAP32[(($73)>>2)]=$68;
      label = 14; break;
    case 14: 
      var $75=$olditem;
      var $76=(($75)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=((($77)-(1))|0);
      HEAP32[(($76)>>2)]=$78;
      var $79=(($78)|(0))!=0;
      if ($79) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 17; break;
    case 16: 
      var $82=$olditem;
      var $83=(($82+4)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=(($84+24)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=$olditem;
      FUNCTION_TABLE[$86]($87);
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $91=$i;
      var $92=((($91)+(1))|0);
      $i=$92;
      label = 5; break;
    case 20: 
      label = 35; break;
    case 21: 
      var $95=$tuplesize;
      var $96=_PyTuple_New($95);
      $result=$96;
      var $97=$result;
      var $98=(($97)|(0))==0;
      if ($98) { label = 22; break; } else { label = 23; break; }
    case 22: 
      $1=0;
      label = 36; break;
    case 23: 
      $i=0;
      label = 24; break;
    case 24: 
      var $102=$i;
      var $103=$tuplesize;
      var $104=(($102)|(0)) < (($103)|(0));
      if ($104) { label = 25; break; } else { label = 34; break; }
    case 25: 
      var $106=$i;
      var $107=$2;
      var $108=(($107+12)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=$109;
      var $111=(($110+12)|0);
      var $112=(($111+($106<<2))|0);
      var $113=HEAP32[(($112)>>2)];
      $it=$113;
      var $114=$it;
      var $115=(($114+4)|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=(($116+112)|0);
      var $118=HEAP32[(($117)>>2)];
      var $119=$it;
      var $120=FUNCTION_TABLE[$118]($119);
      $item=$120;
      var $121=$item;
      var $122=(($121)|(0))==0;
      if ($122) { label = 26; break; } else { label = 32; break; }
    case 26: 
      label = 27; break;
    case 27: 
      var $125=$result;
      var $126=(($125)|0);
      var $127=HEAP32[(($126)>>2)];
      var $128=((($127)-(1))|0);
      HEAP32[(($126)>>2)]=$128;
      var $129=(($128)|(0))!=0;
      if ($129) { label = 28; break; } else { label = 29; break; }
    case 28: 
      label = 30; break;
    case 29: 
      var $132=$result;
      var $133=(($132+4)|0);
      var $134=HEAP32[(($133)>>2)];
      var $135=(($134+24)|0);
      var $136=HEAP32[(($135)>>2)];
      var $137=$result;
      FUNCTION_TABLE[$136]($137);
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      $1=0;
      label = 36; break;
    case 32: 
      var $141=$item;
      var $142=$i;
      var $143=$result;
      var $144=$143;
      var $145=(($144+12)|0);
      var $146=(($145+($142<<2))|0);
      HEAP32[(($146)>>2)]=$141;
      label = 33; break;
    case 33: 
      var $148=$i;
      var $149=((($148)+(1))|0);
      $i=$149;
      label = 24; break;
    case 34: 
      label = 35; break;
    case 35: 
      var $152=$result;
      $1=$152;
      label = 36; break;
    case 36: 
      var $154=$1;
      return $154;
    default: assert(0, "bad label: " + label);
  }
}
function _izip_longest_new($type, $args, $kwds) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $lz;
      var $i;
      var $ittuple;
      var $result;
      var $fillvalue;
      var $tuplesize;
      var $item;
      var $it;
      $2=$type;
      $3=$args;
      $4=$kwds;
      $fillvalue=__Py_NoneStruct;
      var $5=$3;
      var $6=_PySequence_Size($5);
      $tuplesize=$6;
      var $7=$4;
      var $8=(($7)|(0))!=0;
      if ($8) { label = 2; break; } else { label = 8; break; }
    case 2: 
      var $10=$4;
      var $11=(($10+4)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12)|(0))==((_PyDict_Type)|(0));
      if ($13) { label = 3; break; } else { label = 8; break; }
    case 3: 
      var $15=$4;
      var $16=_PyDict_Size($15);
      var $17=(($16)|(0)) > 0;
      if ($17) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $19=$4;
      var $20=_PyDict_GetItemString($19, ((__str38)|0));
      $fillvalue=$20;
      var $21=$fillvalue;
      var $22=(($21)|(0))==0;
      if ($22) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $24=$4;
      var $25=_PyDict_Size($24);
      var $26=(($25)|(0)) > 1;
      if ($26) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $28=HEAP32[((_PyExc_TypeError)>>2)];
      _PyErr_SetString($28, ((__str39)|0));
      $1=0;
      label = 50; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $31=$3;
      var $32=(($31+4)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33+84)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=$35 & 67108864;
      var $37=(($36)|(0))!=0;
      if ($37) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 11; break;
    case 10: 
      ___assert_func(((__str1)|0), 3844, ((___func___izip_longest_new)|0), ((__str30)|0));
      throw "Reached an unreachable!";
      label = 11; break;
    case 11: 
      var $42=$tuplesize;
      var $43=_PyTuple_New($42);
      $ittuple=$43;
      var $44=$ittuple;
      var $45=(($44)|(0))==0;
      if ($45) { label = 12; break; } else { label = 13; break; }
    case 12: 
      $1=0;
      label = 50; break;
    case 13: 
      $i=0;
      label = 14; break;
    case 14: 
      var $49=$i;
      var $50=$tuplesize;
      var $51=(($49)|(0)) < (($50)|(0));
      if ($51) { label = 15; break; } else { label = 26; break; }
    case 15: 
      var $53=$i;
      var $54=$3;
      var $55=$54;
      var $56=(($55+12)|0);
      var $57=(($56+($53<<2))|0);
      var $58=HEAP32[(($57)>>2)];
      $item=$58;
      var $59=$item;
      var $60=_PyObject_GetIter($59);
      $it=$60;
      var $61=$it;
      var $62=(($61)|(0))==0;
      if ($62) { label = 16; break; } else { label = 24; break; }
    case 16: 
      var $64=HEAP32[((_PyExc_TypeError)>>2)];
      var $65=_PyErr_ExceptionMatches($64);
      var $66=(($65)|(0))!=0;
      if ($66) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $68=HEAP32[((_PyExc_TypeError)>>2)];
      var $69=$i;
      var $70=((($69)+(1))|0);
      var $71=_PyErr_Format($68, ((__str40)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$70,tempInt));
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $74=$ittuple;
      var $75=(($74)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=((($76)-(1))|0);
      HEAP32[(($75)>>2)]=$77;
      var $78=(($77)|(0))!=0;
      if ($78) { label = 20; break; } else { label = 21; break; }
    case 20: 
      label = 22; break;
    case 21: 
      var $81=$ittuple;
      var $82=(($81+4)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=(($83+24)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=$ittuple;
      FUNCTION_TABLE[$85]($86);
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      $1=0;
      label = 50; break;
    case 24: 
      var $90=$it;
      var $91=$i;
      var $92=$ittuple;
      var $93=$92;
      var $94=(($93+12)|0);
      var $95=(($94+($91<<2))|0);
      HEAP32[(($95)>>2)]=$90;
      label = 25; break;
    case 25: 
      var $97=$i;
      var $98=((($97)+(1))|0);
      $i=$98;
      label = 14; break;
    case 26: 
      var $100=$tuplesize;
      var $101=_PyTuple_New($100);
      $result=$101;
      var $102=$result;
      var $103=(($102)|(0))==0;
      if ($103) { label = 27; break; } else { label = 33; break; }
    case 27: 
      label = 28; break;
    case 28: 
      var $106=$ittuple;
      var $107=(($106)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=((($108)-(1))|0);
      HEAP32[(($107)>>2)]=$109;
      var $110=(($109)|(0))!=0;
      if ($110) { label = 29; break; } else { label = 30; break; }
    case 29: 
      label = 31; break;
    case 30: 
      var $113=$ittuple;
      var $114=(($113+4)|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=(($115+24)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=$ittuple;
      FUNCTION_TABLE[$117]($118);
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      $1=0;
      label = 50; break;
    case 33: 
      $i=0;
      label = 34; break;
    case 34: 
      var $123=$i;
      var $124=$tuplesize;
      var $125=(($123)|(0)) < (($124)|(0));
      if ($125) { label = 35; break; } else { label = 37; break; }
    case 35: 
      var $127=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $128=((($127)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$128;
      var $129=$i;
      var $130=$result;
      var $131=$130;
      var $132=(($131+12)|0);
      var $133=(($132+($129<<2))|0);
      HEAP32[(($133)>>2)]=__Py_NoneStruct;
      label = 36; break;
    case 36: 
      var $135=$i;
      var $136=((($135)+(1))|0);
      $i=$136;
      label = 34; break;
    case 37: 
      var $138=$2;
      var $139=(($138+152)|0);
      var $140=HEAP32[(($139)>>2)];
      var $141=$2;
      var $142=FUNCTION_TABLE[$140]($141, 0);
      var $143=$142;
      $lz=$143;
      var $144=$lz;
      var $145=(($144)|(0))==0;
      if ($145) { label = 38; break; } else { label = 49; break; }
    case 38: 
      label = 39; break;
    case 39: 
      var $148=$ittuple;
      var $149=(($148)|0);
      var $150=HEAP32[(($149)>>2)];
      var $151=((($150)-(1))|0);
      HEAP32[(($149)>>2)]=$151;
      var $152=(($151)|(0))!=0;
      if ($152) { label = 40; break; } else { label = 41; break; }
    case 40: 
      label = 42; break;
    case 41: 
      var $155=$ittuple;
      var $156=(($155+4)|0);
      var $157=HEAP32[(($156)>>2)];
      var $158=(($157+24)|0);
      var $159=HEAP32[(($158)>>2)];
      var $160=$ittuple;
      FUNCTION_TABLE[$159]($160);
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      var $164=$result;
      var $165=(($164)|0);
      var $166=HEAP32[(($165)>>2)];
      var $167=((($166)-(1))|0);
      HEAP32[(($165)>>2)]=$167;
      var $168=(($167)|(0))!=0;
      if ($168) { label = 45; break; } else { label = 46; break; }
    case 45: 
      label = 47; break;
    case 46: 
      var $171=$result;
      var $172=(($171+4)|0);
      var $173=HEAP32[(($172)>>2)];
      var $174=(($173+24)|0);
      var $175=HEAP32[(($174)>>2)];
      var $176=$result;
      FUNCTION_TABLE[$175]($176);
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      $1=0;
      label = 50; break;
    case 49: 
      var $180=$ittuple;
      var $181=$lz;
      var $182=(($181+16)|0);
      HEAP32[(($182)>>2)]=$180;
      var $183=$tuplesize;
      var $184=$lz;
      var $185=(($184+8)|0);
      HEAP32[(($185)>>2)]=$183;
      var $186=$tuplesize;
      var $187=$lz;
      var $188=(($187+12)|0);
      HEAP32[(($188)>>2)]=$186;
      var $189=$result;
      var $190=$lz;
      var $191=(($190+20)|0);
      HEAP32[(($191)>>2)]=$189;
      var $192=$fillvalue;
      var $193=(($192)|0);
      var $194=HEAP32[(($193)>>2)];
      var $195=((($194)+(1))|0);
      HEAP32[(($193)>>2)]=$195;
      var $196=$fillvalue;
      var $197=$lz;
      var $198=(($197+24)|0);
      HEAP32[(($198)>>2)]=$196;
      var $199=$lz;
      var $200=$199;
      $1=$200;
      label = 50; break;
    case 50: 
      var $202=$1;
      STACKTOP = __stackBase__;
      return $202;
    default: assert(0, "bad label: " + label);
  }
}
function _count_dealloc($lz) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$lz;
      var $2=$1;
      var $3=$2;
      _PyObject_GC_UnTrack($3);
      label = 2; break;
    case 2: 
      var $5=$1;
      var $6=(($5+12)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|(0))==0;
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 10; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $12=$1;
      var $13=(($12+12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=((($16)-(1))|0);
      HEAP32[(($15)>>2)]=$17;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 8; break;
    case 7: 
      var $21=$1;
      var $22=(($21+12)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+4)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25+24)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$1;
      var $29=(($28+12)|0);
      var $30=HEAP32[(($29)>>2)];
      FUNCTION_TABLE[$27]($30);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $36=$1;
      var $37=(($36+16)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38)|(0))==0;
      if ($39) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 20; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $43=$1;
      var $44=(($43+16)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=(($45)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=((($47)-(1))|0);
      HEAP32[(($46)>>2)]=$48;
      var $49=(($48)|(0))!=0;
      if ($49) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 18; break;
    case 17: 
      var $52=$1;
      var $53=(($52+16)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54+4)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=(($56+24)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=$1;
      var $60=(($59+16)|0);
      var $61=HEAP32[(($60)>>2)];
      FUNCTION_TABLE[$58]($61);
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $66=$1;
      var $67=$66;
      var $68=(($67+4)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=(($69+160)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=$1;
      var $73=$72;
      FUNCTION_TABLE[$71]($73);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _count_repr($lz) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $cnt_repr;
      var $step_repr;
      var $result;
      $2=$lz;
      $step_repr=0;
      $result=0;
      var $3=$2;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))!=2147483647;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=$2;
      var $9=(($8+8)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=_PyString_FromFormat(((__str56)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$10,tempInt));
      $1=$11;
      label = 27; break;
    case 3: 
      var $13=$2;
      var $14=(($13+12)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=_PyObject_Repr($15);
      $cnt_repr=$16;
      var $17=$cnt_repr;
      var $18=(($17)|(0))==0;
      if ($18) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=0;
      label = 27; break;
    case 5: 
      var $21=$2;
      var $22=(($21+16)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+4)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25+84)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$27 & 8388608;
      var $29=(($28)|(0))!=0;
      if ($29) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $31=$2;
      var $32=(($31+16)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=$33;
      var $35=(($34+8)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36)|(0))==1;
      if ($37) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $39=$cnt_repr;
      var $40=$39;
      var $41=(($40+20)|0);
      var $42=(($41)|0);
      var $43=_PyString_FromFormat(((__str57)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$42,tempInt));
      $result=$43;
      label = 11; break;
    case 8: 
      var $45=$2;
      var $46=(($45+16)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=_PyObject_Repr($47);
      $step_repr=$48;
      var $49=$step_repr;
      var $50=(($49)|(0))!=0;
      if ($50) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $52=$cnt_repr;
      var $53=$52;
      var $54=(($53+20)|0);
      var $55=(($54)|0);
      var $56=$step_repr;
      var $57=$56;
      var $58=(($57+20)|0);
      var $59=(($58)|0);
      var $60=_PyString_FromFormat(((__str58)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$55,HEAP32[(((tempInt)+(4))>>2)]=$59,tempInt));
      $result=$60;
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $64=$cnt_repr;
      var $65=(($64)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=((($66)-(1))|0);
      HEAP32[(($65)>>2)]=$67;
      var $68=(($67)|(0))!=0;
      if ($68) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 15; break;
    case 14: 
      var $71=$cnt_repr;
      var $72=(($71+4)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=(($73+24)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=$cnt_repr;
      FUNCTION_TABLE[$75]($76);
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $80=$step_repr;
      var $81=(($80)|(0))==0;
      if ($81) { label = 18; break; } else { label = 19; break; }
    case 18: 
      label = 25; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $85=$step_repr;
      var $86=(($85)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=((($87)-(1))|0);
      HEAP32[(($86)>>2)]=$88;
      var $89=(($88)|(0))!=0;
      if ($89) { label = 21; break; } else { label = 22; break; }
    case 21: 
      label = 23; break;
    case 22: 
      var $92=$step_repr;
      var $93=(($92+4)|0);
      var $94=HEAP32[(($93)>>2)];
      var $95=(($94+24)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=$step_repr;
      FUNCTION_TABLE[$96]($97);
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $102=$result;
      $1=$102;
      label = 27; break;
    case 27: 
      var $104=$1;
      STACKTOP = __stackBase__;
      return $104;
    default: assert(0, "bad label: " + label);
  }
}
function _count_traverse($lz, $visit, $arg) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $vret;
      var $vret1;
      $2=$lz;
      $3=$visit;
      $4=$arg;
      label = 2; break;
    case 2: 
      var $6=$2;
      var $7=(($6+12)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $11=$3;
      var $12=$2;
      var $13=(($12+12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$4;
      var $16=FUNCTION_TABLE[$11]($14, $15);
      $vret=$16;
      var $17=$vret;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $20=$vret;
      $1=$20;
      label = 14; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $25=$2;
      var $26=(($25+16)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27)|(0))!=0;
      if ($28) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $30=$3;
      var $31=$2;
      var $32=(($31+16)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=$4;
      var $35=FUNCTION_TABLE[$30]($33, $34);
      $vret1=$35;
      var $36=$vret1;
      var $37=(($36)|(0))!=0;
      if ($37) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $39=$vret1;
      $1=$39;
      label = 14; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      $1=0;
      label = 14; break;
    case 14: 
      var $44=$1;
      return $44;
    default: assert(0, "bad label: " + label);
  }
}
function _count_next($lz) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $2=$lz;
      var $3=$2;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))==2147483647;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=$2;
      var $9=_count_nextlong($8);
      $1=$9;
      label = 4; break;
    case 3: 
      var $11=$2;
      var $12=(($11+8)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=((($13)+(1))|0);
      HEAP32[(($12)>>2)]=$14;
      var $15=_PyInt_FromSsize_t($13);
      $1=$15;
      label = 4; break;
    case 4: 
      var $17=$1;
      return $17;
    default: assert(0, "bad label: " + label);
  }
}
function _izip_new($type, $args, $kwds) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $lz;
      var $i;
      var $ittuple;
      var $result;
      var $tuplesize;
      var $item;
      var $it;
      $2=$type;
      $3=$args;
      $4=$kwds;
      var $5=$3;
      var $6=_PySequence_Size($5);
      $tuplesize=$6;
      var $7=$2;
      var $8=(($7)|(0))==((_izip_type)|(0));
      if ($8) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $10=$4;
      var $11=__PyArg_NoKeywords(((__str42)|0), $10);
      var $12=(($11)|(0))!=0;
      if ($12) { label = 4; break; } else { label = 3; break; }
    case 3: 
      $1=0;
      label = 46; break;
    case 4: 
      var $15=$3;
      var $16=(($15+4)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17+84)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=$19 & 67108864;
      var $21=(($20)|(0))!=0;
      if ($21) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 7; break;
    case 6: 
      ___assert_func(((__str1)|0), 3505, ((___func___izip_new)|0), ((__str30)|0));
      throw "Reached an unreachable!";
      label = 7; break;
    case 7: 
      var $26=$tuplesize;
      var $27=_PyTuple_New($26);
      $ittuple=$27;
      var $28=$ittuple;
      var $29=(($28)|(0))==0;
      if ($29) { label = 8; break; } else { label = 9; break; }
    case 8: 
      $1=0;
      label = 46; break;
    case 9: 
      $i=0;
      label = 10; break;
    case 10: 
      var $33=$i;
      var $34=$tuplesize;
      var $35=(($33)|(0)) < (($34)|(0));
      if ($35) { label = 11; break; } else { label = 22; break; }
    case 11: 
      var $37=$i;
      var $38=$3;
      var $39=$38;
      var $40=(($39+12)|0);
      var $41=(($40+($37<<2))|0);
      var $42=HEAP32[(($41)>>2)];
      $item=$42;
      var $43=$item;
      var $44=_PyObject_GetIter($43);
      $it=$44;
      var $45=$it;
      var $46=(($45)|(0))==0;
      if ($46) { label = 12; break; } else { label = 20; break; }
    case 12: 
      var $48=HEAP32[((_PyExc_TypeError)>>2)];
      var $49=_PyErr_ExceptionMatches($48);
      var $50=(($49)|(0))!=0;
      if ($50) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $52=HEAP32[((_PyExc_TypeError)>>2)];
      var $53=$i;
      var $54=((($53)+(1))|0);
      var $55=_PyErr_Format($52, ((__str43)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$54,tempInt));
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $58=$ittuple;
      var $59=(($58)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=((($60)-(1))|0);
      HEAP32[(($59)>>2)]=$61;
      var $62=(($61)|(0))!=0;
      if ($62) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 18; break;
    case 17: 
      var $65=$ittuple;
      var $66=(($65+4)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=(($67+24)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=$ittuple;
      FUNCTION_TABLE[$69]($70);
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      $1=0;
      label = 46; break;
    case 20: 
      var $74=$it;
      var $75=$i;
      var $76=$ittuple;
      var $77=$76;
      var $78=(($77+12)|0);
      var $79=(($78+($75<<2))|0);
      HEAP32[(($79)>>2)]=$74;
      label = 21; break;
    case 21: 
      var $81=$i;
      var $82=((($81)+(1))|0);
      $i=$82;
      label = 10; break;
    case 22: 
      var $84=$tuplesize;
      var $85=_PyTuple_New($84);
      $result=$85;
      var $86=$result;
      var $87=(($86)|(0))==0;
      if ($87) { label = 23; break; } else { label = 29; break; }
    case 23: 
      label = 24; break;
    case 24: 
      var $90=$ittuple;
      var $91=(($90)|0);
      var $92=HEAP32[(($91)>>2)];
      var $93=((($92)-(1))|0);
      HEAP32[(($91)>>2)]=$93;
      var $94=(($93)|(0))!=0;
      if ($94) { label = 25; break; } else { label = 26; break; }
    case 25: 
      label = 27; break;
    case 26: 
      var $97=$ittuple;
      var $98=(($97+4)|0);
      var $99=HEAP32[(($98)>>2)];
      var $100=(($99+24)|0);
      var $101=HEAP32[(($100)>>2)];
      var $102=$ittuple;
      FUNCTION_TABLE[$101]($102);
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      $1=0;
      label = 46; break;
    case 29: 
      $i=0;
      label = 30; break;
    case 30: 
      var $107=$i;
      var $108=$tuplesize;
      var $109=(($107)|(0)) < (($108)|(0));
      if ($109) { label = 31; break; } else { label = 33; break; }
    case 31: 
      var $111=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $112=((($111)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$112;
      var $113=$i;
      var $114=$result;
      var $115=$114;
      var $116=(($115+12)|0);
      var $117=(($116+($113<<2))|0);
      HEAP32[(($117)>>2)]=__Py_NoneStruct;
      label = 32; break;
    case 32: 
      var $119=$i;
      var $120=((($119)+(1))|0);
      $i=$120;
      label = 30; break;
    case 33: 
      var $122=$2;
      var $123=(($122+152)|0);
      var $124=HEAP32[(($123)>>2)];
      var $125=$2;
      var $126=FUNCTION_TABLE[$124]($125, 0);
      var $127=$126;
      $lz=$127;
      var $128=$lz;
      var $129=(($128)|(0))==0;
      if ($129) { label = 34; break; } else { label = 45; break; }
    case 34: 
      label = 35; break;
    case 35: 
      var $132=$ittuple;
      var $133=(($132)|0);
      var $134=HEAP32[(($133)>>2)];
      var $135=((($134)-(1))|0);
      HEAP32[(($133)>>2)]=$135;
      var $136=(($135)|(0))!=0;
      if ($136) { label = 36; break; } else { label = 37; break; }
    case 36: 
      label = 38; break;
    case 37: 
      var $139=$ittuple;
      var $140=(($139+4)|0);
      var $141=HEAP32[(($140)>>2)];
      var $142=(($141+24)|0);
      var $143=HEAP32[(($142)>>2)];
      var $144=$ittuple;
      FUNCTION_TABLE[$143]($144);
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      var $148=$result;
      var $149=(($148)|0);
      var $150=HEAP32[(($149)>>2)];
      var $151=((($150)-(1))|0);
      HEAP32[(($149)>>2)]=$151;
      var $152=(($151)|(0))!=0;
      if ($152) { label = 41; break; } else { label = 42; break; }
    case 41: 
      label = 43; break;
    case 42: 
      var $155=$result;
      var $156=(($155+4)|0);
      var $157=HEAP32[(($156)>>2)];
      var $158=(($157+24)|0);
      var $159=HEAP32[(($158)>>2)];
      var $160=$result;
      FUNCTION_TABLE[$159]($160);
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      $1=0;
      label = 46; break;
    case 45: 
      var $164=$ittuple;
      var $165=$lz;
      var $166=(($165+12)|0);
      HEAP32[(($166)>>2)]=$164;
      var $167=$tuplesize;
      var $168=$lz;
      var $169=(($168+8)|0);
      HEAP32[(($169)>>2)]=$167;
      var $170=$result;
      var $171=$lz;
      var $172=(($171+16)|0);
      HEAP32[(($172)>>2)]=$170;
      var $173=$lz;
      var $174=$173;
      $1=$174;
      label = 46; break;
    case 46: 
      var $176=$1;
      STACKTOP = __stackBase__;
      return $176;
    default: assert(0, "bad label: " + label);
  }
}
function _count_reduce($lz) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $2=$lz;
      var $3=$2;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))==2147483647;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=$2;
      var $9=$8;
      var $10=(($9+4)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=$2;
      var $13=(($12+12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$2;
      var $16=(($15+16)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=_Py_BuildValue(((__str53)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$11,HEAP32[(((tempInt)+(4))>>2)]=$14,HEAP32[(((tempInt)+(8))>>2)]=$17,tempInt));
      $1=$18;
      label = 4; break;
    case 3: 
      var $20=$2;
      var $21=$20;
      var $22=(($21+4)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=$2;
      var $25=(($24+8)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=_Py_BuildValue(((__str54)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$23,HEAP32[(((tempInt)+(4))>>2)]=$26,tempInt));
      $1=$27;
      label = 4; break;
    case 4: 
      var $29=$1;
      STACKTOP = __stackBase__;
      return $29;
    default: assert(0, "bad label: " + label);
  }
}
function _ifilterfalse_dealloc($lz) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$lz;
      var $2=$1;
      var $3=$2;
      _PyObject_GC_UnTrack($3);
      label = 2; break;
    case 2: 
      var $5=$1;
      var $6=(($5+8)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|(0))==0;
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 10; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $12=$1;
      var $13=(($12+8)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=((($16)-(1))|0);
      HEAP32[(($15)>>2)]=$17;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 8; break;
    case 7: 
      var $21=$1;
      var $22=(($21+8)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+4)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25+24)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$1;
      var $29=(($28+8)|0);
      var $30=HEAP32[(($29)>>2)];
      FUNCTION_TABLE[$27]($30);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $36=$1;
      var $37=(($36+12)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38)|(0))==0;
      if ($39) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 20; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $43=$1;
      var $44=(($43+12)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=(($45)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=((($47)-(1))|0);
      HEAP32[(($46)>>2)]=$48;
      var $49=(($48)|(0))!=0;
      if ($49) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 18; break;
    case 17: 
      var $52=$1;
      var $53=(($52+12)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54+4)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=(($56+24)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=$1;
      var $60=(($59+12)|0);
      var $61=HEAP32[(($60)>>2)];
      FUNCTION_TABLE[$58]($61);
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $66=$1;
      var $67=$66;
      var $68=(($67+4)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=(($69+160)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=$1;
      var $73=$72;
      FUNCTION_TABLE[$71]($73);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _ifilterfalse_traverse($lz, $visit, $arg) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $vret;
      var $vret1;
      $2=$lz;
      $3=$visit;
      $4=$arg;
      label = 2; break;
    case 2: 
      var $6=$2;
      var $7=(($6+12)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $11=$3;
      var $12=$2;
      var $13=(($12+12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$4;
      var $16=FUNCTION_TABLE[$11]($14, $15);
      $vret=$16;
      var $17=$vret;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $20=$vret;
      $1=$20;
      label = 14; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $25=$2;
      var $26=(($25+8)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27)|(0))!=0;
      if ($28) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $30=$3;
      var $31=$2;
      var $32=(($31+8)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=$4;
      var $35=FUNCTION_TABLE[$30]($33, $34);
      $vret1=$35;
      var $36=$vret1;
      var $37=(($36)|(0))!=0;
      if ($37) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $39=$vret1;
      $1=$39;
      label = 14; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      $1=0;
      label = 14; break;
    case 14: 
      var $44=$1;
      return $44;
    default: assert(0, "bad label: " + label);
  }
}
function _ifilterfalse_next($lz) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $item;
      var $it;
      var $ok;
      var $iternext;
      var $good;
      $2=$lz;
      var $3=$2;
      var $4=(($3+12)|0);
      var $5=HEAP32[(($4)>>2)];
      $it=$5;
      var $6=$it;
      var $7=(($6+4)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8+112)|0);
      var $10=HEAP32[(($9)>>2)];
      $iternext=$10;
      label = 2; break;
    case 2: 
      var $12=$iternext;
      var $13=$it;
      var $14=FUNCTION_TABLE[$12]($13);
      $item=$14;
      var $15=$item;
      var $16=(($15)|(0))==0;
      if ($16) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=0;
      label = 30; break;
    case 4: 
      var $19=$2;
      var $20=(($19+8)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21)|(0))==((__Py_NoneStruct)|(0));
      if ($22) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $24=$2;
      var $25=(($24+8)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26)|(0))==((_PyBool_Type)|(0));
      if ($27) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $29=$item;
      var $30=_PyObject_IsTrue($29);
      $ok=$30;
      label = 20; break;
    case 7: 
      var $32=$2;
      var $33=(($32+8)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=$item;
      var $36=_PyObject_CallFunctionObjArgs($34, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$35,HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
      $good=$36;
      var $37=$good;
      var $38=(($37)|(0))==0;
      if ($38) { label = 8; break; } else { label = 14; break; }
    case 8: 
      label = 9; break;
    case 9: 
      var $41=$item;
      var $42=(($41)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=((($43)-(1))|0);
      HEAP32[(($42)>>2)]=$44;
      var $45=(($44)|(0))!=0;
      if ($45) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 12; break;
    case 11: 
      var $48=$item;
      var $49=(($48+4)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=(($50+24)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=$item;
      FUNCTION_TABLE[$52]($53);
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      $1=0;
      label = 30; break;
    case 14: 
      var $57=$good;
      var $58=_PyObject_IsTrue($57);
      $ok=$58;
      label = 15; break;
    case 15: 
      var $60=$good;
      var $61=(($60)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=((($62)-(1))|0);
      HEAP32[(($61)>>2)]=$63;
      var $64=(($63)|(0))!=0;
      if ($64) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 18; break;
    case 17: 
      var $67=$good;
      var $68=(($67+4)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=(($69+24)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=$good;
      FUNCTION_TABLE[$71]($72);
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $76=$ok;
      var $77=(($76)|(0))==0;
      if ($77) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $79=$item;
      $1=$79;
      label = 30; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $82=$item;
      var $83=(($82)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=((($84)-(1))|0);
      HEAP32[(($83)>>2)]=$85;
      var $86=(($85)|(0))!=0;
      if ($86) { label = 24; break; } else { label = 25; break; }
    case 24: 
      label = 26; break;
    case 25: 
      var $89=$item;
      var $90=(($89+4)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=(($91+24)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=$item;
      FUNCTION_TABLE[$93]($94);
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $97=$ok;
      var $98=(($97)|(0)) < 0;
      if ($98) { label = 28; break; } else { label = 29; break; }
    case 28: 
      $1=0;
      label = 30; break;
    case 29: 
      label = 2; break;
    case 30: 
      var $102=$1;
      STACKTOP = __stackBase__;
      return $102;
    default: assert(0, "bad label: " + label);
  }
}
function _count_new($type, $args, $kwds) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $lz;
      var $slow_mode;
      var $cnt;
      var $long_cnt=__stackBase__;
      var $long_step=(__stackBase__)+(4);
      var $_py_tmp;
      $2=$type;
      $3=$args;
      $4=$kwds;
      $slow_mode=0;
      $cnt=0;
      HEAP32[(($long_cnt)>>2)]=0;
      HEAP32[(($long_step)>>2)]=0;
      var $5=$3;
      var $6=$4;
      var $7=_PyArg_ParseTupleAndKeywords($5, $6, ((__str47)|0), ((_count_new_kwlist)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$long_cnt,HEAP32[(((tempInt)+(4))>>2)]=$long_step,tempInt));
      var $8=(($7)|(0))!=0;
      if ($8) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 70; break;
    case 3: 
      var $11=HEAP32[(($long_cnt)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $14=HEAP32[(($long_cnt)>>2)];
      var $15=_PyNumber_Check($14);
      var $16=(($15)|(0))!=0;
      if ($16) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $18=HEAP32[(($long_step)>>2)];
      var $19=(($18)|(0))!=0;
      if ($19) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $21=HEAP32[(($long_step)>>2)];
      var $22=_PyNumber_Check($21);
      var $23=(($22)|(0))!=0;
      if ($23) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $25=HEAP32[((_PyExc_TypeError)>>2)];
      _PyErr_SetString($25, ((__str48)|0));
      $1=0;
      label = 70; break;
    case 8: 
      var $27=HEAP32[(($long_cnt)>>2)];
      var $28=(($27)|(0))!=0;
      if ($28) { label = 9; break; } else { label = 14; break; }
    case 9: 
      var $30=HEAP32[(($long_cnt)>>2)];
      var $31=_PyInt_AsSsize_t($30);
      $cnt=$31;
      var $32=$cnt;
      var $33=(($32)|(0))==-1;
      if ($33) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $35=_PyErr_Occurred();
      var $36=(($35)|(0))!=0;
      if ($36) { label = 12; break; } else { label = 11; break; }
    case 11: 
      var $38=HEAP32[(($long_cnt)>>2)];
      var $39=(($38+4)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40+84)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=$42 & 8388608;
      var $44=(($43)|(0))!=0;
      if ($44) { label = 13; break; } else { label = 12; break; }
    case 12: 
      _PyErr_Clear();
      $slow_mode=1;
      label = 13; break;
    case 13: 
      var $47=HEAP32[(($long_cnt)>>2)];
      var $48=(($47)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=((($49)+(1))|0);
      HEAP32[(($48)>>2)]=$50;
      label = 15; break;
    case 14: 
      $cnt=0;
      var $52=_PyInt_FromLong(0);
      HEAP32[(($long_cnt)>>2)]=$52;
      label = 15; break;
    case 15: 
      var $54=HEAP32[(($long_step)>>2)];
      var $55=(($54)|(0))==0;
      if ($55) { label = 16; break; } else { label = 24; break; }
    case 16: 
      var $57=_PyInt_FromLong(1);
      HEAP32[(($long_step)>>2)]=$57;
      var $58=HEAP32[(($long_step)>>2)];
      var $59=(($58)|(0))==0;
      if ($59) { label = 17; break; } else { label = 23; break; }
    case 17: 
      label = 18; break;
    case 18: 
      var $62=HEAP32[(($long_cnt)>>2)];
      var $63=(($62)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=((($64)-(1))|0);
      HEAP32[(($63)>>2)]=$65;
      var $66=(($65)|(0))!=0;
      if ($66) { label = 19; break; } else { label = 20; break; }
    case 19: 
      label = 21; break;
    case 20: 
      var $69=HEAP32[(($long_cnt)>>2)];
      var $70=(($69+4)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=(($71+24)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=HEAP32[(($long_cnt)>>2)];
      FUNCTION_TABLE[$73]($74);
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      $1=0;
      label = 70; break;
    case 23: 
      label = 25; break;
    case 24: 
      var $79=HEAP32[(($long_step)>>2)];
      var $80=(($79)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=((($81)+(1))|0);
      HEAP32[(($80)>>2)]=$82;
      label = 25; break;
    case 25: 
      var $84=HEAP32[(($long_cnt)>>2)];
      var $85=(($84)|(0))!=0;
      if ($85) { label = 26; break; } else { label = 28; break; }
    case 26: 
      var $87=HEAP32[(($long_step)>>2)];
      var $88=(($87)|(0))!=0;
      if ($88) { label = 27; break; } else { label = 28; break; }
    case 27: 
      label = 29; break;
    case 28: 
      ___assert_func(((__str1)|0), 3300, ((___func___count_new)|0), ((__str49)|0));
      throw "Reached an unreachable!";
      label = 29; break;
    case 29: 
      var $93=HEAP32[(($long_step)>>2)];
      var $94=(($93+4)|0);
      var $95=HEAP32[(($94)>>2)];
      var $96=(($95+84)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=$97 & 8388608;
      var $99=(($98)|(0))!=0;
      if ($99) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $101=HEAP32[(($long_step)>>2)];
      var $102=$101;
      var $103=(($102+8)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=(($104)|(0))!=1;
      if ($105) { label = 31; break; } else { label = 32; break; }
    case 31: 
      $slow_mode=1;
      label = 32; break;
    case 32: 
      var $108=$slow_mode;
      var $109=(($108)|(0))!=0;
      if ($109) { label = 33; break; } else { label = 34; break; }
    case 33: 
      $cnt=2147483647;
      label = 44; break;
    case 34: 
      label = 35; break;
    case 35: 
      var $113=HEAP32[(($long_cnt)>>2)];
      var $114=(($113)|(0))!=0;
      if ($114) { label = 36; break; } else { label = 42; break; }
    case 36: 
      var $116=HEAP32[(($long_cnt)>>2)];
      $_py_tmp=$116;
      HEAP32[(($long_cnt)>>2)]=0;
      label = 37; break;
    case 37: 
      var $118=$_py_tmp;
      var $119=(($118)|0);
      var $120=HEAP32[(($119)>>2)];
      var $121=((($120)-(1))|0);
      HEAP32[(($119)>>2)]=$121;
      var $122=(($121)|(0))!=0;
      if ($122) { label = 38; break; } else { label = 39; break; }
    case 38: 
      label = 40; break;
    case 39: 
      var $125=$_py_tmp;
      var $126=(($125+4)|0);
      var $127=HEAP32[(($126)>>2)];
      var $128=(($127+24)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=$_py_tmp;
      FUNCTION_TABLE[$129]($130);
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      var $136=$cnt;
      var $137=(($136)|(0))!=2147483647;
      if ($137) { label = 45; break; } else { label = 47; break; }
    case 45: 
      var $139=HEAP32[(($long_cnt)>>2)];
      var $140=(($139)|(0))==0;
      if ($140) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $142=$slow_mode;
      var $143=(($142)|(0))!=0;
      if ($143) { label = 47; break; } else { label = 50; break; }
    case 47: 
      var $145=$cnt;
      var $146=(($145)|(0))==2147483647;
      if ($146) { label = 48; break; } else { label = 51; break; }
    case 48: 
      var $148=HEAP32[(($long_cnt)>>2)];
      var $149=(($148)|(0))!=0;
      if ($149) { label = 49; break; } else { label = 51; break; }
    case 49: 
      var $151=$slow_mode;
      var $152=(($151)|(0))!=0;
      if ($152) { label = 50; break; } else { label = 51; break; }
    case 50: 
      label = 52; break;
    case 51: 
      ___assert_func(((__str1)|0), 3314, ((___func___count_new)|0), ((__str50)|0));
      throw "Reached an unreachable!";
      label = 52; break;
    case 52: 
      var $157=$slow_mode;
      var $158=(($157)|(0))!=0;
      if ($158) { label = 55; break; } else { label = 53; break; }
    case 53: 
      var $160=HEAP32[(($long_step)>>2)];
      var $161=(($160+4)|0);
      var $162=HEAP32[(($161)>>2)];
      var $163=(($162+84)|0);
      var $164=HEAP32[(($163)>>2)];
      var $165=$164 & 8388608;
      var $166=(($165)|(0))!=0;
      if ($166) { label = 54; break; } else { label = 56; break; }
    case 54: 
      var $168=HEAP32[(($long_step)>>2)];
      var $169=$168;
      var $170=(($169+8)|0);
      var $171=HEAP32[(($170)>>2)];
      var $172=(($171)|(0))==1;
      if ($172) { label = 55; break; } else { label = 56; break; }
    case 55: 
      label = 57; break;
    case 56: 
      ___assert_func(((__str1)|0), 3316, ((___func___count_new)|0), ((__str51)|0));
      throw "Reached an unreachable!";
      label = 57; break;
    case 57: 
      var $177=$2;
      var $178=(($177+152)|0);
      var $179=HEAP32[(($178)>>2)];
      var $180=$2;
      var $181=FUNCTION_TABLE[$179]($180, 0);
      var $182=$181;
      $lz=$182;
      var $183=$lz;
      var $184=(($183)|(0))==0;
      if ($184) { label = 58; break; } else { label = 69; break; }
    case 58: 
      label = 59; break;
    case 59: 
      var $187=HEAP32[(($long_cnt)>>2)];
      var $188=(($187)|(0))==0;
      if ($188) { label = 60; break; } else { label = 61; break; }
    case 60: 
      label = 67; break;
    case 61: 
      label = 62; break;
    case 62: 
      var $192=HEAP32[(($long_cnt)>>2)];
      var $193=(($192)|0);
      var $194=HEAP32[(($193)>>2)];
      var $195=((($194)-(1))|0);
      HEAP32[(($193)>>2)]=$195;
      var $196=(($195)|(0))!=0;
      if ($196) { label = 63; break; } else { label = 64; break; }
    case 63: 
      label = 65; break;
    case 64: 
      var $199=HEAP32[(($long_cnt)>>2)];
      var $200=(($199+4)|0);
      var $201=HEAP32[(($200)>>2)];
      var $202=(($201+24)|0);
      var $203=HEAP32[(($202)>>2)];
      var $204=HEAP32[(($long_cnt)>>2)];
      FUNCTION_TABLE[$203]($204);
      label = 65; break;
    case 65: 
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      label = 68; break;
    case 68: 
      $1=0;
      label = 70; break;
    case 69: 
      var $210=$cnt;
      var $211=$lz;
      var $212=(($211+8)|0);
      HEAP32[(($212)>>2)]=$210;
      var $213=HEAP32[(($long_cnt)>>2)];
      var $214=$lz;
      var $215=(($214+12)|0);
      HEAP32[(($215)>>2)]=$213;
      var $216=HEAP32[(($long_step)>>2)];
      var $217=$lz;
      var $218=(($217+16)|0);
      HEAP32[(($218)>>2)]=$216;
      var $219=$lz;
      var $220=$219;
      $1=$220;
      label = 70; break;
    case 70: 
      var $222=$1;
      STACKTOP = __stackBase__;
      return $222;
    default: assert(0, "bad label: " + label);
  }
}
function _count_nextlong($lz) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $long_cnt;
      var $stepped_up;
      $2=$lz;
      var $3=$2;
      var $4=(($3+12)|0);
      var $5=HEAP32[(($4)>>2)];
      $long_cnt=$5;
      var $6=$long_cnt;
      var $7=(($6)|(0))==0;
      if ($7) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $9=_PyInt_FromSsize_t(2147483647);
      $long_cnt=$9;
      var $10=$long_cnt;
      var $11=(($10)|(0))==0;
      if ($11) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=0;
      label = 12; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $15=$2;
      var $16=(($15+8)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17)|(0))==2147483647;
      if ($18) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $20=$long_cnt;
      var $21=(($20)|(0))!=0;
      if ($21) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 9; break;
    case 8: 
      ___assert_func(((__str1)|0), 3361, ((___func___count_nextlong)|0), ((__str55)|0));
      throw "Reached an unreachable!";
      label = 9; break;
    case 9: 
      var $26=$long_cnt;
      var $27=$2;
      var $28=(($27+16)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=_PyNumber_Add($26, $29);
      $stepped_up=$30;
      var $31=$stepped_up;
      var $32=(($31)|(0))==0;
      if ($32) { label = 10; break; } else { label = 11; break; }
    case 10: 
      $1=0;
      label = 12; break;
    case 11: 
      var $35=$stepped_up;
      var $36=$2;
      var $37=(($36+12)|0);
      HEAP32[(($37)>>2)]=$35;
      var $38=$long_cnt;
      $1=$38;
      label = 12; break;
    case 12: 
      var $40=$1;
      return $40;
    default: assert(0, "bad label: " + label);
  }
}
function _ifilterfalse_new($type, $args, $kwds) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $func=__stackBase__;
      var $seq=(__stackBase__)+(4);
      var $it;
      var $lz;
      $2=$type;
      $3=$args;
      $4=$kwds;
      var $5=$2;
      var $6=(($5)|(0))==((_ifilterfalse_type)|(0));
      if ($6) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $8=$4;
      var $9=__PyArg_NoKeywords(((__str60)|0), $8);
      var $10=(($9)|(0))!=0;
      if ($10) { label = 4; break; } else { label = 3; break; }
    case 3: 
      $1=0;
      label = 16; break;
    case 4: 
      var $13=$3;
      var $14=_PyArg_UnpackTuple($13, ((__str61)|0), 2, 2, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$func,HEAP32[(((tempInt)+(4))>>2)]=$seq,tempInt));
      var $15=(($14)|(0))!=0;
      if ($15) { label = 6; break; } else { label = 5; break; }
    case 5: 
      $1=0;
      label = 16; break;
    case 6: 
      var $18=HEAP32[(($seq)>>2)];
      var $19=_PyObject_GetIter($18);
      $it=$19;
      var $20=$it;
      var $21=(($20)|(0))==0;
      if ($21) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $1=0;
      label = 16; break;
    case 8: 
      var $24=$2;
      var $25=(($24+152)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$2;
      var $28=FUNCTION_TABLE[$26]($27, 0);
      var $29=$28;
      $lz=$29;
      var $30=$lz;
      var $31=(($30)|(0))==0;
      if ($31) { label = 9; break; } else { label = 15; break; }
    case 9: 
      label = 10; break;
    case 10: 
      var $34=$it;
      var $35=(($34)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=((($36)-(1))|0);
      HEAP32[(($35)>>2)]=$37;
      var $38=(($37)|(0))!=0;
      if ($38) { label = 11; break; } else { label = 12; break; }
    case 11: 
      label = 13; break;
    case 12: 
      var $41=$it;
      var $42=(($41+4)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($43+24)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=$it;
      FUNCTION_TABLE[$45]($46);
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      $1=0;
      label = 16; break;
    case 15: 
      var $50=HEAP32[(($func)>>2)];
      var $51=(($50)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=((($52)+(1))|0);
      HEAP32[(($51)>>2)]=$53;
      var $54=HEAP32[(($func)>>2)];
      var $55=$lz;
      var $56=(($55+8)|0);
      HEAP32[(($56)>>2)]=$54;
      var $57=$it;
      var $58=$lz;
      var $59=(($58+12)|0);
      HEAP32[(($59)>>2)]=$57;
      var $60=$lz;
      var $61=$60;
      $1=$61;
      label = 16; break;
    case 16: 
      var $63=$1;
      STACKTOP = __stackBase__;
      return $63;
    default: assert(0, "bad label: " + label);
  }
}
function _ifilter_dealloc($lz) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$lz;
      var $2=$1;
      var $3=$2;
      _PyObject_GC_UnTrack($3);
      label = 2; break;
    case 2: 
      var $5=$1;
      var $6=(($5+8)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|(0))==0;
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 10; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $12=$1;
      var $13=(($12+8)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=((($16)-(1))|0);
      HEAP32[(($15)>>2)]=$17;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 8; break;
    case 7: 
      var $21=$1;
      var $22=(($21+8)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+4)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25+24)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$1;
      var $29=(($28+8)|0);
      var $30=HEAP32[(($29)>>2)];
      FUNCTION_TABLE[$27]($30);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $36=$1;
      var $37=(($36+12)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38)|(0))==0;
      if ($39) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 20; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $43=$1;
      var $44=(($43+12)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=(($45)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=((($47)-(1))|0);
      HEAP32[(($46)>>2)]=$48;
      var $49=(($48)|(0))!=0;
      if ($49) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 18; break;
    case 17: 
      var $52=$1;
      var $53=(($52+12)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54+4)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=(($56+24)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=$1;
      var $60=(($59+12)|0);
      var $61=HEAP32[(($60)>>2)];
      FUNCTION_TABLE[$58]($61);
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $66=$1;
      var $67=$66;
      var $68=(($67+4)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=(($69+160)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=$1;
      var $73=$72;
      FUNCTION_TABLE[$71]($73);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _ifilter_traverse($lz, $visit, $arg) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $vret;
      var $vret1;
      $2=$lz;
      $3=$visit;
      $4=$arg;
      label = 2; break;
    case 2: 
      var $6=$2;
      var $7=(($6+12)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $11=$3;
      var $12=$2;
      var $13=(($12+12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$4;
      var $16=FUNCTION_TABLE[$11]($14, $15);
      $vret=$16;
      var $17=$vret;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $20=$vret;
      $1=$20;
      label = 14; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $25=$2;
      var $26=(($25+8)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27)|(0))!=0;
      if ($28) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $30=$3;
      var $31=$2;
      var $32=(($31+8)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=$4;
      var $35=FUNCTION_TABLE[$30]($33, $34);
      $vret1=$35;
      var $36=$vret1;
      var $37=(($36)|(0))!=0;
      if ($37) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $39=$vret1;
      $1=$39;
      label = 14; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      $1=0;
      label = 14; break;
    case 14: 
      var $44=$1;
      return $44;
    default: assert(0, "bad label: " + label);
  }
}
function _ifilter_next($lz) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $item;
      var $it;
      var $ok;
      var $iternext;
      var $good;
      $2=$lz;
      var $3=$2;
      var $4=(($3+12)|0);
      var $5=HEAP32[(($4)>>2)];
      $it=$5;
      var $6=$it;
      var $7=(($6+4)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8+112)|0);
      var $10=HEAP32[(($9)>>2)];
      $iternext=$10;
      label = 2; break;
    case 2: 
      var $12=$iternext;
      var $13=$it;
      var $14=FUNCTION_TABLE[$12]($13);
      $item=$14;
      var $15=$item;
      var $16=(($15)|(0))==0;
      if ($16) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=0;
      label = 30; break;
    case 4: 
      var $19=$2;
      var $20=(($19+8)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21)|(0))==((__Py_NoneStruct)|(0));
      if ($22) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $24=$2;
      var $25=(($24+8)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26)|(0))==((_PyBool_Type)|(0));
      if ($27) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $29=$item;
      var $30=_PyObject_IsTrue($29);
      $ok=$30;
      label = 20; break;
    case 7: 
      var $32=$2;
      var $33=(($32+8)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=$item;
      var $36=_PyObject_CallFunctionObjArgs($34, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$35,HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
      $good=$36;
      var $37=$good;
      var $38=(($37)|(0))==0;
      if ($38) { label = 8; break; } else { label = 14; break; }
    case 8: 
      label = 9; break;
    case 9: 
      var $41=$item;
      var $42=(($41)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=((($43)-(1))|0);
      HEAP32[(($42)>>2)]=$44;
      var $45=(($44)|(0))!=0;
      if ($45) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 12; break;
    case 11: 
      var $48=$item;
      var $49=(($48+4)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=(($50+24)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=$item;
      FUNCTION_TABLE[$52]($53);
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      $1=0;
      label = 30; break;
    case 14: 
      var $57=$good;
      var $58=_PyObject_IsTrue($57);
      $ok=$58;
      label = 15; break;
    case 15: 
      var $60=$good;
      var $61=(($60)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=((($62)-(1))|0);
      HEAP32[(($61)>>2)]=$63;
      var $64=(($63)|(0))!=0;
      if ($64) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 18; break;
    case 17: 
      var $67=$good;
      var $68=(($67+4)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=(($69+24)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=$good;
      FUNCTION_TABLE[$71]($72);
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $76=$ok;
      var $77=(($76)|(0)) > 0;
      if ($77) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $79=$item;
      $1=$79;
      label = 30; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $82=$item;
      var $83=(($82)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=((($84)-(1))|0);
      HEAP32[(($83)>>2)]=$85;
      var $86=(($85)|(0))!=0;
      if ($86) { label = 24; break; } else { label = 25; break; }
    case 24: 
      label = 26; break;
    case 25: 
      var $89=$item;
      var $90=(($89+4)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=(($91+24)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=$item;
      FUNCTION_TABLE[$93]($94);
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $97=$ok;
      var $98=(($97)|(0)) < 0;
      if ($98) { label = 28; break; } else { label = 29; break; }
    case 28: 
      $1=0;
      label = 30; break;
    case 29: 
      label = 2; break;
    case 30: 
      var $102=$1;
      STACKTOP = __stackBase__;
      return $102;
    default: assert(0, "bad label: " + label);
  }
}
function _ifilter_new($type, $args, $kwds) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $func=__stackBase__;
      var $seq=(__stackBase__)+(4);
      var $it;
      var $lz;
      $2=$type;
      $3=$args;
      $4=$kwds;
      var $5=$2;
      var $6=(($5)|(0))==((_ifilter_type)|(0));
      if ($6) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $8=$4;
      var $9=__PyArg_NoKeywords(((__str63)|0), $8);
      var $10=(($9)|(0))!=0;
      if ($10) { label = 4; break; } else { label = 3; break; }
    case 3: 
      $1=0;
      label = 16; break;
    case 4: 
      var $13=$3;
      var $14=_PyArg_UnpackTuple($13, ((__str64)|0), 2, 2, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$func,HEAP32[(((tempInt)+(4))>>2)]=$seq,tempInt));
      var $15=(($14)|(0))!=0;
      if ($15) { label = 6; break; } else { label = 5; break; }
    case 5: 
      $1=0;
      label = 16; break;
    case 6: 
      var $18=HEAP32[(($seq)>>2)];
      var $19=_PyObject_GetIter($18);
      $it=$19;
      var $20=$it;
      var $21=(($20)|(0))==0;
      if ($21) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $1=0;
      label = 16; break;
    case 8: 
      var $24=$2;
      var $25=(($24+152)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$2;
      var $28=FUNCTION_TABLE[$26]($27, 0);
      var $29=$28;
      $lz=$29;
      var $30=$lz;
      var $31=(($30)|(0))==0;
      if ($31) { label = 9; break; } else { label = 15; break; }
    case 9: 
      label = 10; break;
    case 10: 
      var $34=$it;
      var $35=(($34)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=((($36)-(1))|0);
      HEAP32[(($35)>>2)]=$37;
      var $38=(($37)|(0))!=0;
      if ($38) { label = 11; break; } else { label = 12; break; }
    case 11: 
      label = 13; break;
    case 12: 
      var $41=$it;
      var $42=(($41+4)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($43+24)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=$it;
      FUNCTION_TABLE[$45]($46);
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      $1=0;
      label = 16; break;
    case 15: 
      var $50=HEAP32[(($func)>>2)];
      var $51=(($50)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=((($52)+(1))|0);
      HEAP32[(($51)>>2)]=$53;
      var $54=HEAP32[(($func)>>2)];
      var $55=$lz;
      var $56=(($55+8)|0);
      HEAP32[(($56)>>2)]=$54;
      var $57=$it;
      var $58=$lz;
      var $59=(($58+12)|0);
      HEAP32[(($59)>>2)]=$57;
      var $60=$lz;
      var $61=$60;
      $1=$61;
      label = 16; break;
    case 16: 
      var $63=$1;
      STACKTOP = __stackBase__;
      return $63;
    default: assert(0, "bad label: " + label);
  }
}
function _compress_dealloc($lz) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$lz;
      var $2=$1;
      var $3=$2;
      _PyObject_GC_UnTrack($3);
      label = 2; break;
    case 2: 
      var $5=$1;
      var $6=(($5+8)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|(0))==0;
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 10; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $12=$1;
      var $13=(($12+8)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=((($16)-(1))|0);
      HEAP32[(($15)>>2)]=$17;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 8; break;
    case 7: 
      var $21=$1;
      var $22=(($21+8)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+4)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25+24)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$1;
      var $29=(($28+8)|0);
      var $30=HEAP32[(($29)>>2)];
      FUNCTION_TABLE[$27]($30);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $36=$1;
      var $37=(($36+12)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38)|(0))==0;
      if ($39) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 20; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $43=$1;
      var $44=(($43+12)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=(($45)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=((($47)-(1))|0);
      HEAP32[(($46)>>2)]=$48;
      var $49=(($48)|(0))!=0;
      if ($49) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 18; break;
    case 17: 
      var $52=$1;
      var $53=(($52+12)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54+4)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=(($56+24)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=$1;
      var $60=(($59+12)|0);
      var $61=HEAP32[(($60)>>2)];
      FUNCTION_TABLE[$58]($61);
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $66=$1;
      var $67=$66;
      var $68=(($67+4)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=(($69+160)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=$1;
      var $73=$72;
      FUNCTION_TABLE[$71]($73);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _compress_traverse($lz, $visit, $arg) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $vret;
      var $vret1;
      $2=$lz;
      $3=$visit;
      $4=$arg;
      label = 2; break;
    case 2: 
      var $6=$2;
      var $7=(($6+8)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $11=$3;
      var $12=$2;
      var $13=(($12+8)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$4;
      var $16=FUNCTION_TABLE[$11]($14, $15);
      $vret=$16;
      var $17=$vret;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $20=$vret;
      $1=$20;
      label = 14; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $25=$2;
      var $26=(($25+12)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27)|(0))!=0;
      if ($28) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $30=$3;
      var $31=$2;
      var $32=(($31+12)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=$4;
      var $35=FUNCTION_TABLE[$30]($33, $34);
      $vret1=$35;
      var $36=$vret1;
      var $37=(($36)|(0))!=0;
      if ($37) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $39=$vret1;
      $1=$39;
      label = 14; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      $1=0;
      label = 14; break;
    case 14: 
      var $44=$1;
      return $44;
    default: assert(0, "bad label: " + label);
  }
}
function _compress_next($lz) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $data;
      var $selectors;
      var $datum;
      var $selector;
      var $datanext;
      var $selectornext;
      var $ok;
      $2=$lz;
      var $3=$2;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      $data=$5;
      var $6=$2;
      var $7=(($6+12)|0);
      var $8=HEAP32[(($7)>>2)];
      $selectors=$8;
      var $9=$data;
      var $10=(($9+4)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11+112)|0);
      var $13=HEAP32[(($12)>>2)];
      $datanext=$13;
      var $14=$selectors;
      var $15=(($14+4)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16+112)|0);
      var $18=HEAP32[(($17)>>2)];
      $selectornext=$18;
      label = 2; break;
    case 2: 
      var $20=$datanext;
      var $21=$data;
      var $22=FUNCTION_TABLE[$20]($21);
      $datum=$22;
      var $23=$datum;
      var $24=(($23)|(0))==0;
      if ($24) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=0;
      label = 26; break;
    case 4: 
      var $27=$selectornext;
      var $28=$selectors;
      var $29=FUNCTION_TABLE[$27]($28);
      $selector=$29;
      var $30=$selector;
      var $31=(($30)|(0))==0;
      if ($31) { label = 5; break; } else { label = 11; break; }
    case 5: 
      label = 6; break;
    case 6: 
      var $34=$datum;
      var $35=(($34)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=((($36)-(1))|0);
      HEAP32[(($35)>>2)]=$37;
      var $38=(($37)|(0))!=0;
      if ($38) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 9; break;
    case 8: 
      var $41=$datum;
      var $42=(($41+4)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($43+24)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=$datum;
      FUNCTION_TABLE[$45]($46);
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      $1=0;
      label = 26; break;
    case 11: 
      var $50=$selector;
      var $51=_PyObject_IsTrue($50);
      $ok=$51;
      label = 12; break;
    case 12: 
      var $53=$selector;
      var $54=(($53)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=((($55)-(1))|0);
      HEAP32[(($54)>>2)]=$56;
      var $57=(($56)|(0))!=0;
      if ($57) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 15; break;
    case 14: 
      var $60=$selector;
      var $61=(($60+4)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=(($62+24)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=$selector;
      FUNCTION_TABLE[$64]($65);
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $68=$ok;
      var $69=(($68)|(0))==1;
      if ($69) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $71=$datum;
      $1=$71;
      label = 26; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $74=$datum;
      var $75=(($74)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=((($76)-(1))|0);
      HEAP32[(($75)>>2)]=$77;
      var $78=(($77)|(0))!=0;
      if ($78) { label = 20; break; } else { label = 21; break; }
    case 20: 
      label = 22; break;
    case 21: 
      var $81=$datum;
      var $82=(($81+4)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=(($83+24)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=$datum;
      FUNCTION_TABLE[$85]($86);
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $89=$ok;
      var $90=(($89)|(0))==-1;
      if ($90) { label = 24; break; } else { label = 25; break; }
    case 24: 
      $1=0;
      label = 26; break;
    case 25: 
      label = 2; break;
    case 26: 
      var $94=$1;
      return $94;
    default: assert(0, "bad label: " + label);
  }
}
function _compress_new($type, $args, $kwds) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $seq1=__stackBase__;
      var $seq2=(__stackBase__)+(4);
      var $data;
      var $selectors;
      var $lz;
      $2=$type;
      $3=$args;
      $4=$kwds;
      $data=0;
      $selectors=0;
      var $5=$3;
      var $6=$4;
      var $7=_PyArg_ParseTupleAndKeywords($5, $6, ((__str68)|0), ((_compress_new_kwargs)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$seq1,HEAP32[(((tempInt)+(4))>>2)]=$seq2,tempInt));
      var $8=(($7)|(0))!=0;
      if ($8) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 31; break;
    case 3: 
      var $11=HEAP32[(($seq1)>>2)];
      var $12=_PyObject_GetIter($11);
      $data=$12;
      var $13=$data;
      var $14=(($13)|(0))==0;
      if ($14) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 10; break;
    case 5: 
      var $17=HEAP32[(($seq2)>>2)];
      var $18=_PyObject_GetIter($17);
      $selectors=$18;
      var $19=$selectors;
      var $20=(($19)|(0))==0;
      if ($20) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 10; break;
    case 7: 
      var $23=$2;
      var $24=(($23+152)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=$2;
      var $27=FUNCTION_TABLE[$25]($26, 0);
      var $28=$27;
      $lz=$28;
      var $29=$lz;
      var $30=(($29)|(0))==0;
      if ($30) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 10; break;
    case 9: 
      var $33=$data;
      var $34=$lz;
      var $35=(($34+8)|0);
      HEAP32[(($35)>>2)]=$33;
      var $36=$selectors;
      var $37=$lz;
      var $38=(($37+12)|0);
      HEAP32[(($38)>>2)]=$36;
      var $39=$lz;
      var $40=$39;
      $1=$40;
      label = 31; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $43=$data;
      var $44=(($43)|(0))==0;
      if ($44) { label = 12; break; } else { label = 13; break; }
    case 12: 
      label = 19; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $48=$data;
      var $49=(($48)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=((($50)-(1))|0);
      HEAP32[(($49)>>2)]=$51;
      var $52=(($51)|(0))!=0;
      if ($52) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 17; break;
    case 16: 
      var $55=$data;
      var $56=(($55+4)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=(($57+24)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=$data;
      FUNCTION_TABLE[$59]($60);
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $66=$selectors;
      var $67=(($66)|(0))==0;
      if ($67) { label = 22; break; } else { label = 23; break; }
    case 22: 
      label = 29; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $71=$selectors;
      var $72=(($71)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=((($73)-(1))|0);
      HEAP32[(($72)>>2)]=$74;
      var $75=(($74)|(0))!=0;
      if ($75) { label = 25; break; } else { label = 26; break; }
    case 25: 
      label = 27; break;
    case 26: 
      var $78=$selectors;
      var $79=(($78+4)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=(($80+24)|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=$selectors;
      FUNCTION_TABLE[$82]($83);
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      $1=0;
      label = 31; break;
    case 31: 
      var $89=$1;
      STACKTOP = __stackBase__;
      return $89;
    default: assert(0, "bad label: " + label);
  }
}
function _chain_dealloc($lz) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$lz;
      var $2=$1;
      var $3=$2;
      _PyObject_GC_UnTrack($3);
      label = 2; break;
    case 2: 
      var $5=$1;
      var $6=(($5+12)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|(0))==0;
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 10; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $12=$1;
      var $13=(($12+12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=((($16)-(1))|0);
      HEAP32[(($15)>>2)]=$17;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 8; break;
    case 7: 
      var $21=$1;
      var $22=(($21+12)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+4)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25+24)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$1;
      var $29=(($28+12)|0);
      var $30=HEAP32[(($29)>>2)];
      FUNCTION_TABLE[$27]($30);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $36=$1;
      var $37=(($36+8)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38)|(0))==0;
      if ($39) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 20; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $43=$1;
      var $44=(($43+8)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=(($45)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=((($47)-(1))|0);
      HEAP32[(($46)>>2)]=$48;
      var $49=(($48)|(0))!=0;
      if ($49) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 18; break;
    case 17: 
      var $52=$1;
      var $53=(($52+8)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54+4)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=(($56+24)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=$1;
      var $60=(($59+8)|0);
      var $61=HEAP32[(($60)>>2)];
      FUNCTION_TABLE[$58]($61);
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $66=$1;
      var $67=$66;
      var $68=(($67+4)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=(($69+160)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=$1;
      var $73=$72;
      FUNCTION_TABLE[$71]($73);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _chain_traverse($lz, $visit, $arg) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $vret;
      var $vret1;
      $2=$lz;
      $3=$visit;
      $4=$arg;
      label = 2; break;
    case 2: 
      var $6=$2;
      var $7=(($6+8)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $11=$3;
      var $12=$2;
      var $13=(($12+8)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$4;
      var $16=FUNCTION_TABLE[$11]($14, $15);
      $vret=$16;
      var $17=$vret;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $20=$vret;
      $1=$20;
      label = 14; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $25=$2;
      var $26=(($25+12)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27)|(0))!=0;
      if ($28) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $30=$3;
      var $31=$2;
      var $32=(($31+12)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=$4;
      var $35=FUNCTION_TABLE[$30]($33, $34);
      $vret1=$35;
      var $36=$vret1;
      var $37=(($36)|(0))!=0;
      if ($37) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $39=$vret1;
      $1=$39;
      label = 14; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      $1=0;
      label = 14; break;
    case 14: 
      var $44=$1;
      return $44;
    default: assert(0, "bad label: " + label);
  }
}
function _chain_next($lz) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $item;
      var $iterable;
      var $_py_tmp;
      var $_py_tmp1;
      var $_py_tmp2;
      $2=$lz;
      var $3=$2;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))==0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 49; break;
    case 3: 
      var $9=$2;
      var $10=(($9+12)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))==0;
      if ($12) { label = 4; break; } else { label = 32; break; }
    case 4: 
      var $14=$2;
      var $15=(($14+8)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=_PyIter_Next($16);
      $iterable=$17;
      var $18=$iterable;
      var $19=(($18)|(0))==0;
      if ($19) { label = 5; break; } else { label = 15; break; }
    case 5: 
      label = 6; break;
    case 6: 
      var $22=$2;
      var $23=(($22+8)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24)|(0))!=0;
      if ($25) { label = 7; break; } else { label = 13; break; }
    case 7: 
      var $27=$2;
      var $28=(($27+8)|0);
      var $29=HEAP32[(($28)>>2)];
      $_py_tmp=$29;
      var $30=$2;
      var $31=(($30+8)|0);
      HEAP32[(($31)>>2)]=0;
      label = 8; break;
    case 8: 
      var $33=$_py_tmp;
      var $34=(($33)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=((($35)-(1))|0);
      HEAP32[(($34)>>2)]=$36;
      var $37=(($36)|(0))!=0;
      if ($37) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 11; break;
    case 10: 
      var $40=$_py_tmp;
      var $41=(($40+4)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($42+24)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=$_py_tmp;
      FUNCTION_TABLE[$44]($45);
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      $1=0;
      label = 49; break;
    case 15: 
      var $51=$iterable;
      var $52=_PyObject_GetIter($51);
      var $53=$2;
      var $54=(($53+12)|0);
      HEAP32[(($54)>>2)]=$52;
      label = 16; break;
    case 16: 
      var $56=$iterable;
      var $57=(($56)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=((($58)-(1))|0);
      HEAP32[(($57)>>2)]=$59;
      var $60=(($59)|(0))!=0;
      if ($60) { label = 17; break; } else { label = 18; break; }
    case 17: 
      label = 19; break;
    case 18: 
      var $63=$iterable;
      var $64=(($63+4)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=(($65+24)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=$iterable;
      FUNCTION_TABLE[$67]($68);
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $71=$2;
      var $72=(($71+12)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=(($73)|(0))==0;
      if ($74) { label = 21; break; } else { label = 31; break; }
    case 21: 
      label = 22; break;
    case 22: 
      var $77=$2;
      var $78=(($77+8)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=(($79)|(0))!=0;
      if ($80) { label = 23; break; } else { label = 29; break; }
    case 23: 
      var $82=$2;
      var $83=(($82+8)|0);
      var $84=HEAP32[(($83)>>2)];
      $_py_tmp1=$84;
      var $85=$2;
      var $86=(($85+8)|0);
      HEAP32[(($86)>>2)]=0;
      label = 24; break;
    case 24: 
      var $88=$_py_tmp1;
      var $89=(($88)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=((($90)-(1))|0);
      HEAP32[(($89)>>2)]=$91;
      var $92=(($91)|(0))!=0;
      if ($92) { label = 25; break; } else { label = 26; break; }
    case 25: 
      label = 27; break;
    case 26: 
      var $95=$_py_tmp1;
      var $96=(($95+4)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=(($97+24)|0);
      var $99=HEAP32[(($98)>>2)];
      var $100=$_py_tmp1;
      FUNCTION_TABLE[$99]($100);
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      $1=0;
      label = 49; break;
    case 31: 
      label = 32; break;
    case 32: 
      var $107=$2;
      var $108=(($107+12)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=_PyIter_Next($109);
      $item=$110;
      var $111=$item;
      var $112=(($111)|(0))!=0;
      if ($112) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $114=$item;
      $1=$114;
      label = 49; break;
    case 34: 
      var $116=_PyErr_Occurred();
      var $117=(($116)|(0))!=0;
      if ($117) { label = 35; break; } else { label = 39; break; }
    case 35: 
      var $119=HEAP32[((_PyExc_StopIteration)>>2)];
      var $120=_PyErr_ExceptionMatches($119);
      var $121=(($120)|(0))!=0;
      if ($121) { label = 36; break; } else { label = 37; break; }
    case 36: 
      _PyErr_Clear();
      label = 38; break;
    case 37: 
      $1=0;
      label = 49; break;
    case 38: 
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      var $127=$2;
      var $128=(($127+12)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=(($129)|(0))!=0;
      if ($130) { label = 41; break; } else { label = 47; break; }
    case 41: 
      var $132=$2;
      var $133=(($132+12)|0);
      var $134=HEAP32[(($133)>>2)];
      $_py_tmp2=$134;
      var $135=$2;
      var $136=(($135+12)|0);
      HEAP32[(($136)>>2)]=0;
      label = 42; break;
    case 42: 
      var $138=$_py_tmp2;
      var $139=(($138)|0);
      var $140=HEAP32[(($139)>>2)];
      var $141=((($140)-(1))|0);
      HEAP32[(($139)>>2)]=$141;
      var $142=(($141)|(0))!=0;
      if ($142) { label = 43; break; } else { label = 44; break; }
    case 43: 
      label = 45; break;
    case 44: 
      var $145=$_py_tmp2;
      var $146=(($145+4)|0);
      var $147=HEAP32[(($146)>>2)];
      var $148=(($147+24)|0);
      var $149=HEAP32[(($148)>>2)];
      var $150=$_py_tmp2;
      FUNCTION_TABLE[$149]($150);
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      var $155=$2;
      var $156=_chain_next($155);
      $1=$156;
      label = 49; break;
    case 49: 
      var $158=$1;
      return $158;
    default: assert(0, "bad label: " + label);
  }
}
function _chain_new($type, $args, $kwds) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $source;
      $2=$type;
      $3=$args;
      $4=$kwds;
      var $5=$2;
      var $6=(($5)|(0))==((_chain_type)|(0));
      if ($6) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $8=$4;
      var $9=__PyArg_NoKeywords(((__str70)|0), $8);
      var $10=(($9)|(0))!=0;
      if ($10) { label = 4; break; } else { label = 3; break; }
    case 3: 
      $1=0;
      label = 7; break;
    case 4: 
      var $13=$3;
      var $14=_PyObject_GetIter($13);
      $source=$14;
      var $15=$source;
      var $16=(($15)|(0))==0;
      if ($16) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $1=0;
      label = 7; break;
    case 6: 
      var $19=$2;
      var $20=$source;
      var $21=_chain_new_internal($19, $20);
      $1=$21;
      label = 7; break;
    case 7: 
      var $23=$1;
      return $23;
    default: assert(0, "bad label: " + label);
  }
}
function _chain_new_internal($type, $source) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $lz;
      $2=$type;
      $3=$source;
      var $4=$2;
      var $5=(($4+152)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=$2;
      var $8=FUNCTION_TABLE[$6]($7, 0);
      var $9=$8;
      $lz=$9;
      var $10=$lz;
      var $11=(($10)|(0))==0;
      if ($11) { label = 2; break; } else { label = 8; break; }
    case 2: 
      label = 3; break;
    case 3: 
      var $14=$3;
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=((($16)-(1))|0);
      HEAP32[(($15)>>2)]=$17;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 6; break;
    case 5: 
      var $21=$3;
      var $22=(($21+4)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+24)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=$3;
      FUNCTION_TABLE[$25]($26);
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      $1=0;
      label = 9; break;
    case 8: 
      var $30=$3;
      var $31=$lz;
      var $32=(($31+8)|0);
      HEAP32[(($32)>>2)]=$30;
      var $33=$lz;
      var $34=(($33+12)|0);
      HEAP32[(($34)>>2)]=0;
      var $35=$lz;
      var $36=$35;
      $1=$36;
      label = 9; break;
    case 9: 
      var $38=$1;
      return $38;
    default: assert(0, "bad label: " + label);
  }
}
function _chain_new_from_iterable($type, $arg) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $source;
      $2=$type;
      $3=$arg;
      var $4=$3;
      var $5=_PyObject_GetIter($4);
      $source=$5;
      var $6=$source;
      var $7=(($6)|(0))==0;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 4; break;
    case 3: 
      var $10=$2;
      var $11=$source;
      var $12=_chain_new_internal($10, $11);
      $1=$12;
      label = 4; break;
    case 4: 
      var $14=$1;
      return $14;
    default: assert(0, "bad label: " + label);
  }
}
function _imap_dealloc($lz) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$lz;
      var $2=$1;
      var $3=$2;
      _PyObject_GC_UnTrack($3);
      label = 2; break;
    case 2: 
      var $5=$1;
      var $6=(($5+8)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|(0))==0;
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 10; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $12=$1;
      var $13=(($12+8)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=((($16)-(1))|0);
      HEAP32[(($15)>>2)]=$17;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 8; break;
    case 7: 
      var $21=$1;
      var $22=(($21+8)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+4)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25+24)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$1;
      var $29=(($28+8)|0);
      var $30=HEAP32[(($29)>>2)];
      FUNCTION_TABLE[$27]($30);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $36=$1;
      var $37=(($36+12)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38)|(0))==0;
      if ($39) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 20; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $43=$1;
      var $44=(($43+12)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=(($45)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=((($47)-(1))|0);
      HEAP32[(($46)>>2)]=$48;
      var $49=(($48)|(0))!=0;
      if ($49) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 18; break;
    case 17: 
      var $52=$1;
      var $53=(($52+12)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54+4)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=(($56+24)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=$1;
      var $60=(($59+12)|0);
      var $61=HEAP32[(($60)>>2)];
      FUNCTION_TABLE[$58]($61);
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $66=$1;
      var $67=$66;
      var $68=(($67+4)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=(($69+160)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=$1;
      var $73=$72;
      FUNCTION_TABLE[$71]($73);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _imap_traverse($lz, $visit, $arg) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $vret;
      var $vret1;
      $2=$lz;
      $3=$visit;
      $4=$arg;
      label = 2; break;
    case 2: 
      var $6=$2;
      var $7=(($6+8)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $11=$3;
      var $12=$2;
      var $13=(($12+8)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$4;
      var $16=FUNCTION_TABLE[$11]($14, $15);
      $vret=$16;
      var $17=$vret;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $20=$vret;
      $1=$20;
      label = 14; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $25=$2;
      var $26=(($25+12)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27)|(0))!=0;
      if ($28) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $30=$3;
      var $31=$2;
      var $32=(($31+12)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=$4;
      var $35=FUNCTION_TABLE[$30]($33, $34);
      $vret1=$35;
      var $36=$vret1;
      var $37=(($36)|(0))!=0;
      if ($37) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $39=$vret1;
      $1=$39;
      label = 14; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      $1=0;
      label = 14; break;
    case 14: 
      var $44=$1;
      return $44;
    default: assert(0, "bad label: " + label);
  }
}
function _imap_next($lz) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $val;
      var $argtuple;
      var $result;
      var $numargs;
      var $i;
      $2=$lz;
      var $3=$2;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=_PyTuple_Size($5);
      $numargs=$6;
      var $7=$numargs;
      var $8=_PyTuple_New($7);
      $argtuple=$8;
      var $9=$argtuple;
      var $10=(($9)|(0))==0;
      if ($10) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 22; break;
    case 3: 
      $i=0;
      label = 4; break;
    case 4: 
      var $14=$i;
      var $15=$numargs;
      var $16=(($14)|(0)) < (($15)|(0));
      if ($16) { label = 5; break; } else { label = 14; break; }
    case 5: 
      var $18=$i;
      var $19=$2;
      var $20=(($19+8)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$21;
      var $23=(($22+12)|0);
      var $24=(($23+($18<<2))|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=_PyIter_Next($25);
      $val=$26;
      var $27=$val;
      var $28=(($27)|(0))==0;
      if ($28) { label = 6; break; } else { label = 12; break; }
    case 6: 
      label = 7; break;
    case 7: 
      var $31=$argtuple;
      var $32=(($31)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=((($33)-(1))|0);
      HEAP32[(($32)>>2)]=$34;
      var $35=(($34)|(0))!=0;
      if ($35) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 10; break;
    case 9: 
      var $38=$argtuple;
      var $39=(($38+4)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40+24)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=$argtuple;
      FUNCTION_TABLE[$42]($43);
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      $1=0;
      label = 22; break;
    case 12: 
      var $47=$val;
      var $48=$i;
      var $49=$argtuple;
      var $50=$49;
      var $51=(($50+12)|0);
      var $52=(($51+($48<<2))|0);
      HEAP32[(($52)>>2)]=$47;
      label = 13; break;
    case 13: 
      var $54=$i;
      var $55=((($54)+(1))|0);
      $i=$55;
      label = 4; break;
    case 14: 
      var $57=$2;
      var $58=(($57+12)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=(($59)|(0))==((__Py_NoneStruct)|(0));
      if ($60) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $62=$argtuple;
      $1=$62;
      label = 22; break;
    case 16: 
      var $64=$2;
      var $65=(($64+12)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=$argtuple;
      var $68=_PyObject_Call($66, $67, 0);
      $result=$68;
      label = 17; break;
    case 17: 
      var $70=$argtuple;
      var $71=(($70)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=((($72)-(1))|0);
      HEAP32[(($71)>>2)]=$73;
      var $74=(($73)|(0))!=0;
      if ($74) { label = 18; break; } else { label = 19; break; }
    case 18: 
      label = 20; break;
    case 19: 
      var $77=$argtuple;
      var $78=(($77+4)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=(($79+24)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=$argtuple;
      FUNCTION_TABLE[$81]($82);
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $85=$result;
      $1=$85;
      label = 22; break;
    case 22: 
      var $87=$1;
      return $87;
    default: assert(0, "bad label: " + label);
  }
}
function _imap_new($type, $args, $kwds) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $it;
      var $iters;
      var $func;
      var $lz;
      var $numargs;
      var $i;
      $2=$type;
      $3=$args;
      $4=$kwds;
      var $5=$2;
      var $6=(($5)|(0))==((_imap_type)|(0));
      if ($6) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $8=$4;
      var $9=__PyArg_NoKeywords(((__str73)|0), $8);
      var $10=(($9)|(0))!=0;
      if ($10) { label = 4; break; } else { label = 3; break; }
    case 3: 
      $1=0;
      label = 27; break;
    case 4: 
      var $13=$3;
      var $14=_PyTuple_Size($13);
      $numargs=$14;
      var $15=$numargs;
      var $16=(($15)|(0)) < 2;
      if ($16) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $18=HEAP32[((_PyExc_TypeError)>>2)];
      _PyErr_SetString($18, ((__str74)|0));
      $1=0;
      label = 27; break;
    case 6: 
      var $20=$numargs;
      var $21=((($20)-(1))|0);
      var $22=_PyTuple_New($21);
      $iters=$22;
      var $23=$iters;
      var $24=(($23)|(0))==0;
      if ($24) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $1=0;
      label = 27; break;
    case 8: 
      $i=1;
      label = 9; break;
    case 9: 
      var $28=$i;
      var $29=$numargs;
      var $30=(($28)|(0)) < (($29)|(0));
      if ($30) { label = 10; break; } else { label = 19; break; }
    case 10: 
      var $32=$i;
      var $33=$3;
      var $34=$33;
      var $35=(($34+12)|0);
      var $36=(($35+($32<<2))|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=_PyObject_GetIter($37);
      $it=$38;
      var $39=$it;
      var $40=(($39)|(0))==0;
      if ($40) { label = 11; break; } else { label = 17; break; }
    case 11: 
      label = 12; break;
    case 12: 
      var $43=$iters;
      var $44=(($43)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=((($45)-(1))|0);
      HEAP32[(($44)>>2)]=$46;
      var $47=(($46)|(0))!=0;
      if ($47) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 15; break;
    case 14: 
      var $50=$iters;
      var $51=(($50+4)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=(($52+24)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=$iters;
      FUNCTION_TABLE[$54]($55);
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      $1=0;
      label = 27; break;
    case 17: 
      var $59=$it;
      var $60=$i;
      var $61=((($60)-(1))|0);
      var $62=$iters;
      var $63=$62;
      var $64=(($63+12)|0);
      var $65=(($64+($61<<2))|0);
      HEAP32[(($65)>>2)]=$59;
      label = 18; break;
    case 18: 
      var $67=$i;
      var $68=((($67)+(1))|0);
      $i=$68;
      label = 9; break;
    case 19: 
      var $70=$2;
      var $71=(($70+152)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=$2;
      var $74=FUNCTION_TABLE[$72]($73, 0);
      var $75=$74;
      $lz=$75;
      var $76=$lz;
      var $77=(($76)|(0))==0;
      if ($77) { label = 20; break; } else { label = 26; break; }
    case 20: 
      label = 21; break;
    case 21: 
      var $80=$iters;
      var $81=(($80)|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=((($82)-(1))|0);
      HEAP32[(($81)>>2)]=$83;
      var $84=(($83)|(0))!=0;
      if ($84) { label = 22; break; } else { label = 23; break; }
    case 22: 
      label = 24; break;
    case 23: 
      var $87=$iters;
      var $88=(($87+4)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=(($89+24)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=$iters;
      FUNCTION_TABLE[$91]($92);
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      $1=0;
      label = 27; break;
    case 26: 
      var $96=$iters;
      var $97=$lz;
      var $98=(($97+8)|0);
      HEAP32[(($98)>>2)]=$96;
      var $99=$3;
      var $100=$99;
      var $101=(($100+12)|0);
      var $102=(($101)|0);
      var $103=HEAP32[(($102)>>2)];
      $func=$103;
      var $104=$func;
      var $105=(($104)|0);
      var $106=HEAP32[(($105)>>2)];
      var $107=((($106)+(1))|0);
      HEAP32[(($105)>>2)]=$107;
      var $108=$func;
      var $109=$lz;
      var $110=(($109+12)|0);
      HEAP32[(($110)>>2)]=$108;
      var $111=$lz;
      var $112=$111;
      $1=$112;
      label = 27; break;
    case 27: 
      var $114=$1;
      return $114;
    default: assert(0, "bad label: " + label);
  }
}
function _starmap_dealloc($lz) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$lz;
      var $2=$1;
      var $3=$2;
      _PyObject_GC_UnTrack($3);
      label = 2; break;
    case 2: 
      var $5=$1;
      var $6=(($5+8)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|(0))==0;
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 10; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $12=$1;
      var $13=(($12+8)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=((($16)-(1))|0);
      HEAP32[(($15)>>2)]=$17;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 8; break;
    case 7: 
      var $21=$1;
      var $22=(($21+8)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+4)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25+24)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$1;
      var $29=(($28+8)|0);
      var $30=HEAP32[(($29)>>2)];
      FUNCTION_TABLE[$27]($30);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $36=$1;
      var $37=(($36+12)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38)|(0))==0;
      if ($39) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 20; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $43=$1;
      var $44=(($43+12)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=(($45)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=((($47)-(1))|0);
      HEAP32[(($46)>>2)]=$48;
      var $49=(($48)|(0))!=0;
      if ($49) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 18; break;
    case 17: 
      var $52=$1;
      var $53=(($52+12)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54+4)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=(($56+24)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=$1;
      var $60=(($59+12)|0);
      var $61=HEAP32[(($60)>>2)];
      FUNCTION_TABLE[$58]($61);
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $66=$1;
      var $67=$66;
      var $68=(($67+4)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=(($69+160)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=$1;
      var $73=$72;
      FUNCTION_TABLE[$71]($73);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _starmap_traverse($lz, $visit, $arg) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $vret;
      var $vret1;
      $2=$lz;
      $3=$visit;
      $4=$arg;
      label = 2; break;
    case 2: 
      var $6=$2;
      var $7=(($6+12)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $11=$3;
      var $12=$2;
      var $13=(($12+12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$4;
      var $16=FUNCTION_TABLE[$11]($14, $15);
      $vret=$16;
      var $17=$vret;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $20=$vret;
      $1=$20;
      label = 14; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $25=$2;
      var $26=(($25+8)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27)|(0))!=0;
      if ($28) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $30=$3;
      var $31=$2;
      var $32=(($31+8)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=$4;
      var $35=FUNCTION_TABLE[$30]($33, $34);
      $vret1=$35;
      var $36=$vret1;
      var $37=(($36)|(0))!=0;
      if ($37) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $39=$vret1;
      $1=$39;
      label = 14; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      $1=0;
      label = 14; break;
    case 14: 
      var $44=$1;
      return $44;
    default: assert(0, "bad label: " + label);
  }
}
function _starmap_next($lz) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $args;
      var $result;
      var $it;
      var $newargs;
      $2=$lz;
      var $3=$2;
      var $4=(($3+12)|0);
      var $5=HEAP32[(($4)>>2)];
      $it=$5;
      var $6=$it;
      var $7=(($6+4)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8+112)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=$it;
      var $12=FUNCTION_TABLE[$10]($11);
      $args=$12;
      var $13=$args;
      var $14=(($13)|(0))==0;
      if ($14) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 18; break;
    case 3: 
      var $17=$args;
      var $18=(($17+4)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19)|(0))==((_PyTuple_Type)|(0));
      if ($20) { label = 12; break; } else { label = 4; break; }
    case 4: 
      var $22=$args;
      var $23=_PySequence_Tuple($22);
      $newargs=$23;
      label = 5; break;
    case 5: 
      var $25=$args;
      var $26=(($25)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=((($27)-(1))|0);
      HEAP32[(($26)>>2)]=$28;
      var $29=(($28)|(0))!=0;
      if ($29) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 8; break;
    case 7: 
      var $32=$args;
      var $33=(($32+4)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($34+24)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=$args;
      FUNCTION_TABLE[$36]($37);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $40=$newargs;
      var $41=(($40)|(0))==0;
      if ($41) { label = 10; break; } else { label = 11; break; }
    case 10: 
      $1=0;
      label = 18; break;
    case 11: 
      var $44=$newargs;
      $args=$44;
      label = 12; break;
    case 12: 
      var $46=$2;
      var $47=(($46+8)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=$args;
      var $50=_PyObject_Call($48, $49, 0);
      $result=$50;
      label = 13; break;
    case 13: 
      var $52=$args;
      var $53=(($52)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=((($54)-(1))|0);
      HEAP32[(($53)>>2)]=$55;
      var $56=(($55)|(0))!=0;
      if ($56) { label = 14; break; } else { label = 15; break; }
    case 14: 
      label = 16; break;
    case 15: 
      var $59=$args;
      var $60=(($59+4)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=(($61+24)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=$args;
      FUNCTION_TABLE[$63]($64);
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $67=$result;
      $1=$67;
      label = 18; break;
    case 18: 
      var $69=$1;
      return $69;
    default: assert(0, "bad label: " + label);
  }
}
function _starmap_new($type, $args, $kwds) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $func=__stackBase__;
      var $seq=(__stackBase__)+(4);
      var $it;
      var $lz;
      $2=$type;
      $3=$args;
      $4=$kwds;
      var $5=$2;
      var $6=(($5)|(0))==((_starmap_type)|(0));
      if ($6) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $8=$4;
      var $9=__PyArg_NoKeywords(((__str76)|0), $8);
      var $10=(($9)|(0))!=0;
      if ($10) { label = 4; break; } else { label = 3; break; }
    case 3: 
      $1=0;
      label = 16; break;
    case 4: 
      var $13=$3;
      var $14=_PyArg_UnpackTuple($13, ((__str77)|0), 2, 2, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$func,HEAP32[(((tempInt)+(4))>>2)]=$seq,tempInt));
      var $15=(($14)|(0))!=0;
      if ($15) { label = 6; break; } else { label = 5; break; }
    case 5: 
      $1=0;
      label = 16; break;
    case 6: 
      var $18=HEAP32[(($seq)>>2)];
      var $19=_PyObject_GetIter($18);
      $it=$19;
      var $20=$it;
      var $21=(($20)|(0))==0;
      if ($21) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $1=0;
      label = 16; break;
    case 8: 
      var $24=$2;
      var $25=(($24+152)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$2;
      var $28=FUNCTION_TABLE[$26]($27, 0);
      var $29=$28;
      $lz=$29;
      var $30=$lz;
      var $31=(($30)|(0))==0;
      if ($31) { label = 9; break; } else { label = 15; break; }
    case 9: 
      label = 10; break;
    case 10: 
      var $34=$it;
      var $35=(($34)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=((($36)-(1))|0);
      HEAP32[(($35)>>2)]=$37;
      var $38=(($37)|(0))!=0;
      if ($38) { label = 11; break; } else { label = 12; break; }
    case 11: 
      label = 13; break;
    case 12: 
      var $41=$it;
      var $42=(($41+4)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($43+24)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=$it;
      FUNCTION_TABLE[$45]($46);
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      $1=0;
      label = 16; break;
    case 15: 
      var $50=HEAP32[(($func)>>2)];
      var $51=(($50)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=((($52)+(1))|0);
      HEAP32[(($51)>>2)]=$53;
      var $54=HEAP32[(($func)>>2)];
      var $55=$lz;
      var $56=(($55+8)|0);
      HEAP32[(($56)>>2)]=$54;
      var $57=$it;
      var $58=$lz;
      var $59=(($58+12)|0);
      HEAP32[(($59)>>2)]=$57;
      var $60=$lz;
      var $61=$60;
      $1=$61;
      label = 16; break;
    case 16: 
      var $63=$1;
      STACKTOP = __stackBase__;
      return $63;
    default: assert(0, "bad label: " + label);
  }
}
function _islice_dealloc($lz) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$lz;
      var $2=$1;
      var $3=$2;
      _PyObject_GC_UnTrack($3);
      label = 2; break;
    case 2: 
      var $5=$1;
      var $6=(($5+8)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|(0))==0;
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 10; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $12=$1;
      var $13=(($12+8)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=((($16)-(1))|0);
      HEAP32[(($15)>>2)]=$17;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 8; break;
    case 7: 
      var $21=$1;
      var $22=(($21+8)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+4)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25+24)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$1;
      var $29=(($28+8)|0);
      var $30=HEAP32[(($29)>>2)];
      FUNCTION_TABLE[$27]($30);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $35=$1;
      var $36=$35;
      var $37=(($36+4)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38+160)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=$1;
      var $42=$41;
      FUNCTION_TABLE[$40]($42);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _islice_traverse($lz, $visit, $arg) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $vret;
      $2=$lz;
      $3=$visit;
      $4=$arg;
      label = 2; break;
    case 2: 
      var $6=$2;
      var $7=(($6+8)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $11=$3;
      var $12=$2;
      var $13=(($12+8)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$4;
      var $16=FUNCTION_TABLE[$11]($14, $15);
      $vret=$16;
      var $17=$vret;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $20=$vret;
      $1=$20;
      label = 8; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      $1=0;
      label = 8; break;
    case 8: 
      var $25=$1;
      return $25;
    default: assert(0, "bad label: " + label);
  }
}
function _islice_next($lz) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $item;
      var $it;
      var $stop;
      var $oldnext;
      var $iternext;
      $2=$lz;
      var $3=$2;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      $it=$5;
      var $6=$2;
      var $7=(($6+16)|0);
      var $8=HEAP32[(($7)>>2)];
      $stop=$8;
      var $9=$it;
      var $10=(($9+4)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11+112)|0);
      var $13=HEAP32[(($12)>>2)];
      $iternext=$13;
      label = 2; break;
    case 2: 
      var $15=$2;
      var $16=(($15+24)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=$2;
      var $19=(($18+12)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($17)|(0)) < (($20)|(0));
      if ($21) { label = 3; break; } else { label = 11; break; }
    case 3: 
      var $23=$iternext;
      var $24=$it;
      var $25=FUNCTION_TABLE[$23]($24);
      $item=$25;
      var $26=$item;
      var $27=(($26)|(0))==0;
      if ($27) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=0;
      label = 21; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $31=$item;
      var $32=(($31)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=((($33)-(1))|0);
      HEAP32[(($32)>>2)]=$34;
      var $35=(($34)|(0))!=0;
      if ($35) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 9; break;
    case 8: 
      var $38=$item;
      var $39=(($38+4)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40+24)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=$item;
      FUNCTION_TABLE[$42]($43);
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $46=$2;
      var $47=(($46+24)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=((($48)+(1))|0);
      HEAP32[(($47)>>2)]=$49;
      label = 2; break;
    case 11: 
      var $51=$stop;
      var $52=(($51)|(0))!=-1;
      if ($52) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $54=$2;
      var $55=(($54+24)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=$stop;
      var $58=(($56)|(0)) >= (($57)|(0));
      if ($58) { label = 13; break; } else { label = 14; break; }
    case 13: 
      $1=0;
      label = 21; break;
    case 14: 
      var $61=$iternext;
      var $62=$it;
      var $63=FUNCTION_TABLE[$61]($62);
      $item=$63;
      var $64=$item;
      var $65=(($64)|(0))==0;
      if ($65) { label = 15; break; } else { label = 16; break; }
    case 15: 
      $1=0;
      label = 21; break;
    case 16: 
      var $68=$2;
      var $69=(($68+24)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=((($70)+(1))|0);
      HEAP32[(($69)>>2)]=$71;
      var $72=$2;
      var $73=(($72+12)|0);
      var $74=HEAP32[(($73)>>2)];
      $oldnext=$74;
      var $75=$2;
      var $76=(($75+20)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=$2;
      var $79=(($78+12)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=((($80)+($77))|0);
      HEAP32[(($79)>>2)]=$81;
      var $82=$2;
      var $83=(($82+12)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=$oldnext;
      var $86=(($84)|(0)) < (($85)|(0));
      if ($86) { label = 19; break; } else { label = 17; break; }
    case 17: 
      var $88=$stop;
      var $89=(($88)|(0))!=-1;
      if ($89) { label = 18; break; } else { label = 20; break; }
    case 18: 
      var $91=$2;
      var $92=(($91+12)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=$stop;
      var $95=(($93)|(0)) > (($94)|(0));
      if ($95) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $97=$stop;
      var $98=$2;
      var $99=(($98+12)|0);
      HEAP32[(($99)>>2)]=$97;
      label = 20; break;
    case 20: 
      var $101=$item;
      $1=$101;
      label = 21; break;
    case 21: 
      var $103=$1;
      return $103;
    default: assert(0, "bad label: " + label);
  }
}
function _islice_new($type, $args, $kwds) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $seq=__stackBase__;
      var $start;
      var $stop;
      var $step;
      var $it;
      var $a1=(__stackBase__)+(4);
      var $a2=(__stackBase__)+(8);
      var $a3=(__stackBase__)+(12);
      var $numargs;
      var $lz;
      $2=$type;
      $3=$args;
      $4=$kwds;
      $start=0;
      $stop=-1;
      $step=1;
      HEAP32[(($a1)>>2)]=0;
      HEAP32[(($a2)>>2)]=0;
      HEAP32[(($a3)>>2)]=0;
      var $5=$2;
      var $6=(($5)|(0))==((_islice_type)|(0));
      if ($6) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $8=$4;
      var $9=__PyArg_NoKeywords(((__str79)|0), $8);
      var $10=(($9)|(0))!=0;
      if ($10) { label = 4; break; } else { label = 3; break; }
    case 3: 
      $1=0;
      label = 48; break;
    case 4: 
      var $13=$3;
      var $14=_PyArg_UnpackTuple($13, ((__str80)|0), 2, 4, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$seq,HEAP32[(((tempInt)+(4))>>2)]=$a1,HEAP32[(((tempInt)+(8))>>2)]=$a2,HEAP32[(((tempInt)+(12))>>2)]=$a3,tempInt));
      var $15=(($14)|(0))!=0;
      if ($15) { label = 6; break; } else { label = 5; break; }
    case 5: 
      $1=0;
      label = 48; break;
    case 6: 
      var $18=$3;
      var $19=_PyTuple_Size($18);
      $numargs=$19;
      var $20=$numargs;
      var $21=(($20)|(0))==2;
      if ($21) { label = 7; break; } else { label = 14; break; }
    case 7: 
      var $23=HEAP32[(($a1)>>2)];
      var $24=(($23)|(0))!=((__Py_NoneStruct)|(0));
      if ($24) { label = 8; break; } else { label = 13; break; }
    case 8: 
      var $26=HEAP32[(($a1)>>2)];
      var $27=_PyInt_AsSsize_t($26);
      $stop=$27;
      var $28=$stop;
      var $29=(($28)|(0))==-1;
      if ($29) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $31=_PyErr_Occurred();
      var $32=(($31)|(0))!=0;
      if ($32) { label = 10; break; } else { label = 11; break; }
    case 10: 
      _PyErr_Clear();
      label = 11; break;
    case 11: 
      var $35=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($35, ((__str81)|0));
      $1=0;
      label = 48; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 26; break;
    case 14: 
      var $39=HEAP32[(($a1)>>2)];
      var $40=(($39)|(0))!=((__Py_NoneStruct)|(0));
      if ($40) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $42=HEAP32[(($a1)>>2)];
      var $43=_PyInt_AsSsize_t($42);
      $start=$43;
      label = 16; break;
    case 16: 
      var $45=$start;
      var $46=(($45)|(0))==-1;
      if ($46) { label = 17; break; } else { label = 19; break; }
    case 17: 
      var $48=_PyErr_Occurred();
      var $49=(($48)|(0))!=0;
      if ($49) { label = 18; break; } else { label = 19; break; }
    case 18: 
      _PyErr_Clear();
      label = 19; break;
    case 19: 
      var $52=HEAP32[(($a2)>>2)];
      var $53=(($52)|(0))!=((__Py_NoneStruct)|(0));
      if ($53) { label = 20; break; } else { label = 25; break; }
    case 20: 
      var $55=HEAP32[(($a2)>>2)];
      var $56=_PyInt_AsSsize_t($55);
      $stop=$56;
      var $57=$stop;
      var $58=(($57)|(0))==-1;
      if ($58) { label = 21; break; } else { label = 24; break; }
    case 21: 
      var $60=_PyErr_Occurred();
      var $61=(($60)|(0))!=0;
      if ($61) { label = 22; break; } else { label = 23; break; }
    case 22: 
      _PyErr_Clear();
      label = 23; break;
    case 23: 
      var $64=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($64, ((__str81)|0));
      $1=0;
      label = 48; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $68=$start;
      var $69=(($68)|(0)) < 0;
      if ($69) { label = 28; break; } else { label = 27; break; }
    case 27: 
      var $71=$stop;
      var $72=(($71)|(0)) < -1;
      if ($72) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $74=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($74, ((__str82)|0));
      $1=0;
      label = 48; break;
    case 29: 
      var $76=HEAP32[(($a3)>>2)];
      var $77=(($76)|(0))!=0;
      if ($77) { label = 30; break; } else { label = 36; break; }
    case 30: 
      var $79=HEAP32[(($a3)>>2)];
      var $80=(($79)|(0))!=((__Py_NoneStruct)|(0));
      if ($80) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $82=HEAP32[(($a3)>>2)];
      var $83=_PyInt_AsSsize_t($82);
      $step=$83;
      label = 32; break;
    case 32: 
      var $85=$step;
      var $86=(($85)|(0))==-1;
      if ($86) { label = 33; break; } else { label = 35; break; }
    case 33: 
      var $88=_PyErr_Occurred();
      var $89=(($88)|(0))!=0;
      if ($89) { label = 34; break; } else { label = 35; break; }
    case 34: 
      _PyErr_Clear();
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $93=$step;
      var $94=(($93)|(0)) < 1;
      if ($94) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $96=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($96, ((__str83)|0));
      $1=0;
      label = 48; break;
    case 38: 
      var $98=HEAP32[(($seq)>>2)];
      var $99=_PyObject_GetIter($98);
      $it=$99;
      var $100=$it;
      var $101=(($100)|(0))==0;
      if ($101) { label = 39; break; } else { label = 40; break; }
    case 39: 
      $1=0;
      label = 48; break;
    case 40: 
      var $104=$2;
      var $105=(($104+152)|0);
      var $106=HEAP32[(($105)>>2)];
      var $107=$2;
      var $108=FUNCTION_TABLE[$106]($107, 0);
      var $109=$108;
      $lz=$109;
      var $110=$lz;
      var $111=(($110)|(0))==0;
      if ($111) { label = 41; break; } else { label = 47; break; }
    case 41: 
      label = 42; break;
    case 42: 
      var $114=$it;
      var $115=(($114)|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=((($116)-(1))|0);
      HEAP32[(($115)>>2)]=$117;
      var $118=(($117)|(0))!=0;
      if ($118) { label = 43; break; } else { label = 44; break; }
    case 43: 
      label = 45; break;
    case 44: 
      var $121=$it;
      var $122=(($121+4)|0);
      var $123=HEAP32[(($122)>>2)];
      var $124=(($123+24)|0);
      var $125=HEAP32[(($124)>>2)];
      var $126=$it;
      FUNCTION_TABLE[$125]($126);
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      $1=0;
      label = 48; break;
    case 47: 
      var $130=$it;
      var $131=$lz;
      var $132=(($131+8)|0);
      HEAP32[(($132)>>2)]=$130;
      var $133=$start;
      var $134=$lz;
      var $135=(($134+12)|0);
      HEAP32[(($135)>>2)]=$133;
      var $136=$stop;
      var $137=$lz;
      var $138=(($137+16)|0);
      HEAP32[(($138)>>2)]=$136;
      var $139=$step;
      var $140=$lz;
      var $141=(($140+20)|0);
      HEAP32[(($141)>>2)]=$139;
      var $142=$lz;
      var $143=(($142+24)|0);
      HEAP32[(($143)>>2)]=0;
      var $144=$lz;
      var $145=$144;
      $1=$145;
      label = 48; break;
    case 48: 
      var $147=$1;
      STACKTOP = __stackBase__;
      return $147;
    default: assert(0, "bad label: " + label);
  }
}
function _takewhile_dealloc($lz) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$lz;
      var $2=$1;
      var $3=$2;
      _PyObject_GC_UnTrack($3);
      label = 2; break;
    case 2: 
      var $5=$1;
      var $6=(($5+8)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|(0))==0;
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 10; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $12=$1;
      var $13=(($12+8)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=((($16)-(1))|0);
      HEAP32[(($15)>>2)]=$17;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 8; break;
    case 7: 
      var $21=$1;
      var $22=(($21+8)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+4)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25+24)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$1;
      var $29=(($28+8)|0);
      var $30=HEAP32[(($29)>>2)];
      FUNCTION_TABLE[$27]($30);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $36=$1;
      var $37=(($36+12)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38)|(0))==0;
      if ($39) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 20; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $43=$1;
      var $44=(($43+12)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=(($45)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=((($47)-(1))|0);
      HEAP32[(($46)>>2)]=$48;
      var $49=(($48)|(0))!=0;
      if ($49) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 18; break;
    case 17: 
      var $52=$1;
      var $53=(($52+12)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54+4)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=(($56+24)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=$1;
      var $60=(($59+12)|0);
      var $61=HEAP32[(($60)>>2)];
      FUNCTION_TABLE[$58]($61);
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $66=$1;
      var $67=$66;
      var $68=(($67+4)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=(($69+160)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=$1;
      var $73=$72;
      FUNCTION_TABLE[$71]($73);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _takewhile_traverse($lz, $visit, $arg) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $vret;
      var $vret1;
      $2=$lz;
      $3=$visit;
      $4=$arg;
      label = 2; break;
    case 2: 
      var $6=$2;
      var $7=(($6+12)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $11=$3;
      var $12=$2;
      var $13=(($12+12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$4;
      var $16=FUNCTION_TABLE[$11]($14, $15);
      $vret=$16;
      var $17=$vret;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $20=$vret;
      $1=$20;
      label = 14; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $25=$2;
      var $26=(($25+8)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27)|(0))!=0;
      if ($28) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $30=$3;
      var $31=$2;
      var $32=(($31+8)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=$4;
      var $35=FUNCTION_TABLE[$30]($33, $34);
      $vret1=$35;
      var $36=$vret1;
      var $37=(($36)|(0))!=0;
      if ($37) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $39=$vret1;
      $1=$39;
      label = 14; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      $1=0;
      label = 14; break;
    case 14: 
      var $44=$1;
      return $44;
    default: assert(0, "bad label: " + label);
  }
}
function _takewhile_next($lz) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $item;
      var $good;
      var $it;
      var $ok;
      $2=$lz;
      var $3=$2;
      var $4=(($3+12)|0);
      var $5=HEAP32[(($4)>>2)];
      $it=$5;
      var $6=$2;
      var $7=(($6+16)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))==1;
      if ($9) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 27; break;
    case 3: 
      var $12=$it;
      var $13=(($12+4)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14+112)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$it;
      var $18=FUNCTION_TABLE[$16]($17);
      $item=$18;
      var $19=$item;
      var $20=(($19)|(0))==0;
      if ($20) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=0;
      label = 27; break;
    case 5: 
      var $23=$2;
      var $24=(($23+8)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=$item;
      var $27=_PyObject_CallFunctionObjArgs($25, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$26,HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
      $good=$27;
      var $28=$good;
      var $29=(($28)|(0))==0;
      if ($29) { label = 6; break; } else { label = 12; break; }
    case 6: 
      label = 7; break;
    case 7: 
      var $32=$item;
      var $33=(($32)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=((($34)-(1))|0);
      HEAP32[(($33)>>2)]=$35;
      var $36=(($35)|(0))!=0;
      if ($36) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 10; break;
    case 9: 
      var $39=$item;
      var $40=(($39+4)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($41+24)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=$item;
      FUNCTION_TABLE[$43]($44);
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      $1=0;
      label = 27; break;
    case 12: 
      var $48=$good;
      var $49=_PyObject_IsTrue($48);
      $ok=$49;
      label = 13; break;
    case 13: 
      var $51=$good;
      var $52=(($51)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=((($53)-(1))|0);
      HEAP32[(($52)>>2)]=$54;
      var $55=(($54)|(0))!=0;
      if ($55) { label = 14; break; } else { label = 15; break; }
    case 14: 
      label = 16; break;
    case 15: 
      var $58=$good;
      var $59=(($58+4)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=(($60+24)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=$good;
      FUNCTION_TABLE[$62]($63);
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $66=$ok;
      var $67=(($66)|(0)) > 0;
      if ($67) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $69=$item;
      $1=$69;
      label = 27; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $72=$item;
      var $73=(($72)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=((($74)-(1))|0);
      HEAP32[(($73)>>2)]=$75;
      var $76=(($75)|(0))!=0;
      if ($76) { label = 21; break; } else { label = 22; break; }
    case 21: 
      label = 23; break;
    case 22: 
      var $79=$item;
      var $80=(($79+4)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=(($81+24)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=$item;
      FUNCTION_TABLE[$83]($84);
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $87=$ok;
      var $88=(($87)|(0))==0;
      if ($88) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $90=$2;
      var $91=(($90+16)|0);
      HEAP32[(($91)>>2)]=1;
      label = 26; break;
    case 26: 
      $1=0;
      label = 27; break;
    case 27: 
      var $94=$1;
      STACKTOP = __stackBase__;
      return $94;
    default: assert(0, "bad label: " + label);
  }
}
function _takewhile_new($type, $args, $kwds) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $func=__stackBase__;
      var $seq=(__stackBase__)+(4);
      var $it;
      var $lz;
      $2=$type;
      $3=$args;
      $4=$kwds;
      var $5=$2;
      var $6=(($5)|(0))==((_takewhile_type)|(0));
      if ($6) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $8=$4;
      var $9=__PyArg_NoKeywords(((__str85)|0), $8);
      var $10=(($9)|(0))!=0;
      if ($10) { label = 4; break; } else { label = 3; break; }
    case 3: 
      $1=0;
      label = 16; break;
    case 4: 
      var $13=$3;
      var $14=_PyArg_UnpackTuple($13, ((__str86)|0), 2, 2, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$func,HEAP32[(((tempInt)+(4))>>2)]=$seq,tempInt));
      var $15=(($14)|(0))!=0;
      if ($15) { label = 6; break; } else { label = 5; break; }
    case 5: 
      $1=0;
      label = 16; break;
    case 6: 
      var $18=HEAP32[(($seq)>>2)];
      var $19=_PyObject_GetIter($18);
      $it=$19;
      var $20=$it;
      var $21=(($20)|(0))==0;
      if ($21) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $1=0;
      label = 16; break;
    case 8: 
      var $24=$2;
      var $25=(($24+152)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$2;
      var $28=FUNCTION_TABLE[$26]($27, 0);
      var $29=$28;
      $lz=$29;
      var $30=$lz;
      var $31=(($30)|(0))==0;
      if ($31) { label = 9; break; } else { label = 15; break; }
    case 9: 
      label = 10; break;
    case 10: 
      var $34=$it;
      var $35=(($34)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=((($36)-(1))|0);
      HEAP32[(($35)>>2)]=$37;
      var $38=(($37)|(0))!=0;
      if ($38) { label = 11; break; } else { label = 12; break; }
    case 11: 
      label = 13; break;
    case 12: 
      var $41=$it;
      var $42=(($41+4)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($43+24)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=$it;
      FUNCTION_TABLE[$45]($46);
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      $1=0;
      label = 16; break;
    case 15: 
      var $50=HEAP32[(($func)>>2)];
      var $51=(($50)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=((($52)+(1))|0);
      HEAP32[(($51)>>2)]=$53;
      var $54=HEAP32[(($func)>>2)];
      var $55=$lz;
      var $56=(($55+8)|0);
      HEAP32[(($56)>>2)]=$54;
      var $57=$it;
      var $58=$lz;
      var $59=(($58+12)|0);
      HEAP32[(($59)>>2)]=$57;
      var $60=$lz;
      var $61=(($60+16)|0);
      HEAP32[(($61)>>2)]=0;
      var $62=$lz;
      var $63=$62;
      $1=$63;
      label = 16; break;
    case 16: 
      var $65=$1;
      STACKTOP = __stackBase__;
      return $65;
    default: assert(0, "bad label: " + label);
  }
}
function _dropwhile_dealloc($lz) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$lz;
      var $2=$1;
      var $3=$2;
      _PyObject_GC_UnTrack($3);
      label = 2; break;
    case 2: 
      var $5=$1;
      var $6=(($5+8)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|(0))==0;
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 10; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $12=$1;
      var $13=(($12+8)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=((($16)-(1))|0);
      HEAP32[(($15)>>2)]=$17;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 8; break;
    case 7: 
      var $21=$1;
      var $22=(($21+8)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+4)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25+24)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$1;
      var $29=(($28+8)|0);
      var $30=HEAP32[(($29)>>2)];
      FUNCTION_TABLE[$27]($30);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $36=$1;
      var $37=(($36+12)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38)|(0))==0;
      if ($39) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 20; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $43=$1;
      var $44=(($43+12)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=(($45)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=((($47)-(1))|0);
      HEAP32[(($46)>>2)]=$48;
      var $49=(($48)|(0))!=0;
      if ($49) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 18; break;
    case 17: 
      var $52=$1;
      var $53=(($52+12)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54+4)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=(($56+24)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=$1;
      var $60=(($59+12)|0);
      var $61=HEAP32[(($60)>>2)];
      FUNCTION_TABLE[$58]($61);
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $66=$1;
      var $67=$66;
      var $68=(($67+4)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=(($69+160)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=$1;
      var $73=$72;
      FUNCTION_TABLE[$71]($73);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _dropwhile_traverse($lz, $visit, $arg) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $vret;
      var $vret1;
      $2=$lz;
      $3=$visit;
      $4=$arg;
      label = 2; break;
    case 2: 
      var $6=$2;
      var $7=(($6+12)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $11=$3;
      var $12=$2;
      var $13=(($12+12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$4;
      var $16=FUNCTION_TABLE[$11]($14, $15);
      $vret=$16;
      var $17=$vret;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $20=$vret;
      $1=$20;
      label = 14; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $25=$2;
      var $26=(($25+8)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27)|(0))!=0;
      if ($28) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $30=$3;
      var $31=$2;
      var $32=(($31+8)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=$4;
      var $35=FUNCTION_TABLE[$30]($33, $34);
      $vret1=$35;
      var $36=$vret1;
      var $37=(($36)|(0))!=0;
      if ($37) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $39=$vret1;
      $1=$39;
      label = 14; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      $1=0;
      label = 14; break;
    case 14: 
      var $44=$1;
      return $44;
    default: assert(0, "bad label: " + label);
  }
}
function _dropwhile_next($lz) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $item;
      var $good;
      var $it;
      var $ok;
      var $iternext;
      $2=$lz;
      var $3=$2;
      var $4=(($3+12)|0);
      var $5=HEAP32[(($4)>>2)];
      $it=$5;
      var $6=$it;
      var $7=(($6+4)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8+112)|0);
      var $10=HEAP32[(($9)>>2)];
      $iternext=$10;
      label = 2; break;
    case 2: 
      var $12=$iternext;
      var $13=$it;
      var $14=FUNCTION_TABLE[$12]($13);
      $item=$14;
      var $15=$item;
      var $16=(($15)|(0))==0;
      if ($16) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=0;
      label = 28; break;
    case 4: 
      var $19=$2;
      var $20=(($19+16)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21)|(0))==1;
      if ($22) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $24=$item;
      $1=$24;
      label = 28; break;
    case 6: 
      var $26=$2;
      var $27=(($26+8)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=$item;
      var $30=_PyObject_CallFunctionObjArgs($28, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$29,HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
      $good=$30;
      var $31=$good;
      var $32=(($31)|(0))==0;
      if ($32) { label = 7; break; } else { label = 13; break; }
    case 7: 
      label = 8; break;
    case 8: 
      var $35=$item;
      var $36=(($35)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=((($37)-(1))|0);
      HEAP32[(($36)>>2)]=$38;
      var $39=(($38)|(0))!=0;
      if ($39) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 11; break;
    case 10: 
      var $42=$item;
      var $43=(($42+4)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=(($44+24)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=$item;
      FUNCTION_TABLE[$46]($47);
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      $1=0;
      label = 28; break;
    case 13: 
      var $51=$good;
      var $52=_PyObject_IsTrue($51);
      $ok=$52;
      label = 14; break;
    case 14: 
      var $54=$good;
      var $55=(($54)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=((($56)-(1))|0);
      HEAP32[(($55)>>2)]=$57;
      var $58=(($57)|(0))!=0;
      if ($58) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 17; break;
    case 16: 
      var $61=$good;
      var $62=(($61+4)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=(($63+24)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=$good;
      FUNCTION_TABLE[$65]($66);
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $69=$ok;
      var $70=(($69)|(0))==0;
      if ($70) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $72=$2;
      var $73=(($72+16)|0);
      HEAP32[(($73)>>2)]=1;
      var $74=$item;
      $1=$74;
      label = 28; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $77=$item;
      var $78=(($77)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=((($79)-(1))|0);
      HEAP32[(($78)>>2)]=$80;
      var $81=(($80)|(0))!=0;
      if ($81) { label = 22; break; } else { label = 23; break; }
    case 22: 
      label = 24; break;
    case 23: 
      var $84=$item;
      var $85=(($84+4)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=(($86+24)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=$item;
      FUNCTION_TABLE[$88]($89);
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $92=$ok;
      var $93=(($92)|(0)) < 0;
      if ($93) { label = 26; break; } else { label = 27; break; }
    case 26: 
      $1=0;
      label = 28; break;
    case 27: 
      label = 2; break;
    case 28: 
      var $97=$1;
      STACKTOP = __stackBase__;
      return $97;
    default: assert(0, "bad label: " + label);
  }
}
function _dropwhile_new($type, $args, $kwds) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $func=__stackBase__;
      var $seq=(__stackBase__)+(4);
      var $it;
      var $lz;
      $2=$type;
      $3=$args;
      $4=$kwds;
      var $5=$2;
      var $6=(($5)|(0))==((_dropwhile_type)|(0));
      if ($6) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $8=$4;
      var $9=__PyArg_NoKeywords(((__str88)|0), $8);
      var $10=(($9)|(0))!=0;
      if ($10) { label = 4; break; } else { label = 3; break; }
    case 3: 
      $1=0;
      label = 16; break;
    case 4: 
      var $13=$3;
      var $14=_PyArg_UnpackTuple($13, ((__str89)|0), 2, 2, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$func,HEAP32[(((tempInt)+(4))>>2)]=$seq,tempInt));
      var $15=(($14)|(0))!=0;
      if ($15) { label = 6; break; } else { label = 5; break; }
    case 5: 
      $1=0;
      label = 16; break;
    case 6: 
      var $18=HEAP32[(($seq)>>2)];
      var $19=_PyObject_GetIter($18);
      $it=$19;
      var $20=$it;
      var $21=(($20)|(0))==0;
      if ($21) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $1=0;
      label = 16; break;
    case 8: 
      var $24=$2;
      var $25=(($24+152)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$2;
      var $28=FUNCTION_TABLE[$26]($27, 0);
      var $29=$28;
      $lz=$29;
      var $30=$lz;
      var $31=(($30)|(0))==0;
      if ($31) { label = 9; break; } else { label = 15; break; }
    case 9: 
      label = 10; break;
    case 10: 
      var $34=$it;
      var $35=(($34)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=((($36)-(1))|0);
      HEAP32[(($35)>>2)]=$37;
      var $38=(($37)|(0))!=0;
      if ($38) { label = 11; break; } else { label = 12; break; }
    case 11: 
      label = 13; break;
    case 12: 
      var $41=$it;
      var $42=(($41+4)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($43+24)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=$it;
      FUNCTION_TABLE[$45]($46);
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      $1=0;
      label = 16; break;
    case 15: 
      var $50=HEAP32[(($func)>>2)];
      var $51=(($50)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=((($52)+(1))|0);
      HEAP32[(($51)>>2)]=$53;
      var $54=HEAP32[(($func)>>2)];
      var $55=$lz;
      var $56=(($55+8)|0);
      HEAP32[(($56)>>2)]=$54;
      var $57=$it;
      var $58=$lz;
      var $59=(($58+12)|0);
      HEAP32[(($59)>>2)]=$57;
      var $60=$lz;
      var $61=(($60+16)|0);
      HEAP32[(($61)>>2)]=0;
      var $62=$lz;
      var $63=$62;
      $1=$63;
      label = 16; break;
    case 16: 
      var $65=$1;
      STACKTOP = __stackBase__;
      return $65;
    default: assert(0, "bad label: " + label);
  }
}
function _cycle_dealloc($lz) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$lz;
      var $2=$1;
      var $3=$2;
      _PyObject_GC_UnTrack($3);
      label = 2; break;
    case 2: 
      var $5=$1;
      var $6=(($5+12)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|(0))==0;
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 10; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $12=$1;
      var $13=(($12+12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=((($16)-(1))|0);
      HEAP32[(($15)>>2)]=$17;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 8; break;
    case 7: 
      var $21=$1;
      var $22=(($21+12)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+4)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25+24)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$1;
      var $29=(($28+12)|0);
      var $30=HEAP32[(($29)>>2)];
      FUNCTION_TABLE[$27]($30);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $36=$1;
      var $37=(($36+8)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38)|(0))==0;
      if ($39) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 20; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $43=$1;
      var $44=(($43+8)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=(($45)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=((($47)-(1))|0);
      HEAP32[(($46)>>2)]=$48;
      var $49=(($48)|(0))!=0;
      if ($49) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 18; break;
    case 17: 
      var $52=$1;
      var $53=(($52+8)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54+4)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=(($56+24)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=$1;
      var $60=(($59+8)|0);
      var $61=HEAP32[(($60)>>2)];
      FUNCTION_TABLE[$58]($61);
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $66=$1;
      var $67=$66;
      var $68=(($67+4)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=(($69+160)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=$1;
      var $73=$72;
      FUNCTION_TABLE[$71]($73);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _cycle_traverse($lz, $visit, $arg) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $vret;
      var $vret1;
      $2=$lz;
      $3=$visit;
      $4=$arg;
      label = 2; break;
    case 2: 
      var $6=$2;
      var $7=(($6+8)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $11=$3;
      var $12=$2;
      var $13=(($12+8)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$4;
      var $16=FUNCTION_TABLE[$11]($14, $15);
      $vret=$16;
      var $17=$vret;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $20=$vret;
      $1=$20;
      label = 14; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $25=$2;
      var $26=(($25+12)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27)|(0))!=0;
      if ($28) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $30=$3;
      var $31=$2;
      var $32=(($31+12)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=$4;
      var $35=FUNCTION_TABLE[$30]($33, $34);
      $vret1=$35;
      var $36=$vret1;
      var $37=(($36)|(0))!=0;
      if ($37) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $39=$vret1;
      $1=$39;
      label = 14; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      $1=0;
      label = 14; break;
    case 14: 
      var $44=$1;
      return $44;
    default: assert(0, "bad label: " + label);
  }
}
function _cycle_next($lz) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $item;
      var $it;
      var $tmp;
      $2=$lz;
      label = 2; break;
    case 2: 
      var $4=$2;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=_PyIter_Next($6);
      $item=$7;
      var $8=$item;
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 12; break; }
    case 3: 
      var $11=$2;
      var $12=(($11+16)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13)|(0))!=0;
      if ($14) { label = 11; break; } else { label = 4; break; }
    case 4: 
      var $16=$2;
      var $17=(($16+12)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=$item;
      var $20=_PyList_Append($18, $19);
      var $21=(($20)|(0))!=0;
      if ($21) { label = 5; break; } else { label = 11; break; }
    case 5: 
      label = 6; break;
    case 6: 
      var $24=$item;
      var $25=(($24)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=((($26)-(1))|0);
      HEAP32[(($25)>>2)]=$27;
      var $28=(($27)|(0))!=0;
      if ($28) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 9; break;
    case 8: 
      var $31=$item;
      var $32=(($31+4)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33+24)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=$item;
      FUNCTION_TABLE[$35]($36);
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      $1=0;
      label = 27; break;
    case 11: 
      var $40=$item;
      $1=$40;
      label = 27; break;
    case 12: 
      var $42=_PyErr_Occurred();
      var $43=(($42)|(0))!=0;
      if ($43) { label = 13; break; } else { label = 17; break; }
    case 13: 
      var $45=HEAP32[((_PyExc_StopIteration)>>2)];
      var $46=_PyErr_ExceptionMatches($45);
      var $47=(($46)|(0))!=0;
      if ($47) { label = 14; break; } else { label = 15; break; }
    case 14: 
      _PyErr_Clear();
      label = 16; break;
    case 15: 
      $1=0;
      label = 27; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $52=$2;
      var $53=(($52+12)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=_PyList_Size($54);
      var $56=(($55)|(0))==0;
      if ($56) { label = 18; break; } else { label = 19; break; }
    case 18: 
      $1=0;
      label = 27; break;
    case 19: 
      var $59=$2;
      var $60=(($59+12)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=_PyObject_GetIter($61);
      $it=$62;
      var $63=$it;
      var $64=(($63)|(0))==0;
      if ($64) { label = 20; break; } else { label = 21; break; }
    case 20: 
      $1=0;
      label = 27; break;
    case 21: 
      var $67=$2;
      var $68=(($67+8)|0);
      var $69=HEAP32[(($68)>>2)];
      $tmp=$69;
      var $70=$it;
      var $71=$2;
      var $72=(($71+8)|0);
      HEAP32[(($72)>>2)]=$70;
      var $73=$2;
      var $74=(($73+16)|0);
      HEAP32[(($74)>>2)]=1;
      label = 22; break;
    case 22: 
      var $76=$tmp;
      var $77=(($76)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=((($78)-(1))|0);
      HEAP32[(($77)>>2)]=$79;
      var $80=(($79)|(0))!=0;
      if ($80) { label = 23; break; } else { label = 24; break; }
    case 23: 
      label = 25; break;
    case 24: 
      var $83=$tmp;
      var $84=(($83+4)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=(($85+24)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=$tmp;
      FUNCTION_TABLE[$87]($88);
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 2; break;
    case 27: 
      var $92=$1;
      return $92;
    default: assert(0, "bad label: " + label);
  }
}
function _cycle_new($type, $args, $kwds) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $it;
      var $iterable=__stackBase__;
      var $saved;
      var $lz;
      $2=$type;
      $3=$args;
      $4=$kwds;
      var $5=$2;
      var $6=(($5)|(0))==((_cycle_type)|(0));
      if ($6) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $8=$4;
      var $9=__PyArg_NoKeywords(((__str91)|0), $8);
      var $10=(($9)|(0))!=0;
      if ($10) { label = 4; break; } else { label = 3; break; }
    case 3: 
      $1=0;
      label = 28; break;
    case 4: 
      var $13=$3;
      var $14=_PyArg_UnpackTuple($13, ((__str92)|0), 1, 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$iterable,tempInt));
      var $15=(($14)|(0))!=0;
      if ($15) { label = 6; break; } else { label = 5; break; }
    case 5: 
      $1=0;
      label = 28; break;
    case 6: 
      var $18=HEAP32[(($iterable)>>2)];
      var $19=_PyObject_GetIter($18);
      $it=$19;
      var $20=$it;
      var $21=(($20)|(0))==0;
      if ($21) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $1=0;
      label = 28; break;
    case 8: 
      var $24=_PyList_New(0);
      $saved=$24;
      var $25=$saved;
      var $26=(($25)|(0))==0;
      if ($26) { label = 9; break; } else { label = 15; break; }
    case 9: 
      label = 10; break;
    case 10: 
      var $29=$it;
      var $30=(($29)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=((($31)-(1))|0);
      HEAP32[(($30)>>2)]=$32;
      var $33=(($32)|(0))!=0;
      if ($33) { label = 11; break; } else { label = 12; break; }
    case 11: 
      label = 13; break;
    case 12: 
      var $36=$it;
      var $37=(($36+4)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38+24)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=$it;
      FUNCTION_TABLE[$40]($41);
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      $1=0;
      label = 28; break;
    case 15: 
      var $45=$2;
      var $46=(($45+152)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=$2;
      var $49=FUNCTION_TABLE[$47]($48, 0);
      var $50=$49;
      $lz=$50;
      var $51=$lz;
      var $52=(($51)|(0))==0;
      if ($52) { label = 16; break; } else { label = 27; break; }
    case 16: 
      label = 17; break;
    case 17: 
      var $55=$it;
      var $56=(($55)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=((($57)-(1))|0);
      HEAP32[(($56)>>2)]=$58;
      var $59=(($58)|(0))!=0;
      if ($59) { label = 18; break; } else { label = 19; break; }
    case 18: 
      label = 20; break;
    case 19: 
      var $62=$it;
      var $63=(($62+4)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=(($64+24)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=$it;
      FUNCTION_TABLE[$66]($67);
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $71=$saved;
      var $72=(($71)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=((($73)-(1))|0);
      HEAP32[(($72)>>2)]=$74;
      var $75=(($74)|(0))!=0;
      if ($75) { label = 23; break; } else { label = 24; break; }
    case 23: 
      label = 25; break;
    case 24: 
      var $78=$saved;
      var $79=(($78+4)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=(($80+24)|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=$saved;
      FUNCTION_TABLE[$82]($83);
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      $1=0;
      label = 28; break;
    case 27: 
      var $87=$it;
      var $88=$lz;
      var $89=(($88+8)|0);
      HEAP32[(($89)>>2)]=$87;
      var $90=$saved;
      var $91=$lz;
      var $92=(($91+12)|0);
      HEAP32[(($92)>>2)]=$90;
      var $93=$lz;
      var $94=(($93+16)|0);
      HEAP32[(($94)>>2)]=0;
      var $95=$lz;
      var $96=$95;
      $1=$96;
      label = 28; break;
    case 28: 
      var $98=$1;
      STACKTOP = __stackBase__;
      return $98;
    default: assert(0, "bad label: " + label);
  }
}
function _cwr_dealloc($co) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$co;
      var $2=$1;
      var $3=$2;
      _PyObject_GC_UnTrack($3);
      label = 2; break;
    case 2: 
      var $5=$1;
      var $6=(($5+8)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|(0))==0;
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 10; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $12=$1;
      var $13=(($12+8)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=((($16)-(1))|0);
      HEAP32[(($15)>>2)]=$17;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 8; break;
    case 7: 
      var $21=$1;
      var $22=(($21+8)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+4)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25+24)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$1;
      var $29=(($28+8)|0);
      var $30=HEAP32[(($29)>>2)];
      FUNCTION_TABLE[$27]($30);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $36=$1;
      var $37=(($36+16)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38)|(0))==0;
      if ($39) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 20; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $43=$1;
      var $44=(($43+16)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=(($45)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=((($47)-(1))|0);
      HEAP32[(($46)>>2)]=$48;
      var $49=(($48)|(0))!=0;
      if ($49) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 18; break;
    case 17: 
      var $52=$1;
      var $53=(($52+16)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54+4)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=(($56+24)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=$1;
      var $60=(($59+16)|0);
      var $61=HEAP32[(($60)>>2)];
      FUNCTION_TABLE[$58]($61);
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $66=$1;
      var $67=(($66+12)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=(($68)|(0))!=0;
      if ($69) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $71=$1;
      var $72=(($71+12)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=$73;
      _PyMem_Free($74);
      label = 23; break;
    case 23: 
      var $76=$1;
      var $77=$76;
      var $78=(($77+4)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=(($79+160)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=$1;
      var $83=$82;
      FUNCTION_TABLE[$81]($83);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _cwr_traverse($co, $visit, $arg) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $vret;
      var $vret1;
      $2=$co;
      $3=$visit;
      $4=$arg;
      label = 2; break;
    case 2: 
      var $6=$2;
      var $7=(($6+8)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $11=$3;
      var $12=$2;
      var $13=(($12+8)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$4;
      var $16=FUNCTION_TABLE[$11]($14, $15);
      $vret=$16;
      var $17=$vret;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $20=$vret;
      $1=$20;
      label = 14; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $25=$2;
      var $26=(($25+16)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27)|(0))!=0;
      if ($28) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $30=$3;
      var $31=$2;
      var $32=(($31+16)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=$4;
      var $35=FUNCTION_TABLE[$30]($33, $34);
      $vret1=$35;
      var $36=$vret1;
      var $37=(($36)|(0))!=0;
      if ($37) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $39=$vret1;
      $1=$39;
      label = 14; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      $1=0;
      label = 14; break;
    case 14: 
      var $44=$1;
      return $44;
    default: assert(0, "bad label: " + label);
  }
}
function _cwr_next($co) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $elem;
      var $oldelem;
      var $pool;
      var $indices;
      var $result;
      var $n;
      var $r;
      var $i;
      var $j;
      var $index;
      var $old_result;
      $2=$co;
      var $3=$2;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      $pool=$5;
      var $6=$2;
      var $7=(($6+12)|0);
      var $8=HEAP32[(($7)>>2)];
      $indices=$8;
      var $9=$2;
      var $10=(($9+16)|0);
      var $11=HEAP32[(($10)>>2)];
      $result=$11;
      var $12=$pool;
      var $13=$12;
      var $14=(($13+8)|0);
      var $15=HEAP32[(($14)>>2)];
      $n=$15;
      var $16=$2;
      var $17=(($16+20)|0);
      var $18=HEAP32[(($17)>>2)];
      $r=$18;
      var $19=$2;
      var $20=(($19+24)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21)|(0))!=0;
      if ($22) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 52; break;
    case 3: 
      var $25=$result;
      var $26=(($25)|(0))==0;
      if ($26) { label = 4; break; } else { label = 11; break; }
    case 4: 
      var $28=$r;
      var $29=_PyTuple_New($28);
      $result=$29;
      var $30=$result;
      var $31=(($30)|(0))==0;
      if ($31) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 51; break;
    case 6: 
      var $34=$result;
      var $35=$2;
      var $36=(($35+16)|0);
      HEAP32[(($36)>>2)]=$34;
      $i=0;
      label = 7; break;
    case 7: 
      var $38=$i;
      var $39=$r;
      var $40=(($38)|(0)) < (($39)|(0));
      if ($40) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $42=$i;
      var $43=$indices;
      var $44=(($43+($42<<2))|0);
      var $45=HEAP32[(($44)>>2)];
      $index=$45;
      var $46=$index;
      var $47=$pool;
      var $48=$47;
      var $49=(($48+12)|0);
      var $50=(($49+($46<<2))|0);
      var $51=HEAP32[(($50)>>2)];
      $elem=$51;
      var $52=$elem;
      var $53=(($52)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=((($54)+(1))|0);
      HEAP32[(($53)>>2)]=$55;
      var $56=$elem;
      var $57=$i;
      var $58=$result;
      var $59=$58;
      var $60=(($59+12)|0);
      var $61=(($60+($57<<2))|0);
      HEAP32[(($61)>>2)]=$56;
      label = 9; break;
    case 9: 
      var $63=$i;
      var $64=((($63)+(1))|0);
      $i=$64;
      label = 7; break;
    case 10: 
      label = 50; break;
    case 11: 
      var $67=$result;
      var $68=(($67)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=(($69)|(0)) > 1;
      if ($70) { label = 12; break; } else { label = 24; break; }
    case 12: 
      var $72=$result;
      $old_result=$72;
      var $73=$r;
      var $74=_PyTuple_New($73);
      $result=$74;
      var $75=$result;
      var $76=(($75)|(0))==0;
      if ($76) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 51; break;
    case 14: 
      var $79=$result;
      var $80=$2;
      var $81=(($80+16)|0);
      HEAP32[(($81)>>2)]=$79;
      $i=0;
      label = 15; break;
    case 15: 
      var $83=$i;
      var $84=$r;
      var $85=(($83)|(0)) < (($84)|(0));
      if ($85) { label = 16; break; } else { label = 18; break; }
    case 16: 
      var $87=$i;
      var $88=$old_result;
      var $89=$88;
      var $90=(($89+12)|0);
      var $91=(($90+($87<<2))|0);
      var $92=HEAP32[(($91)>>2)];
      $elem=$92;
      var $93=$elem;
      var $94=(($93)|0);
      var $95=HEAP32[(($94)>>2)];
      var $96=((($95)+(1))|0);
      HEAP32[(($94)>>2)]=$96;
      var $97=$elem;
      var $98=$i;
      var $99=$result;
      var $100=$99;
      var $101=(($100+12)|0);
      var $102=(($101+($98<<2))|0);
      HEAP32[(($102)>>2)]=$97;
      label = 17; break;
    case 17: 
      var $104=$i;
      var $105=((($104)+(1))|0);
      $i=$105;
      label = 15; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $108=$old_result;
      var $109=(($108)|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=((($110)-(1))|0);
      HEAP32[(($109)>>2)]=$111;
      var $112=(($111)|(0))!=0;
      if ($112) { label = 20; break; } else { label = 21; break; }
    case 20: 
      label = 22; break;
    case 21: 
      var $115=$old_result;
      var $116=(($115+4)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=(($117+24)|0);
      var $119=HEAP32[(($118)>>2)];
      var $120=$old_result;
      FUNCTION_TABLE[$119]($120);
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $124=$r;
      var $125=(($124)|(0))==0;
      if ($125) { label = 26; break; } else { label = 25; break; }
    case 25: 
      var $127=$result;
      var $128=(($127)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=(($129)|(0))==1;
      if ($130) { label = 26; break; } else { label = 27; break; }
    case 26: 
      label = 28; break;
    case 27: 
      ___assert_func(((__str1)|0), 2430, ((___func___cwr_next)|0), ((__str36)|0));
      throw "Reached an unreachable!";
      label = 28; break;
    case 28: 
      var $135=$r;
      var $136=((($135)-(1))|0);
      $i=$136;
      label = 29; break;
    case 29: 
      var $138=$i;
      var $139=(($138)|(0)) >= 0;
      if ($139) { label = 30; break; } else { var $149 = 0;label = 31; break; }
    case 30: 
      var $141=$i;
      var $142=$indices;
      var $143=(($142+($141<<2))|0);
      var $144=HEAP32[(($143)>>2)];
      var $145=$n;
      var $146=((($145)-(1))|0);
      var $147=(($144)|(0))==(($146)|(0));
      var $149 = $147;label = 31; break;
    case 31: 
      var $149;
      if ($149) { label = 32; break; } else { label = 34; break; }
    case 32: 
      label = 33; break;
    case 33: 
      var $152=$i;
      var $153=((($152)-(1))|0);
      $i=$153;
      label = 29; break;
    case 34: 
      var $155=$i;
      var $156=(($155)|(0)) < 0;
      if ($156) { label = 35; break; } else { label = 36; break; }
    case 35: 
      label = 51; break;
    case 36: 
      var $159=$i;
      var $160=$indices;
      var $161=(($160+($159<<2))|0);
      var $162=HEAP32[(($161)>>2)];
      var $163=((($162)+(1))|0);
      HEAP32[(($161)>>2)]=$163;
      var $164=$i;
      var $165=((($164)+(1))|0);
      $j=$165;
      label = 37; break;
    case 37: 
      var $167=$j;
      var $168=$r;
      var $169=(($167)|(0)) < (($168)|(0));
      if ($169) { label = 38; break; } else { label = 40; break; }
    case 38: 
      var $171=$j;
      var $172=((($171)-(1))|0);
      var $173=$indices;
      var $174=(($173+($172<<2))|0);
      var $175=HEAP32[(($174)>>2)];
      var $176=$j;
      var $177=$indices;
      var $178=(($177+($176<<2))|0);
      HEAP32[(($178)>>2)]=$175;
      label = 39; break;
    case 39: 
      var $180=$j;
      var $181=((($180)+(1))|0);
      $j=$181;
      label = 37; break;
    case 40: 
      label = 41; break;
    case 41: 
      var $184=$i;
      var $185=$r;
      var $186=(($184)|(0)) < (($185)|(0));
      if ($186) { label = 42; break; } else { label = 49; break; }
    case 42: 
      var $188=$i;
      var $189=$indices;
      var $190=(($189+($188<<2))|0);
      var $191=HEAP32[(($190)>>2)];
      $index=$191;
      var $192=$index;
      var $193=$pool;
      var $194=$193;
      var $195=(($194+12)|0);
      var $196=(($195+($192<<2))|0);
      var $197=HEAP32[(($196)>>2)];
      $elem=$197;
      var $198=$elem;
      var $199=(($198)|0);
      var $200=HEAP32[(($199)>>2)];
      var $201=((($200)+(1))|0);
      HEAP32[(($199)>>2)]=$201;
      var $202=$i;
      var $203=$result;
      var $204=$203;
      var $205=(($204+12)|0);
      var $206=(($205+($202<<2))|0);
      var $207=HEAP32[(($206)>>2)];
      $oldelem=$207;
      var $208=$elem;
      var $209=$i;
      var $210=$result;
      var $211=$210;
      var $212=(($211+12)|0);
      var $213=(($212+($209<<2))|0);
      HEAP32[(($213)>>2)]=$208;
      label = 43; break;
    case 43: 
      var $215=$oldelem;
      var $216=(($215)|0);
      var $217=HEAP32[(($216)>>2)];
      var $218=((($217)-(1))|0);
      HEAP32[(($216)>>2)]=$218;
      var $219=(($218)|(0))!=0;
      if ($219) { label = 44; break; } else { label = 45; break; }
    case 44: 
      label = 46; break;
    case 45: 
      var $222=$oldelem;
      var $223=(($222+4)|0);
      var $224=HEAP32[(($223)>>2)];
      var $225=(($224+24)|0);
      var $226=HEAP32[(($225)>>2)];
      var $227=$oldelem;
      FUNCTION_TABLE[$226]($227);
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      var $231=$i;
      var $232=((($231)+(1))|0);
      $i=$232;
      label = 41; break;
    case 49: 
      label = 50; break;
    case 50: 
      var $235=$result;
      var $236=(($235)|0);
      var $237=HEAP32[(($236)>>2)];
      var $238=((($237)+(1))|0);
      HEAP32[(($236)>>2)]=$238;
      var $239=$result;
      $1=$239;
      label = 52; break;
    case 51: 
      var $241=$2;
      var $242=(($241+24)|0);
      HEAP32[(($242)>>2)]=1;
      $1=0;
      label = 52; break;
    case 52: 
      var $244=$1;
      return $244;
    default: assert(0, "bad label: " + label);
  }
}
function _cwr_new($type, $args, $kwds) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $co;
      var $n;
      var $r=__stackBase__;
      var $pool;
      var $iterable=(__stackBase__)+(4);
      var $indices;
      var $i;
      $2=$type;
      $3=$args;
      $4=$kwds;
      $pool=0;
      HEAP32[(($iterable)>>2)]=0;
      $indices=0;
      var $5=$3;
      var $6=$4;
      var $7=_PyArg_ParseTupleAndKeywords($5, $6, ((__str94)|0), ((_cwr_new_kwargs)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$iterable,HEAP32[(((tempInt)+(4))>>2)]=$r,tempInt));
      var $8=(($7)|(0))!=0;
      if ($8) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 31; break;
    case 3: 
      var $11=HEAP32[(($iterable)>>2)];
      var $12=_PySequence_Tuple($11);
      $pool=$12;
      var $13=$pool;
      var $14=(($13)|(0))==0;
      if ($14) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 18; break;
    case 5: 
      var $17=$pool;
      var $18=$17;
      var $19=(($18+8)|0);
      var $20=HEAP32[(($19)>>2)];
      $n=$20;
      var $21=HEAP32[(($r)>>2)];
      var $22=(($21)|(0)) < 0;
      if ($22) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $24=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($24, ((__str35)|0));
      label = 18; break;
    case 7: 
      var $26=HEAP32[(($r)>>2)];
      var $27=($26<<2);
      var $28=_PyMem_Malloc($27);
      var $29=$28;
      $indices=$29;
      var $30=$indices;
      var $31=(($30)|(0))==0;
      if ($31) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $33=_PyErr_NoMemory();
      label = 18; break;
    case 9: 
      $i=0;
      label = 10; break;
    case 10: 
      var $36=$i;
      var $37=HEAP32[(($r)>>2)];
      var $38=(($36)|(0)) < (($37)|(0));
      if ($38) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $40=$i;
      var $41=$indices;
      var $42=(($41+($40<<2))|0);
      HEAP32[(($42)>>2)]=0;
      label = 12; break;
    case 12: 
      var $44=$i;
      var $45=((($44)+(1))|0);
      $i=$45;
      label = 10; break;
    case 13: 
      var $47=$2;
      var $48=(($47+152)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=$2;
      var $51=FUNCTION_TABLE[$49]($50, 0);
      var $52=$51;
      $co=$52;
      var $53=$co;
      var $54=(($53)|(0))==0;
      if ($54) { label = 14; break; } else { label = 15; break; }
    case 14: 
      label = 18; break;
    case 15: 
      var $57=$pool;
      var $58=$co;
      var $59=(($58+8)|0);
      HEAP32[(($59)>>2)]=$57;
      var $60=$indices;
      var $61=$co;
      var $62=(($61+12)|0);
      HEAP32[(($62)>>2)]=$60;
      var $63=$co;
      var $64=(($63+16)|0);
      HEAP32[(($64)>>2)]=0;
      var $65=HEAP32[(($r)>>2)];
      var $66=$co;
      var $67=(($66+20)|0);
      HEAP32[(($67)>>2)]=$65;
      var $68=$n;
      var $69=(($68)|(0))!=0;
      if ($69) { var $74 = 0;label = 17; break; } else { label = 16; break; }
    case 16: 
      var $71=HEAP32[(($r)>>2)];
      var $72=(($71)|(0))!=0;
      var $74 = $72;label = 17; break;
    case 17: 
      var $74;
      var $75=(($74)&(1));
      var $76=$co;
      var $77=(($76+24)|0);
      HEAP32[(($77)>>2)]=$75;
      var $78=$co;
      var $79=$78;
      $1=$79;
      label = 31; break;
    case 18: 
      var $81=$indices;
      var $82=(($81)|(0))!=0;
      if ($82) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $84=$indices;
      var $85=$84;
      _PyMem_Free($85);
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $88=$pool;
      var $89=(($88)|(0))==0;
      if ($89) { label = 22; break; } else { label = 23; break; }
    case 22: 
      label = 29; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $93=$pool;
      var $94=(($93)|0);
      var $95=HEAP32[(($94)>>2)];
      var $96=((($95)-(1))|0);
      HEAP32[(($94)>>2)]=$96;
      var $97=(($96)|(0))!=0;
      if ($97) { label = 25; break; } else { label = 26; break; }
    case 25: 
      label = 27; break;
    case 26: 
      var $100=$pool;
      var $101=(($100+4)|0);
      var $102=HEAP32[(($101)>>2)];
      var $103=(($102+24)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=$pool;
      FUNCTION_TABLE[$104]($105);
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      $1=0;
      label = 31; break;
    case 31: 
      var $111=$1;
      STACKTOP = __stackBase__;
      return $111;
    default: assert(0, "bad label: " + label);
  }
}
function _combinations_dealloc($co) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$co;
      var $2=$1;
      var $3=$2;
      _PyObject_GC_UnTrack($3);
      label = 2; break;
    case 2: 
      var $5=$1;
      var $6=(($5+8)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|(0))==0;
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 10; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $12=$1;
      var $13=(($12+8)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=((($16)-(1))|0);
      HEAP32[(($15)>>2)]=$17;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 8; break;
    case 7: 
      var $21=$1;
      var $22=(($21+8)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+4)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25+24)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$1;
      var $29=(($28+8)|0);
      var $30=HEAP32[(($29)>>2)];
      FUNCTION_TABLE[$27]($30);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $36=$1;
      var $37=(($36+16)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38)|(0))==0;
      if ($39) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 20; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $43=$1;
      var $44=(($43+16)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=(($45)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=((($47)-(1))|0);
      HEAP32[(($46)>>2)]=$48;
      var $49=(($48)|(0))!=0;
      if ($49) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 18; break;
    case 17: 
      var $52=$1;
      var $53=(($52+16)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54+4)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=(($56+24)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=$1;
      var $60=(($59+16)|0);
      var $61=HEAP32[(($60)>>2)];
      FUNCTION_TABLE[$58]($61);
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $66=$1;
      var $67=(($66+12)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=(($68)|(0))!=0;
      if ($69) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $71=$1;
      var $72=(($71+12)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=$73;
      _PyMem_Free($74);
      label = 23; break;
    case 23: 
      var $76=$1;
      var $77=$76;
      var $78=(($77+4)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=(($79+160)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=$1;
      var $83=$82;
      FUNCTION_TABLE[$81]($83);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _combinations_traverse($co, $visit, $arg) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $vret;
      var $vret1;
      $2=$co;
      $3=$visit;
      $4=$arg;
      label = 2; break;
    case 2: 
      var $6=$2;
      var $7=(($6+8)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $11=$3;
      var $12=$2;
      var $13=(($12+8)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$4;
      var $16=FUNCTION_TABLE[$11]($14, $15);
      $vret=$16;
      var $17=$vret;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $20=$vret;
      $1=$20;
      label = 14; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $25=$2;
      var $26=(($25+16)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27)|(0))!=0;
      if ($28) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $30=$3;
      var $31=$2;
      var $32=(($31+16)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=$4;
      var $35=FUNCTION_TABLE[$30]($33, $34);
      $vret1=$35;
      var $36=$vret1;
      var $37=(($36)|(0))!=0;
      if ($37) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $39=$vret1;
      $1=$39;
      label = 14; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      $1=0;
      label = 14; break;
    case 14: 
      var $44=$1;
      return $44;
    default: assert(0, "bad label: " + label);
  }
}
function _combinations_next($co) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $elem;
      var $oldelem;
      var $pool;
      var $indices;
      var $result;
      var $n;
      var $r;
      var $i;
      var $j;
      var $index;
      var $old_result;
      $2=$co;
      var $3=$2;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      $pool=$5;
      var $6=$2;
      var $7=(($6+12)|0);
      var $8=HEAP32[(($7)>>2)];
      $indices=$8;
      var $9=$2;
      var $10=(($9+16)|0);
      var $11=HEAP32[(($10)>>2)];
      $result=$11;
      var $12=$pool;
      var $13=$12;
      var $14=(($13+8)|0);
      var $15=HEAP32[(($14)>>2)];
      $n=$15;
      var $16=$2;
      var $17=(($16+20)|0);
      var $18=HEAP32[(($17)>>2)];
      $r=$18;
      var $19=$2;
      var $20=(($19+24)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21)|(0))!=0;
      if ($22) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 52; break;
    case 3: 
      var $25=$result;
      var $26=(($25)|(0))==0;
      if ($26) { label = 4; break; } else { label = 11; break; }
    case 4: 
      var $28=$r;
      var $29=_PyTuple_New($28);
      $result=$29;
      var $30=$result;
      var $31=(($30)|(0))==0;
      if ($31) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 51; break;
    case 6: 
      var $34=$result;
      var $35=$2;
      var $36=(($35+16)|0);
      HEAP32[(($36)>>2)]=$34;
      $i=0;
      label = 7; break;
    case 7: 
      var $38=$i;
      var $39=$r;
      var $40=(($38)|(0)) < (($39)|(0));
      if ($40) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $42=$i;
      var $43=$indices;
      var $44=(($43+($42<<2))|0);
      var $45=HEAP32[(($44)>>2)];
      $index=$45;
      var $46=$index;
      var $47=$pool;
      var $48=$47;
      var $49=(($48+12)|0);
      var $50=(($49+($46<<2))|0);
      var $51=HEAP32[(($50)>>2)];
      $elem=$51;
      var $52=$elem;
      var $53=(($52)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=((($54)+(1))|0);
      HEAP32[(($53)>>2)]=$55;
      var $56=$elem;
      var $57=$i;
      var $58=$result;
      var $59=$58;
      var $60=(($59+12)|0);
      var $61=(($60+($57<<2))|0);
      HEAP32[(($61)>>2)]=$56;
      label = 9; break;
    case 9: 
      var $63=$i;
      var $64=((($63)+(1))|0);
      $i=$64;
      label = 7; break;
    case 10: 
      label = 50; break;
    case 11: 
      var $67=$result;
      var $68=(($67)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=(($69)|(0)) > 1;
      if ($70) { label = 12; break; } else { label = 24; break; }
    case 12: 
      var $72=$result;
      $old_result=$72;
      var $73=$r;
      var $74=_PyTuple_New($73);
      $result=$74;
      var $75=$result;
      var $76=(($75)|(0))==0;
      if ($76) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 51; break;
    case 14: 
      var $79=$result;
      var $80=$2;
      var $81=(($80+16)|0);
      HEAP32[(($81)>>2)]=$79;
      $i=0;
      label = 15; break;
    case 15: 
      var $83=$i;
      var $84=$r;
      var $85=(($83)|(0)) < (($84)|(0));
      if ($85) { label = 16; break; } else { label = 18; break; }
    case 16: 
      var $87=$i;
      var $88=$old_result;
      var $89=$88;
      var $90=(($89+12)|0);
      var $91=(($90+($87<<2))|0);
      var $92=HEAP32[(($91)>>2)];
      $elem=$92;
      var $93=$elem;
      var $94=(($93)|0);
      var $95=HEAP32[(($94)>>2)];
      var $96=((($95)+(1))|0);
      HEAP32[(($94)>>2)]=$96;
      var $97=$elem;
      var $98=$i;
      var $99=$result;
      var $100=$99;
      var $101=(($100+12)|0);
      var $102=(($101+($98<<2))|0);
      HEAP32[(($102)>>2)]=$97;
      label = 17; break;
    case 17: 
      var $104=$i;
      var $105=((($104)+(1))|0);
      $i=$105;
      label = 15; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $108=$old_result;
      var $109=(($108)|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=((($110)-(1))|0);
      HEAP32[(($109)>>2)]=$111;
      var $112=(($111)|(0))!=0;
      if ($112) { label = 20; break; } else { label = 21; break; }
    case 20: 
      label = 22; break;
    case 21: 
      var $115=$old_result;
      var $116=(($115+4)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=(($117+24)|0);
      var $119=HEAP32[(($118)>>2)];
      var $120=$old_result;
      FUNCTION_TABLE[$119]($120);
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $124=$r;
      var $125=(($124)|(0))==0;
      if ($125) { label = 26; break; } else { label = 25; break; }
    case 25: 
      var $127=$result;
      var $128=(($127)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=(($129)|(0))==1;
      if ($130) { label = 26; break; } else { label = 27; break; }
    case 26: 
      label = 28; break;
    case 27: 
      ___assert_func(((__str1)|0), 2183, ((___func___combinations_next)|0), ((__str36)|0));
      throw "Reached an unreachable!";
      label = 28; break;
    case 28: 
      var $135=$r;
      var $136=((($135)-(1))|0);
      $i=$136;
      label = 29; break;
    case 29: 
      var $138=$i;
      var $139=(($138)|(0)) >= 0;
      if ($139) { label = 30; break; } else { var $152 = 0;label = 31; break; }
    case 30: 
      var $141=$i;
      var $142=$indices;
      var $143=(($142+($141<<2))|0);
      var $144=HEAP32[(($143)>>2)];
      var $145=$i;
      var $146=$n;
      var $147=((($145)+($146))|0);
      var $148=$r;
      var $149=((($147)-($148))|0);
      var $150=(($144)|(0))==(($149)|(0));
      var $152 = $150;label = 31; break;
    case 31: 
      var $152;
      if ($152) { label = 32; break; } else { label = 34; break; }
    case 32: 
      label = 33; break;
    case 33: 
      var $155=$i;
      var $156=((($155)-(1))|0);
      $i=$156;
      label = 29; break;
    case 34: 
      var $158=$i;
      var $159=(($158)|(0)) < 0;
      if ($159) { label = 35; break; } else { label = 36; break; }
    case 35: 
      label = 51; break;
    case 36: 
      var $162=$i;
      var $163=$indices;
      var $164=(($163+($162<<2))|0);
      var $165=HEAP32[(($164)>>2)];
      var $166=((($165)+(1))|0);
      HEAP32[(($164)>>2)]=$166;
      var $167=$i;
      var $168=((($167)+(1))|0);
      $j=$168;
      label = 37; break;
    case 37: 
      var $170=$j;
      var $171=$r;
      var $172=(($170)|(0)) < (($171)|(0));
      if ($172) { label = 38; break; } else { label = 40; break; }
    case 38: 
      var $174=$j;
      var $175=((($174)-(1))|0);
      var $176=$indices;
      var $177=(($176+($175<<2))|0);
      var $178=HEAP32[(($177)>>2)];
      var $179=((($178)+(1))|0);
      var $180=$j;
      var $181=$indices;
      var $182=(($181+($180<<2))|0);
      HEAP32[(($182)>>2)]=$179;
      label = 39; break;
    case 39: 
      var $184=$j;
      var $185=((($184)+(1))|0);
      $j=$185;
      label = 37; break;
    case 40: 
      label = 41; break;
    case 41: 
      var $188=$i;
      var $189=$r;
      var $190=(($188)|(0)) < (($189)|(0));
      if ($190) { label = 42; break; } else { label = 49; break; }
    case 42: 
      var $192=$i;
      var $193=$indices;
      var $194=(($193+($192<<2))|0);
      var $195=HEAP32[(($194)>>2)];
      $index=$195;
      var $196=$index;
      var $197=$pool;
      var $198=$197;
      var $199=(($198+12)|0);
      var $200=(($199+($196<<2))|0);
      var $201=HEAP32[(($200)>>2)];
      $elem=$201;
      var $202=$elem;
      var $203=(($202)|0);
      var $204=HEAP32[(($203)>>2)];
      var $205=((($204)+(1))|0);
      HEAP32[(($203)>>2)]=$205;
      var $206=$i;
      var $207=$result;
      var $208=$207;
      var $209=(($208+12)|0);
      var $210=(($209+($206<<2))|0);
      var $211=HEAP32[(($210)>>2)];
      $oldelem=$211;
      var $212=$elem;
      var $213=$i;
      var $214=$result;
      var $215=$214;
      var $216=(($215+12)|0);
      var $217=(($216+($213<<2))|0);
      HEAP32[(($217)>>2)]=$212;
      label = 43; break;
    case 43: 
      var $219=$oldelem;
      var $220=(($219)|0);
      var $221=HEAP32[(($220)>>2)];
      var $222=((($221)-(1))|0);
      HEAP32[(($220)>>2)]=$222;
      var $223=(($222)|(0))!=0;
      if ($223) { label = 44; break; } else { label = 45; break; }
    case 44: 
      label = 46; break;
    case 45: 
      var $226=$oldelem;
      var $227=(($226+4)|0);
      var $228=HEAP32[(($227)>>2)];
      var $229=(($228+24)|0);
      var $230=HEAP32[(($229)>>2)];
      var $231=$oldelem;
      FUNCTION_TABLE[$230]($231);
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      var $235=$i;
      var $236=((($235)+(1))|0);
      $i=$236;
      label = 41; break;
    case 49: 
      label = 50; break;
    case 50: 
      var $239=$result;
      var $240=(($239)|0);
      var $241=HEAP32[(($240)>>2)];
      var $242=((($241)+(1))|0);
      HEAP32[(($240)>>2)]=$242;
      var $243=$result;
      $1=$243;
      label = 52; break;
    case 51: 
      var $245=$2;
      var $246=(($245+24)|0);
      HEAP32[(($246)>>2)]=1;
      $1=0;
      label = 52; break;
    case 52: 
      var $248=$1;
      return $248;
    default: assert(0, "bad label: " + label);
  }
}
function _combinations_new($type, $args, $kwds) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $co;
      var $n;
      var $r=__stackBase__;
      var $pool;
      var $iterable=(__stackBase__)+(4);
      var $indices;
      var $i;
      $2=$type;
      $3=$args;
      $4=$kwds;
      $pool=0;
      HEAP32[(($iterable)>>2)]=0;
      $indices=0;
      var $5=$3;
      var $6=$4;
      var $7=_PyArg_ParseTupleAndKeywords($5, $6, ((__str96)|0), ((_combinations_new_kwargs)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$iterable,HEAP32[(((tempInt)+(4))>>2)]=$r,tempInt));
      var $8=(($7)|(0))!=0;
      if ($8) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 29; break;
    case 3: 
      var $11=HEAP32[(($iterable)>>2)];
      var $12=_PySequence_Tuple($11);
      $pool=$12;
      var $13=$pool;
      var $14=(($13)|(0))==0;
      if ($14) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 16; break;
    case 5: 
      var $17=$pool;
      var $18=$17;
      var $19=(($18+8)|0);
      var $20=HEAP32[(($19)>>2)];
      $n=$20;
      var $21=HEAP32[(($r)>>2)];
      var $22=(($21)|(0)) < 0;
      if ($22) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $24=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($24, ((__str35)|0));
      label = 16; break;
    case 7: 
      var $26=HEAP32[(($r)>>2)];
      var $27=($26<<2);
      var $28=_PyMem_Malloc($27);
      var $29=$28;
      $indices=$29;
      var $30=$indices;
      var $31=(($30)|(0))==0;
      if ($31) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $33=_PyErr_NoMemory();
      label = 16; break;
    case 9: 
      $i=0;
      label = 10; break;
    case 10: 
      var $36=$i;
      var $37=HEAP32[(($r)>>2)];
      var $38=(($36)|(0)) < (($37)|(0));
      if ($38) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $40=$i;
      var $41=$i;
      var $42=$indices;
      var $43=(($42+($41<<2))|0);
      HEAP32[(($43)>>2)]=$40;
      label = 12; break;
    case 12: 
      var $45=$i;
      var $46=((($45)+(1))|0);
      $i=$46;
      label = 10; break;
    case 13: 
      var $48=$2;
      var $49=(($48+152)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=$2;
      var $52=FUNCTION_TABLE[$50]($51, 0);
      var $53=$52;
      $co=$53;
      var $54=$co;
      var $55=(($54)|(0))==0;
      if ($55) { label = 14; break; } else { label = 15; break; }
    case 14: 
      label = 16; break;
    case 15: 
      var $58=$pool;
      var $59=$co;
      var $60=(($59+8)|0);
      HEAP32[(($60)>>2)]=$58;
      var $61=$indices;
      var $62=$co;
      var $63=(($62+12)|0);
      HEAP32[(($63)>>2)]=$61;
      var $64=$co;
      var $65=(($64+16)|0);
      HEAP32[(($65)>>2)]=0;
      var $66=HEAP32[(($r)>>2)];
      var $67=$co;
      var $68=(($67+20)|0);
      HEAP32[(($68)>>2)]=$66;
      var $69=HEAP32[(($r)>>2)];
      var $70=$n;
      var $71=(($69)|(0)) > (($70)|(0));
      var $72=$71 ? 1 : 0;
      var $73=$co;
      var $74=(($73+24)|0);
      HEAP32[(($74)>>2)]=$72;
      var $75=$co;
      var $76=$75;
      $1=$76;
      label = 29; break;
    case 16: 
      var $78=$indices;
      var $79=(($78)|(0))!=0;
      if ($79) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $81=$indices;
      var $82=$81;
      _PyMem_Free($82);
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $85=$pool;
      var $86=(($85)|(0))==0;
      if ($86) { label = 20; break; } else { label = 21; break; }
    case 20: 
      label = 27; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $90=$pool;
      var $91=(($90)|0);
      var $92=HEAP32[(($91)>>2)];
      var $93=((($92)-(1))|0);
      HEAP32[(($91)>>2)]=$93;
      var $94=(($93)|(0))!=0;
      if ($94) { label = 23; break; } else { label = 24; break; }
    case 23: 
      label = 25; break;
    case 24: 
      var $97=$pool;
      var $98=(($97+4)|0);
      var $99=HEAP32[(($98)>>2)];
      var $100=(($99+24)|0);
      var $101=HEAP32[(($100)>>2)];
      var $102=$pool;
      FUNCTION_TABLE[$101]($102);
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      $1=0;
      label = 29; break;
    case 29: 
      var $108=$1;
      STACKTOP = __stackBase__;
      return $108;
    default: assert(0, "bad label: " + label);
  }
}
// EMSCRIPTEN_END_FUNCS
// EMSCRIPTEN_END_FUNCS
// Warning: printing of i64 values may be slightly rounded! No deep i64 math used, so precise i64 code not included
var i64Math = null;
// === Auto-generated postamble setup entry stuff ===
function run(args) {
  initRuntime();
}
Module['run'] = run;
// {{PRE_RUN_ADDITIONS}}
run();
// {{POST_RUN_ADDITIONS}}
  // {{MODULE_ADDITIONS}}
  return Module;
});
