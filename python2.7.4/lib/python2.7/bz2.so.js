// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
// Capture the output of this into a variable, if you want
(function(FUNCTION_TABLE_OFFSET, globalScope) {
  var Module = {};
  var args = [];
  Module.arguments = [];
// === Auto-generated preamble library stuff ===
//========================================
// Runtime essentials
//========================================
function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.pop();
    var func = callback.func;
    if (typeof func === 'number') {
      func = FUNCTION_TABLE[func];
    }
    func(callback.arg === undefined ? null : callback.arg);
  }
}
var __ATINIT__ = []; // functions called during startup
function initRuntime() {
  callRuntimeCallbacks(__ATINIT__);
}
// === Body ===
var _bz2_methods;
var _bz2_decompress__doc__;
var _bz2_compress_kwlist;
var _bz2_compress__doc__;
var _bz2__doc__;
var __str9;
var __str86;
var __str85;
var __str84;
var __str83;
var __str82;
var __str81;
var __str80;
var __str8;
var __str79;
var __str78;
var __str77;
var __str76;
var __str75;
var __str74;
var __str73;
var __str72;
var __str71;
var __str70;
var __str7;
var __str69;
var __str68;
var __str67;
var __str66;
var __str65;
var __str64;
var __str63;
var __str62;
var __str61;
var __str60;
var __str6;
var __str59;
var __str58;
var __str57;
var __str56;
var __str55;
var __str54;
var __str53;
var __str52;
var __str51;
var __str50;
var __str5;
var __str49;
var __str48;
var __str47;
var __str46;
var __str45;
var __str44;
var __str43;
var __str42;
var __str41;
var __str40;
var __str4;
var __str39;
var __str38;
var __str37;
var __str36;
var __str35;
var __str34;
var __str33;
var __str32;
var __str31;
var __str30;
var __str3;
var __str29;
var __str28;
var __str27;
var __str26;
var __str25;
var __str24;
var __str23;
var __str22;
var __str21;
var __str20;
var __str2;
var __str19;
var __str18;
var __str17;
var __str16;
var __str15;
var __str14;
var __str13;
var __str12;
var __str11;
var __str10;
var __str1;
var __str;
var ___func___Util_UnivNewlineRead;
var ___func___BZ2File_seek;
var ___author__;
var _BZ2File_xreadlines__doc__;
var _BZ2File_writelines__doc__;
var _BZ2File_write__doc__;
var _BZ2File_tell__doc__;
var _BZ2File_seek__doc__;
var _BZ2File_readlines__doc__;
var _BZ2File_readline__doc__;
var _BZ2File_read__doc__;
var _BZ2File_methods;
var _BZ2File_members;
var _BZ2File_init_kwlist;
var _BZ2File_getset;
var _BZ2File_exit_doc;
var _BZ2File_enter_doc;
var _BZ2File_close__doc__;
var _BZ2File__doc__;
var _BZ2File_Type;
var _BZ2Decomp_methods;
var _BZ2Decomp_members;
var _BZ2Decomp_decompress__doc__;
var _BZ2Decomp__doc__;
var _BZ2Decomp_Type;
var _BZ2Comp_methods;
var _BZ2Comp_init_kwlist;
var _BZ2Comp_flush__doc__;
var _BZ2Comp_compress__doc__;
var _BZ2Comp__doc__;
var _BZ2Comp_Type;
_bz2_methods=allocate([0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_bz2_decompress__doc__=allocate([100,101,99,111,109,112,114,101,115,115,40,100,97,116,97,41,32,45,62,32,100,101,99,111,109,112,114,101,115,115,101,100,32,100,97,116,97,10,10,68,101,99,111,109,112,114,101,115,115,32,100,97,116,97,32,105,110,32,111,110,101,32,115,104,111,116,46,32,73,102,32,121,111,117,32,119,97,110,116,32,116,111,32,100,101,99,111,109,112,114,101,115,115,32,100,97,116,97,32,115,101,113,117,101,110,116,105,97,108,108,121,44,10,117,115,101,32,97,110,32,105,110,115,116,97,110,99,101,32,111,102,32,66,90,50,68,101,99,111,109,112,114,101,115,115,111,114,32,105,110,115,116,101,97,100,46,10,0,0,0], "i8", ALLOC_NORMAL);
_bz2_compress_kwlist=allocate([0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_bz2_compress__doc__=allocate([99,111,109,112,114,101,115,115,40,100,97,116,97,32,91,44,32,99,111,109,112,114,101,115,115,108,101,118,101,108,61,57,93,41,32,45,62,32,115,116,114,105,110,103,10,10,67,111,109,112,114,101,115,115,32,100,97,116,97,32,105,110,32,111,110,101,32,115,104,111,116,46,32,73,102,32,121,111,117,32,119,97,110,116,32,116,111,32,99,111,109,112,114,101,115,115,32,100,97,116,97,32,115,101,113,117,101,110,116,105,97,108,108,121,44,10,117,115,101,32,97,110,32,105,110,115,116,97,110,99,101,32,111,102,32,66,90,50,67,111,109,112,114,101,115,115,111,114,32,105,110,115,116,101,97,100,46,32,84,104,101,32,99,111,109,112,114,101,115,115,108,101,118,101,108,32,112,97,114,97,109,101,116,101,114,44,32,105,102,10,103,105,118,101,110,44,32,109,117,115,116,32,98,101,32,97,32,110,117,109,98,101,114,32,98,101,116,119,101,101,110,32,49,32,97,110,100,32,57,46,10,0], "i8", ALLOC_NORMAL);
_bz2__doc__=allocate([84,104,101,32,112,121,116,104,111,110,32,98,122,50,32,109,111,100,117,108,101,32,112,114,111,118,105,100,101,115,32,97,32,99,111,109,112,114,101,104,101,110,115,105,118,101,32,105,110,116,101,114,102,97,99,101,32,102,111,114,10,116,104,101,32,98,122,50,32,99,111,109,112,114,101,115,115,105,111,110,32,108,105,98,114,97,114,121,46,32,73,116,32,105,109,112,108,101,109,101,110,116,115,32,97,32,99,111,109,112,108,101,116,101,32,102,105,108,101,10,105,110,116,101,114,102,97,99,101,44,32,111,110,101,32,115,104,111,116,32,40,100,101,41,99,111,109,112,114,101,115,115,105,111,110,32,102,117,110,99,116,105,111,110,115,44,32,97,110,100,32,116,121,112,101,115,32,102,111,114,10,115,101,113,117,101,110,116,105,97,108,32,40,100,101,41,99,111,109,112,114,101,115,115,105,111,110,46,10,0,0,0], "i8", ALLOC_NORMAL);
__str9=allocate([99,111,109,112,114,101,115,115,0,0,0,0], "i8", ALLOC_NORMAL);
__str86=allocate([114,101,113,117,101,115,116,101,100,32,110,117,109,98,101,114,32,111,102,32,98,121,116,101,115,32,105,115,32,109,111,114,101,32,116,104,97,110,32,97,32,80,121,116,104,111,110,32,115,116,114,105,110,103,32,99,97,110,32,104,111,108,100,0], "i8", ALLOC_NORMAL);
__str85=allocate([124,108,58,114,101,97,100,0], "i8", ALLOC_NORMAL);
__str84=allocate([124,105,58,114,101,97,100,108,105,110,101,0], "i8", ALLOC_NORMAL);
__str83=allocate([77,105,120,105,110,103,32,105,116,101,114,97,116,105,111,110,32,97,110,100,32,114,101,97,100,32,109,101,116,104,111,100,115,32,119,111,117,108,100,32,108,111,115,101,32,100,97,116,97,0,0,0], "i8", ALLOC_NORMAL);
__str82=allocate([108,105,110,101,32,105,115,32,108,111,110,103,101,114,32,116,104,97,110,32,97,32,80,121,116,104,111,110,32,115,116,114,105,110,103,32,99,97,110,32,104,111,108,100,0,0,0,0], "i8", ALLOC_NORMAL);
__str81=allocate([102,105,108,101,32,105,115,32,110,111,116,32,114,101,97,100,121,32,102,111,114,32,114,101,97,100,105,110,103,0,0,0], "i8", ALLOC_NORMAL);
__str80=allocate([124,108,58,114,101,97,100,108,105,110,101,115,0,0,0,0], "i8", ALLOC_NORMAL);
__str8=allocate([66,90,50,68,101,99,111,109,112,114,101,115,115,111,114,0], "i8", ALLOC_NORMAL);
__str79=allocate([115,42,58,119,114,105,116,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str78=allocate([119,114,105,116,101,108,105,110,101,115,40,41,32,97,114,103,117,109,101,110,116,32,109,117,115,116,32,98,101,32,97,32,115,101,113,117,101,110,99,101,32,111,102,32,115,116,114,105,110,103,115,0], "i8", ALLOC_NORMAL);
__str77=allocate([119,114,105,116,101,108,105,110,101,115,40,41,32,114,101,113,117,105,114,101,115,32,97,110,32,105,116,101,114,97,98,108,101,32,97,114,103,117,109,101,110,116,0,0], "i8", ALLOC_NORMAL);
__str76=allocate([102,105,108,101,32,105,115,32,110,111,116,32,114,101,97,100,121,32,102,111,114,32,119,114,105,116,105,110,103,0,0,0], "i8", ALLOC_NORMAL);
__str75=allocate([40,105,41,0], "i8", ALLOC_NORMAL);
__str74=allocate([115,101,108,102,45,62,109,111,100,101,32,33,61,32,77,79,68,69,95,82,69,65,68,95,69,79,70,0], "i8", ALLOC_NORMAL);
__str73=allocate([115,101,101,107,32,119,111,114,107,115,32,111,110,108,121,32,119,104,105,108,101,32,114,101,97,100,105,110,103,0,0,0], "i8", ALLOC_NORMAL);
__str72=allocate([79,124,105,58,115,101,101,107,0,0,0,0], "i8", ALLOC_NORMAL);
__str71=allocate([73,47,79,32,111,112,101,114,97,116,105,111,110,32,111,110,32,99,108,111,115,101,100,32,102,105,108,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str70=allocate([95,95,101,120,105,116,95,95,0,0,0,0], "i8", ALLOC_NORMAL);
__str7=allocate([66,90,50,67,111,109,112,114,101,115,115,111,114,0,0,0], "i8", ALLOC_NORMAL);
__str69=allocate([95,95,101,110,116,101,114,95,95,0,0,0], "i8", ALLOC_NORMAL);
__str68=allocate([99,108,111,115,101,0,0,0], "i8", ALLOC_NORMAL);
__str67=allocate([116,101,108,108,0,0,0,0], "i8", ALLOC_NORMAL);
__str66=allocate([115,101,101,107,0,0,0,0], "i8", ALLOC_NORMAL);
__str65=allocate([119,114,105,116,101,108,105,110,101,115,0,0], "i8", ALLOC_NORMAL);
__str64=allocate([119,114,105,116,101,0,0,0], "i8", ALLOC_NORMAL);
__str63=allocate([120,114,101,97,100,108,105,110,101,115,0,0], "i8", ALLOC_NORMAL);
__str62=allocate([114,101,97,100,108,105,110,101,115,0,0,0], "i8", ALLOC_NORMAL);
__str61=allocate([114,101,97,100,108,105,110,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str60=allocate([114,101,97,100,0,0,0,0], "i8", ALLOC_NORMAL);
__str6=allocate([66,90,50,70,105,108,101,0], "i8", ALLOC_NORMAL);
__str59=allocate([102,108,97,103,32,105,110,100,105,99,97,116,105,110,103,32,116,104,97,116,32,97,32,115,112,97,99,101,32,110,101,101,100,115,32,116,111,32,98,101,32,112,114,105,110,116,101,100,59,32,117,115,101,100,32,98,121,32,112,114,105,110,116,0], "i8", ALLOC_NORMAL);
__str58=allocate([115,111,102,116,115,112,97,99,101,0,0,0], "i8", ALLOC_NORMAL);
__str57=allocate([85,110,107,110,111,119,110,32,110,101,119,108,105,110,101,115,32,118,97,108,117,101,32,48,120,37,120,10,0,0,0,0], "i8", ALLOC_NORMAL);
__str56=allocate([40,115,115,115,41,0,0,0], "i8", ALLOC_NORMAL);
__str55=allocate([13,10,0,0], "i8", ALLOC_NORMAL);
__str54=allocate([40,115,115,41,0,0,0,0], "i8", ALLOC_NORMAL);
__str53=allocate([10,0,0,0], "i8", ALLOC_NORMAL);
__str52=allocate([13,0,0,0], "i8", ALLOC_NORMAL);
__str51=allocate([102,105,108,101,32,110,97,109,101,0,0,0], "i8", ALLOC_NORMAL);
__str50=allocate([110,97,109,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str5=allocate([95,95,97,117,116,104,111,114,95,95,0,0], "i8", ALLOC_NORMAL);
__str49=allocate([102,105,108,101,32,109,111,100,101,32,40,39,114,39,44,32,39,119,39,44,32,111,114,32,39,85,39,41,0,0,0,0], "i8", ALLOC_NORMAL);
__str48=allocate([101,110,100,45,111,102,45,108,105,110,101,32,99,111,110,118,101,110,116,105,111,110,32,117,115,101,100,32,105,110,32,116,104,105,115,32,102,105,108,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str47=allocate([110,101,119,108,105,110,101,115,0,0,0,0], "i8", ALLOC_NORMAL);
__str46=allocate([84,114,117,101,32,105,102,32,116,104,101,32,102,105,108,101,32,105,115,32,99,108,111,115,101,100,0,0], "i8", ALLOC_NORMAL);
__str45=allocate([99,108,111,115,101,100,0,0], "i8", ALLOC_NORMAL);
__str44=allocate([40,79,115,105,41,0,0,0], "i8", ALLOC_NORMAL);
__str43=allocate([119,98,0,0], "i8", ALLOC_NORMAL);
__str42=allocate([114,98,0,0], "i8", ALLOC_NORMAL);
__str41=allocate([105,110,118,97,108,105,100,32,109,111,100,101,32,99,104,97,114,32,37,99,0,0,0,0], "i8", ALLOC_NORMAL);
__str40=allocate([79,124,115,105,105,58,66,90,50,70,105,108,101,0,0,0], "i8", ALLOC_NORMAL);
__str4=allocate([98,122,50,0], "i8", ALLOC_NORMAL);
__str39=allocate([114,0,0,0], "i8", ALLOC_NORMAL);
__str38=allocate([98,117,102,102,101,114,105,110,103,0,0,0], "i8", ALLOC_NORMAL);
__str37=allocate([109,111,100,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str36=allocate([102,105,108,101,110,97,109,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str35=allocate([98,122,50,46,66,90,50,70,105,108,101,0], "i8", ALLOC_NORMAL);
__str34=allocate([116,104,105,115,32,111,98,106,101,99,116,32,119,97,115,32,97,108,114,101,97,100,121,32,102,108,117,115,104,101,100,0], "i8", ALLOC_NORMAL);
__str33=allocate([115,42,58,99,111,109,112,114,101,115,115,0], "i8", ALLOC_NORMAL);
__str32=allocate([111,98,106,101,99,116,32,119,97,115,32,97,108,114,101,97,100,121,32,102,108,117,115,104,101,100,0,0], "i8", ALLOC_NORMAL);
__str31=allocate([102,108,117,115,104,0,0,0], "i8", ALLOC_NORMAL);
__str30=allocate([124,105,58,66,90,50,67,111,109,112,114,101,115,115,111,114,0,0,0,0], "i8", ALLOC_NORMAL);
__str3=allocate([110,114,101,97,100,32,60,61,32,110,0,0], "i8", ALLOC_NORMAL);
__str29=allocate([98,122,50,46,66,90,50,67,111,109,112,114,101,115,115,111,114,0,0,0], "i8", ALLOC_NORMAL);
__str28=allocate([101,110,100,32,111,102,32,115,116,114,101,97,109,32,119,97,115,32,97,108,114,101,97,100,121,32,102,111,117,110,100,0], "i8", ALLOC_NORMAL);
__str27=allocate([117,110,117,115,101,100,95,100,97,116,97,0], "i8", ALLOC_NORMAL);
__str26=allocate([58,66,90,50,68,101,99,111,109,112,114,101,115,115,111,114,0,0,0,0], "i8", ALLOC_NORMAL);
__str25=allocate([98,122,50,46,66,90,50,68,101,99,111,109,112,114,101,115,115,111,114,0], "i8", ALLOC_NORMAL);
__str24=allocate([99,111,109,112,114,101,115,115,108,101,118,101,108,32,109,117,115,116,32,98,101,32,98,101,116,119,101,101,110,32,49,32,97,110,100,32,57,0,0,0], "i8", ALLOC_NORMAL);
__str23=allocate([115,42,124,105,0,0,0,0], "i8", ALLOC_NORMAL);
__str22=allocate([99,111,109,112,114,101,115,115,108,101,118,101,108,0,0,0], "i8", ALLOC_NORMAL);
__str21=allocate([100,97,116,97,0,0,0,0], "i8", ALLOC_NORMAL);
__str20=allocate([119,114,111,110,103,32,115,101,113,117,101,110,99,101,32,111,102,32,98,122,50,32,108,105,98,114,97,114,121,32,99,111,109,109,97,110,100,115,32,117,115,101,100,0], "i8", ALLOC_NORMAL);
__str2=allocate([115,116,114,101,97,109,32,33,61,32,78,85,76,76,0,0], "i8", ALLOC_NORMAL);
__str19=allocate([99,111,109,112,114,101,115,115,101,100,32,102,105,108,101,32,101,110,100,101,100,32,98,101,102,111,114,101,32,116,104,101,32,108,111,103,105,99,97,108,32,101,110,100,45,111,102,45,115,116,114,101,97,109,32,119,97,115,32,100,101,116,101,99,116,101,100,0], "i8", ALLOC_NORMAL);
__str18=allocate([117,110,107,110,111,119,110,32,73,79,32,101,114,114,111,114,0,0,0,0], "i8", ALLOC_NORMAL);
__str17=allocate([105,110,118,97,108,105,100,32,100,97,116,97,32,115,116,114,101,97,109,0], "i8", ALLOC_NORMAL);
__str16=allocate([116,104,101,32,98,122,50,32,108,105,98,114,97,114,121,32,104,97,115,32,114,101,99,101,105,118,101,100,32,119,114,111,110,103,32,112,97,114,97,109,101,116,101,114,115,0,0,0], "i8", ALLOC_NORMAL);
__str15=allocate([116,104,101,32,98,122,50,32,108,105,98,114,97,114,121,32,119,97,115,32,110,111,116,32,99,111,109,112,105,108,101,100,32,99,111,114,114,101,99,116,108,121,0,0], "i8", ALLOC_NORMAL);
__str14=allocate([85,110,97,98,108,101,32,116,111,32,97,108,108,111,99,97,116,101,32,98,117,102,102,101,114,32,45,32,111,117,116,112,117,116,32,116,111,111,32,108,97,114,103,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str13=allocate([99,111,117,108,100,110,39,116,32,102,105,110,100,32,101,110,100,32,111,102,32,115,116,114,101,97,109,0], "i8", ALLOC_NORMAL);
__str12=allocate([0,0,0,0], "i8", ALLOC_NORMAL);
__str11=allocate([115,42,58,100,101,99,111,109,112,114,101,115,115,0,0,0], "i8", ALLOC_NORMAL);
__str10=allocate([100,101,99,111,109,112,114,101,115,115,0,0], "i8", ALLOC_NORMAL);
__str1=allocate([98,117,102,32,33,61,32,78,85,76,76,0], "i8", ALLOC_NORMAL);
__str=allocate([46,46,47,77,111,100,117,108,101,115,47,98,122,50,109,111,100,117,108,101,46,99,0,0], "i8", ALLOC_NORMAL);
___func___Util_UnivNewlineRead=allocate([85,116,105,108,95,85,110,105,118,78,101,119,108,105,110,101,82,101,97,100,0,0,0,0], "i8", ALLOC_NORMAL);
___func___BZ2File_seek=allocate([66,90,50,70,105,108,101,95,115,101,101,107,0,0,0,0], "i8", ALLOC_NORMAL);
___author__=allocate([84,104,101,32,98,122,50,32,112,121,116,104,111,110,32,109,111,100,117,108,101,32,119,97,115,32,119,114,105,116,116,101,110,32,98,121,58,10,10,32,32,32,32,71,117,115,116,97,118,111,32,78,105,101,109,101,121,101,114,32,60,110,105,101,109,101,121,101,114,64,99,111,110,101,99,116,105,118,97,46,99,111,109,62,10,0,0,0], "i8", ALLOC_NORMAL);
_BZ2File_xreadlines__doc__=allocate([120,114,101,97,100,108,105,110,101,115,40,41,32,45,62,32,115,101,108,102,10,10,70,111,114,32,98,97,99,107,119,97,114,100,32,99,111,109,112,97,116,105,98,105,108,105,116,121,46,32,66,90,50,70,105,108,101,32,111,98,106,101,99,116,115,32,110,111,119,32,105,110,99,108,117,100,101,32,116,104,101,32,112,101,114,102,111,114,109,97,110,99,101,10,111,112,116,105,109,105,122,97,116,105,111,110,115,32,112,114,101,118,105,111,117,115,108,121,32,105,109,112,108,101,109,101,110,116,101,100,32,105,110,32,116,104,101,32,120,114,101,97,100,108,105,110,101,115,32,109,111,100,117,108,101,46,10,0,0,0], "i8", ALLOC_NORMAL);
_BZ2File_writelines__doc__=allocate([119,114,105,116,101,108,105,110,101,115,40,115,101,113,117,101,110,99,101,95,111,102,95,115,116,114,105,110,103,115,41,32,45,62,32,78,111,110,101,10,10,87,114,105,116,101,32,116,104,101,32,115,101,113,117,101,110,99,101,32,111,102,32,115,116,114,105,110,103,115,32,116,111,32,116,104,101,32,102,105,108,101,46,32,78,111,116,101,32,116,104,97,116,32,110,101,119,108,105,110,101,115,32,97,114,101,32,110,111,116,10,97,100,100,101,100,46,32,84,104,101,32,115,101,113,117,101,110,99,101,32,99,97,110,32,98,101,32,97,110,121,32,105,116,101,114,97,98,108,101,32,111,98,106,101,99,116,32,112,114,111,100,117,99,105,110,103,32,115,116,114,105,110,103,115,46,32,84,104,105,115,32,105,115,10,101,113,117,105,118,97,108,101,110,116,32,116,111,32,99,97,108,108,105,110,103,32,119,114,105,116,101,40,41,32,102,111,114,32,101,97,99,104,32,115,116,114,105,110,103,46,10,0,0,0,0], "i8", ALLOC_NORMAL);
_BZ2File_write__doc__=allocate([119,114,105,116,101,40,100,97,116,97,41,32,45,62,32,78,111,110,101,10,10,87,114,105,116,101,32,116,104,101,32,39,100,97,116,97,39,32,115,116,114,105,110,103,32,116,111,32,102,105,108,101,46,32,78,111,116,101,32,116,104,97,116,32,100,117,101,32,116,111,32,98,117,102,102,101,114,105,110,103,44,32,99,108,111,115,101,40,41,32,109,97,121,10,98,101,32,110,101,101,100,101,100,32,98,101,102,111,114,101,32,116,104,101,32,102,105,108,101,32,111,110,32,100,105,115,107,32,114,101,102,108,101,99,116,115,32,116,104,101,32,100,97,116,97,32,119,114,105,116,116,101,110,46,10,0], "i8", ALLOC_NORMAL);
_BZ2File_tell__doc__=allocate([116,101,108,108,40,41,32,45,62,32,105,110,116,10,10,82,101,116,117,114,110,32,116,104,101,32,99,117,114,114,101,110,116,32,102,105,108,101,32,112,111,115,105,116,105,111,110,44,32,97,110,32,105,110,116,101,103,101,114,32,40,109,97,121,32,98,101,32,97,32,108,111,110,103,32,105,110,116,101,103,101,114,41,46,10,0,0,0], "i8", ALLOC_NORMAL);
_BZ2File_seek__doc__=allocate([115,101,101,107,40,111,102,102,115,101,116,32,91,44,32,119,104,101,110,99,101,93,41,32,45,62,32,78,111,110,101,10,10,77,111,118,101,32,116,111,32,110,101,119,32,102,105,108,101,32,112,111,115,105,116,105,111,110,46,32,65,114,103,117,109,101,110,116,32,111,102,102,115,101,116,32,105,115,32,97,32,98,121,116,101,32,99,111,117,110,116,46,32,79,112,116,105,111,110,97,108,10,97,114,103,117,109,101,110,116,32,119,104,101,110,99,101,32,100,101,102,97,117,108,116,115,32,116,111,32,48,32,40,111,102,102,115,101,116,32,102,114,111,109,32,115,116,97,114,116,32,111,102,32,102,105,108,101,44,32,111,102,102,115,101,116,10,115,104,111,117,108,100,32,98,101,32,62,61,32,48,41,59,32,111,116,104,101,114,32,118,97,108,117,101,115,32,97,114,101,32,49,32,40,109,111,118,101,32,114,101,108,97,116,105,118,101,32,116,111,32,99,117,114,114,101,110,116,32,112,111,115,105,116,105,111,110,44,10,112,111,115,105,116,105,118,101,32,111,114,32,110,101,103,97,116,105,118,101,41,44,32,97,110,100,32,50,32,40,109,111,118,101,32,114,101,108,97,116,105,118,101,32,116,111,32,101,110,100,32,111,102,32,102,105,108,101,44,32,117,115,117,97,108,108,121,10,110,101,103,97,116,105,118,101,44,32,97,108,116,104,111,117,103,104,32,109,97,110,121,32,112,108,97,116,102,111,114,109,115,32,97,108,108,111,119,32,115,101,101,107,105,110,103,32,98,101,121,111,110,100,32,116,104,101,32,101,110,100,32,111,102,32,97,32,102,105,108,101,41,46,10,10,78,111,116,101,32,116,104,97,116,32,115,101,101,107,105,110,103,32,111,102,32,98,122,50,32,102,105,108,101,115,32,105,115,32,101,109,117,108,97,116,101,100,44,32,97,110,100,32,100,101,112,101,110,100,105,110,103,32,111,110,32,116,104,101,32,112,97,114,97,109,101,116,101,114,115,10,116,104,101,32,111,112,101,114,97,116,105,111,110,32,109,97,121,32,98,101,32,101,120,116,114,101,109,101,108,121,32,115,108,111,119,46,10,0,0,0,0], "i8", ALLOC_NORMAL);
_BZ2File_readlines__doc__=allocate([114,101,97,100,108,105,110,101,115,40,91,115,105,122,101,93,41,32,45,62,32,108,105,115,116,10,10,67,97,108,108,32,114,101,97,100,108,105,110,101,40,41,32,114,101,112,101,97,116,101,100,108,121,32,97,110,100,32,114,101,116,117,114,110,32,97,32,108,105,115,116,32,111,102,32,108,105,110,101,115,32,114,101,97,100,46,10,84,104,101,32,111,112,116,105,111,110,97,108,32,115,105,122,101,32,97,114,103,117,109,101,110,116,44,32,105,102,32,103,105,118,101,110,44,32,105,115,32,97,110,32,97,112,112,114,111,120,105,109,97,116,101,32,98,111,117,110,100,32,111,110,32,116,104,101,10,116,111,116,97,108,32,110,117,109,98,101,114,32,111,102,32,98,121,116,101,115,32,105,110,32,116,104,101,32,108,105,110,101,115,32,114,101,116,117,114,110,101,100,46,10,0,0,0], "i8", ALLOC_NORMAL);
_BZ2File_readline__doc__=allocate([114,101,97,100,108,105,110,101,40,91,115,105,122,101,93,41,32,45,62,32,115,116,114,105,110,103,10,10,82,101,116,117,114,110,32,116,104,101,32,110,101,120,116,32,108,105,110,101,32,102,114,111,109,32,116,104,101,32,102,105,108,101,44,32,97,115,32,97,32,115,116,114,105,110,103,44,32,114,101,116,97,105,110,105,110,103,32,110,101,119,108,105,110,101,46,10,65,32,110,111,110,45,110,101,103,97,116,105,118,101,32,115,105,122,101,32,97,114,103,117,109,101,110,116,32,119,105,108,108,32,108,105,109,105,116,32,116,104,101,32,109,97,120,105,109,117,109,32,110,117,109,98,101,114,32,111,102,32,98,121,116,101,115,32,116,111,10,114,101,116,117,114,110,32,40,97,110,32,105,110,99,111,109,112,108,101,116,101,32,108,105,110,101,32,109,97,121,32,98,101,32,114,101,116,117,114,110,101,100,32,116,104,101,110,41,46,32,82,101,116,117,114,110,32,97,110,32,101,109,112,116,121,10,115,116,114,105,110,103,32,97,116,32,69,79,70,46,10,0,0,0,0], "i8", ALLOC_NORMAL);
_BZ2File_read__doc__=allocate([114,101,97,100,40,91,115,105,122,101,93,41,32,45,62,32,115,116,114,105,110,103,10,10,82,101,97,100,32,97,116,32,109,111,115,116,32,115,105,122,101,32,117,110,99,111,109,112,114,101,115,115,101,100,32,98,121,116,101,115,44,32,114,101,116,117,114,110,101,100,32,97,115,32,97,32,115,116,114,105,110,103,46,32,73,102,32,116,104,101,32,115,105,122,101,10,97,114,103,117,109,101,110,116,32,105,115,32,110,101,103,97,116,105,118,101,32,111,114,32,111,109,105,116,116,101,100,44,32,114,101,97,100,32,117,110,116,105,108,32,69,79,70,32,105,115,32,114,101,97,99,104,101,100,46,10,0,0,0,0], "i8", ALLOC_NORMAL);
_BZ2File_methods=allocate([0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_BZ2File_members=allocate([0,0,0,0,1,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_BZ2File_init_kwlist=allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_BZ2File_getset=allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_BZ2File_exit_doc=allocate([95,95,101,120,105,116,95,95,40,42,101,120,99,105,110,102,111,41,32,45,62,32,78,111,110,101,46,32,32,67,108,111,115,101,115,32,116,104,101,32,102,105,108,101,46,0,0,0], "i8", ALLOC_NORMAL);
_BZ2File_enter_doc=allocate([95,95,101,110,116,101,114,95,95,40,41,32,45,62,32,115,101,108,102,46,0,0,0,0], "i8", ALLOC_NORMAL);
_BZ2File_close__doc__=allocate([99,108,111,115,101,40,41,32,45,62,32,78,111,110,101,32,111,114,32,40,112,101,114,104,97,112,115,41,32,97,110,32,105,110,116,101,103,101,114,10,10,67,108,111,115,101,32,116,104,101,32,102,105,108,101,46,32,83,101,116,115,32,100,97,116,97,32,97,116,116,114,105,98,117,116,101,32,46,99,108,111,115,101,100,32,116,111,32,116,114,117,101,46,32,65,32,99,108,111,115,101,100,32,102,105,108,101,10,99,97,110,110,111,116,32,98,101,32,117,115,101,100,32,102,111,114,32,102,117,114,116,104,101,114,32,73,47,79,32,111,112,101,114,97,116,105,111,110,115,46,32,99,108,111,115,101,40,41,32,109,97,121,32,98,101,32,99,97,108,108,101,100,32,109,111,114,101,10,116,104,97,110,32,111,110,99,101,32,119,105,116,104,111,117,116,32,101,114,114,111,114,46,10,0], "i8", ALLOC_NORMAL);
_BZ2File__doc__=allocate([66,90,50,70,105,108,101,40,110,97,109,101,32,91,44,32,109,111,100,101,61,39,114,39,44,32,98,117,102,102,101,114,105,110,103,61,48,44,32,99,111,109,112,114,101,115,115,108,101,118,101,108,61,57,93,41,32,45,62,32,102,105,108,101,32,111,98,106,101,99,116,10,10,79,112,101,110,32,97,32,98,122,50,32,102,105,108,101,46,32,84,104,101,32,109,111,100,101,32,99,97,110,32,98,101,32,39,114,39,32,111,114,32,39,119,39,44,32,102,111,114,32,114,101,97,100,105,110,103,32,40,100,101,102,97,117,108,116,41,32,111,114,10,119,114,105,116,105,110,103,46,32,87,104,101,110,32,111,112,101,110,101,100,32,102,111,114,32,119,114,105,116,105,110,103,44,32,116,104,101,32,102,105,108,101,32,119,105,108,108,32,98,101,32,99,114,101,97,116,101,100,32,105,102,32,105,116,32,100,111,101,115,110,39,116,10,101,120,105,115,116,44,32,97,110,100,32,116,114,117,110,99,97,116,101,100,32,111,116,104,101,114,119,105,115,101,46,32,73,102,32,116,104,101,32,98,117,102,102,101,114,105,110,103,32,97,114,103,117,109,101,110,116,32,105,115,32,103,105,118,101,110,44,32,48,32,109,101,97,110,115,10,117,110,98,117,102,102,101,114,101,100,44,32,97,110,100,32,108,97,114,103,101,114,32,110,117,109,98,101,114,115,32,115,112,101,99,105,102,121,32,116,104,101,32,98,117,102,102,101,114,32,115,105,122,101,46,32,73,102,32,99,111,109,112,114,101,115,115,108,101,118,101,108,10,105,115,32,103,105,118,101,110,44,32,109,117,115,116,32,98,101,32,97,32,110,117,109,98,101,114,32,98,101,116,119,101,101,110,32,49,32,97,110,100,32,57,46,10,10,65,100,100,32,97,32,39,85,39,32,116,111,32,109,111,100,101,32,116,111,32,111,112,101,110,32,116,104,101,32,102,105,108,101,32,102,111,114,32,105,110,112,117,116,32,119,105,116,104,32,117,110,105,118,101,114,115,97,108,32,110,101,119,108,105,110,101,10,115,117,112,112,111,114,116,46,32,65,110,121,32,108,105,110,101,32,101,110,100,105,110,103,32,105,110,32,116,104,101,32,105,110,112,117,116,32,102,105,108,101,32,119,105,108,108,32,98,101,32,115,101,101,110,32,97,115,32,97,32,39,92,110,39,32,105,110,10,80,121,116,104,111,110,46,32,65,108,115,111,44,32,97,32,102,105,108,101,32,115,111,32,111,112,101,110,101,100,32,103,97,105,110,115,32,116,104,101,32,97,116,116,114,105,98,117,116,101,32,39,110,101,119,108,105,110,101,115,39,59,32,116,104,101,32,118,97,108,117,101,10,102,111,114,32,116,104,105,115,32,97,116,116,114,105,98,117,116,101,32,105,115,32,111,110,101,32,111,102,32,78,111,110,101,32,40,110,111,32,110,101,119,108,105,110,101,32,114,101,97,100,32,121,101,116,41,44,32,39,92,114,39,44,32,39,92,110,39,44,10,39,92,114,92,110,39,32,111,114,32,97,32,116,117,112,108,101,32,99,111,110,116,97,105,110,105,110,103,32,97,108,108,32,116,104,101,32,110,101,119,108,105,110,101,32,116,121,112,101,115,32,115,101,101,110,46,32,85,110,105,118,101,114,115,97,108,10,110,101,119,108,105,110,101,115,32,97,114,101,32,97,118,97,105,108,97,98,108,101,32,111,110,108,121,32,119,104,101,110,32,114,101,97,100,105,110,103,46,10,0,0], "i8", ALLOC_NORMAL);
_BZ2File_Type=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,5,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_BZ2Decomp_methods=allocate([0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_BZ2Decomp_members=allocate([0,0,0,0,6,0,0,0,60,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_BZ2Decomp_decompress__doc__=allocate([100,101,99,111,109,112,114,101,115,115,40,100,97,116,97,41,32,45,62,32,115,116,114,105,110,103,10,10,80,114,111,118,105,100,101,32,109,111,114,101,32,100,97,116,97,32,116,111,32,116,104,101,32,100,101,99,111,109,112,114,101,115,115,111,114,32,111,98,106,101,99,116,46,32,73,116,32,119,105,108,108,32,114,101,116,117,114,110,32,99,104,117,110,107,115,10,111,102,32,100,101,99,111,109,112,114,101,115,115,101,100,32,100,97,116,97,32,119,104,101,110,101,118,101,114,32,112,111,115,115,105,98,108,101,46,32,73,102,32,121,111,117,32,116,114,121,32,116,111,32,100,101,99,111,109,112,114,101,115,115,32,100,97,116,97,10,97,102,116,101,114,32,116,104,101,32,101,110,100,32,111,102,32,115,116,114,101,97,109,32,105,115,32,102,111,117,110,100,44,32,69,79,70,69,114,114,111,114,32,119,105,108,108,32,98,101,32,114,97,105,115,101,100,46,32,73,102,32,97,110,121,32,100,97,116,97,10,119,97,115,32,102,111,117,110,100,32,97,102,116,101,114,32,116,104,101,32,101,110,100,32,111,102,32,115,116,114,101,97,109,44,32,105,116,39,108,108,32,98,101,32,105,103,110,111,114,101,100,32,97,110,100,32,115,97,118,101,100,32,105,110,10,117,110,117,115,101,100,95,100,97,116,97,32,97,116,116,114,105,98,117,116,101,46,10,0,0,0], "i8", ALLOC_NORMAL);
_BZ2Decomp__doc__=allocate([66,90,50,68,101,99,111,109,112,114,101,115,115,111,114,40,41,32,45,62,32,100,101,99,111,109,112,114,101,115,115,111,114,32,111,98,106,101,99,116,10,10,67,114,101,97,116,101,32,97,32,110,101,119,32,100,101,99,111,109,112,114,101,115,115,111,114,32,111,98,106,101,99,116,46,32,84,104,105,115,32,111,98,106,101,99,116,32,109,97,121,32,98,101,32,117,115,101,100,32,116,111,32,100,101,99,111,109,112,114,101,115,115,10,100,97,116,97,32,115,101,113,117,101,110,116,105,97,108,108,121,46,32,73,102,32,121,111,117,32,119,97,110,116,32,116,111,32,100,101,99,111,109,112,114,101,115,115,32,100,97,116,97,32,105,110,32,111,110,101,32,115,104,111,116,44,32,117,115,101,32,116,104,101,10,100,101,99,111,109,112,114,101,115,115,40,41,32,102,117,110,99,116,105,111,110,32,105,110,115,116,101,97,100,46,10,0,0,0,0], "i8", ALLOC_NORMAL);
_BZ2Decomp_Type=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,5,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_BZ2Comp_methods=allocate([0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_BZ2Comp_init_kwlist=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_BZ2Comp_flush__doc__=allocate([102,108,117,115,104,40,41,32,45,62,32,115,116,114,105,110,103,10,10,70,105,110,105,115,104,32,116,104,101,32,99,111,109,112,114,101,115,115,105,111,110,32,112,114,111,99,101,115,115,32,97,110,100,32,114,101,116,117,114,110,32,119,104,97,116,32,105,115,32,108,101,102,116,32,105,110,32,105,110,116,101,114,110,97,108,32,98,117,102,102,101,114,115,46,10,89,111,117,32,109,117,115,116,32,110,111,116,32,117,115,101,32,116,104,101,32,99,111,109,112,114,101,115,115,111,114,32,111,98,106,101,99,116,32,97,102,116,101,114,32,99,97,108,108,105,110,103,32,116,104,105,115,32,109,101,116,104,111,100,46,10,0,0,0], "i8", ALLOC_NORMAL);
_BZ2Comp_compress__doc__=allocate([99,111,109,112,114,101,115,115,40,100,97,116,97,41,32,45,62,32,115,116,114,105,110,103,10,10,80,114,111,118,105,100,101,32,109,111,114,101,32,100,97,116,97,32,116,111,32,116,104,101,32,99,111,109,112,114,101,115,115,111,114,32,111,98,106,101,99,116,46,32,73,116,32,119,105,108,108,32,114,101,116,117,114,110,32,99,104,117,110,107,115,32,111,102,10,99,111,109,112,114,101,115,115,101,100,32,100,97,116,97,32,119,104,101,110,101,118,101,114,32,112,111,115,115,105,98,108,101,46,32,87,104,101,110,32,121,111,117,39,118,101,32,102,105,110,105,115,104,101,100,32,112,114,111,118,105,100,105,110,103,32,100,97,116,97,10,116,111,32,99,111,109,112,114,101,115,115,44,32,99,97,108,108,32,116,104,101,32,102,108,117,115,104,40,41,32,109,101,116,104,111,100,32,116,111,32,102,105,110,105,115,104,32,116,104,101,32,99,111,109,112,114,101,115,115,105,111,110,32,112,114,111,99,101,115,115,44,10,97,110,100,32,114,101,116,117,114,110,32,119,104,97,116,32,105,115,32,108,101,102,116,32,105,110,32,116,104,101,32,105,110,116,101,114,110,97,108,32,98,117,102,102,101,114,115,46,10,0], "i8", ALLOC_NORMAL);
_BZ2Comp__doc__=allocate([66,90,50,67,111,109,112,114,101,115,115,111,114,40,91,99,111,109,112,114,101,115,115,108,101,118,101,108,61,57,93,41,32,45,62,32,99,111,109,112,114,101,115,115,111,114,32,111,98,106,101,99,116,10,10,67,114,101,97,116,101,32,97,32,110,101,119,32,99,111,109,112,114,101,115,115,111,114,32,111,98,106,101,99,116,46,32,84,104,105,115,32,111,98,106,101,99,116,32,109,97,121,32,98,101,32,117,115,101,100,32,116,111,32,99,111,109,112,114,101,115,115,10,100,97,116,97,32,115,101,113,117,101,110,116,105,97,108,108,121,46,32,73,102,32,121,111,117,32,119,97,110,116,32,116,111,32,99,111,109,112,114,101,115,115,32,100,97,116,97,32,105,110,32,111,110,101,32,115,104,111,116,44,32,117,115,101,32,116,104,101,10,99,111,109,112,114,101,115,115,40,41,32,102,117,110,99,116,105,111,110,32,105,110,115,116,101,97,100,46,32,84,104,101,32,99,111,109,112,114,101,115,115,108,101,118,101,108,32,112,97,114,97,109,101,116,101,114,44,32,105,102,32,103,105,118,101,110,44,10,109,117,115,116,32,98,101,32,97,32,110,117,109,98,101,114,32,98,101,116,119,101,101,110,32,49,32,97,110,100,32,57,46,10,0,0], "i8", ALLOC_NORMAL);
_BZ2Comp_Type=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,5,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
/* no memory initializer */
function runPostSets() {
HEAP32[((_bz2_methods)>>2)]=((__str9)|0);
HEAP32[(((_bz2_methods)+(4))>>2)]=((FUNCTION_TABLE_OFFSET + 10));
HEAP32[(((_bz2_methods)+(12))>>2)]=((_bz2_compress__doc__)|0);
HEAP32[(((_bz2_methods)+(16))>>2)]=((__str10)|0);
HEAP32[(((_bz2_methods)+(20))>>2)]=(FUNCTION_TABLE_OFFSET + 40);
HEAP32[(((_bz2_methods)+(28))>>2)]=((_bz2_decompress__doc__)|0);
HEAP32[((_bz2_compress_kwlist)>>2)]=((__str21)|0);
HEAP32[(((_bz2_compress_kwlist)+(4))>>2)]=((__str22)|0);
HEAP32[((_BZ2File_methods)>>2)]=((__str60)|0);
HEAP32[(((_BZ2File_methods)+(4))>>2)]=((FUNCTION_TABLE_OFFSET + 18));
HEAP32[(((_BZ2File_methods)+(12))>>2)]=((_BZ2File_read__doc__)|0);
HEAP32[(((_BZ2File_methods)+(16))>>2)]=((__str61)|0);
HEAP32[(((_BZ2File_methods)+(20))>>2)]=((FUNCTION_TABLE_OFFSET + 56));
HEAP32[(((_BZ2File_methods)+(28))>>2)]=((_BZ2File_readline__doc__)|0);
HEAP32[(((_BZ2File_methods)+(32))>>2)]=((__str62)|0);
HEAP32[(((_BZ2File_methods)+(36))>>2)]=((FUNCTION_TABLE_OFFSET + 38));
HEAP32[(((_BZ2File_methods)+(44))>>2)]=((_BZ2File_readlines__doc__)|0);
HEAP32[(((_BZ2File_methods)+(48))>>2)]=((__str63)|0);
HEAP32[(((_BZ2File_methods)+(52))>>2)]=((FUNCTION_TABLE_OFFSET + 12));
HEAP32[(((_BZ2File_methods)+(60))>>2)]=((_BZ2File_xreadlines__doc__)|0);
HEAP32[(((_BZ2File_methods)+(64))>>2)]=((__str64)|0);
HEAP32[(((_BZ2File_methods)+(68))>>2)]=((FUNCTION_TABLE_OFFSET + 34));
HEAP32[(((_BZ2File_methods)+(76))>>2)]=((_BZ2File_write__doc__)|0);
HEAP32[(((_BZ2File_methods)+(80))>>2)]=((__str65)|0);
HEAP32[(((_BZ2File_methods)+(84))>>2)]=((FUNCTION_TABLE_OFFSET + 28));
HEAP32[(((_BZ2File_methods)+(92))>>2)]=((_BZ2File_writelines__doc__)|0);
HEAP32[(((_BZ2File_methods)+(96))>>2)]=((__str66)|0);
HEAP32[(((_BZ2File_methods)+(100))>>2)]=((FUNCTION_TABLE_OFFSET + 4));
HEAP32[(((_BZ2File_methods)+(108))>>2)]=((_BZ2File_seek__doc__)|0);
HEAP32[(((_BZ2File_methods)+(112))>>2)]=((__str67)|0);
HEAP32[(((_BZ2File_methods)+(116))>>2)]=((FUNCTION_TABLE_OFFSET + 58));
HEAP32[(((_BZ2File_methods)+(124))>>2)]=((_BZ2File_tell__doc__)|0);
HEAP32[(((_BZ2File_methods)+(128))>>2)]=((__str68)|0);
HEAP32[(((_BZ2File_methods)+(132))>>2)]=((FUNCTION_TABLE_OFFSET + 54));
HEAP32[(((_BZ2File_methods)+(140))>>2)]=((_BZ2File_close__doc__)|0);
HEAP32[(((_BZ2File_methods)+(144))>>2)]=((__str69)|0);
HEAP32[(((_BZ2File_methods)+(148))>>2)]=((FUNCTION_TABLE_OFFSET + 42));
HEAP32[(((_BZ2File_methods)+(156))>>2)]=((_BZ2File_enter_doc)|0);
HEAP32[(((_BZ2File_methods)+(160))>>2)]=((__str70)|0);
HEAP32[(((_BZ2File_methods)+(164))>>2)]=((FUNCTION_TABLE_OFFSET + 36));
HEAP32[(((_BZ2File_methods)+(172))>>2)]=((_BZ2File_exit_doc)|0);
HEAP32[((_BZ2File_members)>>2)]=((__str58)|0);
HEAP32[(((_BZ2File_members)+(16))>>2)]=((__str59)|0);
HEAP32[((_BZ2File_init_kwlist)>>2)]=((__str36)|0);
HEAP32[(((_BZ2File_init_kwlist)+(4))>>2)]=((__str37)|0);
HEAP32[(((_BZ2File_init_kwlist)+(8))>>2)]=((__str38)|0);
HEAP32[(((_BZ2File_init_kwlist)+(12))>>2)]=((__str22)|0);
HEAP32[((_BZ2File_getset)>>2)]=((__str45)|0);
HEAP32[(((_BZ2File_getset)+(4))>>2)]=((FUNCTION_TABLE_OFFSET + 50));
HEAP32[(((_BZ2File_getset)+(12))>>2)]=((__str46)|0);
HEAP32[(((_BZ2File_getset)+(20))>>2)]=((__str47)|0);
HEAP32[(((_BZ2File_getset)+(24))>>2)]=((FUNCTION_TABLE_OFFSET + 22));
HEAP32[(((_BZ2File_getset)+(32))>>2)]=((__str48)|0);
HEAP32[(((_BZ2File_getset)+(40))>>2)]=((__str37)|0);
HEAP32[(((_BZ2File_getset)+(44))>>2)]=((FUNCTION_TABLE_OFFSET + 48));
HEAP32[(((_BZ2File_getset)+(52))>>2)]=((__str49)|0);
HEAP32[(((_BZ2File_getset)+(60))>>2)]=((__str50)|0);
HEAP32[(((_BZ2File_getset)+(64))>>2)]=((FUNCTION_TABLE_OFFSET + 44));
HEAP32[(((_BZ2File_getset)+(72))>>2)]=((__str51)|0);
HEAP32[(((_BZ2File_Type)+(12))>>2)]=((__str35)|0);
HEAP32[(((_BZ2File_Type)+(24))>>2)]=((FUNCTION_TABLE_OFFSET + 46));
HEAP32[(((_BZ2File_Type)+(72))>>2)]=(FUNCTION_TABLE_OFFSET + 24);
HEAP32[(((_BZ2File_Type)+(76))>>2)]=(FUNCTION_TABLE_OFFSET + 16);
HEAP32[(((_BZ2File_Type)+(88))>>2)]=((_BZ2File__doc__)|0);
HEAP32[(((_BZ2File_Type)+(108))>>2)]=((FUNCTION_TABLE_OFFSET + 12));
HEAP32[(((_BZ2File_Type)+(112))>>2)]=((FUNCTION_TABLE_OFFSET + 20));
HEAP32[(((_BZ2File_Type)+(116))>>2)]=((_BZ2File_methods)|0);
HEAP32[(((_BZ2File_Type)+(120))>>2)]=((_BZ2File_members)|0);
HEAP32[(((_BZ2File_Type)+(124))>>2)]=((_BZ2File_getset)|0);
HEAP32[(((_BZ2File_Type)+(148))>>2)]=((FUNCTION_TABLE_OFFSET + 6));
HEAP32[(((_BZ2File_Type)+(152))>>2)]=(FUNCTION_TABLE_OFFSET + 52);
HEAP32[(((_BZ2File_Type)+(156))>>2)]=(FUNCTION_TABLE_OFFSET + 2);
HEAP32[(((_BZ2File_Type)+(160))>>2)]=(FUNCTION_TABLE_OFFSET + 32);
HEAP32[((_BZ2Decomp_methods)>>2)]=((__str10)|0);
HEAP32[(((_BZ2Decomp_methods)+(4))>>2)]=((FUNCTION_TABLE_OFFSET + 14));
HEAP32[(((_BZ2Decomp_methods)+(12))>>2)]=((_BZ2Decomp_decompress__doc__)|0);
HEAP32[((_BZ2Decomp_members)>>2)]=((__str27)|0);
HEAP32[(((_BZ2Decomp_Type)+(12))>>2)]=((__str25)|0);
HEAP32[(((_BZ2Decomp_Type)+(24))>>2)]=((FUNCTION_TABLE_OFFSET + 8));
HEAP32[(((_BZ2Decomp_Type)+(72))>>2)]=(FUNCTION_TABLE_OFFSET + 24);
HEAP32[(((_BZ2Decomp_Type)+(76))>>2)]=(FUNCTION_TABLE_OFFSET + 16);
HEAP32[(((_BZ2Decomp_Type)+(88))>>2)]=((_BZ2Decomp__doc__)|0);
HEAP32[(((_BZ2Decomp_Type)+(116))>>2)]=((_BZ2Decomp_methods)|0);
HEAP32[(((_BZ2Decomp_Type)+(120))>>2)]=((_BZ2Decomp_members)|0);
HEAP32[(((_BZ2Decomp_Type)+(148))>>2)]=((FUNCTION_TABLE_OFFSET + 30));
HEAP32[(((_BZ2Decomp_Type)+(152))>>2)]=(FUNCTION_TABLE_OFFSET + 52);
HEAP32[(((_BZ2Decomp_Type)+(156))>>2)]=(FUNCTION_TABLE_OFFSET + 2);
HEAP32[(((_BZ2Decomp_Type)+(160))>>2)]=(FUNCTION_TABLE_OFFSET + 32);
HEAP32[((_BZ2Comp_methods)>>2)]=((__str9)|0);
HEAP32[(((_BZ2Comp_methods)+(4))>>2)]=((FUNCTION_TABLE_OFFSET + 26));
HEAP32[(((_BZ2Comp_methods)+(12))>>2)]=((_BZ2Comp_compress__doc__)|0);
HEAP32[(((_BZ2Comp_methods)+(16))>>2)]=((__str31)|0);
HEAP32[(((_BZ2Comp_methods)+(20))>>2)]=((FUNCTION_TABLE_OFFSET + 64));
HEAP32[(((_BZ2Comp_methods)+(28))>>2)]=((_BZ2Comp_flush__doc__)|0);
HEAP32[((_BZ2Comp_init_kwlist)>>2)]=((__str22)|0);
HEAP32[(((_BZ2Comp_Type)+(12))>>2)]=((__str29)|0);
HEAP32[(((_BZ2Comp_Type)+(24))>>2)]=((FUNCTION_TABLE_OFFSET + 60));
HEAP32[(((_BZ2Comp_Type)+(72))>>2)]=(FUNCTION_TABLE_OFFSET + 24);
HEAP32[(((_BZ2Comp_Type)+(76))>>2)]=(FUNCTION_TABLE_OFFSET + 16);
HEAP32[(((_BZ2Comp_Type)+(88))>>2)]=((_BZ2Comp__doc__)|0);
HEAP32[(((_BZ2Comp_Type)+(116))>>2)]=((_BZ2Comp_methods)|0);
HEAP32[(((_BZ2Comp_Type)+(148))>>2)]=((FUNCTION_TABLE_OFFSET + 62));
HEAP32[(((_BZ2Comp_Type)+(152))>>2)]=(FUNCTION_TABLE_OFFSET + 52);
HEAP32[(((_BZ2Comp_Type)+(156))>>2)]=(FUNCTION_TABLE_OFFSET + 2);
HEAP32[(((_BZ2Comp_Type)+(160))>>2)]=(FUNCTION_TABLE_OFFSET + 32);
}
if (!awaitingMemoryInitializer) runPostSets();
FUNCTION_TABLE.push.apply(FUNCTION_TABLE, [0,0,_PyType_GenericNew,0,_BZ2File_seek,0,_BZ2File_init,0,_BZ2Decomp_dealloc,0,_bz2_compress
,0,_BZ2File_getiter,0,_BZ2Decomp_decompress,0,_PyObject_GenericSetAttr,0,_BZ2File_read,0,_BZ2File_iternext
,0,_BZ2File_get_newlines,0,_PyObject_GenericGetAttr,0,_BZ2Comp_compress,0,_BZ2File_writelines,0,_BZ2Decomp_init
,0,_PyObject_Free,0,_BZ2File_write,0,_BZ2File_exit,0,_BZ2File_readlines,0,_bz2_decompress
,0,_BZ2File_enter,0,_BZ2File_get_name,0,_BZ2File_dealloc,0,_BZ2File_get_mode,0,_BZ2File_get_closed
,0,_PyType_GenericAlloc,0,_BZ2File_close,0,_BZ2File_readline,0,_BZ2File_tell,0,_BZ2Comp_dealloc,0,_BZ2Comp_init,0,_BZ2Comp_flush,0]);
// EMSCRIPTEN_START_FUNCS
function _initbz2() {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $m;
      var $1=_PyType_Ready(_BZ2File_Type);
      var $2=(($1)|(0)) < 0;
      if ($2) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 10; break;
    case 3: 
      var $5=_PyType_Ready(_BZ2Comp_Type);
      var $6=(($5)|(0)) < 0;
      if ($6) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 10; break;
    case 5: 
      var $9=_PyType_Ready(_BZ2Decomp_Type);
      var $10=(($9)|(0)) < 0;
      if ($10) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 10; break;
    case 7: 
      var $13=_Py_InitModule4(((__str4)|0), ((_bz2_methods)|0), ((_bz2__doc__)|0), 0, 1013);
      $m=$13;
      var $14=$m;
      var $15=(($14)|(0))==0;
      if ($15) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 10; break;
    case 9: 
      var $18=$m;
      var $19=_PyString_FromString(((___author__)|0));
      var $20=_PyModule_AddObject($18, ((__str5)|0), $19);
      var $21=HEAP32[((((_BZ2File_Type)|0))>>2)];
      var $22=((($21)+(1))|0);
      HEAP32[((((_BZ2File_Type)|0))>>2)]=$22;
      var $23=$m;
      var $24=_PyModule_AddObject($23, ((__str6)|0), _BZ2File_Type);
      var $25=HEAP32[((((_BZ2Comp_Type)|0))>>2)];
      var $26=((($25)+(1))|0);
      HEAP32[((((_BZ2Comp_Type)|0))>>2)]=$26;
      var $27=$m;
      var $28=_PyModule_AddObject($27, ((__str7)|0), _BZ2Comp_Type);
      var $29=HEAP32[((((_BZ2Decomp_Type)|0))>>2)];
      var $30=((($29)+(1))|0);
      HEAP32[((((_BZ2Decomp_Type)|0))>>2)]=$30;
      var $31=$m;
      var $32=_PyModule_AddObject($31, ((__str8)|0), _BZ2Decomp_Type);
      label = 10; break;
    case 10: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_initbz2"] = _initbz2;
function _bz2_compress($self, $args, $kwargs) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 108)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $compresslevel=__stackBase__;
      var $action;
      var $pdata=(__stackBase__)+(4);
      var $input_left;
      var $output_size;
      var $ret=(__stackBase__)+(56);
      var $_bzs=(__stackBase__)+(60);
      var $bzs;
      var $bzerror;
      var $saved_next_out;
      var $buffer_left;
      $2=$self;
      $3=$args;
      $4=$kwargs;
      HEAP32[(($compresslevel)>>2)]=9;
      $output_size=0;
      HEAP32[(($ret)>>2)]=0;
      $bzs=$_bzs;
      var $5=$3;
      var $6=$4;
      var $7=_PyArg_ParseTupleAndKeywords($5, $6, ((__str23)|0), ((_bz2_compress_kwlist)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$pdata,HEAP32[(((tempInt)+(4))>>2)]=$compresslevel,tempInt));
      var $8=(($7)|(0))!=0;
      if ($8) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 52; break;
    case 3: 
      var $11=HEAP32[(($compresslevel)>>2)];
      var $12=(($11)|(0)) < 1;
      if ($12) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $14=HEAP32[(($compresslevel)>>2)];
      var $15=(($14)|(0)) > 9;
      if ($15) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $17=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($17, ((__str24)|0));
      _PyBuffer_Release($pdata);
      $1=0;
      label = 52; break;
    case 6: 
      var $19=_PyString_FromStringAndSize(0, 8192);
      HEAP32[(($ret)>>2)]=$19;
      var $20=HEAP32[(($ret)>>2)];
      var $21=(($20)|(0))!=0;
      if ($21) { label = 8; break; } else { label = 7; break; }
    case 7: 
      _PyBuffer_Release($pdata);
      $1=0;
      label = 52; break;
    case 8: 
      var $24=$bzs;
      var $25=$24;
      _memset($25, 0, 48);
      var $26=(($pdata)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$bzs;
      var $29=(($28)|0);
      HEAP32[(($29)>>2)]=$27;
      var $30=(($pdata+8)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31)>>>(0)) < 4294967295;
      if ($32) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $34=(($pdata+8)|0);
      var $35=HEAP32[(($34)>>2)];
      var $38 = $35;label = 11; break;
    case 10: 
      var $38 = -1;label = 11; break;
    case 11: 
      var $38;
      var $39=$bzs;
      var $40=(($39+4)|0);
      HEAP32[(($40)>>2)]=$38;
      var $41=(($pdata+8)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=$bzs;
      var $44=(($43+4)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=((($42)-($45))|0);
      $input_left=$46;
      var $47=HEAP32[(($ret)>>2)];
      var $48=$47;
      var $49=(($48+20)|0);
      var $50=(($49)|0);
      var $51=$bzs;
      var $52=(($51+16)|0);
      HEAP32[(($52)>>2)]=$50;
      var $53=HEAP32[(($ret)>>2)];
      var $54=$53;
      var $55=(($54+8)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=$bzs;
      var $58=(($57+20)|0);
      HEAP32[(($58)>>2)]=$56;
      var $59=$bzs;
      var $60=HEAP32[(($compresslevel)>>2)];
      var $61=_BZ2_bzCompressInit($59, $60, 0, 0);
      $bzerror=$61;
      var $62=$bzerror;
      var $63=(($62)|(0))!=0;
      if ($63) { label = 12; break; } else { label = 18; break; }
    case 12: 
      var $65=$bzerror;
      var $66=_Util_CatchBZ2Error($65);
      _PyBuffer_Release($pdata);
      label = 13; break;
    case 13: 
      var $68=HEAP32[(($ret)>>2)];
      var $69=(($68)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=((($70)-(1))|0);
      HEAP32[(($69)>>2)]=$71;
      var $72=(($71)|(0))!=0;
      if ($72) { label = 14; break; } else { label = 15; break; }
    case 14: 
      label = 16; break;
    case 15: 
      var $75=HEAP32[(($ret)>>2)];
      var $76=(($75+4)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=(($77+24)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=HEAP32[(($ret)>>2)];
      FUNCTION_TABLE[$79]($80);
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      $1=0;
      label = 52; break;
    case 18: 
      var $84=$input_left;
      var $85=(($84)>>>(0)) > 0;
      var $86=$85 ? 0 : 2;
      $action=$86;
      label = 19; break;
    case 19: 
      var $88=$bzs;
      var $89=(($88+16)|0);
      var $90=HEAP32[(($89)>>2)];
      $saved_next_out=$90;
      var $91=$bzs;
      var $92=$action;
      var $93=_BZ2_bzCompress($91, $92);
      $bzerror=$93;
      var $94=$bzs;
      var $95=(($94+16)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=$saved_next_out;
      var $98=$96;
      var $99=$97;
      var $100=((($98)-($99))|0);
      var $101=$output_size;
      var $102=((($101)+($100))|0);
      $output_size=$102;
      var $103=$bzerror;
      var $104=(($103)|(0))==4;
      if ($104) { label = 20; break; } else { label = 21; break; }
    case 20: 
      label = 49; break;
    case 21: 
      var $107=$bzerror;
      var $108=(($107)|(0))!=1;
      if ($108) { label = 22; break; } else { label = 29; break; }
    case 22: 
      var $110=$bzerror;
      var $111=(($110)|(0))!=3;
      if ($111) { label = 23; break; } else { label = 29; break; }
    case 23: 
      var $113=$bzs;
      var $114=_BZ2_bzCompressEnd($113);
      var $115=$bzerror;
      var $116=_Util_CatchBZ2Error($115);
      _PyBuffer_Release($pdata);
      label = 24; break;
    case 24: 
      var $118=HEAP32[(($ret)>>2)];
      var $119=(($118)|0);
      var $120=HEAP32[(($119)>>2)];
      var $121=((($120)-(1))|0);
      HEAP32[(($119)>>2)]=$121;
      var $122=(($121)|(0))!=0;
      if ($122) { label = 25; break; } else { label = 26; break; }
    case 25: 
      label = 27; break;
    case 26: 
      var $125=HEAP32[(($ret)>>2)];
      var $126=(($125+4)|0);
      var $127=HEAP32[(($126)>>2)];
      var $128=(($127+24)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=HEAP32[(($ret)>>2)];
      FUNCTION_TABLE[$129]($130);
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      $1=0;
      label = 52; break;
    case 29: 
      label = 30; break;
    case 30: 
      var $135=$action;
      var $136=(($135)|(0))==0;
      if ($136) { label = 31; break; } else { label = 39; break; }
    case 31: 
      var $138=$bzs;
      var $139=(($138+4)|0);
      var $140=HEAP32[(($139)>>2)];
      var $141=(($140)|(0))==0;
      if ($141) { label = 32; break; } else { label = 39; break; }
    case 32: 
      var $143=$input_left;
      var $144=(($143)|(0))==0;
      if ($144) { label = 33; break; } else { label = 34; break; }
    case 33: 
      $action=2;
      label = 38; break;
    case 34: 
      var $147=$input_left;
      var $148=(($147)>>>(0)) < 4294967295;
      if ($148) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $150=$input_left;
      var $153 = $150;label = 37; break;
    case 36: 
      var $153 = -1;label = 37; break;
    case 37: 
      var $153;
      var $154=$bzs;
      var $155=(($154+4)|0);
      HEAP32[(($155)>>2)]=$153;
      var $156=$bzs;
      var $157=(($156+4)|0);
      var $158=HEAP32[(($157)>>2)];
      var $159=$input_left;
      var $160=((($159)-($158))|0);
      $input_left=$160;
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      var $163=$bzs;
      var $164=(($163+20)|0);
      var $165=HEAP32[(($164)>>2)];
      var $166=(($165)|(0))==0;
      if ($166) { label = 40; break; } else { label = 48; break; }
    case 40: 
      var $168=HEAP32[(($ret)>>2)];
      var $169=$168;
      var $170=(($169+8)|0);
      var $171=HEAP32[(($170)>>2)];
      var $172=$output_size;
      var $173=((($171)-($172))|0);
      $buffer_left=$173;
      var $174=$buffer_left;
      var $175=(($174)|(0))==0;
      if ($175) { label = 41; break; } else { label = 44; break; }
    case 41: 
      var $177=_Util_GrowBuffer($ret);
      var $178=(($177)|(0)) < 0;
      if ($178) { label = 42; break; } else { label = 43; break; }
    case 42: 
      var $180=$bzs;
      var $181=_BZ2_bzCompressEnd($180);
      _PyBuffer_Release($pdata);
      $1=0;
      label = 52; break;
    case 43: 
      var $183=HEAP32[(($ret)>>2)];
      var $184=$183;
      var $185=(($184+20)|0);
      var $186=(($185)|0);
      var $187=$output_size;
      var $188=(($186+$187)|0);
      var $189=$bzs;
      var $190=(($189+16)|0);
      HEAP32[(($190)>>2)]=$188;
      var $191=HEAP32[(($ret)>>2)];
      var $192=$191;
      var $193=(($192+8)|0);
      var $194=HEAP32[(($193)>>2)];
      var $195=$output_size;
      var $196=((($194)-($195))|0);
      $buffer_left=$196;
      label = 44; break;
    case 44: 
      var $198=$buffer_left;
      var $199=(($198)>>>(0)) < 4294967295;
      if ($199) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $201=$buffer_left;
      var $204 = $201;label = 47; break;
    case 46: 
      var $204 = -1;label = 47; break;
    case 47: 
      var $204;
      var $205=$bzs;
      var $206=(($205+20)|0);
      HEAP32[(($206)>>2)]=$204;
      label = 48; break;
    case 48: 
      label = 19; break;
    case 49: 
      var $209=$output_size;
      var $210=HEAP32[(($ret)>>2)];
      var $211=$210;
      var $212=(($211+8)|0);
      var $213=HEAP32[(($212)>>2)];
      var $214=(($209)|(0))!=(($213)|(0));
      if ($214) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $216=$output_size;
      var $217=__PyString_Resize($ret, $216);
      label = 51; break;
    case 51: 
      var $219=$bzs;
      var $220=_BZ2_bzCompressEnd($219);
      _PyBuffer_Release($pdata);
      var $221=HEAP32[(($ret)>>2)];
      $1=$221;
      label = 52; break;
    case 52: 
      var $223=$1;
      STACKTOP = __stackBase__;
      return $223;
    default: assert(0, "bad label: " + label);
  }
}
function _Util_UnivNewlineRead($bzerror, $stream, $buf, $n, $f) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $dst;
      var $newlinetypes;
      var $skipnextlf;
      var $nread;
      var $shortread;
      var $src;
      var $c;
      $2=$bzerror;
      $3=$stream;
      $4=$buf;
      $5=$n;
      $6=$f;
      var $7=$4;
      $dst=$7;
      var $8=$4;
      var $9=(($8)|(0))!=0;
      if ($9) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      ___assert_func(((__str)|0), 340, ((___func___Util_UnivNewlineRead)|0), ((__str1)|0));
      throw "Reached an unreachable!";
      label = 4; break;
    case 4: 
      var $14=$3;
      var $15=(($14)|(0))!=0;
      if ($15) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 7; break;
    case 6: 
      ___assert_func(((__str)|0), 341, ((___func___Util_UnivNewlineRead)|0), ((__str2)|0));
      throw "Reached an unreachable!";
      label = 7; break;
    case 7: 
      var $20=$6;
      var $21=(($20+28)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22)|(0))!=0;
      if ($23) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $25=$2;
      var $26=$3;
      var $27=$4;
      var $28=$5;
      var $29=_BZ2_bzRead($25, $26, $27, $28);
      $1=$29;
      label = 36; break;
    case 9: 
      var $31=$6;
      var $32=(($31+32)|0);
      var $33=HEAP32[(($32)>>2)];
      $newlinetypes=$33;
      var $34=$6;
      var $35=(($34+36)|0);
      var $36=HEAP32[(($35)>>2)];
      $skipnextlf=$36;
      label = 10; break;
    case 10: 
      var $38=$5;
      var $39=(($38)|(0))!=0;
      if ($39) { label = 11; break; } else { label = 35; break; }
    case 11: 
      var $41=$dst;
      $src=$41;
      var $42=$2;
      var $43=$3;
      var $44=$dst;
      var $45=$5;
      var $46=_BZ2_bzRead($42, $43, $44, $45);
      $nread=$46;
      var $47=$nread;
      var $48=$5;
      var $49=(($47)>>>(0)) <= (($48)>>>(0));
      if ($49) { label = 12; break; } else { label = 13; break; }
    case 12: 
      label = 14; break;
    case 13: 
      ___assert_func(((__str)|0), 358, ((___func___Util_UnivNewlineRead)|0), ((__str3)|0));
      throw "Reached an unreachable!";
      label = 14; break;
    case 14: 
      var $54=$nread;
      var $55=$5;
      var $56=((($55)-($54))|0);
      $5=$56;
      var $57=$5;
      var $58=(($57)|(0))!=0;
      var $59=(($58)&(1));
      $shortread=$59;
      label = 15; break;
    case 15: 
      var $61=$nread;
      var $62=((($61)-(1))|0);
      $nread=$62;
      var $63=(($61)|(0))!=0;
      if ($63) { label = 16; break; } else { label = 29; break; }
    case 16: 
      var $65=$src;
      var $66=(($65+1)|0);
      $src=$66;
      var $67=HEAP8[($65)];
      $c=$67;
      var $68=$c;
      var $69=(($68 << 24) >> 24);
      var $70=(($69)|(0))==13;
      if ($70) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $72=$dst;
      var $73=(($72+1)|0);
      $dst=$73;
      HEAP8[($72)]=10;
      $skipnextlf=1;
      label = 28; break;
    case 18: 
      var $75=$skipnextlf;
      var $76=(($75)|(0))!=0;
      if ($76) { label = 19; break; } else { label = 21; break; }
    case 19: 
      var $78=$c;
      var $79=(($78 << 24) >> 24);
      var $80=(($79)|(0))==10;
      if ($80) { label = 20; break; } else { label = 21; break; }
    case 20: 
      $skipnextlf=0;
      var $82=$newlinetypes;
      var $83=$82 | 4;
      $newlinetypes=$83;
      var $84=$5;
      var $85=((($84)+(1))|0);
      $5=$85;
      label = 27; break;
    case 21: 
      var $87=$c;
      var $88=(($87 << 24) >> 24);
      var $89=(($88)|(0))==10;
      if ($89) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $91=$newlinetypes;
      var $92=$91 | 2;
      $newlinetypes=$92;
      label = 26; break;
    case 23: 
      var $94=$skipnextlf;
      var $95=(($94)|(0))!=0;
      if ($95) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $97=$newlinetypes;
      var $98=$97 | 1;
      $newlinetypes=$98;
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $101=$c;
      var $102=$dst;
      var $103=(($102+1)|0);
      $dst=$103;
      HEAP8[($102)]=$101;
      $skipnextlf=0;
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      label = 15; break;
    case 29: 
      var $107=$shortread;
      var $108=(($107)|(0))!=0;
      if ($108) { label = 30; break; } else { label = 34; break; }
    case 30: 
      var $110=$skipnextlf;
      var $111=(($110)|(0))!=0;
      if ($111) { label = 31; break; } else { label = 33; break; }
    case 31: 
      var $113=$2;
      var $114=HEAP32[(($113)>>2)];
      var $115=(($114)|(0))==4;
      if ($115) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $117=$newlinetypes;
      var $118=$117 | 1;
      $newlinetypes=$118;
      label = 33; break;
    case 33: 
      label = 35; break;
    case 34: 
      label = 10; break;
    case 35: 
      var $122=$newlinetypes;
      var $123=$6;
      var $124=(($123+32)|0);
      HEAP32[(($124)>>2)]=$122;
      var $125=$skipnextlf;
      var $126=$6;
      var $127=(($126+36)|0);
      HEAP32[(($127)>>2)]=$125;
      var $128=$dst;
      var $129=$4;
      var $130=$128;
      var $131=$129;
      var $132=((($130)-($131))|0);
      $1=$132;
      label = 36; break;
    case 36: 
      var $134=$1;
      return $134;
    default: assert(0, "bad label: " + label);
  }
}
function _Util_NewBufferSize($currentsize) {
  var label = 0;
  var $1;
  $1=$currentsize;
  var $2=$1;
  var $3=$1;
  var $4=$3 >>> 3;
  var $5=((($2)+($4))|0);
  var $6=((($5)+(6))|0);
  return $6;
}
function _bz2_decompress($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 104)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $pdata=__stackBase__;
      var $input_left;
      var $output_size;
      var $ret=(__stackBase__)+(52);
      var $_bzs=(__stackBase__)+(56);
      var $bzs;
      var $bzerror;
      var $saved_next_out;
      var $buffer_left;
      $2=$self;
      $3=$args;
      $output_size=0;
      $bzs=$_bzs;
      var $4=$3;
      var $5=_PyArg_ParseTuple($4, ((__str11)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$pdata,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 53; break;
    case 3: 
      var $9=(($pdata+8)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|(0))==0;
      if ($11) { label = 4; break; } else { label = 5; break; }
    case 4: 
      _PyBuffer_Release($pdata);
      var $13=_PyString_FromString(((__str12)|0));
      $1=$13;
      label = 53; break;
    case 5: 
      var $15=_PyString_FromStringAndSize(0, 8192);
      HEAP32[(($ret)>>2)]=$15;
      var $16=HEAP32[(($ret)>>2)];
      var $17=(($16)|(0))!=0;
      if ($17) { label = 7; break; } else { label = 6; break; }
    case 6: 
      _PyBuffer_Release($pdata);
      $1=0;
      label = 53; break;
    case 7: 
      var $20=$bzs;
      var $21=$20;
      _memset($21, 0, 48);
      var $22=(($pdata)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=$bzs;
      var $25=(($24)|0);
      HEAP32[(($25)>>2)]=$23;
      var $26=(($pdata+8)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27)>>>(0)) < 4294967295;
      if ($28) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $30=(($pdata+8)|0);
      var $31=HEAP32[(($30)>>2)];
      var $34 = $31;label = 10; break;
    case 9: 
      var $34 = -1;label = 10; break;
    case 10: 
      var $34;
      var $35=$bzs;
      var $36=(($35+4)|0);
      HEAP32[(($36)>>2)]=$34;
      var $37=(($pdata+8)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=$bzs;
      var $40=(($39+4)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=((($38)-($41))|0);
      $input_left=$42;
      var $43=HEAP32[(($ret)>>2)];
      var $44=$43;
      var $45=(($44+20)|0);
      var $46=(($45)|0);
      var $47=$bzs;
      var $48=(($47+16)|0);
      HEAP32[(($48)>>2)]=$46;
      var $49=HEAP32[(($ret)>>2)];
      var $50=$49;
      var $51=(($50+8)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=$bzs;
      var $54=(($53+20)|0);
      HEAP32[(($54)>>2)]=$52;
      var $55=$bzs;
      var $56=_BZ2_bzDecompressInit($55, 0, 0);
      $bzerror=$56;
      var $57=$bzerror;
      var $58=(($57)|(0))!=0;
      if ($58) { label = 11; break; } else { label = 17; break; }
    case 11: 
      var $60=$bzerror;
      var $61=_Util_CatchBZ2Error($60);
      label = 12; break;
    case 12: 
      var $63=HEAP32[(($ret)>>2)];
      var $64=(($63)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=((($65)-(1))|0);
      HEAP32[(($64)>>2)]=$66;
      var $67=(($66)|(0))!=0;
      if ($67) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 15; break;
    case 14: 
      var $70=HEAP32[(($ret)>>2)];
      var $71=(($70+4)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=(($72+24)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=HEAP32[(($ret)>>2)];
      FUNCTION_TABLE[$74]($75);
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      _PyBuffer_Release($pdata);
      $1=0;
      label = 53; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $80=$bzs;
      var $81=(($80+16)|0);
      var $82=HEAP32[(($81)>>2)];
      $saved_next_out=$82;
      var $83=$bzs;
      var $84=_BZ2_bzDecompress($83);
      $bzerror=$84;
      var $85=$bzs;
      var $86=(($85+16)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=$saved_next_out;
      var $89=$87;
      var $90=$88;
      var $91=((($89)-($90))|0);
      var $92=$output_size;
      var $93=((($92)+($91))|0);
      $output_size=$93;
      var $94=$bzerror;
      var $95=(($94)|(0))==4;
      if ($95) { label = 19; break; } else { label = 20; break; }
    case 19: 
      label = 50; break;
    case 20: 
      var $98=$bzerror;
      var $99=(($98)|(0))!=0;
      if ($99) { label = 21; break; } else { label = 27; break; }
    case 21: 
      var $101=$bzs;
      var $102=_BZ2_bzDecompressEnd($101);
      var $103=$bzerror;
      var $104=_Util_CatchBZ2Error($103);
      _PyBuffer_Release($pdata);
      label = 22; break;
    case 22: 
      var $106=HEAP32[(($ret)>>2)];
      var $107=(($106)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=((($108)-(1))|0);
      HEAP32[(($107)>>2)]=$109;
      var $110=(($109)|(0))!=0;
      if ($110) { label = 23; break; } else { label = 24; break; }
    case 23: 
      label = 25; break;
    case 24: 
      var $113=HEAP32[(($ret)>>2)];
      var $114=(($113+4)|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=(($115+24)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=HEAP32[(($ret)>>2)];
      FUNCTION_TABLE[$117]($118);
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      $1=0;
      label = 53; break;
    case 27: 
      label = 28; break;
    case 28: 
      var $123=$bzs;
      var $124=(($123+4)|0);
      var $125=HEAP32[(($124)>>2)];
      var $126=(($125)|(0))==0;
      if ($126) { label = 29; break; } else { label = 40; break; }
    case 29: 
      var $128=$input_left;
      var $129=(($128)|(0))==0;
      if ($129) { label = 30; break; } else { label = 36; break; }
    case 30: 
      var $131=$bzs;
      var $132=_BZ2_bzDecompressEnd($131);
      var $133=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($133, ((__str13)|0));
      _PyBuffer_Release($pdata);
      label = 31; break;
    case 31: 
      var $135=HEAP32[(($ret)>>2)];
      var $136=(($135)|0);
      var $137=HEAP32[(($136)>>2)];
      var $138=((($137)-(1))|0);
      HEAP32[(($136)>>2)]=$138;
      var $139=(($138)|(0))!=0;
      if ($139) { label = 32; break; } else { label = 33; break; }
    case 32: 
      label = 34; break;
    case 33: 
      var $142=HEAP32[(($ret)>>2)];
      var $143=(($142+4)|0);
      var $144=HEAP32[(($143)>>2)];
      var $145=(($144+24)|0);
      var $146=HEAP32[(($145)>>2)];
      var $147=HEAP32[(($ret)>>2)];
      FUNCTION_TABLE[$146]($147);
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      $1=0;
      label = 53; break;
    case 36: 
      var $151=$input_left;
      var $152=(($151)>>>(0)) < 4294967295;
      if ($152) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $154=$input_left;
      var $157 = $154;label = 39; break;
    case 38: 
      var $157 = -1;label = 39; break;
    case 39: 
      var $157;
      var $158=$bzs;
      var $159=(($158+4)|0);
      HEAP32[(($159)>>2)]=$157;
      var $160=$bzs;
      var $161=(($160+4)|0);
      var $162=HEAP32[(($161)>>2)];
      var $163=$input_left;
      var $164=((($163)-($162))|0);
      $input_left=$164;
      label = 40; break;
    case 40: 
      var $166=$bzs;
      var $167=(($166+20)|0);
      var $168=HEAP32[(($167)>>2)];
      var $169=(($168)|(0))==0;
      if ($169) { label = 41; break; } else { label = 49; break; }
    case 41: 
      var $171=HEAP32[(($ret)>>2)];
      var $172=$171;
      var $173=(($172+8)|0);
      var $174=HEAP32[(($173)>>2)];
      var $175=$output_size;
      var $176=((($174)-($175))|0);
      $buffer_left=$176;
      var $177=$buffer_left;
      var $178=(($177)|(0))==0;
      if ($178) { label = 42; break; } else { label = 45; break; }
    case 42: 
      var $180=_Util_GrowBuffer($ret);
      var $181=(($180)|(0)) < 0;
      if ($181) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $183=$bzs;
      var $184=_BZ2_bzDecompressEnd($183);
      _PyBuffer_Release($pdata);
      $1=0;
      label = 53; break;
    case 44: 
      var $186=HEAP32[(($ret)>>2)];
      var $187=$186;
      var $188=(($187+20)|0);
      var $189=(($188)|0);
      var $190=$output_size;
      var $191=(($189+$190)|0);
      var $192=$bzs;
      var $193=(($192+16)|0);
      HEAP32[(($193)>>2)]=$191;
      var $194=HEAP32[(($ret)>>2)];
      var $195=$194;
      var $196=(($195+8)|0);
      var $197=HEAP32[(($196)>>2)];
      var $198=$output_size;
      var $199=((($197)-($198))|0);
      $buffer_left=$199;
      label = 45; break;
    case 45: 
      var $201=$buffer_left;
      var $202=(($201)>>>(0)) < 4294967295;
      if ($202) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $204=$buffer_left;
      var $207 = $204;label = 48; break;
    case 47: 
      var $207 = -1;label = 48; break;
    case 48: 
      var $207;
      var $208=$bzs;
      var $209=(($208+20)|0);
      HEAP32[(($209)>>2)]=$207;
      label = 49; break;
    case 49: 
      label = 18; break;
    case 50: 
      var $212=$output_size;
      var $213=HEAP32[(($ret)>>2)];
      var $214=$213;
      var $215=(($214+8)|0);
      var $216=HEAP32[(($215)>>2)];
      var $217=(($212)|(0))!=(($216)|(0));
      if ($217) { label = 51; break; } else { label = 52; break; }
    case 51: 
      var $219=$output_size;
      var $220=__PyString_Resize($ret, $219);
      label = 52; break;
    case 52: 
      var $222=$bzs;
      var $223=_BZ2_bzDecompressEnd($222);
      _PyBuffer_Release($pdata);
      var $224=HEAP32[(($ret)>>2)];
      $1=$224;
      label = 53; break;
    case 53: 
      var $226=$1;
      STACKTOP = __stackBase__;
      return $226;
    default: assert(0, "bad label: " + label);
  }
}
function _Util_CatchBZ2Error($bzerror) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $ret;
      $1=$bzerror;
      $ret=0;
      var $2=$1;
      if ((($2)|(0))==0 | (($2)|(0))==4) {
        label = 2; break;
      }
      else if ((($2)|(0))==-9) {
        label = 3; break;
      }
      else if ((($2)|(0))==-2) {
        label = 4; break;
      }
      else if ((($2)|(0))==-3) {
        label = 5; break;
      }
      else if ((($2)|(0))==-4 | (($2)|(0))==-5) {
        label = 6; break;
      }
      else if ((($2)|(0))==-6) {
        label = 7; break;
      }
      else if ((($2)|(0))==-7) {
        label = 8; break;
      }
      else if ((($2)|(0))==-1) {
        label = 9; break;
      }
      else {
      label = 10; break;
      }
    case 2: 
      label = 10; break;
    case 3: 
      var $5=HEAP32[((_PyExc_SystemError)>>2)];
      _PyErr_SetString($5, ((__str15)|0));
      $ret=1;
      label = 10; break;
    case 4: 
      var $7=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($7, ((__str16)|0));
      $ret=1;
      label = 10; break;
    case 5: 
      var $9=_PyErr_NoMemory();
      $ret=1;
      label = 10; break;
    case 6: 
      var $11=HEAP32[((_PyExc_IOError)>>2)];
      _PyErr_SetString($11, ((__str17)|0));
      $ret=1;
      label = 10; break;
    case 7: 
      var $13=HEAP32[((_PyExc_IOError)>>2)];
      _PyErr_SetString($13, ((__str18)|0));
      $ret=1;
      label = 10; break;
    case 8: 
      var $15=HEAP32[((_PyExc_EOFError)>>2)];
      _PyErr_SetString($15, ((__str19)|0));
      $ret=1;
      label = 10; break;
    case 9: 
      var $17=HEAP32[((_PyExc_RuntimeError)>>2)];
      _PyErr_SetString($17, ((__str20)|0));
      $ret=1;
      label = 10; break;
    case 10: 
      var $19=$ret;
      return $19;
    default: assert(0, "bad label: " + label);
  }
}
function _Util_GrowBuffer($buf) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $size;
      var $new_size;
      $2=$buf;
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $5=$4;
      var $6=(($5+8)|0);
      var $7=HEAP32[(($6)>>2)];
      $size=$7;
      var $8=$size;
      var $9=_Util_NewBufferSize($8);
      $new_size=$9;
      var $10=$new_size;
      var $11=$size;
      var $12=(($10)>>>(0)) > (($11)>>>(0));
      if ($12) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $14=$2;
      var $15=$new_size;
      var $16=__PyString_Resize($14, $15);
      $1=$16;
      label = 4; break;
    case 3: 
      var $18=HEAP32[((_PyExc_OverflowError)>>2)];
      _PyErr_SetString($18, ((__str14)|0));
      $1=-1;
      label = 4; break;
    case 4: 
      var $20=$1;
      return $20;
    default: assert(0, "bad label: " + label);
  }
}
function _BZ2Decomp_dealloc($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$self;
      label = 2; break;
    case 2: 
      var $3=$1;
      var $4=(($3+60)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))==0;
      if ($6) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 10; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $10=$1;
      var $11=(($10+60)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=((($14)-(1))|0);
      HEAP32[(($13)>>2)]=$15;
      var $16=(($15)|(0))!=0;
      if ($16) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 8; break;
    case 7: 
      var $19=$1;
      var $20=(($19+60)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21+4)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+24)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=$1;
      var $27=(($26+60)|0);
      var $28=HEAP32[(($27)>>2)];
      FUNCTION_TABLE[$25]($28);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $33=$1;
      var $34=(($33+8)|0);
      var $35=_BZ2_bzDecompressEnd($34);
      var $36=$1;
      var $37=$36;
      var $38=(($37+4)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39+160)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=$1;
      var $43=$42;
      var $44=$43;
      FUNCTION_TABLE[$41]($44);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _BZ2Decomp_init($self, $args, $kwargs) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $bzerror;
      var $_py_tmp;
      $2=$self;
      $3=$args;
      $4=$kwargs;
      var $5=$3;
      var $6=_PyArg_ParseTuple($5, ((__str26)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $7=(($6)|(0))!=0;
      if ($7) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=-1;
      label = 18; break;
    case 3: 
      var $10=_PyString_FromString(((__str12)|0));
      var $11=$2;
      var $12=(($11+60)|0);
      HEAP32[(($12)>>2)]=$10;
      var $13=$2;
      var $14=(($13+60)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15)|(0))!=0;
      if ($16) { label = 5; break; } else { label = 4; break; }
    case 4: 
      label = 8; break;
    case 5: 
      var $19=$2;
      var $20=(($19+8)|0);
      var $21=$20;
      _memset($21, 0, 48);
      var $22=$2;
      var $23=(($22+8)|0);
      var $24=_BZ2_bzDecompressInit($23, 0, 0);
      $bzerror=$24;
      var $25=$bzerror;
      var $26=(($25)|(0))!=0;
      if ($26) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $28=$bzerror;
      var $29=_Util_CatchBZ2Error($28);
      label = 8; break;
    case 7: 
      var $31=$2;
      var $32=(($31+56)|0);
      HEAP32[(($32)>>2)]=1;
      $1=0;
      label = 18; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $35=$2;
      var $36=(($35+60)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37)|(0))!=0;
      if ($38) { label = 10; break; } else { label = 16; break; }
    case 10: 
      var $40=$2;
      var $41=(($40+60)|0);
      var $42=HEAP32[(($41)>>2)];
      $_py_tmp=$42;
      var $43=$2;
      var $44=(($43+60)|0);
      HEAP32[(($44)>>2)]=0;
      label = 11; break;
    case 11: 
      var $46=$_py_tmp;
      var $47=(($46)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=((($48)-(1))|0);
      HEAP32[(($47)>>2)]=$49;
      var $50=(($49)|(0))!=0;
      if ($50) { label = 12; break; } else { label = 13; break; }
    case 12: 
      label = 14; break;
    case 13: 
      var $53=$_py_tmp;
      var $54=(($53+4)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=(($55+24)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=$_py_tmp;
      FUNCTION_TABLE[$57]($58);
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      $1=-1;
      label = 18; break;
    case 18: 
      var $64=$1;
      STACKTOP = __stackBase__;
      return $64;
    default: assert(0, "bad label: " + label);
  }
}
function _BZ2Decomp_decompress($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $pdata=__stackBase__;
      var $input_left;
      var $output_size;
      var $ret=(__stackBase__)+(52);
      var $bzs;
      var $bzerror;
      var $saved_next_out;
      var $buffer_left;
      $2=$self;
      $3=$args;
      $output_size=0;
      HEAP32[(($ret)>>2)]=0;
      var $4=$2;
      var $5=(($4+8)|0);
      $bzs=$5;
      var $6=$3;
      var $7=_PyArg_ParseTuple($6, ((__str11)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$pdata,tempInt));
      var $8=(($7)|(0))!=0;
      if ($8) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 57; break;
    case 3: 
      var $11=$2;
      var $12=(($11+56)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13)|(0))!=0;
      if ($14) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $16=HEAP32[((_PyExc_EOFError)>>2)];
      _PyErr_SetString($16, ((__str28)|0));
      label = 46; break;
    case 5: 
      var $18=_PyString_FromStringAndSize(0, 8192);
      HEAP32[(($ret)>>2)]=$18;
      var $19=HEAP32[(($ret)>>2)];
      var $20=(($19)|(0))!=0;
      if ($20) { label = 7; break; } else { label = 6; break; }
    case 6: 
      label = 46; break;
    case 7: 
      var $23=(($pdata)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=$bzs;
      var $26=(($25)|0);
      HEAP32[(($26)>>2)]=$24;
      var $27=(($pdata+8)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28)>>>(0)) < 4294967295;
      if ($29) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $31=(($pdata+8)|0);
      var $32=HEAP32[(($31)>>2)];
      var $35 = $32;label = 10; break;
    case 9: 
      var $35 = -1;label = 10; break;
    case 10: 
      var $35;
      var $36=$bzs;
      var $37=(($36+4)|0);
      HEAP32[(($37)>>2)]=$35;
      var $38=(($pdata+8)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=$bzs;
      var $41=(($40+4)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=((($39)-($42))|0);
      $input_left=$43;
      var $44=HEAP32[(($ret)>>2)];
      var $45=$44;
      var $46=(($45+20)|0);
      var $47=(($46)|0);
      var $48=$bzs;
      var $49=(($48+16)|0);
      HEAP32[(($49)>>2)]=$47;
      var $50=HEAP32[(($ret)>>2)];
      var $51=$50;
      var $52=(($51+8)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=$bzs;
      var $55=(($54+20)|0);
      HEAP32[(($55)>>2)]=$53;
      label = 11; break;
    case 11: 
      var $57=$bzs;
      var $58=(($57+16)|0);
      var $59=HEAP32[(($58)>>2)];
      $saved_next_out=$59;
      var $60=$bzs;
      var $61=_BZ2_bzDecompress($60);
      $bzerror=$61;
      var $62=$bzs;
      var $63=(($62+16)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=$saved_next_out;
      var $66=$64;
      var $67=$65;
      var $68=((($66)-($67))|0);
      var $69=$output_size;
      var $70=((($69)+($68))|0);
      $output_size=$70;
      var $71=$bzerror;
      var $72=(($71)|(0))==4;
      if ($72) { label = 12; break; } else { label = 22; break; }
    case 12: 
      var $74=$2;
      var $75=(($74+56)|0);
      HEAP32[(($75)>>2)]=0;
      var $76=$bzs;
      var $77=(($76+4)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=$input_left;
      var $80=((($79)+($78))|0);
      $input_left=$80;
      var $81=$input_left;
      var $82=(($81)|(0))!=0;
      if ($82) { label = 13; break; } else { label = 21; break; }
    case 13: 
      label = 14; break;
    case 14: 
      var $85=$2;
      var $86=(($85+60)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=(($87)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=((($89)-(1))|0);
      HEAP32[(($88)>>2)]=$90;
      var $91=(($90)|(0))!=0;
      if ($91) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 17; break;
    case 16: 
      var $94=$2;
      var $95=(($94+60)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=(($96+4)|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=(($98+24)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=$2;
      var $102=(($101+60)|0);
      var $103=HEAP32[(($102)>>2)];
      FUNCTION_TABLE[$100]($103);
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $106=$bzs;
      var $107=(($106)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=$input_left;
      var $110=_PyString_FromStringAndSize($108, $109);
      var $111=$2;
      var $112=(($111+60)|0);
      HEAP32[(($112)>>2)]=$110;
      var $113=$2;
      var $114=(($113+60)|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=(($115)|(0))==0;
      if ($116) { label = 19; break; } else { label = 20; break; }
    case 19: 
      label = 46; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 41; break;
    case 22: 
      var $121=$bzerror;
      var $122=(($121)|(0))!=0;
      if ($122) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $124=$bzerror;
      var $125=_Util_CatchBZ2Error($124);
      label = 46; break;
    case 24: 
      var $127=$bzs;
      var $128=(($127+4)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=(($129)|(0))==0;
      if ($130) { label = 25; break; } else { label = 31; break; }
    case 25: 
      var $132=$input_left;
      var $133=(($132)|(0))==0;
      if ($133) { label = 26; break; } else { label = 27; break; }
    case 26: 
      label = 41; break;
    case 27: 
      var $136=$input_left;
      var $137=(($136)>>>(0)) < 4294967295;
      if ($137) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $139=$input_left;
      var $142 = $139;label = 30; break;
    case 29: 
      var $142 = -1;label = 30; break;
    case 30: 
      var $142;
      var $143=$bzs;
      var $144=(($143+4)|0);
      HEAP32[(($144)>>2)]=$142;
      var $145=$bzs;
      var $146=(($145+4)|0);
      var $147=HEAP32[(($146)>>2)];
      var $148=$input_left;
      var $149=((($148)-($147))|0);
      $input_left=$149;
      label = 31; break;
    case 31: 
      var $151=$bzs;
      var $152=(($151+20)|0);
      var $153=HEAP32[(($152)>>2)];
      var $154=(($153)|(0))==0;
      if ($154) { label = 32; break; } else { label = 40; break; }
    case 32: 
      var $156=HEAP32[(($ret)>>2)];
      var $157=$156;
      var $158=(($157+8)|0);
      var $159=HEAP32[(($158)>>2)];
      var $160=$output_size;
      var $161=((($159)-($160))|0);
      $buffer_left=$161;
      var $162=$buffer_left;
      var $163=(($162)|(0))==0;
      if ($163) { label = 33; break; } else { label = 36; break; }
    case 33: 
      var $165=_Util_GrowBuffer($ret);
      var $166=(($165)|(0)) < 0;
      if ($166) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $168=$bzs;
      var $169=_BZ2_bzDecompressEnd($168);
      label = 46; break;
    case 35: 
      var $171=HEAP32[(($ret)>>2)];
      var $172=$171;
      var $173=(($172+20)|0);
      var $174=(($173)|0);
      var $175=$output_size;
      var $176=(($174+$175)|0);
      var $177=$bzs;
      var $178=(($177+16)|0);
      HEAP32[(($178)>>2)]=$176;
      var $179=HEAP32[(($ret)>>2)];
      var $180=$179;
      var $181=(($180+8)|0);
      var $182=HEAP32[(($181)>>2)];
      var $183=$output_size;
      var $184=((($182)-($183))|0);
      $buffer_left=$184;
      label = 36; break;
    case 36: 
      var $186=$buffer_left;
      var $187=(($186)>>>(0)) < 4294967295;
      if ($187) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $189=$buffer_left;
      var $192 = $189;label = 39; break;
    case 38: 
      var $192 = -1;label = 39; break;
    case 39: 
      var $192;
      var $193=$bzs;
      var $194=(($193+20)|0);
      HEAP32[(($194)>>2)]=$192;
      label = 40; break;
    case 40: 
      label = 11; break;
    case 41: 
      var $197=$output_size;
      var $198=HEAP32[(($ret)>>2)];
      var $199=$198;
      var $200=(($199+8)|0);
      var $201=HEAP32[(($200)>>2)];
      var $202=(($197)|(0))!=(($201)|(0));
      if ($202) { label = 42; break; } else { label = 45; break; }
    case 42: 
      var $204=$output_size;
      var $205=__PyString_Resize($ret, $204);
      var $206=(($205)|(0)) < 0;
      if ($206) { label = 43; break; } else { label = 44; break; }
    case 43: 
      label = 46; break;
    case 44: 
      label = 45; break;
    case 45: 
      _PyBuffer_Release($pdata);
      var $210=HEAP32[(($ret)>>2)];
      $1=$210;
      label = 57; break;
    case 46: 
      _PyBuffer_Release($pdata);
      label = 47; break;
    case 47: 
      var $213=HEAP32[(($ret)>>2)];
      var $214=(($213)|(0))==0;
      if ($214) { label = 48; break; } else { label = 49; break; }
    case 48: 
      label = 55; break;
    case 49: 
      label = 50; break;
    case 50: 
      var $218=HEAP32[(($ret)>>2)];
      var $219=(($218)|0);
      var $220=HEAP32[(($219)>>2)];
      var $221=((($220)-(1))|0);
      HEAP32[(($219)>>2)]=$221;
      var $222=(($221)|(0))!=0;
      if ($222) { label = 51; break; } else { label = 52; break; }
    case 51: 
      label = 53; break;
    case 52: 
      var $225=HEAP32[(($ret)>>2)];
      var $226=(($225+4)|0);
      var $227=HEAP32[(($226)>>2)];
      var $228=(($227+24)|0);
      var $229=HEAP32[(($228)>>2)];
      var $230=HEAP32[(($ret)>>2)];
      FUNCTION_TABLE[$229]($230);
      label = 53; break;
    case 53: 
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      $1=0;
      label = 57; break;
    case 57: 
      var $236=$1;
      STACKTOP = __stackBase__;
      return $236;
    default: assert(0, "bad label: " + label);
  }
}
function _BZ2Comp_dealloc($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+8)|0);
  var $4=_BZ2_bzCompressEnd($3);
  var $5=$1;
  var $6=$5;
  var $7=(($6+4)|0);
  var $8=HEAP32[(($7)>>2)];
  var $9=(($8+160)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=$1;
  var $12=$11;
  var $13=$12;
  FUNCTION_TABLE[$10]($13);
  return;
}
function _BZ2Comp_init($self, $args, $kwargs) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $compresslevel=__stackBase__;
      var $bzerror;
      $2=$self;
      $3=$args;
      $4=$kwargs;
      HEAP32[(($compresslevel)>>2)]=9;
      var $5=$3;
      var $6=$4;
      var $7=_PyArg_ParseTupleAndKeywords($5, $6, ((__str30)|0), ((_BZ2Comp_init_kwlist)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$compresslevel,tempInt));
      var $8=(($7)|(0))!=0;
      if ($8) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=-1;
      label = 10; break;
    case 3: 
      var $11=HEAP32[(($compresslevel)>>2)];
      var $12=(($11)|(0)) < 1;
      if ($12) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $14=HEAP32[(($compresslevel)>>2)];
      var $15=(($14)|(0)) > 9;
      if ($15) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $17=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($17, ((__str24)|0));
      label = 9; break;
    case 6: 
      var $19=$2;
      var $20=(($19+8)|0);
      var $21=$20;
      _memset($21, 0, 48);
      var $22=$2;
      var $23=(($22+8)|0);
      var $24=HEAP32[(($compresslevel)>>2)];
      var $25=_BZ2_bzCompressInit($23, $24, 0, 0);
      $bzerror=$25;
      var $26=$bzerror;
      var $27=(($26)|(0))!=0;
      if ($27) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $29=$bzerror;
      var $30=_Util_CatchBZ2Error($29);
      label = 9; break;
    case 8: 
      var $32=$2;
      var $33=(($32+56)|0);
      HEAP32[(($33)>>2)]=1;
      $1=0;
      label = 10; break;
    case 9: 
      $1=-1;
      label = 10; break;
    case 10: 
      var $36=$1;
      STACKTOP = __stackBase__;
      return $36;
    default: assert(0, "bad label: " + label);
  }
}
function _BZ2Comp_compress($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $pdata=__stackBase__;
      var $input_left;
      var $output_size;
      var $ret=(__stackBase__)+(52);
      var $bzs;
      var $bzerror;
      var $saved_next_out;
      var $buffer_left;
      $2=$self;
      $3=$args;
      $output_size=0;
      HEAP32[(($ret)>>2)]=0;
      var $4=$2;
      var $5=(($4+8)|0);
      $bzs=$5;
      var $6=$3;
      var $7=_PyArg_ParseTuple($6, ((__str33)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$pdata,tempInt));
      var $8=(($7)|(0))!=0;
      if ($8) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 46; break;
    case 3: 
      var $11=(($pdata+8)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12)|(0))==0;
      if ($13) { label = 4; break; } else { label = 5; break; }
    case 4: 
      _PyBuffer_Release($pdata);
      var $15=_PyString_FromString(((__str12)|0));
      $1=$15;
      label = 46; break;
    case 5: 
      var $17=$2;
      var $18=(($17+56)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19)|(0))!=0;
      if ($20) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $22=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($22, ((__str34)|0));
      label = 35; break;
    case 7: 
      var $24=_PyString_FromStringAndSize(0, 8192);
      HEAP32[(($ret)>>2)]=$24;
      var $25=HEAP32[(($ret)>>2)];
      var $26=(($25)|(0))!=0;
      if ($26) { label = 9; break; } else { label = 8; break; }
    case 8: 
      label = 35; break;
    case 9: 
      var $29=(($pdata)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=$bzs;
      var $32=(($31)|0);
      HEAP32[(($32)>>2)]=$30;
      var $33=(($pdata+8)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($34)>>>(0)) < 4294967295;
      if ($35) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $37=(($pdata+8)|0);
      var $38=HEAP32[(($37)>>2)];
      var $41 = $38;label = 12; break;
    case 11: 
      var $41 = -1;label = 12; break;
    case 12: 
      var $41;
      var $42=$bzs;
      var $43=(($42+4)|0);
      HEAP32[(($43)>>2)]=$41;
      var $44=(($pdata+8)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=$bzs;
      var $47=(($46+4)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=((($45)-($48))|0);
      $input_left=$49;
      var $50=HEAP32[(($ret)>>2)];
      var $51=$50;
      var $52=(($51+20)|0);
      var $53=(($52)|0);
      var $54=$bzs;
      var $55=(($54+16)|0);
      HEAP32[(($55)>>2)]=$53;
      var $56=HEAP32[(($ret)>>2)];
      var $57=$56;
      var $58=(($57+8)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=$bzs;
      var $61=(($60+20)|0);
      HEAP32[(($61)>>2)]=$59;
      label = 13; break;
    case 13: 
      var $63=$bzs;
      var $64=(($63+16)|0);
      var $65=HEAP32[(($64)>>2)];
      $saved_next_out=$65;
      var $66=$bzs;
      var $67=_BZ2_bzCompress($66, 0);
      $bzerror=$67;
      var $68=$bzs;
      var $69=(($68+16)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=$saved_next_out;
      var $72=$70;
      var $73=$71;
      var $74=((($72)-($73))|0);
      var $75=$output_size;
      var $76=((($75)+($74))|0);
      $output_size=$76;
      var $77=$bzerror;
      var $78=(($77)|(0))!=1;
      if ($78) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $80=$bzerror;
      var $81=_Util_CatchBZ2Error($80);
      label = 35; break;
    case 15: 
      var $83=$bzs;
      var $84=(($83+4)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=(($85)|(0))==0;
      if ($86) { label = 16; break; } else { label = 22; break; }
    case 16: 
      var $88=$input_left;
      var $89=(($88)|(0))==0;
      if ($89) { label = 17; break; } else { label = 18; break; }
    case 17: 
      label = 32; break;
    case 18: 
      var $92=$input_left;
      var $93=(($92)>>>(0)) < 4294967295;
      if ($93) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $95=$input_left;
      var $98 = $95;label = 21; break;
    case 20: 
      var $98 = -1;label = 21; break;
    case 21: 
      var $98;
      var $99=$bzs;
      var $100=(($99+4)|0);
      HEAP32[(($100)>>2)]=$98;
      var $101=$bzs;
      var $102=(($101+4)|0);
      var $103=HEAP32[(($102)>>2)];
      var $104=$input_left;
      var $105=((($104)-($103))|0);
      $input_left=$105;
      label = 22; break;
    case 22: 
      var $107=$bzs;
      var $108=(($107+20)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=(($109)|(0))==0;
      if ($110) { label = 23; break; } else { label = 31; break; }
    case 23: 
      var $112=HEAP32[(($ret)>>2)];
      var $113=$112;
      var $114=(($113+8)|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=$output_size;
      var $117=((($115)-($116))|0);
      $buffer_left=$117;
      var $118=$buffer_left;
      var $119=(($118)|(0))==0;
      if ($119) { label = 24; break; } else { label = 27; break; }
    case 24: 
      var $121=_Util_GrowBuffer($ret);
      var $122=(($121)|(0)) < 0;
      if ($122) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $124=$bzs;
      var $125=_BZ2_bzCompressEnd($124);
      label = 35; break;
    case 26: 
      var $127=HEAP32[(($ret)>>2)];
      var $128=$127;
      var $129=(($128+20)|0);
      var $130=(($129)|0);
      var $131=$output_size;
      var $132=(($130+$131)|0);
      var $133=$bzs;
      var $134=(($133+16)|0);
      HEAP32[(($134)>>2)]=$132;
      var $135=HEAP32[(($ret)>>2)];
      var $136=$135;
      var $137=(($136+8)|0);
      var $138=HEAP32[(($137)>>2)];
      var $139=$output_size;
      var $140=((($138)-($139))|0);
      $buffer_left=$140;
      label = 27; break;
    case 27: 
      var $142=$buffer_left;
      var $143=(($142)>>>(0)) < 4294967295;
      if ($143) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $145=$buffer_left;
      var $148 = $145;label = 30; break;
    case 29: 
      var $148 = -1;label = 30; break;
    case 30: 
      var $148;
      var $149=$bzs;
      var $150=(($149+20)|0);
      HEAP32[(($150)>>2)]=$148;
      label = 31; break;
    case 31: 
      label = 13; break;
    case 32: 
      var $153=$output_size;
      var $154=__PyString_Resize($ret, $153);
      var $155=(($154)|(0)) < 0;
      if ($155) { label = 33; break; } else { label = 34; break; }
    case 33: 
      label = 35; break;
    case 34: 
      _PyBuffer_Release($pdata);
      var $158=HEAP32[(($ret)>>2)];
      $1=$158;
      label = 46; break;
    case 35: 
      _PyBuffer_Release($pdata);
      label = 36; break;
    case 36: 
      var $161=HEAP32[(($ret)>>2)];
      var $162=(($161)|(0))==0;
      if ($162) { label = 37; break; } else { label = 38; break; }
    case 37: 
      label = 44; break;
    case 38: 
      label = 39; break;
    case 39: 
      var $166=HEAP32[(($ret)>>2)];
      var $167=(($166)|0);
      var $168=HEAP32[(($167)>>2)];
      var $169=((($168)-(1))|0);
      HEAP32[(($167)>>2)]=$169;
      var $170=(($169)|(0))!=0;
      if ($170) { label = 40; break; } else { label = 41; break; }
    case 40: 
      label = 42; break;
    case 41: 
      var $173=HEAP32[(($ret)>>2)];
      var $174=(($173+4)|0);
      var $175=HEAP32[(($174)>>2)];
      var $176=(($175+24)|0);
      var $177=HEAP32[(($176)>>2)];
      var $178=HEAP32[(($ret)>>2)];
      FUNCTION_TABLE[$177]($178);
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      $1=0;
      label = 46; break;
    case 46: 
      var $184=$1;
      STACKTOP = __stackBase__;
      return $184;
    default: assert(0, "bad label: " + label);
  }
}
function _BZ2Comp_flush($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $output_size;
      var $ret=__stackBase__;
      var $bzs;
      var $bzerror;
      var $saved_next_out;
      var $buffer_left;
      $2=$self;
      $output_size=0;
      HEAP32[(($ret)>>2)]=0;
      var $3=$2;
      var $4=(($3+8)|0);
      $bzs=$4;
      var $5=$2;
      var $6=(($5+56)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|(0))!=0;
      if ($8) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $10=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($10, ((__str32)|0));
      label = 26; break;
    case 3: 
      var $12=$2;
      var $13=(($12+56)|0);
      HEAP32[(($13)>>2)]=0;
      var $14=_PyString_FromStringAndSize(0, 8192);
      HEAP32[(($ret)>>2)]=$14;
      var $15=HEAP32[(($ret)>>2)];
      var $16=(($15)|(0))!=0;
      if ($16) { label = 5; break; } else { label = 4; break; }
    case 4: 
      label = 26; break;
    case 5: 
      var $19=HEAP32[(($ret)>>2)];
      var $20=$19;
      var $21=(($20+20)|0);
      var $22=(($21)|0);
      var $23=$bzs;
      var $24=(($23+16)|0);
      HEAP32[(($24)>>2)]=$22;
      var $25=HEAP32[(($ret)>>2)];
      var $26=$25;
      var $27=(($26+8)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=$bzs;
      var $30=(($29+20)|0);
      HEAP32[(($30)>>2)]=$28;
      label = 6; break;
    case 6: 
      var $32=$bzs;
      var $33=(($32+16)|0);
      var $34=HEAP32[(($33)>>2)];
      $saved_next_out=$34;
      var $35=$bzs;
      var $36=_BZ2_bzCompress($35, 2);
      $bzerror=$36;
      var $37=$bzs;
      var $38=(($37+16)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=$saved_next_out;
      var $41=$39;
      var $42=$40;
      var $43=((($41)-($42))|0);
      var $44=$output_size;
      var $45=((($44)+($43))|0);
      $output_size=$45;
      var $46=$bzerror;
      var $47=(($46)|(0))==4;
      if ($47) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 21; break;
    case 8: 
      var $50=$bzerror;
      var $51=(($50)|(0))!=3;
      if ($51) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $53=$bzerror;
      var $54=_Util_CatchBZ2Error($53);
      label = 26; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $57=$bzs;
      var $58=(($57+20)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=(($59)|(0))==0;
      if ($60) { label = 12; break; } else { label = 20; break; }
    case 12: 
      var $62=HEAP32[(($ret)>>2)];
      var $63=$62;
      var $64=(($63+8)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=$output_size;
      var $67=((($65)-($66))|0);
      $buffer_left=$67;
      var $68=$buffer_left;
      var $69=(($68)|(0))==0;
      if ($69) { label = 13; break; } else { label = 16; break; }
    case 13: 
      var $71=_Util_GrowBuffer($ret);
      var $72=(($71)|(0)) < 0;
      if ($72) { label = 14; break; } else { label = 15; break; }
    case 14: 
      label = 26; break;
    case 15: 
      var $75=HEAP32[(($ret)>>2)];
      var $76=$75;
      var $77=(($76+20)|0);
      var $78=(($77)|0);
      var $79=$output_size;
      var $80=(($78+$79)|0);
      var $81=$bzs;
      var $82=(($81+16)|0);
      HEAP32[(($82)>>2)]=$80;
      var $83=HEAP32[(($ret)>>2)];
      var $84=$83;
      var $85=(($84+8)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=$output_size;
      var $88=((($86)-($87))|0);
      $buffer_left=$88;
      label = 16; break;
    case 16: 
      var $90=$buffer_left;
      var $91=(($90)>>>(0)) < 4294967295;
      if ($91) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $93=$buffer_left;
      var $96 = $93;label = 19; break;
    case 18: 
      var $96 = -1;label = 19; break;
    case 19: 
      var $96;
      var $97=$bzs;
      var $98=(($97+20)|0);
      HEAP32[(($98)>>2)]=$96;
      label = 20; break;
    case 20: 
      label = 6; break;
    case 21: 
      var $101=$output_size;
      var $102=HEAP32[(($ret)>>2)];
      var $103=$102;
      var $104=(($103+8)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=(($101)|(0))!=(($105)|(0));
      if ($106) { label = 22; break; } else { label = 25; break; }
    case 22: 
      var $108=$output_size;
      var $109=__PyString_Resize($ret, $108);
      var $110=(($109)|(0)) < 0;
      if ($110) { label = 23; break; } else { label = 24; break; }
    case 23: 
      label = 26; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $114=HEAP32[(($ret)>>2)];
      $1=$114;
      label = 37; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $117=HEAP32[(($ret)>>2)];
      var $118=(($117)|(0))==0;
      if ($118) { label = 28; break; } else { label = 29; break; }
    case 28: 
      label = 35; break;
    case 29: 
      label = 30; break;
    case 30: 
      var $122=HEAP32[(($ret)>>2)];
      var $123=(($122)|0);
      var $124=HEAP32[(($123)>>2)];
      var $125=((($124)-(1))|0);
      HEAP32[(($123)>>2)]=$125;
      var $126=(($125)|(0))!=0;
      if ($126) { label = 31; break; } else { label = 32; break; }
    case 31: 
      label = 33; break;
    case 32: 
      var $129=HEAP32[(($ret)>>2)];
      var $130=(($129+4)|0);
      var $131=HEAP32[(($130)>>2)];
      var $132=(($131+24)|0);
      var $133=HEAP32[(($132)>>2)];
      var $134=HEAP32[(($ret)>>2)];
      FUNCTION_TABLE[$133]($134);
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      $1=0;
      label = 37; break;
    case 37: 
      var $140=$1;
      STACKTOP = __stackBase__;
      return $140;
    default: assert(0, "bad label: " + label);
  }
}
function _BZ2File_dealloc($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $bzerror=__stackBase__;
      $1=$self;
      var $2=$1;
      var $3=(($2+44)|0);
      var $4=HEAP32[(($3)>>2)];
      if ((($4)|(0))==1 | (($4)|(0))==2) {
        label = 2; break;
      }
      else if ((($4)|(0))==3) {
        label = 3; break;
      }
      else {
      label = 4; break;
      }
    case 2: 
      var $6=$1;
      var $7=(($6+40)|0);
      var $8=HEAP32[(($7)>>2)];
      _BZ2_bzReadClose($bzerror, $8);
      label = 4; break;
    case 3: 
      var $10=$1;
      var $11=(($10+40)|0);
      var $12=HEAP32[(($11)>>2)];
      _BZ2_bzWriteClose($bzerror, $12, 0, 0, 0);
      label = 4; break;
    case 4: 
      var $14=$1;
      var $15=(($14+40)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16)|(0))!=0;
      if ($17) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $19=$1;
      var $20=(($19+8)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$21;
      _PyFile_DecUseCount($22);
      var $23=$1;
      var $24=(($23+40)|0);
      HEAP32[(($24)>>2)]=0;
      label = 6; break;
    case 6: 
      var $26=$1;
      _Util_DropReadAhead($26);
      label = 7; break;
    case 7: 
      var $28=$1;
      var $29=(($28+8)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=(($30)|(0))==0;
      if ($31) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 15; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $35=$1;
      var $36=(($35+8)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=((($39)-(1))|0);
      HEAP32[(($38)>>2)]=$40;
      var $41=(($40)|(0))!=0;
      if ($41) { label = 11; break; } else { label = 12; break; }
    case 11: 
      label = 13; break;
    case 12: 
      var $44=$1;
      var $45=(($44+8)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46+4)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=(($48+24)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=$1;
      var $52=(($51+8)|0);
      var $53=HEAP32[(($52)>>2)];
      FUNCTION_TABLE[$50]($53);
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $58=$1;
      var $59=$58;
      var $60=(($59+4)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=(($61+160)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=$1;
      var $65=$64;
      var $66=$65;
      FUNCTION_TABLE[$63]($66);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _BZ2File_getiter($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $2=$self;
      var $3=$2;
      var $4=(($3+44)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))==0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($8, ((__str71)|0));
      $1=0;
      label = 4; break;
    case 3: 
      var $10=$2;
      var $11=$10;
      var $12=(($11)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=((($13)+(1))|0);
      HEAP32[(($12)>>2)]=$14;
      var $15=$2;
      var $16=$15;
      $1=$16;
      label = 4; break;
    case 4: 
      var $18=$1;
      return $18;
    default: assert(0, "bad label: " + label);
  }
}
function _BZ2File_iternext($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $ret;
      $2=$self;
      var $3=$2;
      var $4=(($3+44)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))==0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($8, ((__str71)|0));
      $1=0;
      label = 17; break;
    case 3: 
      var $10=$2;
      var $11=_Util_ReadAheadGetLineSkip($10, 0, 8192);
      $ret=$11;
      var $12=$ret;
      var $13=(($12)|(0))==0;
      if ($13) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $15=$ret;
      var $16=$15;
      var $17=(($16+8)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18)|(0))==0;
      if ($19) { label = 5; break; } else { label = 16; break; }
    case 5: 
      label = 6; break;
    case 6: 
      var $22=$ret;
      var $23=(($22)|(0))==0;
      if ($23) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 14; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $27=$ret;
      var $28=$27;
      var $29=(($28)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=((($30)-(1))|0);
      HEAP32[(($29)>>2)]=$31;
      var $32=(($31)|(0))!=0;
      if ($32) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 12; break;
    case 11: 
      var $35=$ret;
      var $36=$35;
      var $37=(($36+4)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38+24)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=$ret;
      var $42=$41;
      FUNCTION_TABLE[$40]($42);
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      $1=0;
      label = 17; break;
    case 16: 
      var $48=$ret;
      var $49=$48;
      $1=$49;
      label = 17; break;
    case 17: 
      var $51=$1;
      return $51;
    default: assert(0, "bad label: " + label);
  }
}
function _BZ2File_init($self, $args, $kwargs) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 20)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $name=__stackBase__;
      var $mode=(__stackBase__)+(4);
      var $buffering=(__stackBase__)+(8);
      var $compresslevel=(__stackBase__)+(12);
      var $bzerror=(__stackBase__)+(16);
      var $mode_char;
      var $error;
      var $_py_tmp;
      $2=$self;
      $3=$args;
      $4=$kwargs;
      HEAP32[(($mode)>>2)]=((__str39)|0);
      HEAP32[(($buffering)>>2)]=-1;
      HEAP32[(($compresslevel)>>2)]=9;
      $mode_char=0;
      var $5=$2;
      var $6=(($5+52)|0);
      HEAP32[(($6)>>2)]=-1;
      var $7=$3;
      var $8=$4;
      var $9=_PyArg_ParseTupleAndKeywords($7, $8, ((__str40)|0), ((_BZ2File_init_kwlist)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$name,HEAP32[(((tempInt)+(4))>>2)]=$mode,HEAP32[(((tempInt)+(8))>>2)]=$buffering,HEAP32[(((tempInt)+(12))>>2)]=$compresslevel,tempInt));
      var $10=(($9)|(0))!=0;
      if ($10) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=-1;
      label = 39; break;
    case 3: 
      var $13=HEAP32[(($compresslevel)>>2)];
      var $14=(($13)|(0)) < 1;
      if ($14) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $16=HEAP32[(($compresslevel)>>2)];
      var $17=(($16)|(0)) > 9;
      if ($17) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $19=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($19, ((__str24)|0));
      $1=-1;
      label = 39; break;
    case 6: 
      label = 7; break;
    case 7: 
      $error=0;
      var $22=HEAP32[(($mode)>>2)];
      var $23=HEAP8[($22)];
      var $24=(($23 << 24) >> 24);
      if ((($24)|(0))==114 | (($24)|(0))==119) {
        label = 8; break;
      }
      else if ((($24)|(0))==98) {
        label = 11; break;
      }
      else if ((($24)|(0))==85) {
        label = 12; break;
      }
      else {
      label = 13; break;
      }
    case 8: 
      var $26=$mode_char;
      var $27=(($26)|(0))!=0;
      if ($27) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $error=1;
      label = 10; break;
    case 10: 
      var $30=HEAP32[(($mode)>>2)];
      var $31=HEAP8[($30)];
      var $32=(($31 << 24) >> 24);
      $mode_char=$32;
      label = 14; break;
    case 11: 
      label = 14; break;
    case 12: 
      var $35=$2;
      var $36=(($35+28)|0);
      HEAP32[(($36)>>2)]=1;
      label = 14; break;
    case 13: 
      $error=1;
      label = 14; break;
    case 14: 
      var $39=$error;
      var $40=(($39)|(0))!=0;
      if ($40) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $42=HEAP32[((_PyExc_ValueError)>>2)];
      var $43=HEAP32[(($mode)>>2)];
      var $44=HEAP8[($43)];
      var $45=(($44 << 24) >> 24);
      var $46=_PyErr_Format($42, ((__str41)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$45,tempInt));
      $1=-1;
      label = 39; break;
    case 16: 
      var $48=HEAP32[(($mode)>>2)];
      var $49=(($48+1)|0);
      HEAP32[(($mode)>>2)]=$49;
      var $50=HEAP32[(($mode)>>2)];
      var $51=HEAP8[($50)];
      var $52=(($51 << 24) >> 24);
      var $53=(($52)|(0))==0;
      if ($53) { label = 17; break; } else { label = 18; break; }
    case 17: 
      label = 19; break;
    case 18: 
      label = 7; break;
    case 19: 
      var $57=$mode_char;
      var $58=(($57)|(0))==0;
      if ($58) { label = 20; break; } else { label = 21; break; }
    case 20: 
      $mode_char=114;
      label = 21; break;
    case 21: 
      var $61=$mode_char;
      var $62=(($61)|(0))==114;
      var $63=$62 ? (((__str42)|0)) : (((__str43)|0));
      HEAP32[(($mode)>>2)]=$63;
      var $64=HEAP32[(($name)>>2)];
      var $65=HEAP32[(($mode)>>2)];
      var $66=HEAP32[(($buffering)>>2)];
      var $67=_PyObject_CallFunction(_PyFile_Type, ((__str44)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$64,HEAP32[(((tempInt)+(4))>>2)]=$65,HEAP32[(((tempInt)+(8))>>2)]=$66,tempInt));
      var $68=$2;
      var $69=(($68+8)|0);
      HEAP32[(($69)>>2)]=$67;
      var $70=$2;
      var $71=(($70+8)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=(($72)|(0))==0;
      if ($73) { label = 22; break; } else { label = 23; break; }
    case 22: 
      $1=-1;
      label = 39; break;
    case 23: 
      var $76=$mode_char;
      var $77=(($76)|(0))==114;
      if ($77) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $79=$2;
      var $80=(($79+8)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=_PyFile_AsFile($81);
      var $83=_BZ2_bzReadOpen($bzerror, $82, 0, 0, 0, 0);
      var $84=$2;
      var $85=(($84+40)|0);
      HEAP32[(($85)>>2)]=$83;
      label = 26; break;
    case 25: 
      var $87=$2;
      var $88=(($87+8)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=_PyFile_AsFile($89);
      var $91=HEAP32[(($compresslevel)>>2)];
      var $92=_BZ2_bzWriteOpen($bzerror, $90, $91, 0, 0);
      var $93=$2;
      var $94=(($93+40)|0);
      HEAP32[(($94)>>2)]=$92;
      label = 26; break;
    case 26: 
      var $96=HEAP32[(($bzerror)>>2)];
      var $97=(($96)|(0))!=0;
      if ($97) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $99=HEAP32[(($bzerror)>>2)];
      var $100=_Util_CatchBZ2Error($99);
      label = 29; break;
    case 28: 
      var $102=$2;
      var $103=(($102+8)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=$104;
      _PyFile_IncUseCount($105);
      var $106=$mode_char;
      var $107=(($106)|(0))==114;
      var $108=$107 ? 1 : 3;
      var $109=$2;
      var $110=(($109+44)|0);
      HEAP32[(($110)>>2)]=$108;
      $1=0;
      label = 39; break;
    case 29: 
      label = 30; break;
    case 30: 
      var $113=$2;
      var $114=(($113+8)|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=(($115)|(0))!=0;
      if ($116) { label = 31; break; } else { label = 37; break; }
    case 31: 
      var $118=$2;
      var $119=(($118+8)|0);
      var $120=HEAP32[(($119)>>2)];
      $_py_tmp=$120;
      var $121=$2;
      var $122=(($121+8)|0);
      HEAP32[(($122)>>2)]=0;
      label = 32; break;
    case 32: 
      var $124=$_py_tmp;
      var $125=(($124)|0);
      var $126=HEAP32[(($125)>>2)];
      var $127=((($126)-(1))|0);
      HEAP32[(($125)>>2)]=$127;
      var $128=(($127)|(0))!=0;
      if ($128) { label = 33; break; } else { label = 34; break; }
    case 33: 
      label = 35; break;
    case 34: 
      var $131=$_py_tmp;
      var $132=(($131+4)|0);
      var $133=HEAP32[(($132)>>2)];
      var $134=(($133+24)|0);
      var $135=HEAP32[(($134)>>2)];
      var $136=$_py_tmp;
      FUNCTION_TABLE[$135]($136);
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      $1=-1;
      label = 39; break;
    case 39: 
      var $142=$1;
      STACKTOP = __stackBase__;
      return $142;
    default: assert(0, "bad label: " + label);
  }
}
function _BZ2File_get_closed($self, $closure) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$closure;
  var $3=$1;
  var $4=(($3+44)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5)|(0))==0;
  var $7=(($6)&(1));
  var $8=_PyInt_FromLong($7);
  return $8;
}
function _BZ2File_get_newlines($self, $closure) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$self;
      $3=$closure;
      var $4=$2;
      var $5=(($4+32)|0);
      var $6=HEAP32[(($5)>>2)];
      if ((($6)|(0))==0) {
        label = 2; break;
      }
      else if ((($6)|(0))==1) {
        label = 3; break;
      }
      else if ((($6)|(0))==2) {
        label = 4; break;
      }
      else if ((($6)|(0))==3) {
        label = 5; break;
      }
      else if ((($6)|(0))==4) {
        label = 6; break;
      }
      else if ((($6)|(0))==5) {
        label = 7; break;
      }
      else if ((($6)|(0))==6) {
        label = 8; break;
      }
      else if ((($6)|(0))==7) {
        label = 9; break;
      }
      else {
      label = 10; break;
      }
    case 2: 
      var $8=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $9=((($8)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$9;
      $1=__Py_NoneStruct;
      label = 11; break;
    case 3: 
      var $11=_PyString_FromString(((__str52)|0));
      $1=$11;
      label = 11; break;
    case 4: 
      var $13=_PyString_FromString(((__str53)|0));
      $1=$13;
      label = 11; break;
    case 5: 
      var $15=_Py_BuildValue(((__str54)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=((__str52)|0),HEAP32[(((tempInt)+(4))>>2)]=((__str53)|0),tempInt));
      $1=$15;
      label = 11; break;
    case 6: 
      var $17=_PyString_FromString(((__str55)|0));
      $1=$17;
      label = 11; break;
    case 7: 
      var $19=_Py_BuildValue(((__str54)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=((__str52)|0),HEAP32[(((tempInt)+(4))>>2)]=((__str55)|0),tempInt));
      $1=$19;
      label = 11; break;
    case 8: 
      var $21=_Py_BuildValue(((__str54)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=((__str53)|0),HEAP32[(((tempInt)+(4))>>2)]=((__str55)|0),tempInt));
      $1=$21;
      label = 11; break;
    case 9: 
      var $23=_Py_BuildValue(((__str56)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=((__str52)|0),HEAP32[(((tempInt)+(4))>>2)]=((__str53)|0),HEAP32[(((tempInt)+(8))>>2)]=((__str55)|0),tempInt));
      $1=$23;
      label = 11; break;
    case 10: 
      var $25=HEAP32[((_PyExc_SystemError)>>2)];
      var $26=$2;
      var $27=(($26+32)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=_PyErr_Format($25, ((__str57)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$28,tempInt));
      $1=0;
      label = 11; break;
    case 11: 
      var $31=$1;
      STACKTOP = __stackBase__;
      return $31;
    default: assert(0, "bad label: " + label);
  }
}
function _BZ2File_get_mode($self, $closure) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$closure;
  var $3=$1;
  var $4=(($3+8)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=_PyObject_GetAttrString($5, ((__str37)|0));
  return $6;
}
function _BZ2File_get_name($self, $closure) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$closure;
  var $3=$1;
  var $4=(($3+8)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=_PyObject_GetAttrString($5, ((__str50)|0));
  return $6;
}
function _BZ2File_read($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $bytesrequested=__stackBase__;
      var $bytesread;
      var $buffersize;
      var $chunksize;
      var $bzerror=(__stackBase__)+(4);
      var $ret=(__stackBase__)+(8);
      $2=$self;
      $3=$args;
      HEAP32[(($bytesrequested)>>2)]=-1;
      HEAP32[(($ret)>>2)]=0;
      var $4=$3;
      var $5=_PyArg_ParseTuple($4, ((__str85)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$bytesrequested,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 38; break;
    case 3: 
      var $9=$2;
      var $10=(($9+44)|0);
      var $11=HEAP32[(($10)>>2)];
      if ((($11)|(0))==1) {
        label = 4; break;
      }
      else if ((($11)|(0))==2) {
        label = 5; break;
      }
      else if ((($11)|(0))==0) {
        label = 6; break;
      }
      else {
      label = 7; break;
      }
    case 4: 
      label = 8; break;
    case 5: 
      var $14=_PyString_FromString(((__str12)|0));
      HEAP32[(($ret)>>2)]=$14;
      label = 37; break;
    case 6: 
      var $16=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($16, ((__str71)|0));
      label = 37; break;
    case 7: 
      var $18=HEAP32[((_PyExc_IOError)>>2)];
      _PyErr_SetString($18, ((__str81)|0));
      label = 37; break;
    case 8: 
      var $20=$2;
      var $21=_check_iterbuffered($20);
      var $22=(($21)|(0))!=0;
      if ($22) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 37; break;
    case 10: 
      var $25=HEAP32[(($bytesrequested)>>2)];
      var $26=(($25)|(0)) < 0;
      if ($26) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $28=_Util_NewBufferSize(0);
      $buffersize=$28;
      label = 13; break;
    case 12: 
      var $30=HEAP32[(($bytesrequested)>>2)];
      $buffersize=$30;
      label = 13; break;
    case 13: 
      var $32=$buffersize;
      var $33=(($32)>>>(0)) > 2147483647;
      if ($33) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $35=HEAP32[((_PyExc_OverflowError)>>2)];
      _PyErr_SetString($35, ((__str86)|0));
      label = 37; break;
    case 15: 
      var $37=$buffersize;
      var $38=_PyString_FromStringAndSize(0, $37);
      HEAP32[(($ret)>>2)]=$38;
      var $39=HEAP32[(($ret)>>2)];
      var $40=(($39)|(0))==0;
      if ($40) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 37; break;
    case 17: 
      $bytesread=0;
      label = 18; break;
    case 18: 
      var $44=$2;
      var $45=(($44+40)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=HEAP32[(($ret)>>2)];
      var $48=$47;
      var $49=(($48+20)|0);
      var $50=(($49)|0);
      var $51=$bytesread;
      var $52=(($50+$51)|0);
      var $53=$buffersize;
      var $54=$bytesread;
      var $55=((($53)-($54))|0);
      var $56=$2;
      var $57=_Util_UnivNewlineRead($bzerror, $46, $52, $55, $56);
      $chunksize=$57;
      var $58=$chunksize;
      var $59=$2;
      var $60=(($59+48)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=((($61)+($58))|0);
      HEAP32[(($60)>>2)]=$62;
      var $63=$chunksize;
      var $64=$bytesread;
      var $65=((($64)+($63))|0);
      $bytesread=$65;
      var $66=HEAP32[(($bzerror)>>2)];
      var $67=(($66)|(0))==4;
      if ($67) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $69=$2;
      var $70=(($69+48)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=$2;
      var $73=(($72+52)|0);
      HEAP32[(($73)>>2)]=$71;
      var $74=$2;
      var $75=(($74+44)|0);
      HEAP32[(($75)>>2)]=2;
      label = 34; break;
    case 20: 
      var $77=HEAP32[(($bzerror)>>2)];
      var $78=(($77)|(0))!=0;
      if ($78) { label = 21; break; } else { label = 27; break; }
    case 21: 
      var $80=HEAP32[(($bzerror)>>2)];
      var $81=_Util_CatchBZ2Error($80);
      label = 22; break;
    case 22: 
      var $83=HEAP32[(($ret)>>2)];
      var $84=(($83)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=((($85)-(1))|0);
      HEAP32[(($84)>>2)]=$86;
      var $87=(($86)|(0))!=0;
      if ($87) { label = 23; break; } else { label = 24; break; }
    case 23: 
      label = 25; break;
    case 24: 
      var $90=HEAP32[(($ret)>>2)];
      var $91=(($90+4)|0);
      var $92=HEAP32[(($91)>>2)];
      var $93=(($92+24)|0);
      var $94=HEAP32[(($93)>>2)];
      var $95=HEAP32[(($ret)>>2)];
      FUNCTION_TABLE[$94]($95);
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      HEAP32[(($ret)>>2)]=0;
      label = 37; break;
    case 27: 
      label = 28; break;
    case 28: 
      var $100=HEAP32[(($bytesrequested)>>2)];
      var $101=(($100)|(0)) < 0;
      if ($101) { label = 29; break; } else { label = 32; break; }
    case 29: 
      var $103=$buffersize;
      var $104=_Util_NewBufferSize($103);
      $buffersize=$104;
      var $105=$buffersize;
      var $106=__PyString_Resize($ret, $105);
      var $107=(($106)|(0)) < 0;
      if ($107) { label = 30; break; } else { label = 31; break; }
    case 30: 
      label = 37; break;
    case 31: 
      label = 33; break;
    case 32: 
      label = 34; break;
    case 33: 
      label = 18; break;
    case 34: 
      var $113=$bytesread;
      var $114=$buffersize;
      var $115=(($113)|(0))!=(($114)|(0));
      if ($115) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $117=$bytesread;
      var $118=__PyString_Resize($ret, $117);
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      var $121=HEAP32[(($ret)>>2)];
      $1=$121;
      label = 38; break;
    case 38: 
      var $123=$1;
      STACKTOP = __stackBase__;
      return $123;
    default: assert(0, "bad label: " + label);
  }
}
function _BZ2File_readline($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $ret;
      var $sizehint=__stackBase__;
      $2=$self;
      $3=$args;
      $ret=0;
      HEAP32[(($sizehint)>>2)]=-1;
      var $4=$3;
      var $5=_PyArg_ParseTuple($4, ((__str84)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$sizehint,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 18; break;
    case 3: 
      var $9=$2;
      var $10=(($9+44)|0);
      var $11=HEAP32[(($10)>>2)];
      if ((($11)|(0))==1) {
        label = 4; break;
      }
      else if ((($11)|(0))==2) {
        label = 5; break;
      }
      else if ((($11)|(0))==0) {
        label = 6; break;
      }
      else {
      label = 7; break;
      }
    case 4: 
      label = 8; break;
    case 5: 
      var $14=_PyString_FromString(((__str12)|0));
      $ret=$14;
      label = 17; break;
    case 6: 
      var $16=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($16, ((__str71)|0));
      label = 17; break;
    case 7: 
      var $18=HEAP32[((_PyExc_IOError)>>2)];
      _PyErr_SetString($18, ((__str81)|0));
      label = 17; break;
    case 8: 
      var $20=$2;
      var $21=_check_iterbuffered($20);
      var $22=(($21)|(0))!=0;
      if ($22) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 17; break;
    case 10: 
      var $25=HEAP32[(($sizehint)>>2)];
      var $26=(($25)|(0))==0;
      if ($26) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $28=_PyString_FromString(((__str12)|0));
      $ret=$28;
      label = 16; break;
    case 12: 
      var $30=$2;
      var $31=HEAP32[(($sizehint)>>2)];
      var $32=(($31)|(0)) < 0;
      if ($32) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $37 = 0;label = 15; break;
    case 14: 
      var $35=HEAP32[(($sizehint)>>2)];
      var $37 = $35;label = 15; break;
    case 15: 
      var $37;
      var $38=_Util_GetLine($30, $37);
      $ret=$38;
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $41=$ret;
      $1=$41;
      label = 18; break;
    case 18: 
      var $43=$1;
      STACKTOP = __stackBase__;
      return $43;
    default: assert(0, "bad label: " + label);
  }
}
function _BZ2File_readlines($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8208)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $sizehint=__stackBase__;
      var $list;
      var $line=(__stackBase__)+(4);
      var $small_buffer=(__stackBase__)+(8);
      var $buffer;
      var $buffersize;
      var $big_buffer=(__stackBase__)+(8200);
      var $nfilled;
      var $nread;
      var $totalread;
      var $p;
      var $q;
      var $end;
      var $err;
      var $shortread;
      var $bzerror=(__stackBase__)+(8204);
      var $rest;
      $2=$self;
      $3=$args;
      HEAP32[(($sizehint)>>2)]=0;
      $list=0;
      var $4=(($small_buffer)|0);
      $buffer=$4;
      $buffersize=8192;
      HEAP32[(($big_buffer)>>2)]=0;
      $nfilled=0;
      $totalread=0;
      $shortread=0;
      var $5=$3;
      var $6=_PyArg_ParseTuple($5, ((__str80)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$sizehint,tempInt));
      var $7=(($6)|(0))!=0;
      if ($7) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 91; break;
    case 3: 
      var $10=$2;
      var $11=(($10+44)|0);
      var $12=HEAP32[(($11)>>2)];
      if ((($12)|(0))==1) {
        label = 4; break;
      }
      else if ((($12)|(0))==2) {
        label = 5; break;
      }
      else if ((($12)|(0))==0) {
        label = 6; break;
      }
      else {
      label = 7; break;
      }
    case 4: 
      label = 8; break;
    case 5: 
      var $15=_PyList_New(0);
      $list=$15;
      label = 83; break;
    case 6: 
      var $17=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($17, ((__str71)|0));
      label = 83; break;
    case 7: 
      var $19=HEAP32[((_PyExc_IOError)>>2)];
      _PyErr_SetString($19, ((__str81)|0));
      label = 83; break;
    case 8: 
      var $21=$2;
      var $22=_check_iterbuffered($21);
      var $23=(($22)|(0))!=0;
      if ($23) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 83; break;
    case 10: 
      var $26=_PyList_New(0);
      $list=$26;
      var $27=(($26)|(0))==0;
      if ($27) { label = 11; break; } else { label = 12; break; }
    case 11: 
      label = 83; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $31=$2;
      var $32=(($31+40)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=$buffer;
      var $35=$nfilled;
      var $36=(($34+$35)|0);
      var $37=$buffersize;
      var $38=$nfilled;
      var $39=((($37)-($38))|0);
      var $40=$2;
      var $41=_Util_UnivNewlineRead($bzerror, $33, $36, $39, $40);
      $nread=$41;
      var $42=$nread;
      var $43=$2;
      var $44=(($43+48)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=((($45)+($42))|0);
      HEAP32[(($44)>>2)]=$46;
      var $47=HEAP32[(($bzerror)>>2)];
      var $48=(($47)|(0))==4;
      if ($48) { label = 14; break; } else { label = 17; break; }
    case 14: 
      var $50=$2;
      var $51=(($50+48)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=$2;
      var $54=(($53+52)|0);
      HEAP32[(($54)>>2)]=$52;
      var $55=$2;
      var $56=(($55+44)|0);
      HEAP32[(($56)>>2)]=2;
      var $57=$nread;
      var $58=(($57)|(0))==0;
      if ($58) { label = 15; break; } else { label = 16; break; }
    case 15: 
      HEAP32[(($sizehint)>>2)]=0;
      label = 55; break;
    case 16: 
      $shortread=1;
      label = 26; break;
    case 17: 
      var $62=HEAP32[(($bzerror)>>2)];
      var $63=(($62)|(0))!=0;
      if ($63) { label = 18; break; } else { label = 25; break; }
    case 18: 
      var $65=HEAP32[(($bzerror)>>2)];
      var $66=_Util_CatchBZ2Error($65);
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $69=$list;
      var $70=(($69)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=((($71)-(1))|0);
      HEAP32[(($70)>>2)]=$72;
      var $73=(($72)|(0))!=0;
      if ($73) { label = 21; break; } else { label = 22; break; }
    case 21: 
      label = 23; break;
    case 22: 
      var $76=$list;
      var $77=(($76+4)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=(($78+24)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=$list;
      FUNCTION_TABLE[$80]($81);
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      $list=0;
      label = 83; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $86=$nread;
      var $87=$totalread;
      var $88=((($87)+($86))|0);
      $totalread=$88;
      var $89=$buffer;
      var $90=$nfilled;
      var $91=(($89+$90)|0);
      var $92=$nread;
      var $93=_memchr($91, 10, $92);
      $p=$93;
      var $94=$shortread;
      var $95=(($94)|(0))!=0;
      if ($95) { label = 36; break; } else { label = 27; break; }
    case 27: 
      var $97=$p;
      var $98=(($97)|(0))==0;
      if ($98) { label = 28; break; } else { label = 36; break; }
    case 28: 
      var $100=$nread;
      var $101=$nfilled;
      var $102=((($101)+($100))|0);
      $nfilled=$102;
      var $103=$buffersize;
      var $104=($103<<1);
      $buffersize=$104;
      var $105=$buffersize;
      var $106=(($105)>>>(0)) > 2147483647;
      if ($106) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $108=HEAP32[((_PyExc_OverflowError)>>2)];
      _PyErr_SetString($108, ((__str82)|0));
      label = 19; break;
    case 30: 
      var $110=HEAP32[(($big_buffer)>>2)];
      var $111=(($110)|(0))==0;
      if ($111) { label = 31; break; } else { label = 34; break; }
    case 31: 
      var $113=$buffersize;
      var $114=_PyString_FromStringAndSize(0, $113);
      HEAP32[(($big_buffer)>>2)]=$114;
      var $115=HEAP32[(($big_buffer)>>2)];
      var $116=(($115)|(0))==0;
      if ($116) { label = 32; break; } else { label = 33; break; }
    case 32: 
      label = 19; break;
    case 33: 
      var $119=HEAP32[(($big_buffer)>>2)];
      var $120=$119;
      var $121=(($120+20)|0);
      var $122=(($121)|0);
      $buffer=$122;
      var $123=$buffer;
      var $124=$small_buffer;
      var $125=$nfilled;
      assert($125 % 1 === 0);_memcpy($123, $124, $125);
      label = 35; break;
    case 34: 
      var $127=$buffersize;
      var $128=__PyString_Resize($big_buffer, $127);
      var $129=HEAP32[(($big_buffer)>>2)];
      var $130=$129;
      var $131=(($130+20)|0);
      var $132=(($131)|0);
      $buffer=$132;
      label = 35; break;
    case 35: 
      label = 13; break;
    case 36: 
      var $135=$buffer;
      var $136=$nfilled;
      var $137=(($135+$136)|0);
      var $138=$nread;
      var $139=(($137+$138)|0);
      $end=$139;
      var $140=$buffer;
      $q=$140;
      label = 37; break;
    case 37: 
      var $142=$p;
      var $143=(($142)|(0))!=0;
      if ($143) { label = 38; break; } else { label = 48; break; }
    case 38: 
      var $145=$p;
      var $146=(($145+1)|0);
      $p=$146;
      var $147=$q;
      var $148=$p;
      var $149=$q;
      var $150=$148;
      var $151=$149;
      var $152=((($150)-($151))|0);
      var $153=_PyString_FromStringAndSize($147, $152);
      HEAP32[(($line)>>2)]=$153;
      var $154=HEAP32[(($line)>>2)];
      var $155=(($154)|(0))==0;
      if ($155) { label = 39; break; } else { label = 40; break; }
    case 39: 
      label = 19; break;
    case 40: 
      var $158=$list;
      var $159=HEAP32[(($line)>>2)];
      var $160=_PyList_Append($158, $159);
      $err=$160;
      label = 41; break;
    case 41: 
      var $162=HEAP32[(($line)>>2)];
      var $163=(($162)|0);
      var $164=HEAP32[(($163)>>2)];
      var $165=((($164)-(1))|0);
      HEAP32[(($163)>>2)]=$165;
      var $166=(($165)|(0))!=0;
      if ($166) { label = 42; break; } else { label = 43; break; }
    case 42: 
      label = 44; break;
    case 43: 
      var $169=HEAP32[(($line)>>2)];
      var $170=(($169+4)|0);
      var $171=HEAP32[(($170)>>2)];
      var $172=(($171+24)|0);
      var $173=HEAP32[(($172)>>2)];
      var $174=HEAP32[(($line)>>2)];
      FUNCTION_TABLE[$173]($174);
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      var $177=$err;
      var $178=(($177)|(0))!=0;
      if ($178) { label = 46; break; } else { label = 47; break; }
    case 46: 
      label = 19; break;
    case 47: 
      var $181=$p;
      $q=$181;
      var $182=$q;
      var $183=$end;
      var $184=$q;
      var $185=$183;
      var $186=$184;
      var $187=((($185)-($186))|0);
      var $188=_memchr($182, 10, $187);
      $p=$188;
      label = 37; break;
    case 48: 
      var $190=$end;
      var $191=$q;
      var $192=$190;
      var $193=$191;
      var $194=((($192)-($193))|0);
      $nfilled=$194;
      var $195=$buffer;
      var $196=$q;
      var $197=$nfilled;
      _memmove($195, $196, $197, 1, 0);
      var $198=HEAP32[(($sizehint)>>2)];
      var $199=(($198)|(0)) > 0;
      if ($199) { label = 49; break; } else { label = 52; break; }
    case 49: 
      var $201=$totalread;
      var $202=HEAP32[(($sizehint)>>2)];
      var $203=(($201)>>>(0)) >= (($202)>>>(0));
      if ($203) { label = 50; break; } else { label = 51; break; }
    case 50: 
      label = 55; break;
    case 51: 
      label = 52; break;
    case 52: 
      var $207=$shortread;
      var $208=(($207)|(0))!=0;
      if ($208) { label = 53; break; } else { label = 54; break; }
    case 53: 
      HEAP32[(($sizehint)>>2)]=0;
      label = 55; break;
    case 54: 
      label = 13; break;
    case 55: 
      var $212=$nfilled;
      var $213=(($212)|(0))!=0;
      if ($213) { label = 56; break; } else { label = 82; break; }
    case 56: 
      var $215=$buffer;
      var $216=$nfilled;
      var $217=_PyString_FromStringAndSize($215, $216);
      HEAP32[(($line)>>2)]=$217;
      var $218=HEAP32[(($line)>>2)];
      var $219=(($218)|(0))==0;
      if ($219) { label = 57; break; } else { label = 58; break; }
    case 57: 
      label = 19; break;
    case 58: 
      var $222=HEAP32[(($sizehint)>>2)];
      var $223=(($222)|(0)) > 0;
      if ($223) { label = 59; break; } else { label = 74; break; }
    case 59: 
      var $225=$2;
      var $226=_Util_GetLine($225, 0);
      $rest=$226;
      var $227=$rest;
      var $228=(($227)|(0))==0;
      if ($228) { label = 60; break; } else { label = 66; break; }
    case 60: 
      label = 61; break;
    case 61: 
      var $231=HEAP32[(($line)>>2)];
      var $232=(($231)|0);
      var $233=HEAP32[(($232)>>2)];
      var $234=((($233)-(1))|0);
      HEAP32[(($232)>>2)]=$234;
      var $235=(($234)|(0))!=0;
      if ($235) { label = 62; break; } else { label = 63; break; }
    case 62: 
      label = 64; break;
    case 63: 
      var $238=HEAP32[(($line)>>2)];
      var $239=(($238+4)|0);
      var $240=HEAP32[(($239)>>2)];
      var $241=(($240+24)|0);
      var $242=HEAP32[(($241)>>2)];
      var $243=HEAP32[(($line)>>2)];
      FUNCTION_TABLE[$242]($243);
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      label = 19; break;
    case 66: 
      var $247=$rest;
      _PyString_Concat($line, $247);
      label = 67; break;
    case 67: 
      var $249=$rest;
      var $250=(($249)|0);
      var $251=HEAP32[(($250)>>2)];
      var $252=((($251)-(1))|0);
      HEAP32[(($250)>>2)]=$252;
      var $253=(($252)|(0))!=0;
      if ($253) { label = 68; break; } else { label = 69; break; }
    case 68: 
      label = 70; break;
    case 69: 
      var $256=$rest;
      var $257=(($256+4)|0);
      var $258=HEAP32[(($257)>>2)];
      var $259=(($258+24)|0);
      var $260=HEAP32[(($259)>>2)];
      var $261=$rest;
      FUNCTION_TABLE[$260]($261);
      label = 70; break;
    case 70: 
      label = 71; break;
    case 71: 
      var $264=HEAP32[(($line)>>2)];
      var $265=(($264)|(0))==0;
      if ($265) { label = 72; break; } else { label = 73; break; }
    case 72: 
      label = 19; break;
    case 73: 
      label = 74; break;
    case 74: 
      var $269=$list;
      var $270=HEAP32[(($line)>>2)];
      var $271=_PyList_Append($269, $270);
      $err=$271;
      label = 75; break;
    case 75: 
      var $273=HEAP32[(($line)>>2)];
      var $274=(($273)|0);
      var $275=HEAP32[(($274)>>2)];
      var $276=((($275)-(1))|0);
      HEAP32[(($274)>>2)]=$276;
      var $277=(($276)|(0))!=0;
      if ($277) { label = 76; break; } else { label = 77; break; }
    case 76: 
      label = 78; break;
    case 77: 
      var $280=HEAP32[(($line)>>2)];
      var $281=(($280+4)|0);
      var $282=HEAP32[(($281)>>2)];
      var $283=(($282+24)|0);
      var $284=HEAP32[(($283)>>2)];
      var $285=HEAP32[(($line)>>2)];
      FUNCTION_TABLE[$284]($285);
      label = 78; break;
    case 78: 
      label = 79; break;
    case 79: 
      var $288=$err;
      var $289=(($288)|(0))!=0;
      if ($289) { label = 80; break; } else { label = 81; break; }
    case 80: 
      label = 19; break;
    case 81: 
      label = 82; break;
    case 82: 
      label = 83; break;
    case 83: 
      var $294=HEAP32[(($big_buffer)>>2)];
      var $295=(($294)|(0))!=0;
      if ($295) { label = 84; break; } else { label = 90; break; }
    case 84: 
      label = 85; break;
    case 85: 
      var $298=HEAP32[(($big_buffer)>>2)];
      var $299=(($298)|0);
      var $300=HEAP32[(($299)>>2)];
      var $301=((($300)-(1))|0);
      HEAP32[(($299)>>2)]=$301;
      var $302=(($301)|(0))!=0;
      if ($302) { label = 86; break; } else { label = 87; break; }
    case 86: 
      label = 88; break;
    case 87: 
      var $305=HEAP32[(($big_buffer)>>2)];
      var $306=(($305+4)|0);
      var $307=HEAP32[(($306)>>2)];
      var $308=(($307+24)|0);
      var $309=HEAP32[(($308)>>2)];
      var $310=HEAP32[(($big_buffer)>>2)];
      FUNCTION_TABLE[$309]($310);
      label = 88; break;
    case 88: 
      label = 89; break;
    case 89: 
      label = 90; break;
    case 90: 
      var $314=$list;
      $1=$314;
      label = 91; break;
    case 91: 
      var $316=$1;
      STACKTOP = __stackBase__;
      return $316;
    default: assert(0, "bad label: " + label);
  }
}
function _BZ2File_write($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $ret;
      var $pbuf=__stackBase__;
      var $buf;
      var $len;
      var $bzerror=(__stackBase__)+(52);
      $2=$self;
      $3=$args;
      $ret=0;
      var $4=$3;
      var $5=_PyArg_ParseTuple($4, ((__str79)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$pbuf,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 11; break;
    case 3: 
      var $9=(($pbuf)|0);
      var $10=HEAP32[(($9)>>2)];
      $buf=$10;
      var $11=(($pbuf+8)|0);
      var $12=HEAP32[(($11)>>2)];
      $len=$12;
      var $13=$2;
      var $14=(($13+44)|0);
      var $15=HEAP32[(($14)>>2)];
      if ((($15)|(0))==3) {
        label = 4; break;
      }
      else if ((($15)|(0))==0) {
        label = 5; break;
      }
      else {
      label = 6; break;
      }
    case 4: 
      label = 7; break;
    case 5: 
      var $18=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($18, ((__str71)|0));
      label = 10; break;
    case 6: 
      var $20=HEAP32[((_PyExc_IOError)>>2)];
      _PyErr_SetString($20, ((__str76)|0));
      label = 10; break;
    case 7: 
      var $22=$2;
      var $23=(($22+24)|0);
      HEAP32[(($23)>>2)]=0;
      var $24=$2;
      var $25=(($24+40)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$buf;
      var $28=$len;
      _BZ2_bzWrite($bzerror, $26, $27, $28);
      var $29=$len;
      var $30=$2;
      var $31=(($30+48)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=((($32)+($29))|0);
      HEAP32[(($31)>>2)]=$33;
      var $34=HEAP32[(($bzerror)>>2)];
      var $35=(($34)|(0))!=0;
      if ($35) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $37=HEAP32[(($bzerror)>>2)];
      var $38=_Util_CatchBZ2Error($37);
      label = 10; break;
    case 9: 
      var $40=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $41=((($40)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$41;
      $ret=__Py_NoneStruct;
      label = 10; break;
    case 10: 
      _PyBuffer_Release($pbuf);
      var $43=$ret;
      $1=$43;
      label = 11; break;
    case 11: 
      var $45=$1;
      STACKTOP = __stackBase__;
      return $45;
    default: assert(0, "bad label: " + label);
  }
}
function _BZ2File_writelines($self, $seq) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $list;
      var $iter;
      var $ret;
      var $line;
      var $i;
      var $j;
      var $index;
      var $len;
      var $islist;
      var $bzerror=__stackBase__;
      var $v;
      var $buffer=(__stackBase__)+(4);
      var $len1=(__stackBase__)+(8);
      $1=$self;
      $2=$seq;
      $list=0;
      $iter=0;
      $ret=0;
      var $3=$1;
      var $4=(($3+44)|0);
      var $5=HEAP32[(($4)>>2)];
      if ((($5)|(0))==3) {
        label = 2; break;
      }
      else if ((($5)|(0))==0) {
        label = 3; break;
      }
      else {
      label = 4; break;
      }
    case 2: 
      label = 5; break;
    case 3: 
      var $8=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($8, ((__str71)|0));
      label = 63; break;
    case 4: 
      var $10=HEAP32[((_PyExc_IOError)>>2)];
      _PyErr_SetString($10, ((__str76)|0));
      label = 63; break;
    case 5: 
      var $12=$2;
      var $13=(($12+4)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14+84)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$16 & 33554432;
      var $18=(($17)|(0))!=0;
      var $19=(($18)&(1));
      $islist=$19;
      var $20=$islist;
      var $21=(($20)|(0))!=0;
      if ($21) { label = 11; break; } else { label = 6; break; }
    case 6: 
      var $23=$2;
      var $24=_PyObject_GetIter($23);
      $iter=$24;
      var $25=$iter;
      var $26=(($25)|(0))==0;
      if ($26) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $28=HEAP32[((_PyExc_TypeError)>>2)];
      _PyErr_SetString($28, ((__str77)|0));
      label = 63; break;
    case 8: 
      var $30=_PyList_New(1000);
      $list=$30;
      var $31=$list;
      var $32=(($31)|(0))==0;
      if ($32) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 63; break;
    case 10: 
      label = 11; break;
    case 11: 
      $index=0;
      label = 12; break;
    case 12: 
      var $37=$islist;
      var $38=(($37)|(0))!=0;
      if ($38) { label = 13; break; } else { label = 26; break; }
    case 13: 
      label = 14; break;
    case 14: 
      var $41=$list;
      var $42=(($41)|(0))==0;
      if ($42) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 22; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $46=$list;
      var $47=(($46)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=((($48)-(1))|0);
      HEAP32[(($47)>>2)]=$49;
      var $50=(($49)|(0))!=0;
      if ($50) { label = 18; break; } else { label = 19; break; }
    case 18: 
      label = 20; break;
    case 19: 
      var $53=$list;
      var $54=(($53+4)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=(($55+24)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=$list;
      FUNCTION_TABLE[$57]($58);
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $63=$2;
      var $64=$index;
      var $65=$index;
      var $66=((($65)+(1000))|0);
      var $67=_PyList_GetSlice($63, $64, $66);
      $list=$67;
      var $68=$list;
      var $69=(($68)|(0))==0;
      if ($69) { label = 24; break; } else { label = 25; break; }
    case 24: 
      label = 63; break;
    case 25: 
      var $72=$list;
      var $73=$72;
      var $74=(($73+8)|0);
      var $75=HEAP32[(($74)>>2)];
      $j=$75;
      label = 35; break;
    case 26: 
      $j=0;
      label = 27; break;
    case 27: 
      var $78=$j;
      var $79=(($78)|(0)) < 1000;
      if ($79) { label = 28; break; } else { label = 34; break; }
    case 28: 
      var $81=$iter;
      var $82=_PyIter_Next($81);
      $line=$82;
      var $83=$line;
      var $84=(($83)|(0))==0;
      if ($84) { label = 29; break; } else { label = 32; break; }
    case 29: 
      var $86=_PyErr_Occurred();
      var $87=(($86)|(0))!=0;
      if ($87) { label = 30; break; } else { label = 31; break; }
    case 30: 
      label = 63; break;
    case 31: 
      label = 34; break;
    case 32: 
      var $91=$list;
      var $92=$j;
      var $93=$line;
      var $94=_PyList_SetItem($91, $92, $93);
      label = 33; break;
    case 33: 
      var $96=$j;
      var $97=((($96)+(1))|0);
      $j=$97;
      label = 27; break;
    case 34: 
      label = 35; break;
    case 35: 
      var $100=$j;
      var $101=(($100)|(0))==0;
      if ($101) { label = 36; break; } else { label = 37; break; }
    case 36: 
      label = 62; break;
    case 37: 
      $i=0;
      label = 38; break;
    case 38: 
      var $105=$i;
      var $106=$j;
      var $107=(($105)|(0)) < (($106)|(0));
      if ($107) { label = 39; break; } else { label = 52; break; }
    case 39: 
      var $109=$i;
      var $110=$list;
      var $111=$110;
      var $112=(($111+12)|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=(($113+($109<<2))|0);
      var $115=HEAP32[(($114)>>2)];
      $v=$115;
      var $116=$v;
      var $117=(($116+4)|0);
      var $118=HEAP32[(($117)>>2)];
      var $119=(($118+84)|0);
      var $120=HEAP32[(($119)>>2)];
      var $121=$120 & 134217728;
      var $122=(($121)|(0))!=0;
      if ($122) { label = 50; break; } else { label = 40; break; }
    case 40: 
      var $124=$v;
      var $125=_PyObject_AsCharBuffer($124, $buffer, $len1);
      var $126=(($125)|(0))!=0;
      if ($126) { label = 41; break; } else { label = 42; break; }
    case 41: 
      var $128=HEAP32[((_PyExc_TypeError)>>2)];
      _PyErr_SetString($128, ((__str78)|0));
      label = 63; break;
    case 42: 
      var $130=HEAP32[(($buffer)>>2)];
      var $131=HEAP32[(($len1)>>2)];
      var $132=_PyString_FromStringAndSize($130, $131);
      $line=$132;
      var $133=$line;
      var $134=(($133)|(0))==0;
      if ($134) { label = 43; break; } else { label = 44; break; }
    case 43: 
      label = 63; break;
    case 44: 
      label = 45; break;
    case 45: 
      var $138=$v;
      var $139=(($138)|0);
      var $140=HEAP32[(($139)>>2)];
      var $141=((($140)-(1))|0);
      HEAP32[(($139)>>2)]=$141;
      var $142=(($141)|(0))!=0;
      if ($142) { label = 46; break; } else { label = 47; break; }
    case 46: 
      label = 48; break;
    case 47: 
      var $145=$v;
      var $146=(($145+4)|0);
      var $147=HEAP32[(($146)>>2)];
      var $148=(($147+24)|0);
      var $149=HEAP32[(($148)>>2)];
      var $150=$v;
      FUNCTION_TABLE[$149]($150);
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      var $153=$line;
      var $154=$i;
      var $155=$list;
      var $156=$155;
      var $157=(($156+12)|0);
      var $158=HEAP32[(($157)>>2)];
      var $159=(($158+($154<<2))|0);
      HEAP32[(($159)>>2)]=$153;
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      var $162=$i;
      var $163=((($162)+(1))|0);
      $i=$163;
      label = 38; break;
    case 52: 
      var $165=$1;
      var $166=(($165+24)|0);
      HEAP32[(($166)>>2)]=0;
      $i=0;
      label = 53; break;
    case 53: 
      var $168=$i;
      var $169=$j;
      var $170=(($168)|(0)) < (($169)|(0));
      if ($170) { label = 54; break; } else { label = 58; break; }
    case 54: 
      var $172=$i;
      var $173=$list;
      var $174=$173;
      var $175=(($174+12)|0);
      var $176=HEAP32[(($175)>>2)];
      var $177=(($176+($172<<2))|0);
      var $178=HEAP32[(($177)>>2)];
      $line=$178;
      var $179=$line;
      var $180=$179;
      var $181=(($180+8)|0);
      var $182=HEAP32[(($181)>>2)];
      $len=$182;
      var $183=$1;
      var $184=(($183+40)|0);
      var $185=HEAP32[(($184)>>2)];
      var $186=$line;
      var $187=$186;
      var $188=(($187+20)|0);
      var $189=(($188)|0);
      var $190=$len;
      _BZ2_bzWrite($bzerror, $185, $189, $190);
      var $191=HEAP32[(($bzerror)>>2)];
      var $192=(($191)|(0))!=0;
      if ($192) { label = 55; break; } else { label = 56; break; }
    case 55: 
      var $194=HEAP32[(($bzerror)>>2)];
      var $195=_Util_CatchBZ2Error($194);
      label = 63; break;
    case 56: 
      label = 57; break;
    case 57: 
      var $198=$i;
      var $199=((($198)+(1))|0);
      $i=$199;
      label = 53; break;
    case 58: 
      var $201=$j;
      var $202=(($201)|(0)) < 1000;
      if ($202) { label = 59; break; } else { label = 60; break; }
    case 59: 
      label = 62; break;
    case 60: 
      label = 61; break;
    case 61: 
      var $206=$index;
      var $207=((($206)+(1000))|0);
      $index=$207;
      label = 12; break;
    case 62: 
      var $209=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $210=((($209)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$210;
      $ret=__Py_NoneStruct;
      label = 63; break;
    case 63: 
      label = 64; break;
    case 64: 
      var $213=$list;
      var $214=(($213)|(0))==0;
      if ($214) { label = 65; break; } else { label = 66; break; }
    case 65: 
      label = 72; break;
    case 66: 
      label = 67; break;
    case 67: 
      var $218=$list;
      var $219=(($218)|0);
      var $220=HEAP32[(($219)>>2)];
      var $221=((($220)-(1))|0);
      HEAP32[(($219)>>2)]=$221;
      var $222=(($221)|(0))!=0;
      if ($222) { label = 68; break; } else { label = 69; break; }
    case 68: 
      label = 70; break;
    case 69: 
      var $225=$list;
      var $226=(($225+4)|0);
      var $227=HEAP32[(($226)>>2)];
      var $228=(($227+24)|0);
      var $229=HEAP32[(($228)>>2)];
      var $230=$list;
      FUNCTION_TABLE[$229]($230);
      label = 70; break;
    case 70: 
      label = 71; break;
    case 71: 
      label = 72; break;
    case 72: 
      label = 73; break;
    case 73: 
      label = 74; break;
    case 74: 
      var $236=$iter;
      var $237=(($236)|(0))==0;
      if ($237) { label = 75; break; } else { label = 76; break; }
    case 75: 
      label = 82; break;
    case 76: 
      label = 77; break;
    case 77: 
      var $241=$iter;
      var $242=(($241)|0);
      var $243=HEAP32[(($242)>>2)];
      var $244=((($243)-(1))|0);
      HEAP32[(($242)>>2)]=$244;
      var $245=(($244)|(0))!=0;
      if ($245) { label = 78; break; } else { label = 79; break; }
    case 78: 
      label = 80; break;
    case 79: 
      var $248=$iter;
      var $249=(($248+4)|0);
      var $250=HEAP32[(($249)>>2)];
      var $251=(($250+24)|0);
      var $252=HEAP32[(($251)>>2)];
      var $253=$iter;
      FUNCTION_TABLE[$252]($253);
      label = 80; break;
    case 80: 
      label = 81; break;
    case 81: 
      label = 82; break;
    case 82: 
      label = 83; break;
    case 83: 
      var $258=$ret;
      STACKTOP = __stackBase__;
      return $258;
    default: assert(0, "bad label: " + label);
  }
}
function _BZ2File_tell($self, $args) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $ret;
      $1=$self;
      $2=$args;
      $ret=0;
      var $3=$1;
      var $4=(($3+44)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))==0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($8, ((__str71)|0));
      label = 4; break;
    case 3: 
      var $10=$1;
      var $11=(($10+48)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=_PyInt_FromLong($12);
      $ret=$13;
      label = 4; break;
    case 4: 
      var $15=$ret;
      return $15;
    default: assert(0, "bad label: " + label);
  }
}
function _BZ2File_seek($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8204)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $where=__stackBase__;
      var $offobj=(__stackBase__)+(4);
      var $offset;
      var $small_buffer=(__stackBase__)+(8);
      var $buffer;
      var $buffersize;
      var $bytesread;
      var $readsize;
      var $chunksize;
      var $bzerror=(__stackBase__)+(8200);
      var $ret;
      $2=$self;
      $3=$args;
      HEAP32[(($where)>>2)]=0;
      var $4=(($small_buffer)|0);
      $buffer=$4;
      $buffersize=8192;
      $bytesread=0;
      $ret=0;
      var $5=$3;
      var $6=_PyArg_ParseTuple($5, ((__str72)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$offobj,HEAP32[(((tempInt)+(4))>>2)]=$where,tempInt));
      var $7=(($6)|(0))!=0;
      if ($7) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 62; break;
    case 3: 
      var $10=HEAP32[(($offobj)>>2)];
      var $11=_PyInt_AsLong($10);
      $offset=$11;
      var $12=_PyErr_Occurred();
      var $13=(($12)|(0))!=0;
      if ($13) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=0;
      label = 62; break;
    case 5: 
      var $16=$2;
      _Util_DropReadAhead($16);
      var $17=$2;
      var $18=(($17+44)|0);
      var $19=HEAP32[(($18)>>2)];
      if ((($19)|(0))==1 | (($19)|(0))==2) {
        label = 6; break;
      }
      else if ((($19)|(0))==0) {
        label = 7; break;
      }
      else {
      label = 8; break;
      }
    case 6: 
      label = 9; break;
    case 7: 
      var $22=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($22, ((__str71)|0));
      label = 61; break;
    case 8: 
      var $24=HEAP32[((_PyExc_IOError)>>2)];
      _PyErr_SetString($24, ((__str73)|0));
      label = 61; break;
    case 9: 
      var $26=HEAP32[(($where)>>2)];
      var $27=(($26)|(0))==2;
      if ($27) { label = 10; break; } else { label = 23; break; }
    case 10: 
      var $29=$2;
      var $30=(($29+52)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31)|(0))==-1;
      if ($32) { label = 11; break; } else { label = 22; break; }
    case 11: 
      var $34=$2;
      var $35=(($34+44)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36)|(0))!=2;
      if ($37) { label = 12; break; } else { label = 13; break; }
    case 12: 
      label = 14; break;
    case 13: 
      ___assert_func(((__str)|0), 1056, ((___func___BZ2File_seek)|0), ((__str74)|0));
      throw "Reached an unreachable!";
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $43=$2;
      var $44=(($43+40)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=$buffer;
      var $47=$buffersize;
      var $48=$2;
      var $49=_Util_UnivNewlineRead($bzerror, $45, $46, $47, $48);
      $chunksize=$49;
      var $50=$chunksize;
      var $51=$2;
      var $52=(($51+48)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=((($53)+($50))|0);
      HEAP32[(($52)>>2)]=$54;
      var $55=$chunksize;
      var $56=$bytesread;
      var $57=((($56)+($55))|0);
      $bytesread=$57;
      var $58=HEAP32[(($bzerror)>>2)];
      var $59=(($58)|(0))==4;
      if ($59) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 21; break;
    case 17: 
      var $62=HEAP32[(($bzerror)>>2)];
      var $63=(($62)|(0))!=0;
      if ($63) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $65=HEAP32[(($bzerror)>>2)];
      var $66=_Util_CatchBZ2Error($65);
      label = 61; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 15; break;
    case 21: 
      var $70=$2;
      var $71=(($70+44)|0);
      HEAP32[(($71)>>2)]=2;
      var $72=$2;
      var $73=(($72+48)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=$2;
      var $76=(($75+52)|0);
      HEAP32[(($76)>>2)]=$74;
      $bytesread=0;
      label = 22; break;
    case 22: 
      var $78=$2;
      var $79=(($78+52)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=$offset;
      var $82=((($80)+($81))|0);
      $offset=$82;
      label = 26; break;
    case 23: 
      var $84=HEAP32[(($where)>>2)];
      var $85=(($84)|(0))==1;
      if ($85) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $87=$2;
      var $88=(($87+48)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=$offset;
      var $91=((($89)+($90))|0);
      $offset=$91;
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $94=$offset;
      var $95=$2;
      var $96=(($95+48)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=(($94)|(0)) >= (($97)|(0));
      if ($98) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $100=$2;
      var $101=(($100+48)|0);
      var $102=HEAP32[(($101)>>2)];
      var $103=$offset;
      var $104=((($103)-($102))|0);
      $offset=$104;
      label = 44; break;
    case 28: 
      var $106=$2;
      var $107=(($106+40)|0);
      var $108=HEAP32[(($107)>>2)];
      _BZ2_bzReadClose($bzerror, $108);
      var $109=$2;
      var $110=(($109+40)|0);
      var $111=HEAP32[(($110)>>2)];
      var $112=(($111)|(0))!=0;
      if ($112) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $114=$2;
      var $115=(($114+8)|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=$116;
      _PyFile_DecUseCount($117);
      var $118=$2;
      var $119=(($118+40)|0);
      HEAP32[(($119)>>2)]=0;
      label = 30; break;
    case 30: 
      var $121=HEAP32[(($bzerror)>>2)];
      var $122=(($121)|(0))!=0;
      if ($122) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $124=HEAP32[(($bzerror)>>2)];
      var $125=_Util_CatchBZ2Error($124);
      label = 61; break;
    case 32: 
      var $127=$2;
      var $128=(($127+8)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=_PyObject_CallMethod($129, ((__str66)|0), ((__str75)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $ret=$130;
      var $131=$ret;
      var $132=(($131)|(0))!=0;
      if ($132) { label = 34; break; } else { label = 33; break; }
    case 33: 
      label = 61; break;
    case 34: 
      label = 35; break;
    case 35: 
      var $136=$ret;
      var $137=(($136)|0);
      var $138=HEAP32[(($137)>>2)];
      var $139=((($138)-(1))|0);
      HEAP32[(($137)>>2)]=$139;
      var $140=(($139)|(0))!=0;
      if ($140) { label = 36; break; } else { label = 37; break; }
    case 36: 
      label = 38; break;
    case 37: 
      var $143=$ret;
      var $144=(($143+4)|0);
      var $145=HEAP32[(($144)>>2)];
      var $146=(($145+24)|0);
      var $147=HEAP32[(($146)>>2)];
      var $148=$ret;
      FUNCTION_TABLE[$147]($148);
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      $ret=0;
      var $151=$2;
      var $152=(($151+48)|0);
      HEAP32[(($152)>>2)]=0;
      var $153=$2;
      var $154=(($153+8)|0);
      var $155=HEAP32[(($154)>>2)];
      var $156=_PyFile_AsFile($155);
      var $157=_BZ2_bzReadOpen($bzerror, $156, 0, 0, 0, 0);
      var $158=$2;
      var $159=(($158+40)|0);
      HEAP32[(($159)>>2)]=$157;
      var $160=$2;
      var $161=(($160+40)|0);
      var $162=HEAP32[(($161)>>2)];
      var $163=(($162)|(0))!=0;
      if ($163) { label = 40; break; } else { label = 41; break; }
    case 40: 
      var $165=$2;
      var $166=(($165+8)|0);
      var $167=HEAP32[(($166)>>2)];
      var $168=$167;
      _PyFile_IncUseCount($168);
      label = 41; break;
    case 41: 
      var $170=HEAP32[(($bzerror)>>2)];
      var $171=(($170)|(0))!=0;
      if ($171) { label = 42; break; } else { label = 43; break; }
    case 42: 
      var $173=HEAP32[(($bzerror)>>2)];
      var $174=_Util_CatchBZ2Error($173);
      label = 61; break;
    case 43: 
      var $176=$2;
      var $177=(($176+44)|0);
      HEAP32[(($177)>>2)]=1;
      label = 44; break;
    case 44: 
      var $179=$offset;
      var $180=(($179)|(0)) <= 0;
      if ($180) { label = 46; break; } else { label = 45; break; }
    case 45: 
      var $182=$2;
      var $183=(($182+44)|0);
      var $184=HEAP32[(($183)>>2)];
      var $185=(($184)|(0))==2;
      if ($185) { label = 46; break; } else { label = 47; break; }
    case 46: 
      label = 60; break;
    case 47: 
      label = 48; break;
    case 48: 
      var $189=$offset;
      var $190=$bytesread;
      var $191=((($189)-($190))|0);
      var $192=$buffersize;
      var $193=(($191)>>>(0)) > (($192)>>>(0));
      if ($193) { label = 49; break; } else { label = 50; break; }
    case 49: 
      var $195=$buffersize;
      $readsize=$195;
      label = 51; break;
    case 50: 
      var $197=$offset;
      var $198=$bytesread;
      var $199=((($197)-($198))|0);
      $readsize=$199;
      label = 51; break;
    case 51: 
      var $201=$2;
      var $202=(($201+40)|0);
      var $203=HEAP32[(($202)>>2)];
      var $204=$buffer;
      var $205=$readsize;
      var $206=$2;
      var $207=_Util_UnivNewlineRead($bzerror, $203, $204, $205, $206);
      $chunksize=$207;
      var $208=$chunksize;
      var $209=$2;
      var $210=(($209+48)|0);
      var $211=HEAP32[(($210)>>2)];
      var $212=((($211)+($208))|0);
      HEAP32[(($210)>>2)]=$212;
      var $213=$chunksize;
      var $214=$bytesread;
      var $215=((($214)+($213))|0);
      $bytesread=$215;
      var $216=HEAP32[(($bzerror)>>2)];
      var $217=(($216)|(0))==4;
      if ($217) { label = 52; break; } else { label = 53; break; }
    case 52: 
      var $219=$2;
      var $220=(($219+48)|0);
      var $221=HEAP32[(($220)>>2)];
      var $222=$2;
      var $223=(($222+52)|0);
      HEAP32[(($223)>>2)]=$221;
      var $224=$2;
      var $225=(($224+44)|0);
      HEAP32[(($225)>>2)]=2;
      label = 59; break;
    case 53: 
      var $227=HEAP32[(($bzerror)>>2)];
      var $228=(($227)|(0))!=0;
      if ($228) { label = 54; break; } else { label = 55; break; }
    case 54: 
      var $230=HEAP32[(($bzerror)>>2)];
      var $231=_Util_CatchBZ2Error($230);
      label = 61; break;
    case 55: 
      label = 56; break;
    case 56: 
      var $234=$bytesread;
      var $235=$offset;
      var $236=(($234)|(0))==(($235)|(0));
      if ($236) { label = 57; break; } else { label = 58; break; }
    case 57: 
      label = 59; break;
    case 58: 
      label = 48; break;
    case 59: 
      label = 60; break;
    case 60: 
      var $241=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $242=((($241)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$242;
      $ret=__Py_NoneStruct;
      label = 61; break;
    case 61: 
      var $244=$ret;
      $1=$244;
      label = 62; break;
    case 62: 
      var $246=$1;
      STACKTOP = __stackBase__;
      return $246;
    default: assert(0, "bad label: " + label);
  }
}
function _BZ2File_close($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $ret;
      var $bzerror=__stackBase__;
      $1=$self;
      $ret=0;
      HEAP32[(($bzerror)>>2)]=0;
      var $2=$1;
      var $3=(($2+44)|0);
      var $4=HEAP32[(($3)>>2)];
      if ((($4)|(0))==1 | (($4)|(0))==2) {
        label = 2; break;
      }
      else if ((($4)|(0))==3) {
        label = 3; break;
      }
      else {
      label = 4; break;
      }
    case 2: 
      var $6=$1;
      var $7=(($6+40)|0);
      var $8=HEAP32[(($7)>>2)];
      _BZ2_bzReadClose($bzerror, $8);
      label = 4; break;
    case 3: 
      var $10=$1;
      var $11=(($10+40)|0);
      var $12=HEAP32[(($11)>>2)];
      _BZ2_bzWriteClose($bzerror, $12, 0, 0, 0);
      label = 4; break;
    case 4: 
      var $14=$1;
      var $15=(($14+40)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16)|(0))!=0;
      if ($17) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $19=$1;
      var $20=(($19+8)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$21;
      _PyFile_DecUseCount($22);
      var $23=$1;
      var $24=(($23+40)|0);
      HEAP32[(($24)>>2)]=0;
      label = 6; break;
    case 6: 
      var $26=$1;
      var $27=(($26+44)|0);
      HEAP32[(($27)>>2)]=0;
      var $28=$1;
      var $29=(($28+8)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=_PyObject_CallMethod($30, ((__str68)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $ret=$31;
      var $32=HEAP32[(($bzerror)>>2)];
      var $33=(($32)|(0))!=0;
      if ($33) { label = 7; break; } else { label = 18; break; }
    case 7: 
      var $35=HEAP32[(($bzerror)>>2)];
      var $36=_Util_CatchBZ2Error($35);
      label = 8; break;
    case 8: 
      var $38=$ret;
      var $39=(($38)|(0))==0;
      if ($39) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 16; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $43=$ret;
      var $44=(($43)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=((($45)-(1))|0);
      HEAP32[(($44)>>2)]=$46;
      var $47=(($46)|(0))!=0;
      if ($47) { label = 12; break; } else { label = 13; break; }
    case 12: 
      label = 14; break;
    case 13: 
      var $50=$ret;
      var $51=(($50+4)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=(($52+24)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=$ret;
      FUNCTION_TABLE[$54]($55);
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      $ret=0;
      label = 18; break;
    case 18: 
      var $61=$ret;
      STACKTOP = __stackBase__;
      return $61;
    default: assert(0, "bad label: " + label);
  }
}
function _BZ2File_enter($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $2=$self;
      var $3=$2;
      var $4=(($3+44)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))==0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($8, ((__str71)|0));
      $1=0;
      label = 4; break;
    case 3: 
      var $10=$2;
      var $11=$10;
      var $12=(($11)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=((($13)+(1))|0);
      HEAP32[(($12)>>2)]=$14;
      var $15=$2;
      var $16=$15;
      $1=$16;
      label = 4; break;
    case 4: 
      var $18=$1;
      return $18;
    default: assert(0, "bad label: " + label);
  }
}
function _BZ2File_exit($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $ret;
      $2=$self;
      $3=$args;
      var $4=$2;
      var $5=$4;
      var $6=_PyObject_CallMethod($5, ((__str68)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $ret=$6;
      var $7=$ret;
      var $8=(($7)|(0))!=0;
      if ($8) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 9; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $12=$ret;
      var $13=(($12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=((($14)-(1))|0);
      HEAP32[(($13)>>2)]=$15;
      var $16=(($15)|(0))!=0;
      if ($16) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 7; break;
    case 6: 
      var $19=$ret;
      var $20=(($19+4)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21+24)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=$ret;
      FUNCTION_TABLE[$23]($24);
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $27=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $28=((($27)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$28;
      $1=__Py_NoneStruct;
      label = 9; break;
    case 9: 
      var $30=$1;
      STACKTOP = __stackBase__;
      return $30;
    default: assert(0, "bad label: " + label);
  }
}
function _Util_DropReadAhead($f) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$f;
      var $2=$1;
      var $3=(($2+12)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=(($4)|(0))!=0;
      if ($5) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $7=$1;
      var $8=(($7+12)|0);
      var $9=HEAP32[(($8)>>2)];
      _PyMem_Free($9);
      var $10=$1;
      var $11=(($10+12)|0);
      HEAP32[(($11)>>2)]=0;
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _check_iterbuffered($f) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $2=$f;
      var $3=$2;
      var $4=(($3+12)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))!=0;
      if ($6) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $8=$2;
      var $9=(($8+16)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=$2;
      var $12=(($11+20)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=$10;
      var $15=$13;
      var $16=((($14)-($15))|0);
      var $17=(($16)|(0)) > 0;
      if ($17) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $19=$2;
      var $20=(($19+12)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21)|0);
      var $23=HEAP8[($22)];
      var $24=(($23 << 24) >> 24);
      var $25=(($24)|(0))!=0;
      if ($25) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $27=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($27, ((__str83)|0));
      $1=-1;
      label = 6; break;
    case 5: 
      $1=0;
      label = 6; break;
    case 6: 
      var $30=$1;
      return $30;
    default: assert(0, "bad label: " + label);
  }
}
function _Util_GetLine($f, $n) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $c=__stackBase__;
      var $buf;
      var $end;
      var $total_v_size;
      var $used_v_size;
      var $increment;
      var $v=(__stackBase__)+(4);
      var $bzerror=(__stackBase__)+(8);
      var $bytes_read;
      var $newlinetypes;
      var $skipnextlf;
      var $univ_newline;
      $2=$f;
      $3=$n;
      var $4=$2;
      var $5=(($4+32)|0);
      var $6=HEAP32[(($5)>>2)];
      $newlinetypes=$6;
      var $7=$2;
      var $8=(($7+36)|0);
      var $9=HEAP32[(($8)>>2)];
      $skipnextlf=$9;
      var $10=$2;
      var $11=(($10+28)|0);
      var $12=HEAP32[(($11)>>2)];
      $univ_newline=$12;
      var $13=$3;
      var $14=(($13)|(0)) > 0;
      if ($14) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $16=$3;
      var $19 = $16;label = 4; break;
    case 3: 
      var $19 = 100;label = 4; break;
    case 4: 
      var $19;
      $total_v_size=$19;
      var $20=$total_v_size;
      var $21=_PyString_FromStringAndSize(0, $20);
      HEAP32[(($v)>>2)]=$21;
      var $22=HEAP32[(($v)>>2)];
      var $23=(($22)|(0))==0;
      if ($23) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $1=0;
      label = 62; break;
    case 6: 
      var $26=HEAP32[(($v)>>2)];
      var $27=$26;
      var $28=(($27+20)|0);
      var $29=(($28)|0);
      $buf=$29;
      var $30=$buf;
      var $31=$total_v_size;
      var $32=(($30+$31)|0);
      $end=$32;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $35=$buf;
      var $36=$end;
      var $37=(($35)|(0))!=(($36)|(0));
      if ($37) { label = 9; break; } else { label = 31; break; }
    case 9: 
      var $39=$2;
      var $40=(($39+40)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=_BZ2_bzRead($bzerror, $41, $c, 1);
      $bytes_read=$42;
      var $43=$2;
      var $44=(($43+48)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=((($45)+(1))|0);
      HEAP32[(($44)>>2)]=$46;
      var $47=$bytes_read;
      var $48=(($47)|(0))==0;
      if ($48) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 31; break;
    case 11: 
      var $51=$univ_newline;
      var $52=(($51)|(0))!=0;
      if ($52) { label = 12; break; } else { label = 27; break; }
    case 12: 
      var $54=$skipnextlf;
      var $55=(($54)|(0))!=0;
      if ($55) { label = 13; break; } else { label = 21; break; }
    case 13: 
      $skipnextlf=0;
      var $57=HEAP8[($c)];
      var $58=(($57 << 24) >> 24);
      var $59=(($58)|(0))==10;
      if ($59) { label = 14; break; } else { label = 19; break; }
    case 14: 
      var $61=$newlinetypes;
      var $62=$61 | 4;
      $newlinetypes=$62;
      var $63=HEAP32[(($bzerror)>>2)];
      var $64=(($63)|(0))!=0;
      if ($64) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 31; break;
    case 16: 
      var $67=$2;
      var $68=(($67+40)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=_BZ2_bzRead($bzerror, $69, $c, 1);
      $bytes_read=$70;
      var $71=$2;
      var $72=(($71+48)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=((($73)+(1))|0);
      HEAP32[(($72)>>2)]=$74;
      var $75=$bytes_read;
      var $76=(($75)|(0))==0;
      if ($76) { label = 17; break; } else { label = 18; break; }
    case 17: 
      label = 31; break;
    case 18: 
      label = 20; break;
    case 19: 
      var $80=$newlinetypes;
      var $81=$80 | 1;
      $newlinetypes=$81;
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $84=HEAP8[($c)];
      var $85=(($84 << 24) >> 24);
      var $86=(($85)|(0))==13;
      if ($86) { label = 22; break; } else { label = 23; break; }
    case 22: 
      $skipnextlf=1;
      HEAP8[($c)]=10;
      label = 26; break;
    case 23: 
      var $89=HEAP8[($c)];
      var $90=(($89 << 24) >> 24);
      var $91=(($90)|(0))==10;
      if ($91) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $93=$newlinetypes;
      var $94=$93 | 2;
      $newlinetypes=$94;
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $98=HEAP8[($c)];
      var $99=$buf;
      var $100=(($99+1)|0);
      $buf=$100;
      HEAP8[($99)]=$98;
      var $101=HEAP32[(($bzerror)>>2)];
      var $102=(($101)|(0))!=0;
      if ($102) { label = 29; break; } else { label = 28; break; }
    case 28: 
      var $104=HEAP8[($c)];
      var $105=(($104 << 24) >> 24);
      var $106=(($105)|(0))==10;
      if ($106) { label = 29; break; } else { label = 30; break; }
    case 29: 
      label = 31; break;
    case 30: 
      label = 8; break;
    case 31: 
      var $110=$univ_newline;
      var $111=(($110)|(0))!=0;
      if ($111) { label = 32; break; } else { label = 35; break; }
    case 32: 
      var $113=HEAP32[(($bzerror)>>2)];
      var $114=(($113)|(0))==4;
      if ($114) { label = 33; break; } else { label = 35; break; }
    case 33: 
      var $116=$skipnextlf;
      var $117=(($116)|(0))!=0;
      if ($117) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $119=$newlinetypes;
      var $120=$119 | 1;
      $newlinetypes=$120;
      label = 35; break;
    case 35: 
      var $122=$newlinetypes;
      var $123=$2;
      var $124=(($123+32)|0);
      HEAP32[(($124)>>2)]=$122;
      var $125=$skipnextlf;
      var $126=$2;
      var $127=(($126+36)|0);
      HEAP32[(($127)>>2)]=$125;
      var $128=HEAP32[(($bzerror)>>2)];
      var $129=(($128)|(0))==4;
      if ($129) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $131=$2;
      var $132=(($131+48)|0);
      var $133=HEAP32[(($132)>>2)];
      var $134=$2;
      var $135=(($134+52)|0);
      HEAP32[(($135)>>2)]=$133;
      var $136=$2;
      var $137=(($136+44)|0);
      HEAP32[(($137)>>2)]=2;
      label = 59; break;
    case 37: 
      var $139=HEAP32[(($bzerror)>>2)];
      var $140=(($139)|(0))!=0;
      if ($140) { label = 38; break; } else { label = 44; break; }
    case 38: 
      var $142=HEAP32[(($bzerror)>>2)];
      var $143=_Util_CatchBZ2Error($142);
      label = 39; break;
    case 39: 
      var $145=HEAP32[(($v)>>2)];
      var $146=(($145)|0);
      var $147=HEAP32[(($146)>>2)];
      var $148=((($147)-(1))|0);
      HEAP32[(($146)>>2)]=$148;
      var $149=(($148)|(0))!=0;
      if ($149) { label = 40; break; } else { label = 41; break; }
    case 40: 
      label = 42; break;
    case 41: 
      var $152=HEAP32[(($v)>>2)];
      var $153=(($152+4)|0);
      var $154=HEAP32[(($153)>>2)];
      var $155=(($154+24)|0);
      var $156=HEAP32[(($155)>>2)];
      var $157=HEAP32[(($v)>>2)];
      FUNCTION_TABLE[$156]($157);
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      $1=0;
      label = 62; break;
    case 44: 
      label = 45; break;
    case 45: 
      var $162=HEAP8[($c)];
      var $163=(($162 << 24) >> 24);
      var $164=(($163)|(0))==10;
      if ($164) { label = 46; break; } else { label = 47; break; }
    case 46: 
      label = 59; break;
    case 47: 
      var $167=$3;
      var $168=(($167)|(0)) > 0;
      if ($168) { label = 48; break; } else { label = 49; break; }
    case 48: 
      label = 59; break;
    case 49: 
      var $171=$total_v_size;
      $used_v_size=$171;
      var $172=$total_v_size;
      var $173=$172 >>> 2;
      $increment=$173;
      var $174=$increment;
      var $175=$total_v_size;
      var $176=((($175)+($174))|0);
      $total_v_size=$176;
      var $177=$total_v_size;
      var $178=(($177)>>>(0)) > 2147483647;
      if ($178) { label = 50; break; } else { label = 56; break; }
    case 50: 
      var $180=HEAP32[((_PyExc_OverflowError)>>2)];
      _PyErr_SetString($180, ((__str82)|0));
      label = 51; break;
    case 51: 
      var $182=HEAP32[(($v)>>2)];
      var $183=(($182)|0);
      var $184=HEAP32[(($183)>>2)];
      var $185=((($184)-(1))|0);
      HEAP32[(($183)>>2)]=$185;
      var $186=(($185)|(0))!=0;
      if ($186) { label = 52; break; } else { label = 53; break; }
    case 52: 
      label = 54; break;
    case 53: 
      var $189=HEAP32[(($v)>>2)];
      var $190=(($189+4)|0);
      var $191=HEAP32[(($190)>>2)];
      var $192=(($191+24)|0);
      var $193=HEAP32[(($192)>>2)];
      var $194=HEAP32[(($v)>>2)];
      FUNCTION_TABLE[$193]($194);
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      $1=0;
      label = 62; break;
    case 56: 
      var $198=$total_v_size;
      var $199=__PyString_Resize($v, $198);
      var $200=(($199)|(0)) < 0;
      if ($200) { label = 57; break; } else { label = 58; break; }
    case 57: 
      $1=0;
      label = 62; break;
    case 58: 
      var $203=HEAP32[(($v)>>2)];
      var $204=$203;
      var $205=(($204+20)|0);
      var $206=(($205)|0);
      var $207=$used_v_size;
      var $208=(($206+$207)|0);
      $buf=$208;
      var $209=HEAP32[(($v)>>2)];
      var $210=$209;
      var $211=(($210+20)|0);
      var $212=(($211)|0);
      var $213=$total_v_size;
      var $214=(($212+$213)|0);
      $end=$214;
      label = 7; break;
    case 59: 
      var $216=$buf;
      var $217=HEAP32[(($v)>>2)];
      var $218=$217;
      var $219=(($218+20)|0);
      var $220=(($219)|0);
      var $221=$216;
      var $222=$220;
      var $223=((($221)-($222))|0);
      $used_v_size=$223;
      var $224=$used_v_size;
      var $225=$total_v_size;
      var $226=(($224)|(0))!=(($225)|(0));
      if ($226) { label = 60; break; } else { label = 61; break; }
    case 60: 
      var $228=$used_v_size;
      var $229=__PyString_Resize($v, $228);
      label = 61; break;
    case 61: 
      var $231=HEAP32[(($v)>>2)];
      $1=$231;
      label = 62; break;
    case 62: 
      var $233=$1;
      STACKTOP = __stackBase__;
      return $233;
    default: assert(0, "bad label: " + label);
  }
}
function _Util_ReadAheadGetLineSkip($f, $skip, $bufsize) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $s;
      var $bufptr;
      var $buf;
      var $len;
      $2=$f;
      $3=$skip;
      $4=$bufsize;
      var $5=$2;
      var $6=(($5+12)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|(0))==0;
      if ($8) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $10=$2;
      var $11=$4;
      var $12=_Util_ReadAhead($10, $11);
      var $13=(($12)|(0)) < 0;
      if ($13) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=0;
      label = 17; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $17=$2;
      var $18=(($17+16)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=$2;
      var $21=(($20+20)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=$19;
      var $24=$22;
      var $25=((($23)-($24))|0);
      $len=$25;
      var $26=$len;
      var $27=(($26)|(0))==0;
      if ($27) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $29=$3;
      var $30=_PyString_FromStringAndSize(0, $29);
      var $31=$30;
      $1=$31;
      label = 17; break;
    case 7: 
      var $33=$2;
      var $34=(($33+20)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=$len;
      var $37=_memchr($35, 10, $36);
      $bufptr=$37;
      var $38=$bufptr;
      var $39=(($38)|(0))!=0;
      if ($39) { label = 8; break; } else { label = 13; break; }
    case 8: 
      var $41=$bufptr;
      var $42=(($41+1)|0);
      $bufptr=$42;
      var $43=$bufptr;
      var $44=$2;
      var $45=(($44+20)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=$43;
      var $48=$46;
      var $49=((($47)-($48))|0);
      $len=$49;
      var $50=$3;
      var $51=$len;
      var $52=((($50)+($51))|0);
      var $53=_PyString_FromStringAndSize(0, $52);
      var $54=$53;
      $s=$54;
      var $55=$s;
      var $56=(($55)|(0))==0;
      if ($56) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $1=0;
      label = 17; break;
    case 10: 
      var $59=$s;
      var $60=(($59+20)|0);
      var $61=(($60)|0);
      var $62=$3;
      var $63=(($61+$62)|0);
      var $64=$2;
      var $65=(($64+20)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=$len;
      assert($67 % 1 === 0);_memcpy($63, $66, $67);
      var $68=$bufptr;
      var $69=$2;
      var $70=(($69+20)|0);
      HEAP32[(($70)>>2)]=$68;
      var $71=$bufptr;
      var $72=$2;
      var $73=(($72+16)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=(($71)|(0))==(($74)|(0));
      if ($75) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $77=$2;
      _Util_DropReadAhead($77);
      label = 12; break;
    case 12: 
      label = 16; break;
    case 13: 
      var $80=$2;
      var $81=(($80+20)|0);
      var $82=HEAP32[(($81)>>2)];
      $bufptr=$82;
      var $83=$2;
      var $84=(($83+12)|0);
      var $85=HEAP32[(($84)>>2)];
      $buf=$85;
      var $86=$2;
      var $87=(($86+12)|0);
      HEAP32[(($87)>>2)]=0;
      var $88=$2;
      var $89=$3;
      var $90=$len;
      var $91=((($89)+($90))|0);
      var $92=$4;
      var $93=$4;
      var $94=$93 >> 2;
      var $95=((($92)+($94))|0);
      var $96=_Util_ReadAheadGetLineSkip($88, $91, $95);
      $s=$96;
      var $97=$s;
      var $98=(($97)|(0))==0;
      if ($98) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $100=$buf;
      _PyMem_Free($100);
      $1=0;
      label = 17; break;
    case 15: 
      var $102=$s;
      var $103=(($102+20)|0);
      var $104=(($103)|0);
      var $105=$3;
      var $106=(($104+$105)|0);
      var $107=$bufptr;
      var $108=$len;
      assert($108 % 1 === 0);_memcpy($106, $107, $108);
      var $109=$buf;
      _PyMem_Free($109);
      label = 16; break;
    case 16: 
      var $111=$s;
      $1=$111;
      label = 17; break;
    case 17: 
      var $113=$1;
      return $113;
    default: assert(0, "bad label: " + label);
  }
}
function _Util_ReadAhead($f, $bufsize) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $chunksize;
      var $bzerror=__stackBase__;
      $2=$f;
      $3=$bufsize;
      var $4=$2;
      var $5=(($4+12)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0))!=0;
      if ($7) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $9=$2;
      var $10=(($9+16)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=$2;
      var $13=(($12+20)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$11;
      var $16=$14;
      var $17=((($15)-($16))|0);
      var $18=(($17)|(0)) >= 1;
      if ($18) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=0;
      label = 16; break;
    case 4: 
      var $21=$2;
      _Util_DropReadAhead($21);
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $24=$2;
      var $25=(($24+44)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26)|(0))==2;
      if ($27) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $29=$2;
      var $30=(($29+12)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=$2;
      var $33=(($32+20)|0);
      HEAP32[(($33)>>2)]=$31;
      var $34=$2;
      var $35=(($34+12)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=$2;
      var $38=(($37+16)|0);
      HEAP32[(($38)>>2)]=$36;
      $1=0;
      label = 16; break;
    case 8: 
      var $40=$3;
      var $41=_PyMem_Malloc($40);
      var $42=$2;
      var $43=(($42+12)|0);
      HEAP32[(($43)>>2)]=$41;
      var $44=(($41)|(0))==0;
      if ($44) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $46=_PyErr_NoMemory();
      $1=-1;
      label = 16; break;
    case 10: 
      var $48=$2;
      var $49=(($48+40)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=$2;
      var $52=(($51+12)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=$3;
      var $55=$2;
      var $56=_Util_UnivNewlineRead($bzerror, $50, $53, $54, $55);
      $chunksize=$56;
      var $57=$chunksize;
      var $58=$2;
      var $59=(($58+48)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=((($60)+($57))|0);
      HEAP32[(($59)>>2)]=$61;
      var $62=HEAP32[(($bzerror)>>2)];
      var $63=(($62)|(0))==4;
      if ($63) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $65=$2;
      var $66=(($65+48)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=$2;
      var $69=(($68+52)|0);
      HEAP32[(($69)>>2)]=$67;
      var $70=$2;
      var $71=(($70+44)|0);
      HEAP32[(($71)>>2)]=2;
      label = 15; break;
    case 12: 
      var $73=HEAP32[(($bzerror)>>2)];
      var $74=(($73)|(0))!=0;
      if ($74) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $76=HEAP32[(($bzerror)>>2)];
      var $77=_Util_CatchBZ2Error($76);
      var $78=$2;
      _Util_DropReadAhead($78);
      $1=-1;
      label = 16; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $81=$2;
      var $82=(($81+12)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=$2;
      var $85=(($84+20)|0);
      HEAP32[(($85)>>2)]=$83;
      var $86=$2;
      var $87=(($86+12)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=$chunksize;
      var $90=(($88+$89)|0);
      var $91=$2;
      var $92=(($91+16)|0);
      HEAP32[(($92)>>2)]=$90;
      $1=0;
      label = 16; break;
    case 16: 
      var $94=$1;
      STACKTOP = __stackBase__;
      return $94;
    default: assert(0, "bad label: " + label);
  }
}
// EMSCRIPTEN_END_FUNCS
// EMSCRIPTEN_END_FUNCS
// Warning: printing of i64 values may be slightly rounded! No deep i64 math used, so precise i64 code not included
var i64Math = null;
// === Auto-generated postamble setup entry stuff ===
function run(args) {
  initRuntime();
}
Module['run'] = run;
// {{PRE_RUN_ADDITIONS}}
run();
// {{POST_RUN_ADDITIONS}}
  // {{MODULE_ADDITIONS}}
  return Module;
});
