// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
// Capture the output of this into a variable, if you want
(function(FUNCTION_TABLE_OFFSET, globalScope) {
  var Module = {};
  var args = [];
  Module.arguments = [];
// === Auto-generated preamble library stuff ===
//========================================
// Runtime essentials
//========================================
function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.pop();
    var func = callback.func;
    if (typeof func === 'number') {
      func = FUNCTION_TABLE[func];
    }
    func(callback.arg === undefined ? null : callback.arg);
  }
}
var __ATINIT__ = []; // functions called during startup
function initRuntime() {
  callRuntimeCallbacks(__ATINIT__);
}
// === Body ===
var _quote_styles;
var _field_limit;
var _error_obj;
var _dialects;
var _dialect_kws;
var _csv_writerows_doc;
var _csv_writerow_doc;
var _csv_writer_doc;
var _csv_unregister_dialect_doc;
var _csv_register_dialect_doc;
var _csv_reader_doc;
var _csv_module_doc;
var _csv_methods;
var _csv_list_dialects_doc;
var _csv_get_dialect_doc;
var _csv_field_size_limit_doc;
var __str9;
var __str8;
var __str7;
var __str60;
var __str6;
var __str59;
var __str58;
var __str57;
var __str56;
var __str55;
var __str54;
var __str53;
var __str52;
var __str51;
var __str50;
var __str5;
var __str49;
var __str48;
var __str47;
var __str46;
var __str45;
var __str44;
var __str43;
var __str42;
var __str41;
var __str40;
var __str4;
var __str39;
var __str38;
var __str37;
var __str36;
var __str35;
var __str34;
var __str33;
var __str32;
var __str31;
var __str30;
var __str3;
var __str29;
var __str28;
var __str27;
var __str26;
var __str25;
var __str24;
var __str23;
var __str22;
var __str21;
var __str20;
var __str2;
var __str19;
var __str18;
var __str17;
var __str16;
var __str15;
var __str14;
var __str13;
var __str12;
var __str11;
var __str10;
var __str1;
var __str;
var _Writer_methods;
var _Writer_memberlist;
var _Writer_Type_doc;
var _Writer_Type;
var _Reader_methods;
var _Reader_memberlist;
var _Reader_Type_doc;
var _Reader_Type;
var _Dialect_memberlist;
var _Dialect_getsetlist;
var _Dialect_Type_doc;
var _Dialect_Type;
_quote_styles=allocate([0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_field_limit=allocate([0,0,2,0], "i8", ALLOC_NORMAL);
_error_obj=allocate([0,0,0,0], "i8", ALLOC_NORMAL);
_dialects=allocate([0,0,0,0], "i8", ALLOC_NORMAL);
_dialect_kws=allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_csv_writerows_doc=allocate([119,114,105,116,101,114,111,119,115,40,115,101,113,117,101,110,99,101,32,111,102,32,115,101,113,117,101,110,99,101,115,41,10,10,67,111,110,115,116,114,117,99,116,32,97,110,100,32,119,114,105,116,101,32,97,32,115,101,114,105,101,115,32,111,102,32,115,101,113,117,101,110,99,101,115,32,116,111,32,97,32,99,115,118,32,102,105,108,101,46,32,32,78,111,110,45,115,116,114,105,110,103,10,101,108,101,109,101,110,116,115,32,119,105,108,108,32,98,101,32,99,111,110,118,101,114,116,101,100,32,116,111,32,115,116,114,105,110,103,46,0,0,0,0], "i8", ALLOC_NORMAL);
_csv_writerow_doc=allocate([119,114,105,116,101,114,111,119,40,115,101,113,117,101,110,99,101,41,10,10,67,111,110,115,116,114,117,99,116,32,97,110,100,32,119,114,105,116,101,32,97,32,67,83,86,32,114,101,99,111,114,100,32,102,114,111,109,32,97,32,115,101,113,117,101,110,99,101,32,111,102,32,102,105,101,108,100,115,46,32,32,78,111,110,45,115,116,114,105,110,103,10,101,108,101,109,101,110,116,115,32,119,105,108,108,32,98,101,32,99,111,110,118,101,114,116,101,100,32,116,111,32,115,116,114,105,110,103,46,0,0,0], "i8", ALLOC_NORMAL);
_csv_writer_doc=allocate([32,32,32,32,99,115,118,95,119,114,105,116,101,114,32,61,32,99,115,118,46,119,114,105,116,101,114,40,102,105,108,101,111,98,106,32,91,44,32,100,105,97,108,101,99,116,61,39,101,120,99,101,108,39,93,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,91,111,112,116,105,111,110,97,108,32,107,101,121,119,111,114,100,32,97,114,103,115,93,41,10,32,32,32,32,102,111,114,32,114,111,119,32,105,110,32,115,101,113,117,101,110,99,101,58,10,32,32,32,32,32,32,32,32,99,115,118,95,119,114,105,116,101,114,46,119,114,105,116,101,114,111,119,40,114,111,119,41,10,10,32,32,32,32,91,111,114,93,10,10,32,32,32,32,99,115,118,95,119,114,105,116,101,114,32,61,32,99,115,118,46,119,114,105,116,101,114,40,102,105,108,101,111,98,106,32,91,44,32,100,105,97,108,101,99,116,61,39,101,120,99,101,108,39,93,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,91,111,112,116,105,111,110,97,108,32,107,101,121,119,111,114,100,32,97,114,103,115,93,41,10,32,32,32,32,99,115,118,95,119,114,105,116,101,114,46,119,114,105,116,101,114,111,119,115,40,114,111,119,115,41,10,10,84,104,101,32,34,102,105,108,101,111,98,106,34,32,97,114,103,117,109,101,110,116,32,99,97,110,32,98,101,32,97,110,121,32,111,98,106,101,99,116,32,116,104,97,116,32,115,117,112,112,111,114,116,115,32,116,104,101,32,102,105,108,101,32,65,80,73,46,10,0,0,0,0], "i8", ALLOC_NORMAL);
_csv_unregister_dialect_doc=allocate([68,101,108,101,116,101,32,116,104,101,32,110,97,109,101,47,100,105,97,108,101,99,116,32,109,97,112,112,105,110,103,32,97,115,115,111,99,105,97,116,101,100,32,119,105,116,104,32,97,32,115,116,114,105,110,103,32,110,97,109,101,46,10,32,32,32,32,99,115,118,46,117,110,114,101,103,105,115,116,101,114,95,100,105,97,108,101,99,116,40,110,97,109,101,41,0], "i8", ALLOC_NORMAL);
_csv_register_dialect_doc=allocate([67,114,101,97,116,101,32,97,32,109,97,112,112,105,110,103,32,102,114,111,109,32,97,32,115,116,114,105,110,103,32,110,97,109,101,32,116,111,32,97,32,100,105,97,108,101,99,116,32,99,108,97,115,115,46,10,32,32,32,32,100,105,97,108,101,99,116,32,61,32,99,115,118,46,114,101,103,105,115,116,101,114,95,100,105,97,108,101,99,116,40,110,97,109,101,44,32,100,105,97,108,101,99,116,41,0,0,0], "i8", ALLOC_NORMAL);
_csv_reader_doc=allocate([32,32,32,32,99,115,118,95,114,101,97,100,101,114,32,61,32,114,101,97,100,101,114,40,105,116,101,114,97,98,108,101,32,91,44,32,100,105,97,108,101,99,116,61,39,101,120,99,101,108,39,93,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,91,111,112,116,105,111,110,97,108,32,107,101,121,119,111,114,100,32,97,114,103,115,93,41,10,32,32,32,32,102,111,114,32,114,111,119,32,105,110,32,99,115,118,95,114,101,97,100,101,114,58,10,32,32,32,32,32,32,32,32,112,114,111,99,101,115,115,40,114,111,119,41,10,10,84,104,101,32,34,105,116,101,114,97,98,108,101,34,32,97,114,103,117,109,101,110,116,32,99,97,110,32,98,101,32,97,110,121,32,111,98,106,101,99,116,32,116,104,97,116,32,114,101,116,117,114,110,115,32,97,32,108,105,110,101,10,111,102,32,105,110,112,117,116,32,102,111,114,32,101,97,99,104,32,105,116,101,114,97,116,105,111,110,44,32,115,117,99,104,32,97,115,32,97,32,102,105,108,101,32,111,98,106,101,99,116,32,111,114,32,97,32,108,105,115,116,46,32,32,84,104,101,10,111,112,116,105,111,110,97,108,32,34,100,105,97,108,101,99,116,34,32,112,97,114,97,109,101,116,101,114,32,105,115,32,100,105,115,99,117,115,115,101,100,32,98,101,108,111,119,46,32,32,84,104,101,32,102,117,110,99,116,105,111,110,10,97,108,115,111,32,97,99,99,101,112,116,115,32,111,112,116,105,111,110,97,108,32,107,101,121,119,111,114,100,32,97,114,103,117,109,101,110,116,115,32,119,104,105,99,104,32,111,118,101,114,114,105,100,101,32,115,101,116,116,105,110,103,115,10,112,114,111,118,105,100,101,100,32,98,121,32,116,104,101,32,100,105,97,108,101,99,116,46,10,10,84,104,101,32,114,101,116,117,114,110,101,100,32,111,98,106,101,99,116,32,105,115,32,97,110,32,105,116,101,114,97,116,111,114,46,32,32,69,97,99,104,32,105,116,101,114,97,116,105,111,110,32,114,101,116,117,114,110,115,32,97,32,114,111,119,10,111,102,32,116,104,101,32,67,83,86,32,102,105,108,101,32,40,119,104,105,99,104,32,99,97,110,32,115,112,97,110,32,109,117,108,116,105,112,108,101,32,105,110,112,117,116,32,108,105,110,101,115,41,58,10,0,0], "i8", ALLOC_NORMAL);
_csv_module_doc=allocate([67,83,86,32,112,97,114,115,105,110,103,32,97,110,100,32,119,114,105,116,105,110,103,46,10,10,84,104,105,115,32,109,111,100,117,108,101,32,112,114,111,118,105,100,101,115,32,99,108,97,115,115,101,115,32,116,104,97,116,32,97,115,115,105,115,116,32,105,110,32,116,104,101,32,114,101,97,100,105,110,103,32,97,110,100,32,119,114,105,116,105,110,103,10,111,102,32,67,111,109,109,97,32,83,101,112,97,114,97,116,101,100,32,86,97,108,117,101,32,40,67,83,86,41,32,102,105,108,101,115,44,32,97,110,100,32,105,109,112,108,101,109,101,110,116,115,32,116,104,101,32,105,110,116,101,114,102,97,99,101,10,100,101,115,99,114,105,98,101,100,32,98,121,32,80,69,80,32,51,48,53,46,32,32,65,108,116,104,111,117,103,104,32,109,97,110,121,32,67,83,86,32,102,105,108,101,115,32,97,114,101,32,115,105,109,112,108,101,32,116,111,32,112,97,114,115,101,44,10,116,104,101,32,102,111,114,109,97,116,32,105,115,32,110,111,116,32,102,111,114,109,97,108,108,121,32,100,101,102,105,110,101,100,32,98,121,32,97,32,115,116,97,98,108,101,32,115,112,101,99,105,102,105,99,97,116,105,111,110,32,97,110,100,10,105,115,32,115,117,98,116,108,101,32,101,110,111,117,103,104,32,116,104,97,116,32,112,97,114,115,105,110,103,32,108,105,110,101,115,32,111,102,32,97,32,67,83,86,32,102,105,108,101,32,119,105,116,104,32,115,111,109,101,116,104,105,110,103,10,108,105,107,101,32,108,105,110,101,46,115,112,108,105,116,40,34,44,34,41,32,105,115,32,98,111,117,110,100,32,116,111,32,102,97,105,108,46,32,32,84,104,101,32,109,111,100,117,108,101,32,115,117,112,112,111,114,116,115,32,116,104,114,101,101,10,98,97,115,105,99,32,65,80,73,115,58,32,114,101,97,100,105,110,103,44,32,119,114,105,116,105,110,103,44,32,97,110,100,32,114,101,103,105,115,116,114,97,116,105,111,110,32,111,102,32,100,105,97,108,101,99,116,115,46,10,10,10,68,73,65,76,69,67,84,32,82,69,71,73,83,84,82,65,84,73,79,78,58,10,10,82,101,97,100,101,114,115,32,97,110,100,32,119,114,105,116,101,114,115,32,115,117,112,112,111,114,116,32,97,32,100,105,97,108,101,99,116,32,97,114,103,117,109,101,110,116,44,32,119,104,105,99,104,32,105,115,32,97,32,99,111,110,118,101,110,105,101,110,116,10,104,97,110,100,108,101,32,111,110,32,97,32,103,114,111,117,112,32,111,102,32,115,101,116,116,105,110,103,115,46,32,32,87,104,101,110,32,116,104,101,32,100,105,97,108,101,99,116,32,97,114,103,117,109,101,110,116,32,105,115,32,97,32,115,116,114,105,110,103,44,10,105,116,32,105,100,101,110,116,105,102,105,101,115,32,111,110,101,32,111,102,32,116,104,101,32,100,105,97,108,101,99,116,115,32,112,114,101,118,105,111,117,115,108,121,32,114,101,103,105,115,116,101,114,101,100,32,119,105,116,104,32,116,104,101,32,109,111,100,117,108,101,46,10,73,102,32,105,116,32,105,115,32,97,32,99,108,97,115,115,32,111,114,32,105,110,115,116,97,110,99,101,44,32,116,104,101,32,97,116,116,114,105,98,117,116,101,115,32,111,102,32,116,104,101,32,97,114,103,117,109,101,110,116,32,97,114,101,32,117,115,101,100,32,97,115,10,116,104,101,32,115,101,116,116,105,110,103,115,32,102,111,114,32,116,104,101,32,114,101,97,100,101,114,32,111,114,32,119,114,105,116,101,114,58,10,10,32,32,32,32,99,108,97,115,115,32,101,120,99,101,108,58,10,32,32,32,32,32,32,32,32,100,101,108,105,109,105,116,101,114,32,61,32,39,44,39,10,32,32,32,32,32,32,32,32,113,117,111,116,101,99,104,97,114,32,61,32,39,34,39,10,32,32,32,32,32,32,32,32,101,115,99,97,112,101,99,104,97,114,32,61,32,78,111,110,101,10,32,32,32,32,32,32,32,32,100,111,117,98,108,101,113,117,111,116,101,32,61,32,84,114,117,101,10,32,32,32,32,32,32,32,32,115,107,105,112,105,110,105,116,105,97,108,115,112,97,99,101,32,61,32,70,97,108,115,101,10,32,32,32,32,32,32,32,32,108,105,110,101,116,101,114,109,105,110,97,116,111,114,32,61,32,39,92,114,92,110,39,10,32,32,32,32,32,32,32,32,113,117,111,116,105,110,103,32,61,32,81,85,79,84,69,95,77,73,78,73,77,65,76,10,10,83,69,84,84,73,78,71,83,58,10,10,32,32,32,32,42,32,113,117,111,116,101,99,104,97,114,32,45,32,115,112,101,99,105,102,105,101,115,32,97,32,111,110,101,45,99,104,97,114,97,99,116,101,114,32,115,116,114,105,110,103,32,116,111,32,117,115,101,32,97,115,32,116,104,101,32,10,32,32,32,32,32,32,32,32,113,117,111,116,105,110,103,32,99,104,97,114,97,99,116,101,114,46,32,32,73,116,32,100,101,102,97,117,108,116,115,32,116,111,32,39,34,39,46,10,32,32,32,32,42,32,100,101,108,105,109,105,116,101,114,32,45,32,115,112,101,99,105,102,105,101,115,32,97,32,111,110,101,45,99,104,97,114,97,99,116,101,114,32,115,116,114,105,110,103,32,116,111,32,117,115,101,32,97,115,32,116,104,101,32,10,32,32,32,32,32,32,32,32,102,105,101,108,100,32,115,101,112,97,114,97,116,111,114,46,32,32,73,116,32,100,101,102,97,117,108,116,115,32,116,111,32,39,44,39,46,10,32,32,32,32,42,32,115,107,105,112,105,110,105,116,105,97,108,115,112,97,99,101,32,45,32,115,112,101,99,105,102,105,101,115,32,104,111,119,32,116,111,32,105,110,116,101,114,112,114,101,116,32,119,104,105,116,101,115,112,97,99,101,32,119,104,105,99,104,10,32,32,32,32,32,32,32,32,105,109,109,101,100,105,97,116,101,108,121,32,102,111,108,108,111,119,115,32,97,32,100,101,108,105,109,105,116,101,114,46,32,32,73,116,32,100,101,102,97,117,108,116,115,32,116,111,32,70,97,108,115,101,44,32,119,104,105,99,104,10,32,32,32,32,32,32,32,32,109,101,97,110,115,32,116,104,97,116,32,119,104,105,116,101,115,112,97,99,101,32,105,109,109,101,100,105,97,116,101,108,121,32,102,111,108,108,111,119,105,110,103,32,97,32,100,101,108,105,109,105,116,101,114,32,105,115,32,112,97,114,116,10,32,32,32,32,32,32,32,32,111,102,32,116,104,101,32,102,111,108,108,111,119,105,110,103,32,102,105,101,108,100,46,10,32,32,32,32,42,32,108,105,110,101,116,101,114,109,105,110,97,116,111,114,32,45,32,32,115,112,101,99,105,102,105,101,115,32,116,104,101,32,99,104,97,114,97,99,116,101,114,32,115,101,113,117,101,110,99,101,32,119,104,105,99,104,32,115,104,111,117,108,100,32,10,32,32,32,32,32,32,32,32,116,101,114,109,105,110,97,116,101,32,114,111,119,115,46,10,32,32,32,32,42,32,113,117,111,116,105,110,103,32,45,32,99,111,110,116,114,111,108,115,32,119,104,101,110,32,113,117,111,116,101,115,32,115,104,111,117,108,100,32,98,101,32,103,101,110,101,114,97,116,101,100,32,98,121,32,116,104,101,32,119,114,105,116,101,114,46,10,32,32,32,32,32,32,32,32,73,116,32,99,97,110,32,116,97,107,101,32,111,110,32,97,110,121,32,111,102,32,116,104,101,32,102,111,108,108,111,119,105,110,103,32,109,111,100,117,108,101,32,99,111,110,115,116,97,110,116,115,58,10,10,32,32,32,32,32,32,32,32,99,115,118,46,81,85,79,84,69,95,77,73,78,73,77,65,76,32,109,101,97,110,115,32,111,110,108,121,32,119,104,101,110,32,114,101,113,117,105,114,101,100,44,32,102,111,114,32,101,120,97,109,112,108,101,44,32,119,104,101,110,32,97,10,32,32,32,32,32,32,32,32,32,32,32,32,102,105,101,108,100,32,99,111,110,116,97,105,110,115,32,101,105,116,104,101,114,32,116,104,101,32,113,117,111,116,101,99,104,97,114,32,111,114,32,116,104,101,32,100,101,108,105,109,105,116,101,114,10,32,32,32,32,32,32,32,32,99,115,118,46,81,85,79,84,69,95,65,76,76,32,109,101,97,110,115,32,116,104,97,116,32,113,117,111,116,101,115,32,97,114,101,32,97,108,119,97,121,115,32,112,108,97,99,101,100,32,97,114,111,117,110,100,32,102,105,101,108,100,115,46,10,32,32,32,32,32,32,32,32,99,115,118,46,81,85,79,84,69,95,78,79,78,78,85,77,69,82,73,67,32,109,101,97,110,115,32,116,104,97,116,32,113,117,111,116,101,115,32,97,114,101,32,97,108,119,97,121,115,32,112,108,97,99,101,100,32,97,114,111,117,110,100,10,32,32,32,32,32,32,32,32,32,32,32,32,102,105,101,108,100,115,32,119,104,105,99,104,32,100,111,32,110,111,116,32,112,97,114,115,101,32,97,115,32,105,110,116,101,103,101,114,115,32,111,114,32,102,108,111,97,116,105,110,103,32,112,111,105,110,116,10,32,32,32,32,32,32,32,32,32,32,32,32,110,117,109,98,101,114,115,46,10,32,32,32,32,32,32,32,32,99,115,118,46,81,85,79,84,69,95,78,79,78,69,32,109,101,97,110,115,32,116,104,97,116,32,113,117,111,116,101,115,32,97,114,101,32,110,101,118,101,114,32,112,108,97,99,101,100,32,97,114,111,117,110,100,32,102,105,101,108,100,115,46,10,32,32,32,32,42,32,101,115,99,97,112,101,99,104,97,114,32,45,32,115,112,101,99,105,102,105,101,115,32,97,32,111,110,101,45,99,104,97,114,97,99,116,101,114,32,115,116,114,105,110,103,32,117,115,101,100,32,116,111,32,101,115,99,97,112,101,32,10,32,32,32,32,32,32,32,32,116,104,101,32,100,101,108,105,109,105,116,101,114,32,119,104,101,110,32,113,117,111,116,105,110,103,32,105,115,32,115,101,116,32,116,111,32,81,85,79,84,69,95,78,79,78,69,46,10,32,32,32,32,42,32,100,111,117,98,108,101,113,117,111,116,101,32,45,32,99,111,110,116,114,111,108,115,32,116,104,101,32,104,97,110,100,108,105,110,103,32,111,102,32,113,117,111,116,101,115,32,105,110,115,105,100,101,32,102,105,101,108,100,115,46,32,32,87,104,101,110,10,32,32,32,32,32,32,32,32,84,114,117,101,44,32,116,119,111,32,99,111,110,115,101,99,117,116,105,118,101,32,113,117,111,116,101,115,32,97,114,101,32,105,110,116,101,114,112,114,101,116,101,100,32,97,115,32,111,110,101,32,100,117,114,105,110,103,32,114,101,97,100,44,10,32,32,32,32,32,32,32,32,97,110,100,32,119,104,101,110,32,119,114,105,116,105,110,103,44,32,101,97,99,104,32,113,117,111,116,101,32,99,104,97,114,97,99,116,101,114,32,101,109,98,101,100,100,101,100,32,105,110,32,116,104,101,32,100,97,116,97,32,105,115,10,32,32,32,32,32,32,32,32,119,114,105,116,116,101,110,32,97,115,32,116,119,111,32,113,117,111,116,101,115,10,0], "i8", ALLOC_NORMAL);
_csv_methods=allocate([0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_csv_list_dialects_doc=allocate([82,101,116,117,114,110,32,97,32,108,105,115,116,32,111,102,32,97,108,108,32,107,110,111,119,32,100,105,97,108,101,99,116,32,110,97,109,101,115,46,10,32,32,32,32,110,97,109,101,115,32,61,32,99,115,118,46,108,105,115,116,95,100,105,97,108,101,99,116,115,40,41,0,0,0,0], "i8", ALLOC_NORMAL);
_csv_get_dialect_doc=allocate([82,101,116,117,114,110,32,116,104,101,32,100,105,97,108,101,99,116,32,105,110,115,116,97,110,99,101,32,97,115,115,111,99,105,97,116,101,100,32,119,105,116,104,32,110,97,109,101,46,10,32,32,32,32,100,105,97,108,101,99,116,32,61,32,99,115,118,46,103,101,116,95,100,105,97,108,101,99,116,40,110,97,109,101,41,0,0,0], "i8", ALLOC_NORMAL);
_csv_field_size_limit_doc=allocate([83,101,116,115,32,97,110,32,117,112,112,101,114,32,108,105,109,105,116,32,111,110,32,112,97,114,115,101,100,32,102,105,101,108,100,115,46,10,32,32,32,32,99,115,118,46,102,105,101,108,100,95,115,105,122,101,95,108,105,109,105,116,40,91,108,105,109,105,116,93,41,10,10,82,101,116,117,114,110,115,32,111,108,100,32,108,105,109,105,116,46,32,73,102,32,108,105,109,105,116,32,105,115,32,110,111,116,32,103,105,118,101,110,44,32,110,111,32,110,101,119,32,108,105,109,105,116,32,105,115,32,115,101,116,32,97,110,100,10,116,104,101,32,111,108,100,32,108,105,109,105,116,32,105,115,32,114,101,116,117,114,110,101,100,0,0,0,0], "i8", ALLOC_NORMAL);
__str9=allocate([81,85,79,84,69,95,78,79,78,78,85,77,69,82,73,67,0,0,0,0], "i8", ALLOC_NORMAL);
__str8=allocate([81,85,79,84,69,95,65,76,76,0,0,0], "i8", ALLOC_NORMAL);
__str7=allocate([81,85,79,84,69,95,77,73,78,73,77,65,76,0,0,0], "i8", ALLOC_NORMAL);
__str60=allocate([34,37,115,34,32,109,117,115,116,32,98,101,32,97,110,32,49,45,99,104,97,114,97,99,116,101,114,32,115,116,114,105,110,103,0,0], "i8", ALLOC_NORMAL);
__str6=allocate([69,114,114,111,114,0,0,0], "i8", ALLOC_NORMAL);
__str59=allocate([34,37,115,34,32,109,117,115,116,32,98,101,32,97,110,32,115,116,114,105,110,103,0,0], "i8", ALLOC_NORMAL);
__str58=allocate([34,37,115,34,32,109,117,115,116,32,98,101,32,97,110,32,105,110,116,101,103,101,114,0], "i8", ALLOC_NORMAL);
__str57=allocate([98,97,100,32,34,113,117,111,116,105,110,103,34,32,118,97,108,117,101,0], "i8", ALLOC_NORMAL);
__str56=allocate([108,105,110,101,116,101,114,109,105,110,97,116,111,114,32,109,117,115,116,32,98,101,32,115,101,116,0,0], "i8", ALLOC_NORMAL);
__str55=allocate([113,117,111,116,101,99,104,97,114,32,109,117,115,116,32,98,101,32,115,101,116,32,105,102,32,113,117,111,116,105,110,103,32,101,110,97,98,108,101,100,0,0,0,0], "i8", ALLOC_NORMAL);
__str54=allocate([100,101,108,105,109,105,116,101,114,32,109,117,115,116,32,98,101,32,115,101,116,0,0,0], "i8", ALLOC_NORMAL);
__str53=allocate([13,10,0,0], "i8", ALLOC_NORMAL);
__str52=allocate([115,116,114,105,99,116,0,0], "i8", ALLOC_NORMAL);
__str51=allocate([115,107,105,112,105,110,105,116,105,97,108,115,112,97,99,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str50=allocate([113,117,111,116,105,110,103,0], "i8", ALLOC_NORMAL);
__str5=allocate([95,99,115,118,46,69,114,114,111,114,0,0], "i8", ALLOC_NORMAL);
__str49=allocate([113,117,111,116,101,99,104,97,114,0,0,0], "i8", ALLOC_NORMAL);
__str48=allocate([108,105,110,101,116,101,114,109,105,110,97,116,111,114,0,0], "i8", ALLOC_NORMAL);
__str47=allocate([101,115,99,97,112,101,99,104,97,114,0,0], "i8", ALLOC_NORMAL);
__str46=allocate([100,111,117,98,108,101,113,117,111,116,101,0], "i8", ALLOC_NORMAL);
__str45=allocate([100,101,108,105,109,105,116,101,114,0,0,0], "i8", ALLOC_NORMAL);
__str44=allocate([124,79,79,79,79,79,79,79,79,79,0,0], "i8", ALLOC_NORMAL);
__str43=allocate([95,99,115,118,46,68,105,97,108,101,99,116,0,0,0,0], "i8", ALLOC_NORMAL);
__str42=allocate([102,105,101,108,100,32,108,97,114,103,101,114,32,116,104,97,110,32,102,105,101,108,100,32,108,105,109,105,116,32,40,37,108,100,41,0], "i8", ALLOC_NORMAL);
__str41=allocate([110,101,119,45,108,105,110,101,32,99,104,97,114,97,99,116,101,114,32,115,101,101,110,32,105,110,32,117,110,113,117,111,116,101,100,32,102,105,101,108,100,32,45,32,100,111,32,121,111,117,32,110,101,101,100,32,116,111,32,111,112,101,110,32,116,104,101,32,102,105,108,101,32,105,110,32,117,110,105,118,101,114,115,97,108,45,110,101,119,108,105,110,101,32,109,111,100,101,63,0], "i8", ALLOC_NORMAL);
__str40=allocate([39,37,99,39,32,101,120,112,101,99,116,101,100,32,97,102,116,101,114,32,39,37,99,39,0,0,0,0], "i8", ALLOC_NORMAL);
__str4=allocate([68,105,97,108,101,99,116,0], "i8", ALLOC_NORMAL);
__str39=allocate([108,105,110,101,32,99,111,110,116,97,105,110,115,32,78,85,76,76,32,98,121,116,101,0], "i8", ALLOC_NORMAL);
__str38=allocate([117,110,101,120,112,101,99,116,101,100,32,101,110,100,32,111,102,32,100,97,116,97,0,0], "i8", ALLOC_NORMAL);
__str37=allocate([108,105,110,101,95,110,117,109,0,0,0,0], "i8", ALLOC_NORMAL);
__str36=allocate([95,99,115,118,46,114,101,97,100,101,114,0], "i8", ALLOC_NORMAL);
__str35=allocate([115,105,110,103,108,101,32,101,109,112,116,121,32,102,105,101,108,100,32,114,101,99,111,114,100,32,109,117,115,116,32,98,101,32,113,117,111,116,101,100,0,0,0,0], "i8", ALLOC_NORMAL);
__str34=allocate([110,101,101,100,32,116,111,32,101,115,99,97,112,101,44,32,98,117,116,32,110,111,32,101,115,99,97,112,101,99,104,97,114,32,115,101,116,0,0,0], "i8", ALLOC_NORMAL);
__str33=allocate([40,115,35,41,0,0,0,0], "i8", ALLOC_NORMAL);
__str32=allocate([115,101,113,117,101,110,99,101,32,101,120,112,101,99,116,101,100,0,0,0], "i8", ALLOC_NORMAL);
__str31=allocate([119,114,105,116,101,114,111,119,115,40,41,32,97,114,103,117,109,101,110,116,32,109,117,115,116,32,98,101,32,105,116,101,114,97,98,108,101,0,0,0], "i8", ALLOC_NORMAL);
__str30=allocate([119,114,105,116,101,114,111,119,115,0,0,0], "i8", ALLOC_NORMAL);
__str3=allocate([95,100,105,97,108,101,99,116,115,0,0,0], "i8", ALLOC_NORMAL);
__str29=allocate([119,114,105,116,101,114,111,119,0,0,0,0], "i8", ALLOC_NORMAL);
__str28=allocate([100,105,97,108,101,99,116,0], "i8", ALLOC_NORMAL);
__str27=allocate([95,99,115,118,46,119,114,105,116,101,114,0], "i8", ALLOC_NORMAL);
__str26=allocate([97,114,103,117,109,101,110,116,32,49,32,109,117,115,116,32,98,101,32,97,110,32,105,116,101,114,97,116,111,114,0,0], "i8", ALLOC_NORMAL);
__str25=allocate([97,114,103,117,109,101,110,116,32,49,32,109,117,115,116,32,104,97,118,101,32,97,32,34,119,114,105,116,101,34,32,109,101,116,104,111,100,0,0,0], "i8", ALLOC_NORMAL);
__str24=allocate([119,114,105,116,101,0,0,0], "i8", ALLOC_NORMAL);
__str23=allocate([40,41,0,0], "i8", ALLOC_NORMAL);
__str22=allocate([40,79,41,0], "i8", ALLOC_NORMAL);
__str21=allocate([100,105,97,108,101,99,116,32,110,97,109,101,32,109,117,115,116,32,98,101,32,97,32,115,116,114,105,110,103,32,111,114,32,117,110,105,99,111,100,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str20=allocate([0,0,0,0], "i8", ALLOC_NORMAL);
__str2=allocate([49,46,48,0], "i8", ALLOC_NORMAL);
__str19=allocate([117,110,107,110,111,119,110,32,100,105,97,108,101,99,116,0], "i8", ALLOC_NORMAL);
__str18=allocate([108,105,109,105,116,32,109,117,115,116,32,98,101,32,97,110,32,105,110,116,101,103,101,114,0,0,0,0], "i8", ALLOC_NORMAL);
__str17=allocate([102,105,101,108,100,95,115,105,122,101,95,108,105,109,105,116,0,0,0,0], "i8", ALLOC_NORMAL);
__str16=allocate([103,101,116,95,100,105,97,108,101,99,116,0], "i8", ALLOC_NORMAL);
__str15=allocate([117,110,114,101,103,105,115,116,101,114,95,100,105,97,108,101,99,116,0,0], "i8", ALLOC_NORMAL);
__str14=allocate([114,101,103,105,115,116,101,114,95,100,105,97,108,101,99,116,0,0,0,0], "i8", ALLOC_NORMAL);
__str13=allocate([108,105,115,116,95,100,105,97,108,101,99,116,115,0,0,0], "i8", ALLOC_NORMAL);
__str12=allocate([119,114,105,116,101,114,0,0], "i8", ALLOC_NORMAL);
__str11=allocate([114,101,97,100,101,114,0,0], "i8", ALLOC_NORMAL);
__str10=allocate([81,85,79,84,69,95,78,79,78,69,0,0], "i8", ALLOC_NORMAL);
__str1=allocate([95,95,118,101,114,115,105,111,110,95,95,0], "i8", ALLOC_NORMAL);
__str=allocate([95,99,115,118,0,0,0,0], "i8", ALLOC_NORMAL);
_Writer_methods=allocate([0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_Writer_memberlist=allocate([0,0,0,0,6,0,0,0,12,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_Writer_Type_doc=allocate([67,83,86,32,119,114,105,116,101,114,10,10,87,114,105,116,101,114,32,111,98,106,101,99,116,115,32,97,114,101,32,114,101,115,112,111,110,115,105,98,108,101,32,102,111,114,32,103,101,110,101,114,97,116,105,110,103,32,116,97,98,117,108,97,114,32,100,97,116,97,10,105,110,32,67,83,86,32,102,111,114,109,97,116,32,102,114,111,109,32,115,101,113,117,101,110,99,101,32,105,110,112,117,116,46,10,0,0], "i8", ALLOC_NORMAL);
_Writer_Type=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,69,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_Reader_methods=allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_Reader_memberlist=allocate([0,0,0,0,6,0,0,0,12,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,40,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_Reader_Type_doc=allocate([67,83,86,32,114,101,97,100,101,114,10,10,82,101,97,100,101,114,32,111,98,106,101,99,116,115,32,97,114,101,32,114,101,115,112,111,110,115,105,98,108,101,32,102,111,114,32,114,101,97,100,105,110,103,32,97,110,100,32,112,97,114,115,105,110,103,32,116,97,98,117,108,97,114,32,100,97,116,97,10,105,110,32,67,83,86,32,102,111,114,109,97,116,46,10,0], "i8", ALLOC_NORMAL);
_Reader_Type=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,69,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_Dialect_memberlist=allocate([0,0,0,0,7,0,0,0,12,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,16,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,8,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,28,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_Dialect_getsetlist=allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_Dialect_Type_doc=allocate([67,83,86,32,100,105,97,108,101,99,116,10,10,84,104,101,32,68,105,97,108,101,99,116,32,116,121,112,101,32,114,101,99,111,114,100,115,32,67,83,86,32,112,97,114,115,105,110,103,32,97,110,100,32,103,101,110,101,114,97,116,105,111,110,32,111,112,116,105,111,110,115,46,10,0,0], "i8", ALLOC_NORMAL);
_Dialect_Type=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,5,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
/* no memory initializer */
function runPostSets() {
HEAP32[(((_quote_styles)+(4))>>2)]=((__str7)|0);
HEAP32[(((_quote_styles)+(12))>>2)]=((__str8)|0);
HEAP32[(((_quote_styles)+(20))>>2)]=((__str9)|0);
HEAP32[(((_quote_styles)+(28))>>2)]=((__str10)|0);
HEAP32[((_dialect_kws)>>2)]=((__str28)|0);
HEAP32[(((_dialect_kws)+(4))>>2)]=((__str45)|0);
HEAP32[(((_dialect_kws)+(8))>>2)]=((__str46)|0);
HEAP32[(((_dialect_kws)+(12))>>2)]=((__str47)|0);
HEAP32[(((_dialect_kws)+(16))>>2)]=((__str48)|0);
HEAP32[(((_dialect_kws)+(20))>>2)]=((__str49)|0);
HEAP32[(((_dialect_kws)+(24))>>2)]=((__str50)|0);
HEAP32[(((_dialect_kws)+(28))>>2)]=((__str51)|0);
HEAP32[(((_dialect_kws)+(32))>>2)]=((__str52)|0);
HEAP32[((_csv_methods)>>2)]=((__str11)|0);
HEAP32[(((_csv_methods)+(4))>>2)]=((FUNCTION_TABLE_OFFSET + 36));
HEAP32[(((_csv_methods)+(12))>>2)]=((_csv_reader_doc)|0);
HEAP32[(((_csv_methods)+(16))>>2)]=((__str12)|0);
HEAP32[(((_csv_methods)+(20))>>2)]=((FUNCTION_TABLE_OFFSET + 34));
HEAP32[(((_csv_methods)+(28))>>2)]=((_csv_writer_doc)|0);
HEAP32[(((_csv_methods)+(32))>>2)]=((__str13)|0);
HEAP32[(((_csv_methods)+(36))>>2)]=(FUNCTION_TABLE_OFFSET + 26);
HEAP32[(((_csv_methods)+(44))>>2)]=((_csv_list_dialects_doc)|0);
HEAP32[(((_csv_methods)+(48))>>2)]=((__str14)|0);
HEAP32[(((_csv_methods)+(52))>>2)]=((FUNCTION_TABLE_OFFSET + 24));
HEAP32[(((_csv_methods)+(60))>>2)]=((_csv_register_dialect_doc)|0);
HEAP32[(((_csv_methods)+(64))>>2)]=((__str15)|0);
HEAP32[(((_csv_methods)+(68))>>2)]=(FUNCTION_TABLE_OFFSET + 42);
HEAP32[(((_csv_methods)+(76))>>2)]=((_csv_unregister_dialect_doc)|0);
HEAP32[(((_csv_methods)+(80))>>2)]=((__str16)|0);
HEAP32[(((_csv_methods)+(84))>>2)]=(FUNCTION_TABLE_OFFSET + 16);
HEAP32[(((_csv_methods)+(92))>>2)]=((_csv_get_dialect_doc)|0);
HEAP32[(((_csv_methods)+(96))>>2)]=((__str17)|0);
HEAP32[(((_csv_methods)+(100))>>2)]=(FUNCTION_TABLE_OFFSET + 28);
HEAP32[(((_csv_methods)+(108))>>2)]=((_csv_field_size_limit_doc)|0);
HEAP32[((_Writer_methods)>>2)]=((__str29)|0);
HEAP32[(((_Writer_methods)+(4))>>2)]=((FUNCTION_TABLE_OFFSET + 4));
HEAP32[(((_Writer_methods)+(12))>>2)]=((_csv_writerow_doc)|0);
HEAP32[(((_Writer_methods)+(16))>>2)]=((__str30)|0);
HEAP32[(((_Writer_methods)+(20))>>2)]=((FUNCTION_TABLE_OFFSET + 10));
HEAP32[(((_Writer_methods)+(28))>>2)]=((_csv_writerows_doc)|0);
HEAP32[((_Writer_memberlist)>>2)]=((__str28)|0);
HEAP32[(((_Writer_Type)+(12))>>2)]=((__str27)|0);
HEAP32[(((_Writer_Type)+(24))>>2)]=((FUNCTION_TABLE_OFFSET + 14));
HEAP32[(((_Writer_Type)+(88))>>2)]=((_Writer_Type_doc)|0);
HEAP32[(((_Writer_Type)+(92))>>2)]=((FUNCTION_TABLE_OFFSET + 8));
HEAP32[(((_Writer_Type)+(96))>>2)]=((FUNCTION_TABLE_OFFSET + 18));
HEAP32[(((_Writer_Type)+(116))>>2)]=((_Writer_methods)|0);
HEAP32[(((_Writer_Type)+(120))>>2)]=((_Writer_memberlist)|0);
HEAP32[((_Reader_memberlist)>>2)]=((__str28)|0);
HEAP32[(((_Reader_memberlist)+(20))>>2)]=((__str37)|0);
HEAP32[(((_Reader_Type)+(12))>>2)]=((__str36)|0);
HEAP32[(((_Reader_Type)+(24))>>2)]=((FUNCTION_TABLE_OFFSET + 20));
HEAP32[(((_Reader_Type)+(88))>>2)]=((_Reader_Type_doc)|0);
HEAP32[(((_Reader_Type)+(92))>>2)]=((FUNCTION_TABLE_OFFSET + 40));
HEAP32[(((_Reader_Type)+(96))>>2)]=((FUNCTION_TABLE_OFFSET + 44));
HEAP32[(((_Reader_Type)+(108))>>2)]=(FUNCTION_TABLE_OFFSET + 2);
HEAP32[(((_Reader_Type)+(112))>>2)]=((FUNCTION_TABLE_OFFSET + 32));
HEAP32[(((_Reader_Type)+(116))>>2)]=((_Reader_methods)|0);
HEAP32[(((_Reader_Type)+(120))>>2)]=((_Reader_memberlist)|0);
HEAP32[((_Dialect_memberlist)>>2)]=((__str45)|0);
HEAP32[(((_Dialect_memberlist)+(20))>>2)]=((__str51)|0);
HEAP32[(((_Dialect_memberlist)+(40))>>2)]=((__str46)|0);
HEAP32[(((_Dialect_memberlist)+(60))>>2)]=((__str52)|0);
HEAP32[((_Dialect_getsetlist)>>2)]=((__str47)|0);
HEAP32[(((_Dialect_getsetlist)+(4))>>2)]=((FUNCTION_TABLE_OFFSET + 6));
HEAP32[(((_Dialect_getsetlist)+(20))>>2)]=((__str48)|0);
HEAP32[(((_Dialect_getsetlist)+(24))>>2)]=((FUNCTION_TABLE_OFFSET + 30));
HEAP32[(((_Dialect_getsetlist)+(40))>>2)]=((__str49)|0);
HEAP32[(((_Dialect_getsetlist)+(44))>>2)]=((FUNCTION_TABLE_OFFSET + 38));
HEAP32[(((_Dialect_getsetlist)+(60))>>2)]=((__str50)|0);
HEAP32[(((_Dialect_getsetlist)+(64))>>2)]=((FUNCTION_TABLE_OFFSET + 22));
HEAP32[(((_Dialect_Type)+(12))>>2)]=((__str43)|0);
HEAP32[(((_Dialect_Type)+(24))>>2)]=((FUNCTION_TABLE_OFFSET + 46));
HEAP32[(((_Dialect_Type)+(88))>>2)]=((_Dialect_Type_doc)|0);
HEAP32[(((_Dialect_Type)+(120))>>2)]=((_Dialect_memberlist)|0);
HEAP32[(((_Dialect_Type)+(124))>>2)]=((_Dialect_getsetlist)|0);
HEAP32[(((_Dialect_Type)+(156))>>2)]=(FUNCTION_TABLE_OFFSET + 12);
}
if (!awaitingMemoryInitializer) runPostSets();
FUNCTION_TABLE.push.apply(FUNCTION_TABLE, [0,0,_PyObject_SelfIter,0,_csv_writerow,0,_Dialect_get_escapechar,0,_Writer_traverse,0,_csv_writerows
,0,_dialect_new,0,_Writer_dealloc,0,_csv_get_dialect,0,_Writer_clear,0,_Reader_dealloc
,0,_Dialect_get_quoting,0,_csv_register_dialect,0,_csv_list_dialects,0,_csv_field_size_limit,0,_Dialect_get_lineterminator
,0,_Reader_iternext,0,_csv_writer,0,_csv_reader,0,_Dialect_get_quotechar,0,_Reader_traverse,0,_csv_unregister_dialect,0,_Reader_clear,0,_Dialect_dealloc,0]);
// EMSCRIPTEN_START_FUNCS
function _init_csv() {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $module;
      var $style;
      var $1=_PyType_Ready(_Dialect_Type);
      var $2=(($1)|(0)) < 0;
      if ($2) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 26; break;
    case 3: 
      var $5=_PyType_Ready(_Reader_Type);
      var $6=(($5)|(0)) < 0;
      if ($6) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 26; break;
    case 5: 
      var $9=_PyType_Ready(_Writer_Type);
      var $10=(($9)|(0)) < 0;
      if ($10) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 26; break;
    case 7: 
      var $13=_Py_InitModule4(((__str)|0), ((_csv_methods)|0), ((_csv_module_doc)|0), 0, 1013);
      $module=$13;
      var $14=$module;
      var $15=(($14)|(0))==0;
      if ($15) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 26; break;
    case 9: 
      var $18=$module;
      var $19=_PyModule_AddStringConstant($18, ((__str1)|0), ((__str2)|0));
      var $20=(($19)|(0))==-1;
      if ($20) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 26; break;
    case 11: 
      var $23=_PyDict_New();
      HEAP32[((_dialects)>>2)]=$23;
      var $24=HEAP32[((_dialects)>>2)];
      var $25=(($24)|(0))==0;
      if ($25) { label = 12; break; } else { label = 13; break; }
    case 12: 
      label = 26; break;
    case 13: 
      var $28=$module;
      var $29=HEAP32[((_dialects)>>2)];
      var $30=_PyModule_AddObject($28, ((__str3)|0), $29);
      var $31=(($30)|(0))!=0;
      if ($31) { label = 14; break; } else { label = 15; break; }
    case 14: 
      label = 26; break;
    case 15: 
      $style=((_quote_styles)|0);
      label = 16; break;
    case 16: 
      var $35=$style;
      var $36=(($35+4)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37)|(0))!=0;
      if ($38) { label = 17; break; } else { label = 21; break; }
    case 17: 
      var $40=$module;
      var $41=$style;
      var $42=(($41+4)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=$style;
      var $45=(($44)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=_PyModule_AddIntConstant($40, $43, $46);
      var $48=(($47)|(0))==-1;
      if ($48) { label = 18; break; } else { label = 19; break; }
    case 18: 
      label = 26; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $52=$style;
      var $53=(($52+8)|0);
      $style=$53;
      label = 16; break;
    case 21: 
      var $55=HEAP32[((((_Dialect_Type)|0))>>2)];
      var $56=((($55)+(1))|0);
      HEAP32[((((_Dialect_Type)|0))>>2)]=$56;
      var $57=$module;
      var $58=_PyModule_AddObject($57, ((__str4)|0), _Dialect_Type);
      var $59=(($58)|(0))!=0;
      if ($59) { label = 22; break; } else { label = 23; break; }
    case 22: 
      label = 26; break;
    case 23: 
      var $62=_PyErr_NewException(((__str5)|0), 0, 0);
      HEAP32[((_error_obj)>>2)]=$62;
      var $63=HEAP32[((_error_obj)>>2)];
      var $64=(($63)|(0))==0;
      if ($64) { label = 24; break; } else { label = 25; break; }
    case 24: 
      label = 26; break;
    case 25: 
      var $67=$module;
      var $68=HEAP32[((_error_obj)>>2)];
      var $69=_PyModule_AddObject($67, ((__str6)|0), $68);
      label = 26; break;
    case 26: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_init_csv"] = _init_csv;
function _csv_reader($module, $args, $keyword_args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $iterator=__stackBase__;
      var $dialect=(__stackBase__)+(4);
      var $self;
      $2=$module;
      $3=$args;
      $4=$keyword_args;
      HEAP32[(($dialect)>>2)]=0;
      var $5=__PyObject_GC_New(_Reader_Type);
      var $6=$5;
      $self=$6;
      var $7=$self;
      var $8=(($7)|(0))!=0;
      if ($8) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 32; break;
    case 3: 
      var $11=$self;
      var $12=(($11+12)|0);
      HEAP32[(($12)>>2)]=0;
      var $13=$self;
      var $14=(($13+16)|0);
      HEAP32[(($14)>>2)]=0;
      var $15=$self;
      var $16=(($15+8)|0);
      HEAP32[(($16)>>2)]=0;
      var $17=$self;
      var $18=(($17+24)|0);
      HEAP32[(($18)>>2)]=0;
      var $19=$self;
      var $20=(($19+28)|0);
      HEAP32[(($20)>>2)]=0;
      var $21=$self;
      var $22=(($21+40)|0);
      HEAP32[(($22)>>2)]=0;
      var $23=$self;
      var $24=_parse_reset($23);
      var $25=(($24)|(0)) < 0;
      if ($25) { label = 4; break; } else { label = 10; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $28=$self;
      var $29=$28;
      var $30=(($29)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=((($31)-(1))|0);
      HEAP32[(($30)>>2)]=$32;
      var $33=(($32)|(0))!=0;
      if ($33) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 8; break;
    case 7: 
      var $36=$self;
      var $37=$36;
      var $38=(($37+4)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39+24)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=$self;
      var $43=$42;
      FUNCTION_TABLE[$41]($43);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      $1=0;
      label = 32; break;
    case 10: 
      var $47=$3;
      var $48=_PyArg_UnpackTuple($47, ((__str20)|0), 1, 2, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$iterator,HEAP32[(((tempInt)+(4))>>2)]=$dialect,tempInt));
      var $49=(($48)|(0))!=0;
      if ($49) { label = 17; break; } else { label = 11; break; }
    case 11: 
      label = 12; break;
    case 12: 
      var $52=$self;
      var $53=$52;
      var $54=(($53)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=((($55)-(1))|0);
      HEAP32[(($54)>>2)]=$56;
      var $57=(($56)|(0))!=0;
      if ($57) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 15; break;
    case 14: 
      var $60=$self;
      var $61=$60;
      var $62=(($61+4)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=(($63+24)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=$self;
      var $67=$66;
      FUNCTION_TABLE[$65]($67);
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      $1=0;
      label = 32; break;
    case 17: 
      var $71=HEAP32[(($iterator)>>2)];
      var $72=_PyObject_GetIter($71);
      var $73=$self;
      var $74=(($73+8)|0);
      HEAP32[(($74)>>2)]=$72;
      var $75=$self;
      var $76=(($75+8)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=(($77)|(0))==0;
      if ($78) { label = 18; break; } else { label = 24; break; }
    case 18: 
      var $80=HEAP32[((_PyExc_TypeError)>>2)];
      _PyErr_SetString($80, ((__str26)|0));
      label = 19; break;
    case 19: 
      var $82=$self;
      var $83=$82;
      var $84=(($83)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=((($85)-(1))|0);
      HEAP32[(($84)>>2)]=$86;
      var $87=(($86)|(0))!=0;
      if ($87) { label = 20; break; } else { label = 21; break; }
    case 20: 
      label = 22; break;
    case 21: 
      var $90=$self;
      var $91=$90;
      var $92=(($91+4)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=(($93+24)|0);
      var $95=HEAP32[(($94)>>2)];
      var $96=$self;
      var $97=$96;
      FUNCTION_TABLE[$95]($97);
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      $1=0;
      label = 32; break;
    case 24: 
      var $101=HEAP32[(($dialect)>>2)];
      var $102=$4;
      var $103=__call_dialect($101, $102);
      var $104=$103;
      var $105=$self;
      var $106=(($105+12)|0);
      HEAP32[(($106)>>2)]=$104;
      var $107=$self;
      var $108=(($107+12)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=(($109)|(0))==0;
      if ($110) { label = 25; break; } else { label = 31; break; }
    case 25: 
      label = 26; break;
    case 26: 
      var $113=$self;
      var $114=$113;
      var $115=(($114)|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=((($116)-(1))|0);
      HEAP32[(($115)>>2)]=$117;
      var $118=(($117)|(0))!=0;
      if ($118) { label = 27; break; } else { label = 28; break; }
    case 27: 
      label = 29; break;
    case 28: 
      var $121=$self;
      var $122=$121;
      var $123=(($122+4)|0);
      var $124=HEAP32[(($123)>>2)];
      var $125=(($124+24)|0);
      var $126=HEAP32[(($125)>>2)];
      var $127=$self;
      var $128=$127;
      FUNCTION_TABLE[$126]($128);
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      $1=0;
      label = 32; break;
    case 31: 
      var $132=$self;
      var $133=$132;
      _PyObject_GC_Track($133);
      var $134=$self;
      var $135=$134;
      $1=$135;
      label = 32; break;
    case 32: 
      var $137=$1;
      STACKTOP = __stackBase__;
      return $137;
    default: assert(0, "bad label: " + label);
  }
}
function _csv_writer($module, $args, $keyword_args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $output_file=__stackBase__;
      var $dialect=(__stackBase__)+(4);
      var $self;
      $2=$module;
      $3=$args;
      $4=$keyword_args;
      HEAP32[(($dialect)>>2)]=0;
      var $5=__PyObject_GC_New(_Writer_Type);
      var $6=$5;
      $self=$6;
      var $7=$self;
      var $8=(($7)|(0))!=0;
      if ($8) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 26; break;
    case 3: 
      var $11=$self;
      var $12=(($11+12)|0);
      HEAP32[(($12)>>2)]=0;
      var $13=$self;
      var $14=(($13+8)|0);
      HEAP32[(($14)>>2)]=0;
      var $15=$self;
      var $16=(($15+16)|0);
      HEAP32[(($16)>>2)]=0;
      var $17=$self;
      var $18=(($17+20)|0);
      HEAP32[(($18)>>2)]=0;
      var $19=$self;
      var $20=(($19+24)|0);
      HEAP32[(($20)>>2)]=0;
      var $21=$self;
      var $22=(($21+28)|0);
      HEAP32[(($22)>>2)]=0;
      var $23=$3;
      var $24=_PyArg_UnpackTuple($23, ((__str20)|0), 1, 2, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$output_file,HEAP32[(((tempInt)+(4))>>2)]=$dialect,tempInt));
      var $25=(($24)|(0))!=0;
      if ($25) { label = 10; break; } else { label = 4; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $28=$self;
      var $29=$28;
      var $30=(($29)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=((($31)-(1))|0);
      HEAP32[(($30)>>2)]=$32;
      var $33=(($32)|(0))!=0;
      if ($33) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 8; break;
    case 7: 
      var $36=$self;
      var $37=$36;
      var $38=(($37+4)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39+24)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=$self;
      var $43=$42;
      FUNCTION_TABLE[$41]($43);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      $1=0;
      label = 26; break;
    case 10: 
      var $47=HEAP32[(($output_file)>>2)];
      var $48=_PyObject_GetAttrString($47, ((__str24)|0));
      var $49=$self;
      var $50=(($49+8)|0);
      HEAP32[(($50)>>2)]=$48;
      var $51=$self;
      var $52=(($51+8)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=(($53)|(0))==0;
      if ($54) { label = 12; break; } else { label = 11; break; }
    case 11: 
      var $56=$self;
      var $57=(($56+8)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=_PyCallable_Check($58);
      var $60=(($59)|(0))!=0;
      if ($60) { label = 18; break; } else { label = 12; break; }
    case 12: 
      var $62=HEAP32[((_PyExc_TypeError)>>2)];
      _PyErr_SetString($62, ((__str25)|0));
      label = 13; break;
    case 13: 
      var $64=$self;
      var $65=$64;
      var $66=(($65)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=((($67)-(1))|0);
      HEAP32[(($66)>>2)]=$68;
      var $69=(($68)|(0))!=0;
      if ($69) { label = 14; break; } else { label = 15; break; }
    case 14: 
      label = 16; break;
    case 15: 
      var $72=$self;
      var $73=$72;
      var $74=(($73+4)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=(($75+24)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=$self;
      var $79=$78;
      FUNCTION_TABLE[$77]($79);
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      $1=0;
      label = 26; break;
    case 18: 
      var $83=HEAP32[(($dialect)>>2)];
      var $84=$4;
      var $85=__call_dialect($83, $84);
      var $86=$85;
      var $87=$self;
      var $88=(($87+12)|0);
      HEAP32[(($88)>>2)]=$86;
      var $89=$self;
      var $90=(($89+12)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=(($91)|(0))==0;
      if ($92) { label = 19; break; } else { label = 25; break; }
    case 19: 
      label = 20; break;
    case 20: 
      var $95=$self;
      var $96=$95;
      var $97=(($96)|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=((($98)-(1))|0);
      HEAP32[(($97)>>2)]=$99;
      var $100=(($99)|(0))!=0;
      if ($100) { label = 21; break; } else { label = 22; break; }
    case 21: 
      label = 23; break;
    case 22: 
      var $103=$self;
      var $104=$103;
      var $105=(($104+4)|0);
      var $106=HEAP32[(($105)>>2)];
      var $107=(($106+24)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=$self;
      var $110=$109;
      FUNCTION_TABLE[$108]($110);
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      $1=0;
      label = 26; break;
    case 25: 
      var $114=$self;
      var $115=$114;
      _PyObject_GC_Track($115);
      var $116=$self;
      var $117=$116;
      $1=$117;
      label = 26; break;
    case 26: 
      var $119=$1;
      STACKTOP = __stackBase__;
      return $119;
    default: assert(0, "bad label: " + label);
  }
}
function _csv_list_dialects($module, $args) {
  var label = 0;
  var $1;
  var $2;
  $1=$module;
  $2=$args;
  var $3=HEAP32[((_dialects)>>2)];
  var $4=_PyDict_Keys($3);
  return $4;
}
function _csv_register_dialect($module, $args, $kwargs) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $name_obj=__stackBase__;
      var $dialect_obj=(__stackBase__)+(4);
      var $dialect;
      $2=$module;
      $3=$args;
      $4=$kwargs;
      HEAP32[(($dialect_obj)>>2)]=0;
      var $5=$3;
      var $6=_PyArg_UnpackTuple($5, ((__str20)|0), 1, 2, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$name_obj,HEAP32[(((tempInt)+(4))>>2)]=$dialect_obj,tempInt));
      var $7=(($6)|(0))!=0;
      if ($7) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 21; break;
    case 3: 
      var $10=HEAP32[(($name_obj)>>2)];
      var $11=(($10+4)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12)|(0))==((_PyBaseString_Type)|(0));
      if ($13) { label = 6; break; } else { label = 4; break; }
    case 4: 
      var $15=HEAP32[(($name_obj)>>2)];
      var $16=(($15+4)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=_PyType_IsSubtype($17, _PyBaseString_Type);
      var $19=(($18)|(0))!=0;
      if ($19) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $21=HEAP32[((_PyExc_TypeError)>>2)];
      _PyErr_SetString($21, ((__str21)|0));
      $1=0;
      label = 21; break;
    case 6: 
      var $23=HEAP32[(($dialect_obj)>>2)];
      var $24=$4;
      var $25=__call_dialect($23, $24);
      $dialect=$25;
      var $26=$dialect;
      var $27=(($26)|(0))==0;
      if ($27) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $1=0;
      label = 21; break;
    case 8: 
      var $30=HEAP32[((_dialects)>>2)];
      var $31=HEAP32[(($name_obj)>>2)];
      var $32=$dialect;
      var $33=_PyDict_SetItem($30, $31, $32);
      var $34=(($33)|(0)) < 0;
      if ($34) { label = 9; break; } else { label = 15; break; }
    case 9: 
      label = 10; break;
    case 10: 
      var $37=$dialect;
      var $38=(($37)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=((($39)-(1))|0);
      HEAP32[(($38)>>2)]=$40;
      var $41=(($40)|(0))!=0;
      if ($41) { label = 11; break; } else { label = 12; break; }
    case 11: 
      label = 13; break;
    case 12: 
      var $44=$dialect;
      var $45=(($44+4)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46+24)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=$dialect;
      FUNCTION_TABLE[$48]($49);
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      $1=0;
      label = 21; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $54=$dialect;
      var $55=(($54)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=((($56)-(1))|0);
      HEAP32[(($55)>>2)]=$57;
      var $58=(($57)|(0))!=0;
      if ($58) { label = 17; break; } else { label = 18; break; }
    case 17: 
      label = 19; break;
    case 18: 
      var $61=$dialect;
      var $62=(($61+4)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=(($63+24)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=$dialect;
      FUNCTION_TABLE[$65]($66);
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $69=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $70=((($69)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$70;
      $1=__Py_NoneStruct;
      label = 21; break;
    case 21: 
      var $72=$1;
      STACKTOP = __stackBase__;
      return $72;
    default: assert(0, "bad label: " + label);
  }
}
function _csv_unregister_dialect($module, $name_obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$module;
      $3=$name_obj;
      var $4=HEAP32[((_dialects)>>2)];
      var $5=$3;
      var $6=_PyDict_DelItem($4, $5);
      var $7=(($6)|(0)) < 0;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $9=HEAP32[((_error_obj)>>2)];
      var $10=_PyErr_Format($9, ((__str19)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=$10;
      label = 4; break;
    case 3: 
      var $12=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $13=((($12)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$13;
      $1=__Py_NoneStruct;
      label = 4; break;
    case 4: 
      var $15=$1;
      STACKTOP = __stackBase__;
      return $15;
    default: assert(0, "bad label: " + label);
  }
}
function _csv_get_dialect($module, $name_obj) {
  var label = 0;
  var $1;
  var $2;
  $1=$module;
  $2=$name_obj;
  var $3=$2;
  var $4=_get_dialect_from_registry($3);
  return $4;
}
function _csv_field_size_limit($module, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $new_limit=__stackBase__;
      var $old_limit;
      $2=$module;
      $3=$args;
      HEAP32[(($new_limit)>>2)]=0;
      var $4=HEAP32[((_field_limit)>>2)];
      $old_limit=$4;
      var $5=$3;
      var $6=_PyArg_UnpackTuple($5, ((__str17)|0), 0, 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$new_limit,tempInt));
      var $7=(($6)|(0))!=0;
      if ($7) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 8; break;
    case 3: 
      var $10=HEAP32[(($new_limit)>>2)];
      var $11=(($10)|(0))!=0;
      if ($11) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $13=HEAP32[(($new_limit)>>2)];
      var $14=(($13+4)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15+84)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=$17 & 8388608;
      var $19=(($18)|(0))!=0;
      if ($19) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $21=HEAP32[((_PyExc_TypeError)>>2)];
      var $22=_PyErr_Format($21, ((__str18)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=0;
      label = 8; break;
    case 6: 
      var $24=HEAP32[(($new_limit)>>2)];
      var $25=_PyInt_AsLong($24);
      HEAP32[((_field_limit)>>2)]=$25;
      label = 7; break;
    case 7: 
      var $27=$old_limit;
      var $28=_PyInt_FromLong($27);
      $1=$28;
      label = 8; break;
    case 8: 
      var $30=$1;
      STACKTOP = __stackBase__;
      return $30;
    default: assert(0, "bad label: " + label);
  }
}
function _get_dialect_from_registry($name_obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $dialect_obj;
      $1=$name_obj;
      var $2=HEAP32[((_dialects)>>2)];
      var $3=$1;
      var $4=_PyDict_GetItem($2, $3);
      $dialect_obj=$4;
      var $5=$dialect_obj;
      var $6=(($5)|(0))==0;
      if ($6) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $8=_PyErr_Occurred();
      var $9=(($8)|(0))!=0;
      if ($9) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $11=HEAP32[((_error_obj)>>2)];
      var $12=_PyErr_Format($11, ((__str19)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 4; break;
    case 4: 
      label = 6; break;
    case 5: 
      var $15=$dialect_obj;
      var $16=(($15)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=((($17)+(1))|0);
      HEAP32[(($16)>>2)]=$18;
      label = 6; break;
    case 6: 
      var $20=$dialect_obj;
      STACKTOP = __stackBase__;
      return $20;
    default: assert(0, "bad label: " + label);
  }
}
function __call_dialect($dialect_inst, $kwargs) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $ctor_args;
      var $dialect;
      $2=$dialect_inst;
      $3=$kwargs;
      var $4=$2;
      var $5=(($4)|(0))!=0;
      var $6=$5 ? (((__str22)|0)) : (((__str23)|0));
      var $7=$2;
      var $8=_Py_BuildValue($6, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$7,tempInt));
      $ctor_args=$8;
      var $9=$ctor_args;
      var $10=(($9)|(0))==0;
      if ($10) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 9; break;
    case 3: 
      var $13=$ctor_args;
      var $14=$3;
      var $15=_PyObject_Call(_Dialect_Type, $13, $14);
      $dialect=$15;
      label = 4; break;
    case 4: 
      var $17=$ctor_args;
      var $18=(($17)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=((($19)-(1))|0);
      HEAP32[(($18)>>2)]=$20;
      var $21=(($20)|(0))!=0;
      if ($21) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 7; break;
    case 6: 
      var $24=$ctor_args;
      var $25=(($24+4)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26+24)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=$ctor_args;
      FUNCTION_TABLE[$28]($29);
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $32=$dialect;
      $1=$32;
      label = 9; break;
    case 9: 
      var $34=$1;
      STACKTOP = __stackBase__;
      return $34;
    default: assert(0, "bad label: " + label);
  }
}
function _parse_reset($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $2=$self;
      label = 2; break;
    case 2: 
      var $4=$2;
      var $5=(($4+16)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0))==0;
      if ($7) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 10; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $11=$2;
      var $12=(($11+16)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=((($15)-(1))|0);
      HEAP32[(($14)>>2)]=$16;
      var $17=(($16)|(0))!=0;
      if ($17) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 8; break;
    case 7: 
      var $20=$2;
      var $21=(($20+16)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22+4)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24+24)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$2;
      var $28=(($27+16)|0);
      var $29=HEAP32[(($28)>>2)];
      FUNCTION_TABLE[$26]($29);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $34=_PyList_New(0);
      var $35=$2;
      var $36=(($35+16)|0);
      HEAP32[(($36)>>2)]=$34;
      var $37=$2;
      var $38=(($37+16)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39)|(0))==0;
      if ($40) { label = 12; break; } else { label = 13; break; }
    case 12: 
      $1=-1;
      label = 14; break;
    case 13: 
      var $43=$2;
      var $44=(($43+32)|0);
      HEAP32[(($44)>>2)]=0;
      var $45=$2;
      var $46=(($45+20)|0);
      HEAP32[(($46)>>2)]=0;
      var $47=$2;
      var $48=(($47+36)|0);
      HEAP32[(($48)>>2)]=0;
      $1=0;
      label = 14; break;
    case 14: 
      var $50=$1;
      return $50;
    default: assert(0, "bad label: " + label);
  }
}
function _join_reset($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+24)|0);
  HEAP32[(($3)>>2)]=0;
  var $4=$1;
  var $5=(($4+28)|0);
  HEAP32[(($5)>>2)]=0;
  return;
}
function _Writer_dealloc($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=$2;
      _PyObject_GC_UnTrack($3);
      label = 2; break;
    case 2: 
      var $5=$1;
      var $6=(($5+12)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|(0))==0;
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 10; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $12=$1;
      var $13=(($12+12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$14;
      var $16=(($15)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=((($17)-(1))|0);
      HEAP32[(($16)>>2)]=$18;
      var $19=(($18)|(0))!=0;
      if ($19) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 8; break;
    case 7: 
      var $22=$1;
      var $23=(($22+12)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=$24;
      var $26=(($25+4)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27+24)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=$1;
      var $31=(($30+12)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=$32;
      FUNCTION_TABLE[$29]($33);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $39=$1;
      var $40=(($39+8)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($41)|(0))==0;
      if ($42) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 20; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $46=$1;
      var $47=(($46+8)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=(($48)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=((($50)-(1))|0);
      HEAP32[(($49)>>2)]=$51;
      var $52=(($51)|(0))!=0;
      if ($52) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 18; break;
    case 17: 
      var $55=$1;
      var $56=(($55+8)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=(($57+4)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=(($59+24)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=$1;
      var $63=(($62+8)|0);
      var $64=HEAP32[(($63)>>2)];
      FUNCTION_TABLE[$61]($64);
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $69=$1;
      var $70=(($69+16)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=(($71)|(0))!=0;
      if ($72) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $74=$1;
      var $75=(($74+16)|0);
      var $76=HEAP32[(($75)>>2)];
      _PyMem_Free($76);
      label = 23; break;
    case 23: 
      var $78=$1;
      var $79=$78;
      _PyObject_GC_Del($79);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _Writer_traverse($self, $visit, $arg) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $vret;
      var $vret1;
      $2=$self;
      $3=$visit;
      $4=$arg;
      label = 2; break;
    case 2: 
      var $6=$2;
      var $7=(($6+12)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $11=$3;
      var $12=$2;
      var $13=(($12+12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$14;
      var $16=$4;
      var $17=FUNCTION_TABLE[$11]($15, $16);
      $vret=$17;
      var $18=$vret;
      var $19=(($18)|(0))!=0;
      if ($19) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $21=$vret;
      $1=$21;
      label = 14; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $26=$2;
      var $27=(($26+8)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28)|(0))!=0;
      if ($29) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $31=$3;
      var $32=$2;
      var $33=(($32+8)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=$4;
      var $36=FUNCTION_TABLE[$31]($34, $35);
      $vret1=$36;
      var $37=$vret1;
      var $38=(($37)|(0))!=0;
      if ($38) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $40=$vret1;
      $1=$40;
      label = 14; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      $1=0;
      label = 14; break;
    case 14: 
      var $45=$1;
      return $45;
    default: assert(0, "bad label: " + label);
  }
}
function _Writer_clear($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $_py_tmp;
      var $_py_tmp1;
      $1=$self;
      label = 2; break;
    case 2: 
      var $3=$1;
      var $4=(($3+12)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 9; break; }
    case 3: 
      var $8=$1;
      var $9=(($8+12)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=$10;
      $_py_tmp=$11;
      var $12=$1;
      var $13=(($12+12)|0);
      HEAP32[(($13)>>2)]=0;
      label = 4; break;
    case 4: 
      var $15=$_py_tmp;
      var $16=(($15)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=((($17)-(1))|0);
      HEAP32[(($16)>>2)]=$18;
      var $19=(($18)|(0))!=0;
      if ($19) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 7; break;
    case 6: 
      var $22=$_py_tmp;
      var $23=(($22+4)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24+24)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$_py_tmp;
      FUNCTION_TABLE[$26]($27);
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $33=$1;
      var $34=(($33+8)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35)|(0))!=0;
      if ($36) { label = 12; break; } else { label = 18; break; }
    case 12: 
      var $38=$1;
      var $39=(($38+8)|0);
      var $40=HEAP32[(($39)>>2)];
      $_py_tmp1=$40;
      var $41=$1;
      var $42=(($41+8)|0);
      HEAP32[(($42)>>2)]=0;
      label = 13; break;
    case 13: 
      var $44=$_py_tmp1;
      var $45=(($44)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=((($46)-(1))|0);
      HEAP32[(($45)>>2)]=$47;
      var $48=(($47)|(0))!=0;
      if ($48) { label = 14; break; } else { label = 15; break; }
    case 14: 
      label = 16; break;
    case 15: 
      var $51=$_py_tmp1;
      var $52=(($51+4)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=(($53+24)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=$_py_tmp1;
      FUNCTION_TABLE[$55]($56);
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      return 0;
    default: assert(0, "bad label: " + label);
  }
}
function _csv_writerow($self, $seq) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $dialect;
      var $len;
      var $i;
      var $field;
      var $append_ok;
      var $quoted=__stackBase__;
      var $str;
      $2=$self;
      $3=$seq;
      var $4=$2;
      var $5=(($4+12)|0);
      var $6=HEAP32[(($5)>>2)];
      $dialect=$6;
      var $7=$3;
      var $8=_PySequence_Check($7);
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $11=HEAP32[((_error_obj)>>2)];
      var $12=_PyErr_Format($11, ((__str32)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=$12;
      label = 52; break;
    case 3: 
      var $14=$3;
      var $15=_PySequence_Size($14);
      $len=$15;
      var $16=$len;
      var $17=(($16)|(0)) < 0;
      if ($17) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=0;
      label = 52; break;
    case 5: 
      var $20=$2;
      _join_reset($20);
      $i=0;
      label = 6; break;
    case 6: 
      var $22=$i;
      var $23=$len;
      var $24=(($22)|(0)) < (($23)|(0));
      if ($24) { label = 7; break; } else { label = 49; break; }
    case 7: 
      var $26=$3;
      var $27=$i;
      var $28=_PySequence_GetItem($26, $27);
      $field=$28;
      var $29=$field;
      var $30=(($29)|(0))==0;
      if ($30) { label = 8; break; } else { label = 9; break; }
    case 8: 
      $1=0;
      label = 52; break;
    case 9: 
      var $33=$dialect;
      var $34=(($33+24)|0);
      var $35=HEAP32[(($34)>>2)];
      if ((($35)|(0))==2) {
        label = 10; break;
      }
      else if ((($35)|(0))==1) {
        label = 11; break;
      }
      else {
      label = 12; break;
      }
    case 10: 
      var $37=$field;
      var $38=_PyNumber_Check($37);
      var $39=(($38)|(0))!=0;
      var $40=$39 ^ 1;
      var $41=(($40)&(1));
      HEAP32[(($quoted)>>2)]=$41;
      label = 13; break;
    case 11: 
      HEAP32[(($quoted)>>2)]=1;
      label = 13; break;
    case 12: 
      HEAP32[(($quoted)>>2)]=0;
      label = 13; break;
    case 13: 
      var $45=$field;
      var $46=(($45+4)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=(($47+84)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=$49 & 134217728;
      var $51=(($50)|(0))!=0;
      if ($51) { label = 14; break; } else { label = 20; break; }
    case 14: 
      var $53=$2;
      var $54=$field;
      var $55=$54;
      var $56=(($55+20)|0);
      var $57=(($56)|0);
      var $58=$len;
      var $59=(($58)|(0))==1;
      var $60=(($59)&(1));
      var $61=_join_append($53, $57, $quoted, $60);
      $append_ok=$61;
      label = 15; break;
    case 15: 
      var $63=$field;
      var $64=(($63)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=((($65)-(1))|0);
      HEAP32[(($64)>>2)]=$66;
      var $67=(($66)|(0))!=0;
      if ($67) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 18; break;
    case 17: 
      var $70=$field;
      var $71=(($70+4)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=(($72+24)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=$field;
      FUNCTION_TABLE[$74]($75);
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 45; break;
    case 20: 
      var $79=$field;
      var $80=(($79)|(0))==((__Py_NoneStruct)|(0));
      if ($80) { label = 21; break; } else { label = 27; break; }
    case 21: 
      var $82=$2;
      var $83=$len;
      var $84=(($83)|(0))==1;
      var $85=(($84)&(1));
      var $86=_join_append($82, ((__str20)|0), $quoted, $85);
      $append_ok=$86;
      label = 22; break;
    case 22: 
      var $88=$field;
      var $89=(($88)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=((($90)-(1))|0);
      HEAP32[(($89)>>2)]=$91;
      var $92=(($91)|(0))!=0;
      if ($92) { label = 23; break; } else { label = 24; break; }
    case 23: 
      label = 25; break;
    case 24: 
      var $95=$field;
      var $96=(($95+4)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=(($97+24)|0);
      var $99=HEAP32[(($98)>>2)];
      var $100=$field;
      FUNCTION_TABLE[$99]($100);
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 44; break;
    case 27: 
      var $104=$field;
      var $105=(($104+4)|0);
      var $106=HEAP32[(($105)>>2)];
      var $107=(($106)|(0))==((_PyFloat_Type)|(0));
      if ($107) { label = 29; break; } else { label = 28; break; }
    case 28: 
      var $109=$field;
      var $110=(($109+4)|0);
      var $111=HEAP32[(($110)>>2)];
      var $112=_PyType_IsSubtype($111, _PyFloat_Type);
      var $113=(($112)|(0))!=0;
      if ($113) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $115=$field;
      var $116=_PyObject_Repr($115);
      $str=$116;
      label = 31; break;
    case 30: 
      var $118=$field;
      var $119=_PyObject_Str($118);
      $str=$119;
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      var $122=$field;
      var $123=(($122)|0);
      var $124=HEAP32[(($123)>>2)];
      var $125=((($124)-(1))|0);
      HEAP32[(($123)>>2)]=$125;
      var $126=(($125)|(0))!=0;
      if ($126) { label = 33; break; } else { label = 34; break; }
    case 33: 
      label = 35; break;
    case 34: 
      var $129=$field;
      var $130=(($129+4)|0);
      var $131=HEAP32[(($130)>>2)];
      var $132=(($131+24)|0);
      var $133=HEAP32[(($132)>>2)];
      var $134=$field;
      FUNCTION_TABLE[$133]($134);
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $137=$str;
      var $138=(($137)|(0))==0;
      if ($138) { label = 37; break; } else { label = 38; break; }
    case 37: 
      $1=0;
      label = 52; break;
    case 38: 
      var $141=$2;
      var $142=$str;
      var $143=$142;
      var $144=(($143+20)|0);
      var $145=(($144)|0);
      var $146=$len;
      var $147=(($146)|(0))==1;
      var $148=(($147)&(1));
      var $149=_join_append($141, $145, $quoted, $148);
      $append_ok=$149;
      label = 39; break;
    case 39: 
      var $151=$str;
      var $152=(($151)|0);
      var $153=HEAP32[(($152)>>2)];
      var $154=((($153)-(1))|0);
      HEAP32[(($152)>>2)]=$154;
      var $155=(($154)|(0))!=0;
      if ($155) { label = 40; break; } else { label = 41; break; }
    case 40: 
      label = 42; break;
    case 41: 
      var $158=$str;
      var $159=(($158+4)|0);
      var $160=HEAP32[(($159)>>2)];
      var $161=(($160+24)|0);
      var $162=HEAP32[(($161)>>2)];
      var $163=$str;
      FUNCTION_TABLE[$162]($163);
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      var $168=$append_ok;
      var $169=(($168)|(0))!=0;
      if ($169) { label = 47; break; } else { label = 46; break; }
    case 46: 
      $1=0;
      label = 52; break;
    case 47: 
      label = 48; break;
    case 48: 
      var $173=$i;
      var $174=((($173)+(1))|0);
      $i=$174;
      label = 6; break;
    case 49: 
      var $176=$2;
      var $177=_join_append_lineterminator($176);
      var $178=(($177)|(0))!=0;
      if ($178) { label = 51; break; } else { label = 50; break; }
    case 50: 
      $1=0;
      label = 52; break;
    case 51: 
      var $181=$2;
      var $182=(($181+8)|0);
      var $183=HEAP32[(($182)>>2)];
      var $184=$2;
      var $185=(($184+16)|0);
      var $186=HEAP32[(($185)>>2)];
      var $187=$2;
      var $188=(($187+24)|0);
      var $189=HEAP32[(($188)>>2)];
      var $190=_PyObject_CallFunction($183, ((__str33)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$186,HEAP32[(((tempInt)+(4))>>2)]=$189,tempInt));
      $1=$190;
      label = 52; break;
    case 52: 
      var $192=$1;
      STACKTOP = __stackBase__;
      return $192;
    default: assert(0, "bad label: " + label);
  }
}
function _csv_writerows($self, $seqseq) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $row_iter;
      var $row_obj;
      var $result;
      $2=$self;
      $3=$seqseq;
      var $4=$3;
      var $5=_PyObject_GetIter($4);
      $row_iter=$5;
      var $6=$row_iter;
      var $7=(($6)|(0))==0;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $9=HEAP32[((_PyExc_TypeError)>>2)];
      _PyErr_SetString($9, ((__str31)|0));
      $1=0;
      label = 32; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $12=$row_iter;
      var $13=_PyIter_Next($12);
      $row_obj=$13;
      var $14=(($13)|(0))!=0;
      if ($14) { label = 5; break; } else { label = 24; break; }
    case 5: 
      var $16=$2;
      var $17=$row_obj;
      var $18=_csv_writerow($16, $17);
      $result=$18;
      label = 6; break;
    case 6: 
      var $20=$row_obj;
      var $21=(($20)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=((($22)-(1))|0);
      HEAP32[(($21)>>2)]=$23;
      var $24=(($23)|(0))!=0;
      if ($24) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 9; break;
    case 8: 
      var $27=$row_obj;
      var $28=(($27+4)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29+24)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=$row_obj;
      FUNCTION_TABLE[$31]($32);
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $35=$result;
      var $36=(($35)|(0))!=0;
      if ($36) { label = 17; break; } else { label = 11; break; }
    case 11: 
      label = 12; break;
    case 12: 
      var $39=$row_iter;
      var $40=(($39)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=((($41)-(1))|0);
      HEAP32[(($40)>>2)]=$42;
      var $43=(($42)|(0))!=0;
      if ($43) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 15; break;
    case 14: 
      var $46=$row_iter;
      var $47=(($46+4)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=(($48+24)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=$row_iter;
      FUNCTION_TABLE[$50]($51);
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      $1=0;
      label = 32; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $56=$result;
      var $57=(($56)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=((($58)-(1))|0);
      HEAP32[(($57)>>2)]=$59;
      var $60=(($59)|(0))!=0;
      if ($60) { label = 19; break; } else { label = 20; break; }
    case 19: 
      label = 21; break;
    case 20: 
      var $63=$result;
      var $64=(($63+4)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=(($65+24)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=$result;
      FUNCTION_TABLE[$67]($68);
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      label = 4; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $74=$row_iter;
      var $75=(($74)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=((($76)-(1))|0);
      HEAP32[(($75)>>2)]=$77;
      var $78=(($77)|(0))!=0;
      if ($78) { label = 26; break; } else { label = 27; break; }
    case 26: 
      label = 28; break;
    case 27: 
      var $81=$row_iter;
      var $82=(($81+4)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=(($83+24)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=$row_iter;
      FUNCTION_TABLE[$85]($86);
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $89=_PyErr_Occurred();
      var $90=(($89)|(0))!=0;
      if ($90) { label = 30; break; } else { label = 31; break; }
    case 30: 
      $1=0;
      label = 32; break;
    case 31: 
      var $93=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $94=((($93)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$94;
      $1=__Py_NoneStruct;
      label = 32; break;
    case 32: 
      var $96=$1;
      return $96;
    default: assert(0, "bad label: " + label);
  }
}
function _join_append($self, $field, $quoted, $quote_empty) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $rec_len;
      $2=$self;
      $3=$field;
      $4=$quoted;
      $5=$quote_empty;
      var $6=$2;
      var $7=$3;
      var $8=$5;
      var $9=$4;
      var $10=_join_append_data($6, $7, $8, $9, 0);
      $rec_len=$10;
      var $11=$rec_len;
      var $12=(($11)|(0)) < 0;
      if ($12) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 6; break;
    case 3: 
      var $15=$2;
      var $16=$rec_len;
      var $17=_join_check_rec_size($15, $16);
      var $18=(($17)|(0))!=0;
      if ($18) { label = 5; break; } else { label = 4; break; }
    case 4: 
      $1=0;
      label = 6; break;
    case 5: 
      var $21=$2;
      var $22=$3;
      var $23=$5;
      var $24=$4;
      var $25=_join_append_data($21, $22, $23, $24, 1);
      var $26=$2;
      var $27=(($26+24)|0);
      HEAP32[(($27)>>2)]=$25;
      var $28=$2;
      var $29=(($28+28)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=((($30)+(1))|0);
      HEAP32[(($29)>>2)]=$31;
      $1=1;
      label = 6; break;
    case 6: 
      var $33=$1;
      return $33;
    default: assert(0, "bad label: " + label);
  }
}
function _join_append_lineterminator($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $terminator_len;
      var $terminator;
      $2=$self;
      var $3=$2;
      var $4=(($3+12)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5+20)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=_PyString_Size($7);
      $terminator_len=$8;
      var $9=$terminator_len;
      var $10=(($9)|(0))==-1;
      if ($10) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 8; break;
    case 3: 
      var $13=$2;
      var $14=$2;
      var $15=(($14+24)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$terminator_len;
      var $18=((($16)+($17))|0);
      var $19=_join_check_rec_size($13, $18);
      var $20=(($19)|(0))!=0;
      if ($20) { label = 5; break; } else { label = 4; break; }
    case 4: 
      $1=0;
      label = 8; break;
    case 5: 
      var $23=$2;
      var $24=(($23+12)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25+20)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=_PyString_AsString($27);
      $terminator=$28;
      var $29=$terminator;
      var $30=(($29)|(0))==0;
      if ($30) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $1=0;
      label = 8; break;
    case 7: 
      var $33=$2;
      var $34=(($33+16)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=$2;
      var $37=(($36+24)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($35+$38)|0);
      var $40=$terminator;
      var $41=$terminator_len;
      _memmove($39, $40, $41, 1, 0);
      var $42=$terminator_len;
      var $43=$2;
      var $44=(($43+24)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=((($45)+($42))|0);
      HEAP32[(($44)>>2)]=$46;
      $1=1;
      label = 8; break;
    case 8: 
      var $48=$1;
      return $48;
    default: assert(0, "bad label: " + label);
  }
}
function _join_check_rec_size($self, $rec_len) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $old_rec;
      $2=$self;
      $3=$rec_len;
      var $4=$3;
      var $5=(($4)|(0)) < 0;
      if ($5) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $7=$3;
      var $8=(($7)|(0)) > 2147450879;
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $10=_PyErr_NoMemory();
      $1=0;
      label = 16; break;
    case 4: 
      var $12=$3;
      var $13=$2;
      var $14=(($13+20)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($12)|(0)) > (($15)|(0));
      if ($16) { label = 5; break; } else { label = 15; break; }
    case 5: 
      var $18=$2;
      var $19=(($18+20)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20)|(0))==0;
      if ($21) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $23=$3;
      var $24=((((($23)|(0)))/(32768))&-1);
      var $25=((($24)+(1))|0);
      var $26=($25<<15);
      var $27=$2;
      var $28=(($27+20)|0);
      HEAP32[(($28)>>2)]=$26;
      var $29=$2;
      var $30=(($29+16)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31)|(0))!=0;
      if ($32) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $34=$2;
      var $35=(($34+16)|0);
      var $36=HEAP32[(($35)>>2)];
      _PyMem_Free($36);
      label = 8; break;
    case 8: 
      var $38=$2;
      var $39=(($38+20)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=_PyMem_Malloc($40);
      var $42=$2;
      var $43=(($42+16)|0);
      HEAP32[(($43)>>2)]=$41;
      label = 12; break;
    case 9: 
      var $45=$2;
      var $46=(($45+16)|0);
      var $47=HEAP32[(($46)>>2)];
      $old_rec=$47;
      var $48=$3;
      var $49=((((($48)|(0)))/(32768))&-1);
      var $50=((($49)+(1))|0);
      var $51=($50<<15);
      var $52=$2;
      var $53=(($52+20)|0);
      HEAP32[(($53)>>2)]=$51;
      var $54=$2;
      var $55=(($54+16)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=$2;
      var $58=(($57+20)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=_PyMem_Realloc($56, $59);
      var $61=$2;
      var $62=(($61+16)|0);
      HEAP32[(($62)>>2)]=$60;
      var $63=$2;
      var $64=(($63+16)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=(($65)|(0))==0;
      if ($66) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $68=$old_rec;
      _PyMem_Free($68);
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $71=$2;
      var $72=(($71+16)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=(($73)|(0))==0;
      if ($74) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $76=_PyErr_NoMemory();
      $1=0;
      label = 16; break;
    case 14: 
      label = 15; break;
    case 15: 
      $1=1;
      label = 16; break;
    case 16: 
      var $80=$1;
      return $80;
    default: assert(0, "bad label: " + label);
  }
}
function _join_append_data($self, $field, $quote_empty, $quoted, $copy_phase) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $dialect;
      var $i;
      var $rec_len;
      var $lineterm;
      var $c;
      var $want_escape;
      $2=$self;
      $3=$field;
      $4=$quote_empty;
      $5=$quoted;
      $6=$copy_phase;
      var $7=$2;
      var $8=(($7+12)|0);
      var $9=HEAP32[(($8)>>2)];
      $dialect=$9;
      var $10=$dialect;
      var $11=(($10+20)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=_PyString_AsString($12);
      $lineterm=$13;
      var $14=$lineterm;
      var $15=(($14)|(0))==0;
      if ($15) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=-1;
      label = 68; break;
    case 3: 
      var $18=$2;
      var $19=(($18+24)|0);
      var $20=HEAP32[(($19)>>2)];
      $rec_len=$20;
      var $21=$2;
      var $22=(($21+28)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23)|(0)) > 0;
      if ($24) { label = 4; break; } else { label = 9; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $27=$6;
      var $28=(($27)|(0))!=0;
      if ($28) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $30=$dialect;
      var $31=(($30+12)|0);
      var $32=HEAP8[($31)];
      var $33=$rec_len;
      var $34=$2;
      var $35=(($34+16)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36+$33)|0);
      HEAP8[($37)]=$32;
      label = 7; break;
    case 7: 
      var $39=$rec_len;
      var $40=((($39)+(1))|0);
      $rec_len=$40;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $43=$6;
      var $44=(($43)|(0))!=0;
      if ($44) { label = 10; break; } else { label = 16; break; }
    case 10: 
      var $46=$5;
      var $47=HEAP32[(($46)>>2)];
      var $48=(($47)|(0))!=0;
      if ($48) { label = 11; break; } else { label = 16; break; }
    case 11: 
      label = 12; break;
    case 12: 
      var $51=$6;
      var $52=(($51)|(0))!=0;
      if ($52) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $54=$dialect;
      var $55=(($54+13)|0);
      var $56=HEAP8[($55)];
      var $57=$rec_len;
      var $58=$2;
      var $59=(($58+16)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=(($60+$57)|0);
      HEAP8[($61)]=$56;
      label = 14; break;
    case 14: 
      var $63=$rec_len;
      var $64=((($63)+(1))|0);
      $rec_len=$64;
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      $i=0;
      label = 17; break;
    case 17: 
      var $68=$i;
      var $69=$3;
      var $70=(($69+$68)|0);
      var $71=HEAP8[($70)];
      $c=$71;
      $want_escape=0;
      var $72=$c;
      var $73=(($72 << 24) >> 24);
      var $74=(($73)|(0))==0;
      if ($74) { label = 18; break; } else { label = 19; break; }
    case 18: 
      label = 52; break;
    case 19: 
      var $77=$c;
      var $78=(($77 << 24) >> 24);
      var $79=$dialect;
      var $80=(($79+12)|0);
      var $81=HEAP8[($80)];
      var $82=(($81 << 24) >> 24);
      var $83=(($78)|(0))==(($82)|(0));
      if ($83) { label = 23; break; } else { label = 20; break; }
    case 20: 
      var $85=$c;
      var $86=(($85 << 24) >> 24);
      var $87=$dialect;
      var $88=(($87+14)|0);
      var $89=HEAP8[($88)];
      var $90=(($89 << 24) >> 24);
      var $91=(($86)|(0))==(($90)|(0));
      if ($91) { label = 23; break; } else { label = 21; break; }
    case 21: 
      var $93=$c;
      var $94=(($93 << 24) >> 24);
      var $95=$dialect;
      var $96=(($95+13)|0);
      var $97=HEAP8[($96)];
      var $98=(($97 << 24) >> 24);
      var $99=(($94)|(0))==(($98)|(0));
      if ($99) { label = 23; break; } else { label = 22; break; }
    case 22: 
      var $101=$lineterm;
      var $102=$c;
      var $103=(($102 << 24) >> 24);
      var $104=_strchr($101, $103);
      var $105=(($104)|(0))!=0;
      if ($105) { label = 23; break; } else { label = 46; break; }
    case 23: 
      var $107=$dialect;
      var $108=(($107+24)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=(($109)|(0))==3;
      if ($110) { label = 24; break; } else { label = 25; break; }
    case 24: 
      $want_escape=1;
      label = 37; break;
    case 25: 
      var $113=$c;
      var $114=(($113 << 24) >> 24);
      var $115=$dialect;
      var $116=(($115+13)|0);
      var $117=HEAP8[($116)];
      var $118=(($117 << 24) >> 24);
      var $119=(($114)|(0))==(($118)|(0));
      if ($119) { label = 26; break; } else { label = 34; break; }
    case 26: 
      var $121=$dialect;
      var $122=(($121+8)|0);
      var $123=HEAP32[(($122)>>2)];
      var $124=(($123)|(0))!=0;
      if ($124) { label = 27; break; } else { label = 32; break; }
    case 27: 
      label = 28; break;
    case 28: 
      var $127=$6;
      var $128=(($127)|(0))!=0;
      if ($128) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $130=$dialect;
      var $131=(($130+13)|0);
      var $132=HEAP8[($131)];
      var $133=$rec_len;
      var $134=$2;
      var $135=(($134+16)|0);
      var $136=HEAP32[(($135)>>2)];
      var $137=(($136+$133)|0);
      HEAP8[($137)]=$132;
      label = 30; break;
    case 30: 
      var $139=$rec_len;
      var $140=((($139)+(1))|0);
      $rec_len=$140;
      label = 31; break;
    case 31: 
      label = 33; break;
    case 32: 
      $want_escape=1;
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      var $145=$want_escape;
      var $146=(($145)|(0))!=0;
      if ($146) { label = 36; break; } else { label = 35; break; }
    case 35: 
      var $148=$5;
      HEAP32[(($148)>>2)]=1;
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      var $151=$want_escape;
      var $152=(($151)|(0))!=0;
      if ($152) { label = 38; break; } else { label = 45; break; }
    case 38: 
      var $154=$dialect;
      var $155=(($154+14)|0);
      var $156=HEAP8[($155)];
      var $157=(($156 << 24) >> 24)!=0;
      if ($157) { label = 40; break; } else { label = 39; break; }
    case 39: 
      var $159=HEAP32[((_error_obj)>>2)];
      var $160=_PyErr_Format($159, ((__str34)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=-1;
      label = 68; break;
    case 40: 
      label = 41; break;
    case 41: 
      var $163=$6;
      var $164=(($163)|(0))!=0;
      if ($164) { label = 42; break; } else { label = 43; break; }
    case 42: 
      var $166=$dialect;
      var $167=(($166+14)|0);
      var $168=HEAP8[($167)];
      var $169=$rec_len;
      var $170=$2;
      var $171=(($170+16)|0);
      var $172=HEAP32[(($171)>>2)];
      var $173=(($172+$169)|0);
      HEAP8[($173)]=$168;
      label = 43; break;
    case 43: 
      var $175=$rec_len;
      var $176=((($175)+(1))|0);
      $rec_len=$176;
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      var $181=$6;
      var $182=(($181)|(0))!=0;
      if ($182) { label = 48; break; } else { label = 49; break; }
    case 48: 
      var $184=$c;
      var $185=$rec_len;
      var $186=$2;
      var $187=(($186+16)|0);
      var $188=HEAP32[(($187)>>2)];
      var $189=(($188+$185)|0);
      HEAP8[($189)]=$184;
      label = 49; break;
    case 49: 
      var $191=$rec_len;
      var $192=((($191)+(1))|0);
      $rec_len=$192;
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      var $195=$i;
      var $196=((($195)+(1))|0);
      $i=$196;
      label = 17; break;
    case 52: 
      var $198=$i;
      var $199=(($198)|(0))==0;
      if ($199) { label = 53; break; } else { label = 58; break; }
    case 53: 
      var $201=$4;
      var $202=(($201)|(0))!=0;
      if ($202) { label = 54; break; } else { label = 58; break; }
    case 54: 
      var $204=$dialect;
      var $205=(($204+24)|0);
      var $206=HEAP32[(($205)>>2)];
      var $207=(($206)|(0))==3;
      if ($207) { label = 55; break; } else { label = 56; break; }
    case 55: 
      var $209=HEAP32[((_error_obj)>>2)];
      var $210=_PyErr_Format($209, ((__str35)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=-1;
      label = 68; break;
    case 56: 
      var $212=$5;
      HEAP32[(($212)>>2)]=1;
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      var $215=$5;
      var $216=HEAP32[(($215)>>2)];
      var $217=(($216)|(0))!=0;
      if ($217) { label = 59; break; } else { label = 67; break; }
    case 59: 
      var $219=$6;
      var $220=(($219)|(0))!=0;
      if ($220) { label = 60; break; } else { label = 65; break; }
    case 60: 
      label = 61; break;
    case 61: 
      var $223=$6;
      var $224=(($223)|(0))!=0;
      if ($224) { label = 62; break; } else { label = 63; break; }
    case 62: 
      var $226=$dialect;
      var $227=(($226+13)|0);
      var $228=HEAP8[($227)];
      var $229=$rec_len;
      var $230=$2;
      var $231=(($230+16)|0);
      var $232=HEAP32[(($231)>>2)];
      var $233=(($232+$229)|0);
      HEAP8[($233)]=$228;
      label = 63; break;
    case 63: 
      var $235=$rec_len;
      var $236=((($235)+(1))|0);
      $rec_len=$236;
      label = 64; break;
    case 64: 
      label = 66; break;
    case 65: 
      var $239=$rec_len;
      var $240=((($239)+(2))|0);
      $rec_len=$240;
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      var $243=$rec_len;
      $1=$243;
      label = 68; break;
    case 68: 
      var $245=$1;
      STACKTOP = __stackBase__;
      return $245;
    default: assert(0, "bad label: " + label);
  }
}
function _Reader_dealloc($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=$2;
      _PyObject_GC_UnTrack($3);
      label = 2; break;
    case 2: 
      var $5=$1;
      var $6=(($5+12)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|(0))==0;
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 10; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $12=$1;
      var $13=(($12+12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$14;
      var $16=(($15)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=((($17)-(1))|0);
      HEAP32[(($16)>>2)]=$18;
      var $19=(($18)|(0))!=0;
      if ($19) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 8; break;
    case 7: 
      var $22=$1;
      var $23=(($22+12)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=$24;
      var $26=(($25+4)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27+24)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=$1;
      var $31=(($30+12)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=$32;
      FUNCTION_TABLE[$29]($33);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $39=$1;
      var $40=(($39+8)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($41)|(0))==0;
      if ($42) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 20; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $46=$1;
      var $47=(($46+8)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=(($48)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=((($50)-(1))|0);
      HEAP32[(($49)>>2)]=$51;
      var $52=(($51)|(0))!=0;
      if ($52) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 18; break;
    case 17: 
      var $55=$1;
      var $56=(($55+8)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=(($57+4)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=(($59+24)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=$1;
      var $63=(($62+8)|0);
      var $64=HEAP32[(($63)>>2)];
      FUNCTION_TABLE[$61]($64);
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $70=$1;
      var $71=(($70+16)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=(($72)|(0))==0;
      if ($73) { label = 23; break; } else { label = 24; break; }
    case 23: 
      label = 30; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $77=$1;
      var $78=(($77+16)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=(($79)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=((($81)-(1))|0);
      HEAP32[(($80)>>2)]=$82;
      var $83=(($82)|(0))!=0;
      if ($83) { label = 26; break; } else { label = 27; break; }
    case 26: 
      label = 28; break;
    case 27: 
      var $86=$1;
      var $87=(($86+16)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=(($88+4)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=(($90+24)|0);
      var $92=HEAP32[(($91)>>2)];
      var $93=$1;
      var $94=(($93+16)|0);
      var $95=HEAP32[(($94)>>2)];
      FUNCTION_TABLE[$92]($95);
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $100=$1;
      var $101=(($100+24)|0);
      var $102=HEAP32[(($101)>>2)];
      var $103=(($102)|(0))!=0;
      if ($103) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $105=$1;
      var $106=(($105+24)|0);
      var $107=HEAP32[(($106)>>2)];
      _PyMem_Free($107);
      label = 33; break;
    case 33: 
      var $109=$1;
      var $110=$109;
      _PyObject_GC_Del($110);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _Reader_traverse($self, $visit, $arg) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $vret;
      var $vret1;
      var $vret2;
      $2=$self;
      $3=$visit;
      $4=$arg;
      label = 2; break;
    case 2: 
      var $6=$2;
      var $7=(($6+12)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $11=$3;
      var $12=$2;
      var $13=(($12+12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$14;
      var $16=$4;
      var $17=FUNCTION_TABLE[$11]($15, $16);
      $vret=$17;
      var $18=$vret;
      var $19=(($18)|(0))!=0;
      if ($19) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $21=$vret;
      $1=$21;
      label = 20; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $26=$2;
      var $27=(($26+8)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28)|(0))!=0;
      if ($29) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $31=$3;
      var $32=$2;
      var $33=(($32+8)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=$4;
      var $36=FUNCTION_TABLE[$31]($34, $35);
      $vret1=$36;
      var $37=$vret1;
      var $38=(($37)|(0))!=0;
      if ($38) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $40=$vret1;
      $1=$40;
      label = 20; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $45=$2;
      var $46=(($45+16)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=(($47)|(0))!=0;
      if ($48) { label = 15; break; } else { label = 18; break; }
    case 15: 
      var $50=$3;
      var $51=$2;
      var $52=(($51+16)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=$4;
      var $55=FUNCTION_TABLE[$50]($53, $54);
      $vret2=$55;
      var $56=$vret2;
      var $57=(($56)|(0))!=0;
      if ($57) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $59=$vret2;
      $1=$59;
      label = 20; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      $1=0;
      label = 20; break;
    case 20: 
      var $64=$1;
      return $64;
    default: assert(0, "bad label: " + label);
  }
}
function _Reader_clear($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $_py_tmp;
      var $_py_tmp1;
      var $_py_tmp2;
      $1=$self;
      label = 2; break;
    case 2: 
      var $3=$1;
      var $4=(($3+12)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 9; break; }
    case 3: 
      var $8=$1;
      var $9=(($8+12)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=$10;
      $_py_tmp=$11;
      var $12=$1;
      var $13=(($12+12)|0);
      HEAP32[(($13)>>2)]=0;
      label = 4; break;
    case 4: 
      var $15=$_py_tmp;
      var $16=(($15)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=((($17)-(1))|0);
      HEAP32[(($16)>>2)]=$18;
      var $19=(($18)|(0))!=0;
      if ($19) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 7; break;
    case 6: 
      var $22=$_py_tmp;
      var $23=(($22+4)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24+24)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$_py_tmp;
      FUNCTION_TABLE[$26]($27);
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $33=$1;
      var $34=(($33+8)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35)|(0))!=0;
      if ($36) { label = 12; break; } else { label = 18; break; }
    case 12: 
      var $38=$1;
      var $39=(($38+8)|0);
      var $40=HEAP32[(($39)>>2)];
      $_py_tmp1=$40;
      var $41=$1;
      var $42=(($41+8)|0);
      HEAP32[(($42)>>2)]=0;
      label = 13; break;
    case 13: 
      var $44=$_py_tmp1;
      var $45=(($44)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=((($46)-(1))|0);
      HEAP32[(($45)>>2)]=$47;
      var $48=(($47)|(0))!=0;
      if ($48) { label = 14; break; } else { label = 15; break; }
    case 14: 
      label = 16; break;
    case 15: 
      var $51=$_py_tmp1;
      var $52=(($51+4)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=(($53+24)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=$_py_tmp1;
      FUNCTION_TABLE[$55]($56);
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $62=$1;
      var $63=(($62+16)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=(($64)|(0))!=0;
      if ($65) { label = 21; break; } else { label = 27; break; }
    case 21: 
      var $67=$1;
      var $68=(($67+16)|0);
      var $69=HEAP32[(($68)>>2)];
      $_py_tmp2=$69;
      var $70=$1;
      var $71=(($70+16)|0);
      HEAP32[(($71)>>2)]=0;
      label = 22; break;
    case 22: 
      var $73=$_py_tmp2;
      var $74=(($73)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=((($75)-(1))|0);
      HEAP32[(($74)>>2)]=$76;
      var $77=(($76)|(0))!=0;
      if ($77) { label = 23; break; } else { label = 24; break; }
    case 23: 
      label = 25; break;
    case 24: 
      var $80=$_py_tmp2;
      var $81=(($80+4)|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=(($82+24)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=$_py_tmp2;
      FUNCTION_TABLE[$84]($85);
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      return 0;
    default: assert(0, "bad label: " + label);
  }
}
function _Reader_iternext($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $lineobj;
      var $fields;
      var $line;
      var $c;
      var $linelen;
      $2=$self;
      $fields=0;
      var $3=$2;
      var $4=_parse_reset($3);
      var $5=(($4)|(0)) < 0;
      if ($5) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 51; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $9=$2;
      var $10=(($9+8)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=_PyIter_Next($11);
      $lineobj=$12;
      var $13=$lineobj;
      var $14=(($13)|(0))==0;
      if ($14) { label = 5; break; } else { label = 15; break; }
    case 5: 
      var $16=_PyErr_Occurred();
      var $17=(($16)|(0))!=0;
      if ($17) { label = 14; break; } else { label = 6; break; }
    case 6: 
      var $19=$2;
      var $20=(($19+32)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21)|(0))!=0;
      if ($22) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $24=$2;
      var $25=(($24+20)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26)|(0))==4;
      if ($27) { label = 8; break; } else { label = 14; break; }
    case 8: 
      var $29=$2;
      var $30=(($29+12)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31+28)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33)|(0))!=0;
      if ($34) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $36=HEAP32[((_error_obj)>>2)];
      _PyErr_SetString($36, ((__str38)|0));
      label = 13; break;
    case 10: 
      var $38=$2;
      var $39=_parse_save_field($38);
      var $40=(($39)|(0)) >= 0;
      if ($40) { label = 11; break; } else { label = 12; break; }
    case 11: 
      label = 49; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      $1=0;
      label = 51; break;
    case 15: 
      var $46=$2;
      var $47=(($46+40)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=((($48)+(1))|0);
      HEAP32[(($47)>>2)]=$49;
      var $50=$lineobj;
      var $51=_PyString_AsString($50);
      $line=$51;
      var $52=$lineobj;
      var $53=_PyString_Size($52);
      $linelen=$53;
      var $54=$line;
      var $55=(($54)|(0))==0;
      if ($55) { label = 17; break; } else { label = 16; break; }
    case 16: 
      var $57=$linelen;
      var $58=(($57)|(0)) < 0;
      if ($58) { label = 17; break; } else { label = 23; break; }
    case 17: 
      label = 18; break;
    case 18: 
      var $61=$lineobj;
      var $62=(($61)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=((($63)-(1))|0);
      HEAP32[(($62)>>2)]=$64;
      var $65=(($64)|(0))!=0;
      if ($65) { label = 19; break; } else { label = 20; break; }
    case 19: 
      label = 21; break;
    case 20: 
      var $68=$lineobj;
      var $69=(($68+4)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=(($70+24)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=$lineobj;
      FUNCTION_TABLE[$72]($73);
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      $1=0;
      label = 51; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $78=$linelen;
      var $79=((($78)-(1))|0);
      $linelen=$79;
      var $80=(($78)|(0))!=0;
      if ($80) { label = 25; break; } else { label = 40; break; }
    case 25: 
      var $82=$line;
      var $83=(($82+1)|0);
      $line=$83;
      var $84=HEAP8[($82)];
      $c=$84;
      var $85=$c;
      var $86=(($85 << 24) >> 24);
      var $87=(($86)|(0))==0;
      if ($87) { label = 26; break; } else { label = 32; break; }
    case 26: 
      label = 27; break;
    case 27: 
      var $90=$lineobj;
      var $91=(($90)|0);
      var $92=HEAP32[(($91)>>2)];
      var $93=((($92)-(1))|0);
      HEAP32[(($91)>>2)]=$93;
      var $94=(($93)|(0))!=0;
      if ($94) { label = 28; break; } else { label = 29; break; }
    case 28: 
      label = 30; break;
    case 29: 
      var $97=$lineobj;
      var $98=(($97+4)|0);
      var $99=HEAP32[(($98)>>2)];
      var $100=(($99+24)|0);
      var $101=HEAP32[(($100)>>2)];
      var $102=$lineobj;
      FUNCTION_TABLE[$101]($102);
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $105=HEAP32[((_error_obj)>>2)];
      var $106=_PyErr_Format($105, ((__str39)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 50; break;
    case 32: 
      var $108=$2;
      var $109=$c;
      var $110=_parse_process_char($108, $109);
      var $111=(($110)|(0)) < 0;
      if ($111) { label = 33; break; } else { label = 39; break; }
    case 33: 
      label = 34; break;
    case 34: 
      var $114=$lineobj;
      var $115=(($114)|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=((($116)-(1))|0);
      HEAP32[(($115)>>2)]=$117;
      var $118=(($117)|(0))!=0;
      if ($118) { label = 35; break; } else { label = 36; break; }
    case 35: 
      label = 37; break;
    case 36: 
      var $121=$lineobj;
      var $122=(($121+4)|0);
      var $123=HEAP32[(($122)>>2)];
      var $124=(($123+24)|0);
      var $125=HEAP32[(($124)>>2)];
      var $126=$lineobj;
      FUNCTION_TABLE[$125]($126);
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      label = 50; break;
    case 39: 
      label = 24; break;
    case 40: 
      label = 41; break;
    case 41: 
      var $132=$lineobj;
      var $133=(($132)|0);
      var $134=HEAP32[(($133)>>2)];
      var $135=((($134)-(1))|0);
      HEAP32[(($133)>>2)]=$135;
      var $136=(($135)|(0))!=0;
      if ($136) { label = 42; break; } else { label = 43; break; }
    case 42: 
      label = 44; break;
    case 43: 
      var $139=$lineobj;
      var $140=(($139+4)|0);
      var $141=HEAP32[(($140)>>2)];
      var $142=(($141+24)|0);
      var $143=HEAP32[(($142)>>2)];
      var $144=$lineobj;
      FUNCTION_TABLE[$143]($144);
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      var $147=$2;
      var $148=_parse_process_char($147, 0);
      var $149=(($148)|(0)) < 0;
      if ($149) { label = 46; break; } else { label = 47; break; }
    case 46: 
      label = 50; break;
    case 47: 
      label = 48; break;
    case 48: 
      var $153=$2;
      var $154=(($153+20)|0);
      var $155=HEAP32[(($154)>>2)];
      var $156=(($155)|(0))!=0;
      if ($156) { label = 4; break; } else { label = 49; break; }
    case 49: 
      var $158=$2;
      var $159=(($158+16)|0);
      var $160=HEAP32[(($159)>>2)];
      $fields=$160;
      var $161=$2;
      var $162=(($161+16)|0);
      HEAP32[(($162)>>2)]=0;
      label = 50; break;
    case 50: 
      var $164=$fields;
      $1=$164;
      label = 51; break;
    case 51: 
      var $166=$1;
      STACKTOP = __stackBase__;
      return $166;
    default: assert(0, "bad label: " + label);
  }
}
function _parse_save_field($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $field;
      var $tmp;
      $2=$self;
      var $3=$2;
      var $4=(($3+24)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=$2;
      var $7=(($6+32)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=_PyString_FromStringAndSize($5, $8);
      $field=$9;
      var $10=$field;
      var $11=(($10)|(0))==0;
      if ($11) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=-1;
      label = 23; break;
    case 3: 
      var $14=$2;
      var $15=(($14+32)|0);
      HEAP32[(($15)>>2)]=0;
      var $16=$2;
      var $17=(($16+36)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18)|(0))!=0;
      if ($19) { label = 4; break; } else { label = 17; break; }
    case 4: 
      var $21=$2;
      var $22=(($21+36)|0);
      HEAP32[(($22)>>2)]=0;
      var $23=$field;
      var $24=_PyNumber_Float($23);
      $tmp=$24;
      var $25=$tmp;
      var $26=(($25)|(0))==0;
      if ($26) { label = 5; break; } else { label = 11; break; }
    case 5: 
      label = 6; break;
    case 6: 
      var $29=$field;
      var $30=(($29)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=((($31)-(1))|0);
      HEAP32[(($30)>>2)]=$32;
      var $33=(($32)|(0))!=0;
      if ($33) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 9; break;
    case 8: 
      var $36=$field;
      var $37=(($36+4)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38+24)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=$field;
      FUNCTION_TABLE[$40]($41);
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      $1=-1;
      label = 23; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $46=$field;
      var $47=(($46)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=((($48)-(1))|0);
      HEAP32[(($47)>>2)]=$49;
      var $50=(($49)|(0))!=0;
      if ($50) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 15; break;
    case 14: 
      var $53=$field;
      var $54=(($53+4)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=(($55+24)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=$field;
      FUNCTION_TABLE[$57]($58);
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $61=$tmp;
      $field=$61;
      label = 17; break;
    case 17: 
      var $63=$2;
      var $64=(($63+16)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=$field;
      var $67=_PyList_Append($65, $66);
      label = 18; break;
    case 18: 
      var $69=$field;
      var $70=(($69)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=((($71)-(1))|0);
      HEAP32[(($70)>>2)]=$72;
      var $73=(($72)|(0))!=0;
      if ($73) { label = 19; break; } else { label = 20; break; }
    case 19: 
      label = 21; break;
    case 20: 
      var $76=$field;
      var $77=(($76+4)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=(($78+24)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=$field;
      FUNCTION_TABLE[$80]($81);
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      $1=0;
      label = 23; break;
    case 23: 
      var $85=$1;
      return $85;
    default: assert(0, "bad label: " + label);
  }
}
function _parse_process_char($self, $c) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $dialect;
      $2=$self;
      $3=$c;
      var $4=$2;
      var $5=(($4+12)|0);
      var $6=HEAP32[(($5)>>2)];
      $dialect=$6;
      var $7=$2;
      var $8=(($7+20)|0);
      var $9=HEAP32[(($8)>>2)];
      if ((($9)|(0))==0) {
        label = 2; break;
      }
      else if ((($9)|(0))==1) {
        label = 9; break;
      }
      else if ((($9)|(0))==2) {
        label = 37; break;
      }
      else if ((($9)|(0))==3) {
        label = 42; break;
      }
      else if ((($9)|(0))==4) {
        label = 60; break;
      }
      else if ((($9)|(0))==5) {
        label = 76; break;
      }
      else if ((($9)|(0))==6) {
        label = 81; break;
      }
      else if ((($9)|(0))==7) {
        label = 105; break;
      }
      else {
      label = 113; break;
      }
    case 2: 
      var $11=$3;
      var $12=(($11 << 24) >> 24);
      var $13=(($12)|(0))==0;
      if ($13) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 113; break;
    case 4: 
      var $16=$3;
      var $17=(($16 << 24) >> 24);
      var $18=(($17)|(0))==10;
      if ($18) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $20=$3;
      var $21=(($20 << 24) >> 24);
      var $22=(($21)|(0))==13;
      if ($22) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $24=$2;
      var $25=(($24+20)|0);
      HEAP32[(($25)>>2)]=7;
      label = 113; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $28=$2;
      var $29=(($28+20)|0);
      HEAP32[(($29)>>2)]=1;
      label = 9; break;
    case 9: 
      var $31=$3;
      var $32=(($31 << 24) >> 24);
      var $33=(($32)|(0))==10;
      if ($33) { label = 12; break; } else { label = 10; break; }
    case 10: 
      var $35=$3;
      var $36=(($35 << 24) >> 24);
      var $37=(($36)|(0))==13;
      if ($37) { label = 12; break; } else { label = 11; break; }
    case 11: 
      var $39=$3;
      var $40=(($39 << 24) >> 24);
      var $41=(($40)|(0))==0;
      if ($41) { label = 12; break; } else { label = 15; break; }
    case 12: 
      var $43=$2;
      var $44=_parse_save_field($43);
      var $45=(($44)|(0)) < 0;
      if ($45) { label = 13; break; } else { label = 14; break; }
    case 13: 
      $1=-1;
      label = 114; break;
    case 14: 
      var $48=$3;
      var $49=(($48 << 24) >> 24);
      var $50=(($49)|(0))==0;
      var $51=$50 ? 0 : 7;
      var $52=$2;
      var $53=(($52+20)|0);
      HEAP32[(($53)>>2)]=$51;
      label = 36; break;
    case 15: 
      var $55=$3;
      var $56=(($55 << 24) >> 24);
      var $57=$dialect;
      var $58=(($57+13)|0);
      var $59=HEAP8[($58)];
      var $60=(($59 << 24) >> 24);
      var $61=(($56)|(0))==(($60)|(0));
      if ($61) { label = 16; break; } else { label = 18; break; }
    case 16: 
      var $63=$dialect;
      var $64=(($63+24)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=(($65)|(0))!=3;
      if ($66) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $68=$2;
      var $69=(($68+20)|0);
      HEAP32[(($69)>>2)]=4;
      label = 35; break;
    case 18: 
      var $71=$3;
      var $72=(($71 << 24) >> 24);
      var $73=$dialect;
      var $74=(($73+14)|0);
      var $75=HEAP8[($74)];
      var $76=(($75 << 24) >> 24);
      var $77=(($72)|(0))==(($76)|(0));
      if ($77) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $79=$2;
      var $80=(($79+20)|0);
      HEAP32[(($80)>>2)]=2;
      label = 34; break;
    case 20: 
      var $82=$3;
      var $83=(($82 << 24) >> 24);
      var $84=(($83)|(0))==32;
      if ($84) { label = 21; break; } else { label = 23; break; }
    case 21: 
      var $86=$dialect;
      var $87=(($86+16)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=(($88)|(0))!=0;
      if ($89) { label = 22; break; } else { label = 23; break; }
    case 22: 
      label = 33; break;
    case 23: 
      var $92=$3;
      var $93=(($92 << 24) >> 24);
      var $94=$dialect;
      var $95=(($94+12)|0);
      var $96=HEAP8[($95)];
      var $97=(($96 << 24) >> 24);
      var $98=(($93)|(0))==(($97)|(0));
      if ($98) { label = 24; break; } else { label = 27; break; }
    case 24: 
      var $100=$2;
      var $101=_parse_save_field($100);
      var $102=(($101)|(0)) < 0;
      if ($102) { label = 25; break; } else { label = 26; break; }
    case 25: 
      $1=-1;
      label = 114; break;
    case 26: 
      label = 32; break;
    case 27: 
      var $106=$dialect;
      var $107=(($106+24)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=(($108)|(0))==2;
      if ($109) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $111=$2;
      var $112=(($111+36)|0);
      HEAP32[(($112)>>2)]=1;
      label = 29; break;
    case 29: 
      var $114=$2;
      var $115=$3;
      var $116=_parse_add_char($114, $115);
      var $117=(($116)|(0)) < 0;
      if ($117) { label = 30; break; } else { label = 31; break; }
    case 30: 
      $1=-1;
      label = 114; break;
    case 31: 
      var $120=$2;
      var $121=(($120+20)|0);
      HEAP32[(($121)>>2)]=3;
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      label = 113; break;
    case 37: 
      var $128=$3;
      var $129=(($128 << 24) >> 24);
      var $130=(($129)|(0))==0;
      if ($130) { label = 38; break; } else { label = 39; break; }
    case 38: 
      $3=10;
      label = 39; break;
    case 39: 
      var $133=$2;
      var $134=$3;
      var $135=_parse_add_char($133, $134);
      var $136=(($135)|(0)) < 0;
      if ($136) { label = 40; break; } else { label = 41; break; }
    case 40: 
      $1=-1;
      label = 114; break;
    case 41: 
      var $139=$2;
      var $140=(($139+20)|0);
      HEAP32[(($140)>>2)]=3;
      label = 113; break;
    case 42: 
      var $142=$3;
      var $143=(($142 << 24) >> 24);
      var $144=(($143)|(0))==10;
      if ($144) { label = 45; break; } else { label = 43; break; }
    case 43: 
      var $146=$3;
      var $147=(($146 << 24) >> 24);
      var $148=(($147)|(0))==13;
      if ($148) { label = 45; break; } else { label = 44; break; }
    case 44: 
      var $150=$3;
      var $151=(($150 << 24) >> 24);
      var $152=(($151)|(0))==0;
      if ($152) { label = 45; break; } else { label = 48; break; }
    case 45: 
      var $154=$2;
      var $155=_parse_save_field($154);
      var $156=(($155)|(0)) < 0;
      if ($156) { label = 46; break; } else { label = 47; break; }
    case 46: 
      $1=-1;
      label = 114; break;
    case 47: 
      var $159=$3;
      var $160=(($159 << 24) >> 24);
      var $161=(($160)|(0))==0;
      var $162=$161 ? 0 : 7;
      var $163=$2;
      var $164=(($163+20)|0);
      HEAP32[(($164)>>2)]=$162;
      label = 59; break;
    case 48: 
      var $166=$3;
      var $167=(($166 << 24) >> 24);
      var $168=$dialect;
      var $169=(($168+14)|0);
      var $170=HEAP8[($169)];
      var $171=(($170 << 24) >> 24);
      var $172=(($167)|(0))==(($171)|(0));
      if ($172) { label = 49; break; } else { label = 50; break; }
    case 49: 
      var $174=$2;
      var $175=(($174+20)|0);
      HEAP32[(($175)>>2)]=2;
      label = 58; break;
    case 50: 
      var $177=$3;
      var $178=(($177 << 24) >> 24);
      var $179=$dialect;
      var $180=(($179+12)|0);
      var $181=HEAP8[($180)];
      var $182=(($181 << 24) >> 24);
      var $183=(($178)|(0))==(($182)|(0));
      if ($183) { label = 51; break; } else { label = 54; break; }
    case 51: 
      var $185=$2;
      var $186=_parse_save_field($185);
      var $187=(($186)|(0)) < 0;
      if ($187) { label = 52; break; } else { label = 53; break; }
    case 52: 
      $1=-1;
      label = 114; break;
    case 53: 
      var $190=$2;
      var $191=(($190+20)|0);
      HEAP32[(($191)>>2)]=1;
      label = 57; break;
    case 54: 
      var $193=$2;
      var $194=$3;
      var $195=_parse_add_char($193, $194);
      var $196=(($195)|(0)) < 0;
      if ($196) { label = 55; break; } else { label = 56; break; }
    case 55: 
      $1=-1;
      label = 114; break;
    case 56: 
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      label = 59; break;
    case 59: 
      label = 113; break;
    case 60: 
      var $203=$3;
      var $204=(($203 << 24) >> 24);
      var $205=(($204)|(0))==0;
      if ($205) { label = 61; break; } else { label = 62; break; }
    case 61: 
      label = 75; break;
    case 62: 
      var $208=$3;
      var $209=(($208 << 24) >> 24);
      var $210=$dialect;
      var $211=(($210+14)|0);
      var $212=HEAP8[($211)];
      var $213=(($212 << 24) >> 24);
      var $214=(($209)|(0))==(($213)|(0));
      if ($214) { label = 63; break; } else { label = 64; break; }
    case 63: 
      var $216=$2;
      var $217=(($216+20)|0);
      HEAP32[(($217)>>2)]=5;
      label = 74; break;
    case 64: 
      var $219=$3;
      var $220=(($219 << 24) >> 24);
      var $221=$dialect;
      var $222=(($221+13)|0);
      var $223=HEAP8[($222)];
      var $224=(($223 << 24) >> 24);
      var $225=(($220)|(0))==(($224)|(0));
      if ($225) { label = 65; break; } else { label = 70; break; }
    case 65: 
      var $227=$dialect;
      var $228=(($227+24)|0);
      var $229=HEAP32[(($228)>>2)];
      var $230=(($229)|(0))!=3;
      if ($230) { label = 66; break; } else { label = 70; break; }
    case 66: 
      var $232=$dialect;
      var $233=(($232+8)|0);
      var $234=HEAP32[(($233)>>2)];
      var $235=(($234)|(0))!=0;
      if ($235) { label = 67; break; } else { label = 68; break; }
    case 67: 
      var $237=$2;
      var $238=(($237+20)|0);
      HEAP32[(($238)>>2)]=6;
      label = 69; break;
    case 68: 
      var $240=$2;
      var $241=(($240+20)|0);
      HEAP32[(($241)>>2)]=3;
      label = 69; break;
    case 69: 
      label = 73; break;
    case 70: 
      var $244=$2;
      var $245=$3;
      var $246=_parse_add_char($244, $245);
      var $247=(($246)|(0)) < 0;
      if ($247) { label = 71; break; } else { label = 72; break; }
    case 71: 
      $1=-1;
      label = 114; break;
    case 72: 
      label = 73; break;
    case 73: 
      label = 74; break;
    case 74: 
      label = 75; break;
    case 75: 
      label = 113; break;
    case 76: 
      var $254=$3;
      var $255=(($254 << 24) >> 24);
      var $256=(($255)|(0))==0;
      if ($256) { label = 77; break; } else { label = 78; break; }
    case 77: 
      $3=10;
      label = 78; break;
    case 78: 
      var $259=$2;
      var $260=$3;
      var $261=_parse_add_char($259, $260);
      var $262=(($261)|(0)) < 0;
      if ($262) { label = 79; break; } else { label = 80; break; }
    case 79: 
      $1=-1;
      label = 114; break;
    case 80: 
      var $265=$2;
      var $266=(($265+20)|0);
      HEAP32[(($266)>>2)]=4;
      label = 113; break;
    case 81: 
      var $268=$dialect;
      var $269=(($268+24)|0);
      var $270=HEAP32[(($269)>>2)];
      var $271=(($270)|(0))!=3;
      if ($271) { label = 82; break; } else { label = 86; break; }
    case 82: 
      var $273=$3;
      var $274=(($273 << 24) >> 24);
      var $275=$dialect;
      var $276=(($275+13)|0);
      var $277=HEAP8[($276)];
      var $278=(($277 << 24) >> 24);
      var $279=(($274)|(0))==(($278)|(0));
      if ($279) { label = 83; break; } else { label = 86; break; }
    case 83: 
      var $281=$2;
      var $282=$3;
      var $283=_parse_add_char($281, $282);
      var $284=(($283)|(0)) < 0;
      if ($284) { label = 84; break; } else { label = 85; break; }
    case 84: 
      $1=-1;
      label = 114; break;
    case 85: 
      var $287=$2;
      var $288=(($287+20)|0);
      HEAP32[(($288)>>2)]=4;
      label = 104; break;
    case 86: 
      var $290=$3;
      var $291=(($290 << 24) >> 24);
      var $292=$dialect;
      var $293=(($292+12)|0);
      var $294=HEAP8[($293)];
      var $295=(($294 << 24) >> 24);
      var $296=(($291)|(0))==(($295)|(0));
      if ($296) { label = 87; break; } else { label = 90; break; }
    case 87: 
      var $298=$2;
      var $299=_parse_save_field($298);
      var $300=(($299)|(0)) < 0;
      if ($300) { label = 88; break; } else { label = 89; break; }
    case 88: 
      $1=-1;
      label = 114; break;
    case 89: 
      var $303=$2;
      var $304=(($303+20)|0);
      HEAP32[(($304)>>2)]=1;
      label = 103; break;
    case 90: 
      var $306=$3;
      var $307=(($306 << 24) >> 24);
      var $308=(($307)|(0))==10;
      if ($308) { label = 93; break; } else { label = 91; break; }
    case 91: 
      var $310=$3;
      var $311=(($310 << 24) >> 24);
      var $312=(($311)|(0))==13;
      if ($312) { label = 93; break; } else { label = 92; break; }
    case 92: 
      var $314=$3;
      var $315=(($314 << 24) >> 24);
      var $316=(($315)|(0))==0;
      if ($316) { label = 93; break; } else { label = 96; break; }
    case 93: 
      var $318=$2;
      var $319=_parse_save_field($318);
      var $320=(($319)|(0)) < 0;
      if ($320) { label = 94; break; } else { label = 95; break; }
    case 94: 
      $1=-1;
      label = 114; break;
    case 95: 
      var $323=$3;
      var $324=(($323 << 24) >> 24);
      var $325=(($324)|(0))==0;
      var $326=$325 ? 0 : 7;
      var $327=$2;
      var $328=(($327+20)|0);
      HEAP32[(($328)>>2)]=$326;
      label = 102; break;
    case 96: 
      var $330=$dialect;
      var $331=(($330+28)|0);
      var $332=HEAP32[(($331)>>2)];
      var $333=(($332)|(0))!=0;
      if ($333) { label = 100; break; } else { label = 97; break; }
    case 97: 
      var $335=$2;
      var $336=$3;
      var $337=_parse_add_char($335, $336);
      var $338=(($337)|(0)) < 0;
      if ($338) { label = 98; break; } else { label = 99; break; }
    case 98: 
      $1=-1;
      label = 114; break;
    case 99: 
      var $341=$2;
      var $342=(($341+20)|0);
      HEAP32[(($342)>>2)]=3;
      label = 101; break;
    case 100: 
      var $344=HEAP32[((_error_obj)>>2)];
      var $345=$dialect;
      var $346=(($345+12)|0);
      var $347=HEAP8[($346)];
      var $348=(($347 << 24) >> 24);
      var $349=$dialect;
      var $350=(($349+13)|0);
      var $351=HEAP8[($350)];
      var $352=(($351 << 24) >> 24);
      var $353=_PyErr_Format($344, ((__str40)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$348,HEAP32[(((tempInt)+(4))>>2)]=$352,tempInt));
      $1=-1;
      label = 114; break;
    case 101: 
      label = 102; break;
    case 102: 
      label = 103; break;
    case 103: 
      label = 104; break;
    case 104: 
      label = 113; break;
    case 105: 
      var $359=$3;
      var $360=(($359 << 24) >> 24);
      var $361=(($360)|(0))==10;
      if ($361) { label = 107; break; } else { label = 106; break; }
    case 106: 
      var $363=$3;
      var $364=(($363 << 24) >> 24);
      var $365=(($364)|(0))==13;
      if ($365) { label = 107; break; } else { label = 108; break; }
    case 107: 
      label = 112; break;
    case 108: 
      var $368=$3;
      var $369=(($368 << 24) >> 24);
      var $370=(($369)|(0))==0;
      if ($370) { label = 109; break; } else { label = 110; break; }
    case 109: 
      var $372=$2;
      var $373=(($372+20)|0);
      HEAP32[(($373)>>2)]=0;
      label = 111; break;
    case 110: 
      var $375=HEAP32[((_error_obj)>>2)];
      var $376=_PyErr_Format($375, ((__str41)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=-1;
      label = 114; break;
    case 111: 
      label = 112; break;
    case 112: 
      label = 113; break;
    case 113: 
      $1=0;
      label = 114; break;
    case 114: 
      var $381=$1;
      STACKTOP = __stackBase__;
      return $381;
    default: assert(0, "bad label: " + label);
  }
}
function _parse_add_char($self, $c) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$self;
      $3=$c;
      var $4=$2;
      var $5=(($4+32)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=HEAP32[((_field_limit)>>2)];
      var $8=(($6)|(0)) >= (($7)|(0));
      if ($8) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $10=HEAP32[((_error_obj)>>2)];
      var $11=HEAP32[((_field_limit)>>2)];
      var $12=_PyErr_Format($10, ((__str42)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$11,tempInt));
      $1=-1;
      label = 7; break;
    case 3: 
      var $14=$2;
      var $15=(($14+32)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$2;
      var $18=(($17+28)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($16)|(0))==(($19)|(0));
      if ($20) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $22=$2;
      var $23=_parse_grow_buff($22);
      var $24=(($23)|(0))!=0;
      if ($24) { label = 6; break; } else { label = 5; break; }
    case 5: 
      $1=-1;
      label = 7; break;
    case 6: 
      var $27=$3;
      var $28=$2;
      var $29=(($28+32)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=((($30)+(1))|0);
      HEAP32[(($29)>>2)]=$31;
      var $32=$2;
      var $33=(($32+24)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($34+$30)|0);
      HEAP8[($35)]=$27;
      $1=0;
      label = 7; break;
    case 7: 
      var $37=$1;
      STACKTOP = __stackBase__;
      return $37;
    default: assert(0, "bad label: " + label);
  }
}
function _parse_grow_buff($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $2=$self;
      var $3=$2;
      var $4=(($3+28)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))==0;
      if ($6) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $8=$2;
      var $9=(($8+28)|0);
      HEAP32[(($9)>>2)]=4096;
      var $10=$2;
      var $11=(($10+24)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12)|(0))!=0;
      if ($13) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $15=$2;
      var $16=(($15+24)|0);
      var $17=HEAP32[(($16)>>2)];
      _PyMem_Free($17);
      label = 4; break;
    case 4: 
      var $19=$2;
      var $20=(($19+28)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=_PyMem_Malloc($21);
      var $23=$2;
      var $24=(($23+24)|0);
      HEAP32[(($24)>>2)]=$22;
      label = 8; break;
    case 5: 
      var $26=$2;
      var $27=(($26+28)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28)|(0)) > 1073741823;
      if ($29) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $31=_PyErr_NoMemory();
      $1=0;
      label = 11; break;
    case 7: 
      var $33=$2;
      var $34=(($33+28)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=($35<<1);
      HEAP32[(($34)>>2)]=$36;
      var $37=$2;
      var $38=(($37+24)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=$2;
      var $41=(($40+28)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=_PyMem_Realloc($39, $42);
      var $44=$2;
      var $45=(($44+24)|0);
      HEAP32[(($45)>>2)]=$43;
      label = 8; break;
    case 8: 
      var $47=$2;
      var $48=(($47+24)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=(($49)|(0))==0;
      if ($50) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $52=_PyErr_NoMemory();
      $1=0;
      label = 11; break;
    case 10: 
      $1=1;
      label = 11; break;
    case 11: 
      var $55=$1;
      return $55;
    default: assert(0, "bad label: " + label);
  }
}
function _Dialect_dealloc($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$self;
      label = 2; break;
    case 2: 
      var $3=$1;
      var $4=(($3+20)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))==0;
      if ($6) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 10; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $10=$1;
      var $11=(($10+20)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=((($14)-(1))|0);
      HEAP32[(($13)>>2)]=$15;
      var $16=(($15)|(0))!=0;
      if ($16) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 8; break;
    case 7: 
      var $19=$1;
      var $20=(($19+20)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21+4)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+24)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=$1;
      var $27=(($26+20)|0);
      var $28=HEAP32[(($27)>>2)];
      FUNCTION_TABLE[$25]($28);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $33=$1;
      var $34=$33;
      var $35=(($34+4)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36+160)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=$1;
      var $40=$39;
      var $41=$40;
      FUNCTION_TABLE[$38]($41);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _dialect_new($type, $args, $kwargs) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $self;
      var $ret;
      var $dialect=__stackBase__;
      var $delimiter=(__stackBase__)+(4);
      var $doublequote=(__stackBase__)+(8);
      var $escapechar=(__stackBase__)+(12);
      var $lineterminator=(__stackBase__)+(16);
      var $quotechar=(__stackBase__)+(20);
      var $quoting=(__stackBase__)+(24);
      var $skipinitialspace=(__stackBase__)+(28);
      var $strict=(__stackBase__)+(32);
      $2=$type;
      $3=$args;
      $4=$kwargs;
      $ret=0;
      HEAP32[(($dialect)>>2)]=0;
      HEAP32[(($delimiter)>>2)]=0;
      HEAP32[(($doublequote)>>2)]=0;
      HEAP32[(($escapechar)>>2)]=0;
      HEAP32[(($lineterminator)>>2)]=0;
      HEAP32[(($quotechar)>>2)]=0;
      HEAP32[(($quoting)>>2)]=0;
      HEAP32[(($skipinitialspace)>>2)]=0;
      HEAP32[(($strict)>>2)]=0;
      var $5=$3;
      var $6=$4;
      var $7=_PyArg_ParseTupleAndKeywords($5, $6, ((__str44)|0), ((_dialect_kws)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 36)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$dialect,HEAP32[(((tempInt)+(4))>>2)]=$delimiter,HEAP32[(((tempInt)+(8))>>2)]=$doublequote,HEAP32[(((tempInt)+(12))>>2)]=$escapechar,HEAP32[(((tempInt)+(16))>>2)]=$lineterminator,HEAP32[(((tempInt)+(20))>>2)]=$quotechar,HEAP32[(((tempInt)+(24))>>2)]=$quoting,HEAP32[(((tempInt)+(28))>>2)]=$skipinitialspace,HEAP32[(((tempInt)+(32))>>2)]=$strict,tempInt));
      var $8=(($7)|(0))!=0;
      if ($8) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 222; break;
    case 3: 
      var $11=HEAP32[(($dialect)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 4; break; } else { label = 22; break; }
    case 4: 
      var $14=HEAP32[(($dialect)>>2)];
      var $15=(($14+4)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16)|(0))==((_PyBaseString_Type)|(0));
      if ($17) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $19=HEAP32[(($dialect)>>2)];
      var $20=(($19+4)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=_PyType_IsSubtype($21, _PyBaseString_Type);
      var $23=(($22)|(0))!=0;
      if ($23) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $25=HEAP32[(($dialect)>>2)];
      var $26=_get_dialect_from_registry($25);
      HEAP32[(($dialect)>>2)]=$26;
      var $27=HEAP32[(($dialect)>>2)];
      var $28=(($27)|(0))==0;
      if ($28) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $1=0;
      label = 222; break;
    case 8: 
      label = 10; break;
    case 9: 
      var $32=HEAP32[(($dialect)>>2)];
      var $33=(($32)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=((($34)+(1))|0);
      HEAP32[(($33)>>2)]=$35;
      label = 10; break;
    case 10: 
      var $37=HEAP32[(($dialect)>>2)];
      var $38=(($37+4)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39)|(0))==((_Dialect_Type)|(0));
      if ($40) { label = 12; break; } else { label = 11; break; }
    case 11: 
      var $42=HEAP32[(($dialect)>>2)];
      var $43=(($42+4)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=_PyType_IsSubtype($44, _Dialect_Type);
      var $46=(($45)|(0))!=0;
      if ($46) { label = 12; break; } else { label = 21; break; }
    case 12: 
      var $48=HEAP32[(($delimiter)>>2)];
      var $49=(($48)|(0))==0;
      if ($49) { label = 13; break; } else { label = 21; break; }
    case 13: 
      var $51=HEAP32[(($doublequote)>>2)];
      var $52=(($51)|(0))==0;
      if ($52) { label = 14; break; } else { label = 21; break; }
    case 14: 
      var $54=HEAP32[(($escapechar)>>2)];
      var $55=(($54)|(0))==0;
      if ($55) { label = 15; break; } else { label = 21; break; }
    case 15: 
      var $57=HEAP32[(($lineterminator)>>2)];
      var $58=(($57)|(0))==0;
      if ($58) { label = 16; break; } else { label = 21; break; }
    case 16: 
      var $60=HEAP32[(($quotechar)>>2)];
      var $61=(($60)|(0))==0;
      if ($61) { label = 17; break; } else { label = 21; break; }
    case 17: 
      var $63=HEAP32[(($quoting)>>2)];
      var $64=(($63)|(0))==0;
      if ($64) { label = 18; break; } else { label = 21; break; }
    case 18: 
      var $66=HEAP32[(($skipinitialspace)>>2)];
      var $67=(($66)|(0))==0;
      if ($67) { label = 19; break; } else { label = 21; break; }
    case 19: 
      var $69=HEAP32[(($strict)>>2)];
      var $70=(($69)|(0))==0;
      if ($70) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $72=HEAP32[(($dialect)>>2)];
      $1=$72;
      label = 222; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $75=$2;
      var $76=(($75+152)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=$2;
      var $79=FUNCTION_TABLE[$77]($78, 0);
      var $80=$79;
      $self=$80;
      var $81=$self;
      var $82=(($81)|(0))==0;
      if ($82) { label = 23; break; } else { label = 34; break; }
    case 23: 
      label = 24; break;
    case 24: 
      var $85=HEAP32[(($dialect)>>2)];
      var $86=(($85)|(0))==0;
      if ($86) { label = 25; break; } else { label = 26; break; }
    case 25: 
      label = 32; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $90=HEAP32[(($dialect)>>2)];
      var $91=(($90)|0);
      var $92=HEAP32[(($91)>>2)];
      var $93=((($92)-(1))|0);
      HEAP32[(($91)>>2)]=$93;
      var $94=(($93)|(0))!=0;
      if ($94) { label = 28; break; } else { label = 29; break; }
    case 28: 
      label = 30; break;
    case 29: 
      var $97=HEAP32[(($dialect)>>2)];
      var $98=(($97+4)|0);
      var $99=HEAP32[(($98)>>2)];
      var $100=(($99+24)|0);
      var $101=HEAP32[(($100)>>2)];
      var $102=HEAP32[(($dialect)>>2)];
      FUNCTION_TABLE[$101]($102);
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      $1=0;
      label = 222; break;
    case 34: 
      var $108=$self;
      var $109=(($108+20)|0);
      HEAP32[(($109)>>2)]=0;
      label = 35; break;
    case 35: 
      var $111=HEAP32[(($delimiter)>>2)];
      var $112=(($111)|(0))==0;
      if ($112) { label = 36; break; } else { label = 37; break; }
    case 36: 
      label = 38; break;
    case 37: 
      var $115=HEAP32[(($delimiter)>>2)];
      var $116=(($115)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=((($117)+(1))|0);
      HEAP32[(($116)>>2)]=$118;
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      var $122=HEAP32[(($doublequote)>>2)];
      var $123=(($122)|(0))==0;
      if ($123) { label = 41; break; } else { label = 42; break; }
    case 41: 
      label = 43; break;
    case 42: 
      var $126=HEAP32[(($doublequote)>>2)];
      var $127=(($126)|0);
      var $128=HEAP32[(($127)>>2)];
      var $129=((($128)+(1))|0);
      HEAP32[(($127)>>2)]=$129;
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      var $133=HEAP32[(($escapechar)>>2)];
      var $134=(($133)|(0))==0;
      if ($134) { label = 46; break; } else { label = 47; break; }
    case 46: 
      label = 48; break;
    case 47: 
      var $137=HEAP32[(($escapechar)>>2)];
      var $138=(($137)|0);
      var $139=HEAP32[(($138)>>2)];
      var $140=((($139)+(1))|0);
      HEAP32[(($138)>>2)]=$140;
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      var $144=HEAP32[(($lineterminator)>>2)];
      var $145=(($144)|(0))==0;
      if ($145) { label = 51; break; } else { label = 52; break; }
    case 51: 
      label = 53; break;
    case 52: 
      var $148=HEAP32[(($lineterminator)>>2)];
      var $149=(($148)|0);
      var $150=HEAP32[(($149)>>2)];
      var $151=((($150)+(1))|0);
      HEAP32[(($149)>>2)]=$151;
      label = 53; break;
    case 53: 
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      var $155=HEAP32[(($quotechar)>>2)];
      var $156=(($155)|(0))==0;
      if ($156) { label = 56; break; } else { label = 57; break; }
    case 56: 
      label = 58; break;
    case 57: 
      var $159=HEAP32[(($quotechar)>>2)];
      var $160=(($159)|0);
      var $161=HEAP32[(($160)>>2)];
      var $162=((($161)+(1))|0);
      HEAP32[(($160)>>2)]=$162;
      label = 58; break;
    case 58: 
      label = 59; break;
    case 59: 
      label = 60; break;
    case 60: 
      var $166=HEAP32[(($quoting)>>2)];
      var $167=(($166)|(0))==0;
      if ($167) { label = 61; break; } else { label = 62; break; }
    case 61: 
      label = 63; break;
    case 62: 
      var $170=HEAP32[(($quoting)>>2)];
      var $171=(($170)|0);
      var $172=HEAP32[(($171)>>2)];
      var $173=((($172)+(1))|0);
      HEAP32[(($171)>>2)]=$173;
      label = 63; break;
    case 63: 
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      var $177=HEAP32[(($skipinitialspace)>>2)];
      var $178=(($177)|(0))==0;
      if ($178) { label = 66; break; } else { label = 67; break; }
    case 66: 
      label = 68; break;
    case 67: 
      var $181=HEAP32[(($skipinitialspace)>>2)];
      var $182=(($181)|0);
      var $183=HEAP32[(($182)>>2)];
      var $184=((($183)+(1))|0);
      HEAP32[(($182)>>2)]=$184;
      label = 68; break;
    case 68: 
      label = 69; break;
    case 69: 
      label = 70; break;
    case 70: 
      var $188=HEAP32[(($strict)>>2)];
      var $189=(($188)|(0))==0;
      if ($189) { label = 71; break; } else { label = 72; break; }
    case 71: 
      label = 73; break;
    case 72: 
      var $192=HEAP32[(($strict)>>2)];
      var $193=(($192)|0);
      var $194=HEAP32[(($193)>>2)];
      var $195=((($194)+(1))|0);
      HEAP32[(($193)>>2)]=$195;
      label = 73; break;
    case 73: 
      label = 74; break;
    case 74: 
      var $198=HEAP32[(($dialect)>>2)];
      var $199=(($198)|(0))!=0;
      if ($199) { label = 75; break; } else { label = 92; break; }
    case 75: 
      var $201=HEAP32[(($delimiter)>>2)];
      var $202=(($201)|(0))==0;
      if ($202) { label = 76; break; } else { label = 77; break; }
    case 76: 
      var $204=HEAP32[(($dialect)>>2)];
      var $205=_PyObject_GetAttrString($204, ((__str45)|0));
      HEAP32[(($delimiter)>>2)]=$205;
      label = 77; break;
    case 77: 
      var $207=HEAP32[(($doublequote)>>2)];
      var $208=(($207)|(0))==0;
      if ($208) { label = 78; break; } else { label = 79; break; }
    case 78: 
      var $210=HEAP32[(($dialect)>>2)];
      var $211=_PyObject_GetAttrString($210, ((__str46)|0));
      HEAP32[(($doublequote)>>2)]=$211;
      label = 79; break;
    case 79: 
      var $213=HEAP32[(($escapechar)>>2)];
      var $214=(($213)|(0))==0;
      if ($214) { label = 80; break; } else { label = 81; break; }
    case 80: 
      var $216=HEAP32[(($dialect)>>2)];
      var $217=_PyObject_GetAttrString($216, ((__str47)|0));
      HEAP32[(($escapechar)>>2)]=$217;
      label = 81; break;
    case 81: 
      var $219=HEAP32[(($lineterminator)>>2)];
      var $220=(($219)|(0))==0;
      if ($220) { label = 82; break; } else { label = 83; break; }
    case 82: 
      var $222=HEAP32[(($dialect)>>2)];
      var $223=_PyObject_GetAttrString($222, ((__str48)|0));
      HEAP32[(($lineterminator)>>2)]=$223;
      label = 83; break;
    case 83: 
      var $225=HEAP32[(($quotechar)>>2)];
      var $226=(($225)|(0))==0;
      if ($226) { label = 84; break; } else { label = 85; break; }
    case 84: 
      var $228=HEAP32[(($dialect)>>2)];
      var $229=_PyObject_GetAttrString($228, ((__str49)|0));
      HEAP32[(($quotechar)>>2)]=$229;
      label = 85; break;
    case 85: 
      var $231=HEAP32[(($quoting)>>2)];
      var $232=(($231)|(0))==0;
      if ($232) { label = 86; break; } else { label = 87; break; }
    case 86: 
      var $234=HEAP32[(($dialect)>>2)];
      var $235=_PyObject_GetAttrString($234, ((__str50)|0));
      HEAP32[(($quoting)>>2)]=$235;
      label = 87; break;
    case 87: 
      var $237=HEAP32[(($skipinitialspace)>>2)];
      var $238=(($237)|(0))==0;
      if ($238) { label = 88; break; } else { label = 89; break; }
    case 88: 
      var $240=HEAP32[(($dialect)>>2)];
      var $241=_PyObject_GetAttrString($240, ((__str51)|0));
      HEAP32[(($skipinitialspace)>>2)]=$241;
      label = 89; break;
    case 89: 
      var $243=HEAP32[(($strict)>>2)];
      var $244=(($243)|(0))==0;
      if ($244) { label = 90; break; } else { label = 91; break; }
    case 90: 
      var $246=HEAP32[(($dialect)>>2)];
      var $247=_PyObject_GetAttrString($246, ((__str52)|0));
      HEAP32[(($strict)>>2)]=$247;
      label = 91; break;
    case 91: 
      _PyErr_Clear();
      label = 92; break;
    case 92: 
      var $250=$self;
      var $251=(($250+12)|0);
      var $252=HEAP32[(($delimiter)>>2)];
      var $253=__set_char(((__str45)|0), $251, $252, 44);
      var $254=(($253)|(0))!=0;
      if ($254) { label = 93; break; } else { label = 94; break; }
    case 93: 
      label = 121; break;
    case 94: 
      var $257=$self;
      var $258=(($257+8)|0);
      var $259=HEAP32[(($doublequote)>>2)];
      var $260=__set_bool(((__str46)|0), $258, $259, 1);
      var $261=(($260)|(0))!=0;
      if ($261) { label = 95; break; } else { label = 96; break; }
    case 95: 
      label = 121; break;
    case 96: 
      var $264=$self;
      var $265=(($264+14)|0);
      var $266=HEAP32[(($escapechar)>>2)];
      var $267=__set_char(((__str47)|0), $265, $266, 0);
      var $268=(($267)|(0))!=0;
      if ($268) { label = 97; break; } else { label = 98; break; }
    case 97: 
      label = 121; break;
    case 98: 
      var $271=$self;
      var $272=(($271+20)|0);
      var $273=HEAP32[(($lineterminator)>>2)];
      var $274=__set_str(((__str48)|0), $272, $273, ((__str53)|0));
      var $275=(($274)|(0))!=0;
      if ($275) { label = 99; break; } else { label = 100; break; }
    case 99: 
      label = 121; break;
    case 100: 
      var $278=$self;
      var $279=(($278+13)|0);
      var $280=HEAP32[(($quotechar)>>2)];
      var $281=__set_char(((__str49)|0), $279, $280, 34);
      var $282=(($281)|(0))!=0;
      if ($282) { label = 101; break; } else { label = 102; break; }
    case 101: 
      label = 121; break;
    case 102: 
      var $285=$self;
      var $286=(($285+24)|0);
      var $287=HEAP32[(($quoting)>>2)];
      var $288=__set_int(((__str50)|0), $286, $287, 0);
      var $289=(($288)|(0))!=0;
      if ($289) { label = 103; break; } else { label = 104; break; }
    case 103: 
      label = 121; break;
    case 104: 
      var $292=$self;
      var $293=(($292+16)|0);
      var $294=HEAP32[(($skipinitialspace)>>2)];
      var $295=__set_bool(((__str51)|0), $293, $294, 0);
      var $296=(($295)|(0))!=0;
      if ($296) { label = 105; break; } else { label = 106; break; }
    case 105: 
      label = 121; break;
    case 106: 
      var $299=$self;
      var $300=(($299+28)|0);
      var $301=HEAP32[(($strict)>>2)];
      var $302=__set_bool(((__str52)|0), $300, $301, 0);
      var $303=(($302)|(0))!=0;
      if ($303) { label = 107; break; } else { label = 108; break; }
    case 107: 
      label = 121; break;
    case 108: 
      var $306=$self;
      var $307=(($306+24)|0);
      var $308=HEAP32[(($307)>>2)];
      var $309=_dialect_check_quoting($308);
      var $310=(($309)|(0))!=0;
      if ($310) { label = 109; break; } else { label = 110; break; }
    case 109: 
      label = 121; break;
    case 110: 
      var $313=$self;
      var $314=(($313+12)|0);
      var $315=HEAP8[($314)];
      var $316=(($315 << 24) >> 24);
      var $317=(($316)|(0))==0;
      if ($317) { label = 111; break; } else { label = 112; break; }
    case 111: 
      var $319=HEAP32[((_PyExc_TypeError)>>2)];
      _PyErr_SetString($319, ((__str54)|0));
      label = 121; break;
    case 112: 
      var $321=HEAP32[(($quotechar)>>2)];
      var $322=(($321)|(0))==((__Py_NoneStruct)|(0));
      if ($322) { label = 113; break; } else { label = 115; break; }
    case 113: 
      var $324=HEAP32[(($quoting)>>2)];
      var $325=(($324)|(0))==0;
      if ($325) { label = 114; break; } else { label = 115; break; }
    case 114: 
      var $327=$self;
      var $328=(($327+24)|0);
      HEAP32[(($328)>>2)]=3;
      label = 115; break;
    case 115: 
      var $330=$self;
      var $331=(($330+24)|0);
      var $332=HEAP32[(($331)>>2)];
      var $333=(($332)|(0))!=3;
      if ($333) { label = 116; break; } else { label = 118; break; }
    case 116: 
      var $335=$self;
      var $336=(($335+13)|0);
      var $337=HEAP8[($336)];
      var $338=(($337 << 24) >> 24);
      var $339=(($338)|(0))==0;
      if ($339) { label = 117; break; } else { label = 118; break; }
    case 117: 
      var $341=HEAP32[((_PyExc_TypeError)>>2)];
      _PyErr_SetString($341, ((__str55)|0));
      label = 121; break;
    case 118: 
      var $343=$self;
      var $344=(($343+20)|0);
      var $345=HEAP32[(($344)>>2)];
      var $346=(($345)|(0))==0;
      if ($346) { label = 119; break; } else { label = 120; break; }
    case 119: 
      var $348=HEAP32[((_PyExc_TypeError)>>2)];
      _PyErr_SetString($348, ((__str56)|0));
      label = 121; break;
    case 120: 
      var $350=$self;
      var $351=$350;
      $ret=$351;
      var $352=$self;
      var $353=$352;
      var $354=(($353)|0);
      var $355=HEAP32[(($354)>>2)];
      var $356=((($355)+(1))|0);
      HEAP32[(($354)>>2)]=$356;
      label = 121; break;
    case 121: 
      label = 122; break;
    case 122: 
      var $359=$self;
      var $360=(($359)|(0))==0;
      if ($360) { label = 123; break; } else { label = 124; break; }
    case 123: 
      label = 130; break;
    case 124: 
      label = 125; break;
    case 125: 
      var $364=$self;
      var $365=$364;
      var $366=(($365)|0);
      var $367=HEAP32[(($366)>>2)];
      var $368=((($367)-(1))|0);
      HEAP32[(($366)>>2)]=$368;
      var $369=(($368)|(0))!=0;
      if ($369) { label = 126; break; } else { label = 127; break; }
    case 126: 
      label = 128; break;
    case 127: 
      var $372=$self;
      var $373=$372;
      var $374=(($373+4)|0);
      var $375=HEAP32[(($374)>>2)];
      var $376=(($375+24)|0);
      var $377=HEAP32[(($376)>>2)];
      var $378=$self;
      var $379=$378;
      FUNCTION_TABLE[$377]($379);
      label = 128; break;
    case 128: 
      label = 129; break;
    case 129: 
      label = 130; break;
    case 130: 
      label = 131; break;
    case 131: 
      label = 132; break;
    case 132: 
      var $385=HEAP32[(($dialect)>>2)];
      var $386=(($385)|(0))==0;
      if ($386) { label = 133; break; } else { label = 134; break; }
    case 133: 
      label = 140; break;
    case 134: 
      label = 135; break;
    case 135: 
      var $390=HEAP32[(($dialect)>>2)];
      var $391=(($390)|0);
      var $392=HEAP32[(($391)>>2)];
      var $393=((($392)-(1))|0);
      HEAP32[(($391)>>2)]=$393;
      var $394=(($393)|(0))!=0;
      if ($394) { label = 136; break; } else { label = 137; break; }
    case 136: 
      label = 138; break;
    case 137: 
      var $397=HEAP32[(($dialect)>>2)];
      var $398=(($397+4)|0);
      var $399=HEAP32[(($398)>>2)];
      var $400=(($399+24)|0);
      var $401=HEAP32[(($400)>>2)];
      var $402=HEAP32[(($dialect)>>2)];
      FUNCTION_TABLE[$401]($402);
      label = 138; break;
    case 138: 
      label = 139; break;
    case 139: 
      label = 140; break;
    case 140: 
      label = 141; break;
    case 141: 
      label = 142; break;
    case 142: 
      var $408=HEAP32[(($delimiter)>>2)];
      var $409=(($408)|(0))==0;
      if ($409) { label = 143; break; } else { label = 144; break; }
    case 143: 
      label = 150; break;
    case 144: 
      label = 145; break;
    case 145: 
      var $413=HEAP32[(($delimiter)>>2)];
      var $414=(($413)|0);
      var $415=HEAP32[(($414)>>2)];
      var $416=((($415)-(1))|0);
      HEAP32[(($414)>>2)]=$416;
      var $417=(($416)|(0))!=0;
      if ($417) { label = 146; break; } else { label = 147; break; }
    case 146: 
      label = 148; break;
    case 147: 
      var $420=HEAP32[(($delimiter)>>2)];
      var $421=(($420+4)|0);
      var $422=HEAP32[(($421)>>2)];
      var $423=(($422+24)|0);
      var $424=HEAP32[(($423)>>2)];
      var $425=HEAP32[(($delimiter)>>2)];
      FUNCTION_TABLE[$424]($425);
      label = 148; break;
    case 148: 
      label = 149; break;
    case 149: 
      label = 150; break;
    case 150: 
      label = 151; break;
    case 151: 
      label = 152; break;
    case 152: 
      var $431=HEAP32[(($doublequote)>>2)];
      var $432=(($431)|(0))==0;
      if ($432) { label = 153; break; } else { label = 154; break; }
    case 153: 
      label = 160; break;
    case 154: 
      label = 155; break;
    case 155: 
      var $436=HEAP32[(($doublequote)>>2)];
      var $437=(($436)|0);
      var $438=HEAP32[(($437)>>2)];
      var $439=((($438)-(1))|0);
      HEAP32[(($437)>>2)]=$439;
      var $440=(($439)|(0))!=0;
      if ($440) { label = 156; break; } else { label = 157; break; }
    case 156: 
      label = 158; break;
    case 157: 
      var $443=HEAP32[(($doublequote)>>2)];
      var $444=(($443+4)|0);
      var $445=HEAP32[(($444)>>2)];
      var $446=(($445+24)|0);
      var $447=HEAP32[(($446)>>2)];
      var $448=HEAP32[(($doublequote)>>2)];
      FUNCTION_TABLE[$447]($448);
      label = 158; break;
    case 158: 
      label = 159; break;
    case 159: 
      label = 160; break;
    case 160: 
      label = 161; break;
    case 161: 
      label = 162; break;
    case 162: 
      var $454=HEAP32[(($escapechar)>>2)];
      var $455=(($454)|(0))==0;
      if ($455) { label = 163; break; } else { label = 164; break; }
    case 163: 
      label = 170; break;
    case 164: 
      label = 165; break;
    case 165: 
      var $459=HEAP32[(($escapechar)>>2)];
      var $460=(($459)|0);
      var $461=HEAP32[(($460)>>2)];
      var $462=((($461)-(1))|0);
      HEAP32[(($460)>>2)]=$462;
      var $463=(($462)|(0))!=0;
      if ($463) { label = 166; break; } else { label = 167; break; }
    case 166: 
      label = 168; break;
    case 167: 
      var $466=HEAP32[(($escapechar)>>2)];
      var $467=(($466+4)|0);
      var $468=HEAP32[(($467)>>2)];
      var $469=(($468+24)|0);
      var $470=HEAP32[(($469)>>2)];
      var $471=HEAP32[(($escapechar)>>2)];
      FUNCTION_TABLE[$470]($471);
      label = 168; break;
    case 168: 
      label = 169; break;
    case 169: 
      label = 170; break;
    case 170: 
      label = 171; break;
    case 171: 
      label = 172; break;
    case 172: 
      var $477=HEAP32[(($lineterminator)>>2)];
      var $478=(($477)|(0))==0;
      if ($478) { label = 173; break; } else { label = 174; break; }
    case 173: 
      label = 180; break;
    case 174: 
      label = 175; break;
    case 175: 
      var $482=HEAP32[(($lineterminator)>>2)];
      var $483=(($482)|0);
      var $484=HEAP32[(($483)>>2)];
      var $485=((($484)-(1))|0);
      HEAP32[(($483)>>2)]=$485;
      var $486=(($485)|(0))!=0;
      if ($486) { label = 176; break; } else { label = 177; break; }
    case 176: 
      label = 178; break;
    case 177: 
      var $489=HEAP32[(($lineterminator)>>2)];
      var $490=(($489+4)|0);
      var $491=HEAP32[(($490)>>2)];
      var $492=(($491+24)|0);
      var $493=HEAP32[(($492)>>2)];
      var $494=HEAP32[(($lineterminator)>>2)];
      FUNCTION_TABLE[$493]($494);
      label = 178; break;
    case 178: 
      label = 179; break;
    case 179: 
      label = 180; break;
    case 180: 
      label = 181; break;
    case 181: 
      label = 182; break;
    case 182: 
      var $500=HEAP32[(($quotechar)>>2)];
      var $501=(($500)|(0))==0;
      if ($501) { label = 183; break; } else { label = 184; break; }
    case 183: 
      label = 190; break;
    case 184: 
      label = 185; break;
    case 185: 
      var $505=HEAP32[(($quotechar)>>2)];
      var $506=(($505)|0);
      var $507=HEAP32[(($506)>>2)];
      var $508=((($507)-(1))|0);
      HEAP32[(($506)>>2)]=$508;
      var $509=(($508)|(0))!=0;
      if ($509) { label = 186; break; } else { label = 187; break; }
    case 186: 
      label = 188; break;
    case 187: 
      var $512=HEAP32[(($quotechar)>>2)];
      var $513=(($512+4)|0);
      var $514=HEAP32[(($513)>>2)];
      var $515=(($514+24)|0);
      var $516=HEAP32[(($515)>>2)];
      var $517=HEAP32[(($quotechar)>>2)];
      FUNCTION_TABLE[$516]($517);
      label = 188; break;
    case 188: 
      label = 189; break;
    case 189: 
      label = 190; break;
    case 190: 
      label = 191; break;
    case 191: 
      label = 192; break;
    case 192: 
      var $523=HEAP32[(($quoting)>>2)];
      var $524=(($523)|(0))==0;
      if ($524) { label = 193; break; } else { label = 194; break; }
    case 193: 
      label = 200; break;
    case 194: 
      label = 195; break;
    case 195: 
      var $528=HEAP32[(($quoting)>>2)];
      var $529=(($528)|0);
      var $530=HEAP32[(($529)>>2)];
      var $531=((($530)-(1))|0);
      HEAP32[(($529)>>2)]=$531;
      var $532=(($531)|(0))!=0;
      if ($532) { label = 196; break; } else { label = 197; break; }
    case 196: 
      label = 198; break;
    case 197: 
      var $535=HEAP32[(($quoting)>>2)];
      var $536=(($535+4)|0);
      var $537=HEAP32[(($536)>>2)];
      var $538=(($537+24)|0);
      var $539=HEAP32[(($538)>>2)];
      var $540=HEAP32[(($quoting)>>2)];
      FUNCTION_TABLE[$539]($540);
      label = 198; break;
    case 198: 
      label = 199; break;
    case 199: 
      label = 200; break;
    case 200: 
      label = 201; break;
    case 201: 
      label = 202; break;
    case 202: 
      var $546=HEAP32[(($skipinitialspace)>>2)];
      var $547=(($546)|(0))==0;
      if ($547) { label = 203; break; } else { label = 204; break; }
    case 203: 
      label = 210; break;
    case 204: 
      label = 205; break;
    case 205: 
      var $551=HEAP32[(($skipinitialspace)>>2)];
      var $552=(($551)|0);
      var $553=HEAP32[(($552)>>2)];
      var $554=((($553)-(1))|0);
      HEAP32[(($552)>>2)]=$554;
      var $555=(($554)|(0))!=0;
      if ($555) { label = 206; break; } else { label = 207; break; }
    case 206: 
      label = 208; break;
    case 207: 
      var $558=HEAP32[(($skipinitialspace)>>2)];
      var $559=(($558+4)|0);
      var $560=HEAP32[(($559)>>2)];
      var $561=(($560+24)|0);
      var $562=HEAP32[(($561)>>2)];
      var $563=HEAP32[(($skipinitialspace)>>2)];
      FUNCTION_TABLE[$562]($563);
      label = 208; break;
    case 208: 
      label = 209; break;
    case 209: 
      label = 210; break;
    case 210: 
      label = 211; break;
    case 211: 
      label = 212; break;
    case 212: 
      var $569=HEAP32[(($strict)>>2)];
      var $570=(($569)|(0))==0;
      if ($570) { label = 213; break; } else { label = 214; break; }
    case 213: 
      label = 220; break;
    case 214: 
      label = 215; break;
    case 215: 
      var $574=HEAP32[(($strict)>>2)];
      var $575=(($574)|0);
      var $576=HEAP32[(($575)>>2)];
      var $577=((($576)-(1))|0);
      HEAP32[(($575)>>2)]=$577;
      var $578=(($577)|(0))!=0;
      if ($578) { label = 216; break; } else { label = 217; break; }
    case 216: 
      label = 218; break;
    case 217: 
      var $581=HEAP32[(($strict)>>2)];
      var $582=(($581+4)|0);
      var $583=HEAP32[(($582)>>2)];
      var $584=(($583+24)|0);
      var $585=HEAP32[(($584)>>2)];
      var $586=HEAP32[(($strict)>>2)];
      FUNCTION_TABLE[$585]($586);
      label = 218; break;
    case 218: 
      label = 219; break;
    case 219: 
      label = 220; break;
    case 220: 
      label = 221; break;
    case 221: 
      var $591=$ret;
      $1=$591;
      label = 222; break;
    case 222: 
      var $593=$1;
      STACKTOP = __stackBase__;
      return $593;
    default: assert(0, "bad label: " + label);
  }
}
function _get_string($str) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$str;
      label = 2; break;
    case 2: 
      var $3=$1;
      var $4=(($3)|(0))==0;
      if ($4) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 5; break;
    case 4: 
      var $7=$1;
      var $8=(($7)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=((($9)+(1))|0);
      HEAP32[(($8)>>2)]=$10;
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $13=$1;
      return $13;
    default: assert(0, "bad label: " + label);
  }
}
function __set_char($name, $target, $src, $dflt) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $s;
      $2=$name;
      $3=$target;
      $4=$src;
      $5=$dflt;
      var $6=$4;
      var $7=(($6)|(0))==0;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $9=$5;
      var $10=$3;
      HEAP8[($10)]=$9;
      label = 14; break;
    case 3: 
      var $12=$4;
      var $13=(($12)|(0))==((__Py_NoneStruct)|(0));
      if ($13) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $15=$4;
      var $16=_PyString_Size($15);
      var $17=(($16)|(0))==0;
      if ($17) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $19=$3;
      HEAP8[($19)]=0;
      label = 13; break;
    case 6: 
      var $21=$4;
      var $22=(($21+4)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+84)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=$25 & 134217728;
      var $27=(($26)|(0))!=0;
      if ($27) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $29=$4;
      var $30=_PyString_Size($29);
      var $31=(($30)|(0))!=1;
      if ($31) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $33=HEAP32[((_PyExc_TypeError)>>2)];
      var $34=$2;
      var $35=_PyErr_Format($33, ((__str60)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$34,tempInt));
      $1=-1;
      label = 15; break;
    case 9: 
      var $37=$4;
      var $38=_PyString_AsString($37);
      $s=$38;
      var $39=$s;
      var $40=(($39)|(0))==0;
      if ($40) { label = 10; break; } else { label = 11; break; }
    case 10: 
      $1=-1;
      label = 15; break;
    case 11: 
      var $43=$s;
      var $44=(($43)|0);
      var $45=HEAP8[($44)];
      var $46=$3;
      HEAP8[($46)]=$45;
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      $1=0;
      label = 15; break;
    case 15: 
      var $51=$1;
      STACKTOP = __stackBase__;
      return $51;
    default: assert(0, "bad label: " + label);
  }
}
function __set_bool($name, $target, $src, $dflt) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $b;
      $2=$name;
      $3=$target;
      $4=$src;
      $5=$dflt;
      var $6=$4;
      var $7=(($6)|(0))==0;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $9=$5;
      var $10=$3;
      HEAP32[(($10)>>2)]=$9;
      label = 6; break;
    case 3: 
      var $12=$4;
      var $13=_PyObject_IsTrue($12);
      $b=$13;
      var $14=$b;
      var $15=(($14)|(0)) < 0;
      if ($15) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=-1;
      label = 7; break;
    case 5: 
      var $18=$b;
      var $19=$3;
      HEAP32[(($19)>>2)]=$18;
      label = 6; break;
    case 6: 
      $1=0;
      label = 7; break;
    case 7: 
      var $22=$1;
      return $22;
    default: assert(0, "bad label: " + label);
  }
}
function __set_str($name, $target, $src, $dflt) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      $2=$name;
      $3=$target;
      $4=$src;
      $5=$dflt;
      var $6=$4;
      var $7=(($6)|(0))==0;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $9=$5;
      var $10=_PyString_FromString($9);
      var $11=$3;
      HEAP32[(($11)>>2)]=$10;
      label = 21; break;
    case 3: 
      var $13=$4;
      var $14=(($13)|(0))==((__Py_NoneStruct)|(0));
      if ($14) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $16=$3;
      HEAP32[(($16)>>2)]=0;
      label = 20; break;
    case 5: 
      var $18=$4;
      var $19=(($18+4)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20)|(0))==((_PyBaseString_Type)|(0));
      if ($21) { label = 8; break; } else { label = 6; break; }
    case 6: 
      var $23=$4;
      var $24=(($23+4)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=_PyType_IsSubtype($25, _PyBaseString_Type);
      var $27=(($26)|(0))!=0;
      if ($27) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $29=HEAP32[((_PyExc_TypeError)>>2)];
      var $30=$2;
      var $31=_PyErr_Format($29, ((__str59)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$30,tempInt));
      $1=-1;
      label = 22; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $34=$3;
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35)|(0))==0;
      if ($36) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 17; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $40=$3;
      var $41=HEAP32[(($40)>>2)];
      var $42=(($41)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=((($43)-(1))|0);
      HEAP32[(($42)>>2)]=$44;
      var $45=(($44)|(0))!=0;
      if ($45) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 15; break;
    case 14: 
      var $48=$3;
      var $49=HEAP32[(($48)>>2)];
      var $50=(($49+4)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=(($51+24)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=$3;
      var $55=HEAP32[(($54)>>2)];
      FUNCTION_TABLE[$53]($55);
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $60=$4;
      var $61=(($60)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=((($62)+(1))|0);
      HEAP32[(($61)>>2)]=$63;
      var $64=$4;
      var $65=$3;
      HEAP32[(($65)>>2)]=$64;
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      $1=0;
      label = 22; break;
    case 22: 
      var $70=$1;
      STACKTOP = __stackBase__;
      return $70;
    default: assert(0, "bad label: " + label);
  }
}
function __set_int($name, $target, $src, $dflt) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      $2=$name;
      $3=$target;
      $4=$src;
      $5=$dflt;
      var $6=$4;
      var $7=(($6)|(0))==0;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $9=$5;
      var $10=$3;
      HEAP32[(($10)>>2)]=$9;
      label = 6; break;
    case 3: 
      var $12=$4;
      var $13=(($12+4)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14+84)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$16 & 8388608;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $20=HEAP32[((_PyExc_TypeError)>>2)];
      var $21=$2;
      var $22=_PyErr_Format($20, ((__str58)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$21,tempInt));
      $1=-1;
      label = 7; break;
    case 5: 
      var $24=$4;
      var $25=_PyInt_AsLong($24);
      var $26=$3;
      HEAP32[(($26)>>2)]=$25;
      label = 6; break;
    case 6: 
      $1=0;
      label = 7; break;
    case 7: 
      var $29=$1;
      STACKTOP = __stackBase__;
      return $29;
    default: assert(0, "bad label: " + label);
  }
}
function _dialect_check_quoting($quoting) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $qs;
      $2=$quoting;
      $qs=((_quote_styles)|0);
      $qs=((_quote_styles)|0);
      label = 2; break;
    case 2: 
      var $4=$qs;
      var $5=(($4+4)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0))!=0;
      if ($7) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $9=$qs;
      var $10=(($9)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=$2;
      var $13=(($11)|(0))==(($12)|(0));
      if ($13) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=0;
      label = 8; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $17=$qs;
      var $18=(($17+8)|0);
      $qs=$18;
      label = 2; break;
    case 7: 
      var $20=HEAP32[((_PyExc_TypeError)>>2)];
      var $21=_PyErr_Format($20, ((__str57)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=-1;
      label = 8; break;
    case 8: 
      var $23=$1;
      STACKTOP = __stackBase__;
      return $23;
    default: assert(0, "bad label: " + label);
  }
}
function _Dialect_get_escapechar($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+14)|0);
  var $4=HEAP8[($3)];
  var $5=_get_nullchar_as_None($4);
  return $5;
}
function _Dialect_get_lineterminator($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+20)|0);
  var $4=HEAP32[(($3)>>2)];
  var $5=_get_string($4);
  return $5;
}
function _Dialect_get_quotechar($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+13)|0);
  var $4=HEAP8[($3)];
  var $5=_get_nullchar_as_None($4);
  return $5;
}
function _Dialect_get_quoting($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+24)|0);
  var $4=HEAP32[(($3)>>2)];
  var $5=_PyInt_FromLong($4);
  return $5;
}
function _get_nullchar_as_None($c) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2=__stackBase__;
      HEAP8[($2)]=$c;
      var $3=HEAP8[($2)];
      var $4=(($3 << 24) >> 24);
      var $5=(($4)|(0))==0;
      if ($5) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $7=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $8=((($7)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$8;
      $1=__Py_NoneStruct;
      label = 4; break;
    case 3: 
      var $10=_PyString_FromStringAndSize($2, 1);
      $1=$10;
      label = 4; break;
    case 4: 
      var $12=$1;
      STACKTOP = __stackBase__;
      return $12;
    default: assert(0, "bad label: " + label);
  }
}
// EMSCRIPTEN_END_FUNCS
// EMSCRIPTEN_END_FUNCS
// Warning: printing of i64 values may be slightly rounded! No deep i64 math used, so precise i64 code not included
var i64Math = null;
// === Auto-generated postamble setup entry stuff ===
function run(args) {
  initRuntime();
}
Module['run'] = run;
// {{PRE_RUN_ADDITIONS}}
run();
// {{POST_RUN_ADDITIONS}}
  // {{MODULE_ADDITIONS}}
  return Module;
});
