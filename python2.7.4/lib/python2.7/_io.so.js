// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
// Capture the output of this into a variable, if you want
(function(FUNCTION_TABLE_OFFSET, globalScope) {
  var Module = {};
  var args = [];
  Module.arguments = [];
// === Auto-generated preamble library stuff ===
//========================================
// Runtime essentials
//========================================
function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.pop();
    var func = callback.func;
    if (typeof func === 'number') {
      func = FUNCTION_TABLE[func];
    }
    func(callback.arg === undefined ? null : callback.arg);
  }
}
var __ATINIT__ = []; // functions called during startup
function initRuntime() {
  callRuntimeCallbacks(__ATINIT__);
}
// === Body ===
var _writelines_doc;
var _write_doc156;
var _write_doc;
var _writable_doc170;
var _writable_doc;
var _truncate_doc162;
var _truncate_doc;
var _textiowrapper_tell_cookie;
var _textiowrapper_methods;
var _textiowrapper_members;
var _textiowrapper_init_kwlist;
var _textiowrapper_getset;
var _textiowrapper_doc;
var _textiobase_write_doc;
var _textiobase_readline_doc;
var _textiobase_read_doc;
var _textiobase_newlines_doc;
var _textiobase_methods;
var _textiobase_getset;
var _textiobase_errors_doc;
var _textiobase_encoding_doc;
var _textiobase_doc;
var _textiobase_detach_doc;
var _tell_doc160;
var _tell_doc;
var _stringio_write_doc;
var _stringio_writable_doc;
var _stringio_truncate_doc;
var _stringio_tell_doc;
var _stringio_seekable_doc;
var _stringio_seek_doc;
var _stringio_readline_doc;
var _stringio_readable_doc;
var _stringio_read_doc;
var _stringio_methods;
var _stringio_init_kwlist;
var _stringio_getvalue_doc;
var _stringio_getset;
var _stringio_doc;
var _stringio_close_doc;
var _seekable_doc166;
var _seekable_doc;
var _seek_doc158;
var _seek_doc;
var _readlines_doc;
var _readline_doc;
var _readinto_doc154;
var _readinto_doc;
var _readall_doc;
var _readable_doc168;
var _readable_doc;
var _read_doc151;
var _read_doc;
var _read1_doc;
var _rawiobase_readall_doc;
var _rawiobase_methods;
var _rawiobase_doc;
var _open_doc;
var _module_methods;
var _module_doc;
var _isatty_doc173;
var _isatty_doc;
var _iobase_writable_doc;
var _iobase_truncate_doc;
var _iobase_tell_doc;
var _iobase_seekable_doc;
var _iobase_seek_doc;
var _iobase_readlines_doc;
var _iobase_readline_doc;
var _iobase_readable_doc;
var _iobase_methods;
var _iobase_isatty_doc;
var _iobase_getset;
var _iobase_flush_doc;
var _iobase_fileno_doc;
var _iobase_doc;
var _iobase_close_doc;
var _io_open_kwlist;
var _incrementalnewlinedecoder_methods;
var _incrementalnewlinedecoder_init_kwlist;
var _incrementalnewlinedecoder_getset;
var _incrementalnewlinedecoder_doc;
var _incrementalnewlinedecoder_decode_kwlist;
var _getval_doc;
var _flush_doc;
var _fileno_doc;
var _fileio_methods;
var _fileio_init_kwlist;
var _fileio_getsetlist;
var _fileio_doc;
var _encodefuncs;
var _close_doc164;
var _close_doc;
var _bytesio_methods;
var _bytesio_init_kwlist;
var _bytesio_getsetlist;
var _bytesio_doc;
var _bufferedwriter_methods;
var _bufferedwriter_members;
var _bufferedwriter_init_kwlist;
var _bufferedwriter_getset;
var _bufferedwriter_doc;
var _bufferedrwpair_methods;
var _bufferedrwpair_getset;
var _bufferedrwpair_doc;
var _bufferedreader_methods;
var _bufferedreader_members;
var _bufferedreader_init_kwlist;
var _bufferedreader_getset;
var _bufferedreader_doc;
var _bufferedrandom_methods;
var _bufferedrandom_members;
var _bufferedrandom_init_kwlist;
var _bufferedrandom_getset;
var _bufferedrandom_doc;
var _bufferediobase_write_doc;
var _bufferediobase_read_doc;
var _bufferediobase_read1_doc;
var _bufferediobase_methods;
var _bufferediobase_doc;
var _bufferediobase_detach_doc;
var _blockingioerror_members;
var __str99;
var __str980;
var __str98;
var __str97;
var __str96;
var __str95;
var __str9432;
var __str94;
var __str9371;
var __str93;
var __str9261;
var __str9204;
var __str92;
var __str9134;
var __str91;
var __str90;
var __str9;
var __str89;
var __str88;
var __str879;
var __str87;
var __str86;
var __str85;
var __str8431;
var __str84;
var __str8370;
var __str83;
var __str8260;
var __str8203;
var __str82;
var __str8133;
var __str81;
var __str80;
var __str8;
var __str79;
var __str78;
var __str778;
var __str77;
var __str76;
var __str75;
var __str7430;
var __str74;
var __str7369;
var __str73496;
var __str73;
var __str7259;
var __str72495;
var __str7202;
var __str72;
var __str71494;
var __str71355;
var __str7132;
var __str71;
var __str70493;
var __str70354;
var __str70;
var __str7;
var __str69492;
var __str69353;
var __str69;
var __str68491;
var __str68352;
var __str68;
var __str677;
var __str67490;
var __str67351;
var __str67;
var __str66489;
var __str66350;
var __str66;
var __str65488;
var __str65349;
var __str65;
var __str64487;
var __str64348;
var __str6429;
var __str64;
var __str6368;
var __str63486;
var __str63347;
var __str63;
var __str6258;
var __str62485;
var __str62346;
var __str6201;
var __str62;
var __str61484;
var __str61345;
var __str6131;
var __str61;
var __str60483;
var __str60344;
var __str60;
var __str6;
var __str59482;
var __str59343;
var __str59;
var __str58481;
var __str58342;
var __str58;
var __str576;
var __str57480;
var __str57341;
var __str57;
var __str56479;
var __str56340;
var __str56;
var __str55478;
var __str55339;
var __str55;
var __str54477;
var __str54338;
var __str5426;
var __str54;
var __str5367;
var __str53476;
var __str53337;
var __str53;
var __str5257;
var __str52475;
var __str52415;
var __str52336;
var __str52188;
var __str52;
var __str5198;
var __str51474;
var __str51414;
var __str51335;
var __str5130;
var __str51187;
var __str51122;
var __str51;
var __str50473;
var __str50413;
var __str50334;
var __str50186;
var __str50121;
var __str50;
var __str5;
var __str49472;
var __str49412;
var __str49333;
var __str49185;
var __str49120;
var __str49;
var __str48471;
var __str48411;
var __str48332;
var __str48184;
var __str48119;
var __str48;
var __str475;
var __str47470;
var __str47410;
var __str47331;
var __str47183;
var __str47118;
var __str47;
var __str46469;
var __str46409;
var __str46330;
var __str46182;
var __str46117;
var __str46;
var __str45468;
var __str45408;
var __str45325;
var __str45181;
var __str45116;
var __str45;
var __str44467;
var __str44407;
var __str44322;
var __str44239;
var __str4423;
var __str44180;
var __str44115;
var __str44;
var __str4366;
var __str43466;
var __str43406;
var __str43319;
var __str43238;
var __str43179;
var __str43114;
var __str43;
var __str4256;
var __str42465;
var __str42405;
var __str42316;
var __str42237;
var __str42178;
var __str42113;
var __str42;
var __str4195;
var __str417;
var __str41464;
var __str41404;
var __str41315;
var __str4129;
var __str41236;
var __str41177;
var __str41112;
var __str41;
var __str40463;
var __str40403;
var __str40312;
var __str40235;
var __str40176;
var __str40111;
var __str40;
var __str4;
var __str39462;
var __str39402;
var __str39309;
var __str39234;
var __str39175;
var __str39110;
var __str39;
var __str38461;
var __str38401;
var __str38308;
var __str38233;
var __str38174;
var __str38109;
var __str38;
var __str37460;
var __str37400;
var __str374;
var __str37305;
var __str37232;
var __str37172;
var __str37108;
var __str37;
var __str36459;
var __str36399;
var __str36302;
var __str36231;
var __str36171;
var __str36107;
var __str360;
var __str36;
var __str35458;
var __str35398;
var __str35299;
var __str35230;
var __str35169;
var __str35106;
var __str35;
var __str34457;
var __str34397;
var __str34298;
var __str34229;
var __str3422;
var __str34167;
var __str34105;
var __str34;
var __str3365;
var __str33456;
var __str33396;
var __str33295;
var __str33228;
var __str33165;
var __str33104;
var __str33;
var __str3253;
var __str32455;
var __str32395;
var __str32294;
var __str32227;
var __str32163;
var __str32103;
var __str32;
var __str3194;
var __str31454;
var __str31394;
var __str31293;
var __str3128;
var __str31226;
var __str31161;
var __str31102;
var __str31;
var __str30453;
var __str30393;
var __str30290;
var __str30225;
var __str30159;
var __str30101;
var __str30;
var __str3;
var __str29452;
var __str29392;
var __str29289;
var __str29224;
var __str29157;
var __str29100;
var __str29;
var __str2899;
var __str28451;
var __str28391;
var __str28286;
var __str28223;
var __str28155;
var __str28;
var __str2798;
var __str27450;
var __str27390;
var __str273;
var __str27283;
var __str27222;
var __str27153;
var __str27;
var __str2697;
var __str26449;
var __str26389;
var __str26282;
var __str26221;
var __str26152;
var __str26;
var __str2596;
var __str25448;
var __str25388;
var __str25281;
var __str25220;
var __str25150;
var __str250;
var __str25;
var __str2495;
var __str24447;
var __str24387;
var __str24278;
var __str24219;
var __str2421;
var __str24149;
var __str24;
var __str2394;
var __str2364;
var __str23446;
var __str23386;
var __str23275;
var __str23218;
var __str23148;
var __str23;
var __str2293;
var __str2252;
var __str22445;
var __str22385;
var __str22274;
var __str22217;
var __str22147;
var __str22;
var __str2193;
var __str2192;
var __str21444;
var __str21384;
var __str21273;
var __str2127;
var __str21216;
var __str21146;
var __str21;
var __str2091;
var __str20443;
var __str20383;
var __str20272;
var __str20215;
var __str20145;
var __str20;
var __str2;
var __str1990;
var __str19442;
var __str19382;
var __str19271;
var __str19214;
var __str19144;
var __str191;
var __str19;
var __str1889;
var __str18441;
var __str18381;
var __str18270;
var __str18213;
var __str18143;
var __str18;
var __str1788;
var __str17440;
var __str17380;
var __str17269;
var __str17212;
var __str172;
var __str17142;
var __str17;
var __str1687;
var __str16439;
var __str16379;
var __str16268;
var __str16211;
var __str16141;
var __str16;
var __str1586;
var __str15438;
var __str15378;
var __str15267;
var __str15210;
var __str15140;
var __str15;
var __str1485;
var __str14437;
var __str14376;
var __str14266;
var __str14209;
var __str1420;
var __str14139;
var __str14;
var __str1384;
var __str1363;
var __str13436;
var __str13375;
var __str13265;
var __str13208;
var __str13138;
var __str13;
var __str1283;
var __str1251;
var __str12435;
var __str12374;
var __str123;
var __str12264;
var __str12207;
var __str12137;
var __str12;
var __str1192;
var __str1182;
var __str11434;
var __str11373;
var __str11263;
var __str1126;
var __str11206;
var __str11136;
var __str11;
var __str109;
var __str1081;
var __str108;
var __str107;
var __str106;
var __str105;
var __str10433;
var __str104;
var __str10372;
var __str103;
var __str10262;
var __str10205;
var __str102;
var __str10135;
var __str101;
var __str100;
var __str10;
var __str1;
var __str;
var ___func___write_str;
var ___func___write_bytes;
var ___func___textiowrapper_tell;
var ___func___textiowrapper_get_decoded_chars;
var ___func___textiowrapper_dealloc;
var ___func___stringio_setstate;
var ___func___stringio_new;
var ___func___stringio_dealloc;
var ___func___resize_buffer377;
var ___func___resize_buffer;
var ___func___iobase_readline;
var ___func___iobase_dealloc;
var ___func___get_line;
var ___func___fileio_new;
var ___func___fileio_init;
var ___func___fileio_dealloc;
var ___func___bytesio_setstate;
var ___func___bytesio_readinto;
var ___func___bytesio_read;
var ___func___bytesio_new;
var ___func___bytesio_dealloc;
var ___func___bufferedwriter_write;
var ___func___bufferedrwpair_dealloc;
var ___func___buffered_dealloc;
var ___func___blockingioerror_init;
var ___func____textiowrapper_readline;
var ___func____bufferedreader_read_generic;
var ___func____PyIncrementalNewlineDecoder_decode;
var ___func____PyIO_trap_eintr;
var ___func___PyNumber_AsOff_t;
var __PyIO_zero;
var __PyIO_unsupported_operation;
var __PyIO_trap_eintr_eintr_int;
var __PyIO_str_write;
var __PyIO_str_writable;
var __PyIO_str_truncate;
var __PyIO_str_tell;
var __PyIO_str_setstate;
var __PyIO_str_seekable;
var __PyIO_str_seek;
var __PyIO_str_reset;
var __PyIO_str_readline;
var __PyIO_str_readinto;
var __PyIO_str_readable;
var __PyIO_str_read1;
var __PyIO_str_read;
var __PyIO_str_nl;
var __PyIO_str_newlines;
var __PyIO_str_isatty;
var __PyIO_str_getstate;
var __PyIO_str_flush;
var __PyIO_str_fileno;
var __PyIO_str_encode;
var __PyIO_str_decode;
var __PyIO_str_closed;
var __PyIO_str_close;
var __PyIO_os_module;
var __PyIO_locale_module;
var __PyIO_empty_str;
var __PyIO_empty_bytes;
var __PyExc_BlockingIOError;
var _PyTextIOWrapper_Type;
var _PyTextIOBase_Type;
var _PyStringIO_Type;
var _PyRawIOBase_Type;
var _PyIncrementalNewlineDecoder_Type;
var _PyIOBase_Type;
var _PyFileIO_Type;
var _PyExc_BlockingIOError;
var _PyBytesIO_Type;
var _PyBufferedWriter_Type;
var _PyBufferedReader_Type;
var _PyBufferedRandom_Type;
var _PyBufferedRWPair_Type;
var _PyBufferedIOBase_Type;
_writelines_doc=allocate([119,114,105,116,101,108,105,110,101,115,40,115,101,113,117,101,110,99,101,95,111,102,95,115,116,114,105,110,103,115,41,32,45,62,32,78,111,110,101,46,32,32,87,114,105,116,101,32,115,116,114,105,110,103,115,32,116,111,32,116,104,101,32,102,105,108,101,46,10,10,78,111,116,101,32,116,104,97,116,32,110,101,119,108,105,110,101,115,32,97,114,101,32,110,111,116,32,97,100,100,101,100,46,32,32,84,104,101,32,115,101,113,117,101,110,99,101,32,99,97,110,32,98,101,32,97,110,121,32,105,116,101,114,97,98,108,101,10,111,98,106,101,99,116,32,112,114,111,100,117,99,105,110,103,32,115,116,114,105,110,103,115,46,32,84,104,105,115,32,105,115,32,101,113,117,105,118,97,108,101,110,116,32,116,111,32,99,97,108,108,105,110,103,32,119,114,105,116,101,40,41,32,102,111,114,10,101,97,99,104,32,115,116,114,105,110,103,46,0,0], "i8", ALLOC_NORMAL);
_write_doc156=allocate([119,114,105,116,101,40,98,58,32,98,121,116,101,115,41,32,45,62,32,105,110,116,46,32,32,87,114,105,116,101,32,98,121,116,101,115,32,98,32,116,111,32,102,105,108,101,44,32,114,101,116,117,114,110,32,110,117,109,98,101,114,32,119,114,105,116,116,101,110,46,10,10,79,110,108,121,32,109,97,107,101,115,32,111,110,101,32,115,121,115,116,101,109,32,99,97,108,108,44,32,115,111,32,110,111,116,32,97,108,108,32,111,102,32,116,104,101,32,100,97,116,97,32,109,97,121,32,98,101,32,119,114,105,116,116,101,110,46,10,84,104,101,32,110,117,109,98,101,114,32,111,102,32,98,121,116,101,115,32,97,99,116,117,97,108,108,121,32,119,114,105,116,116,101,110,32,105,115,32,114,101,116,117,114,110,101,100,46,0,0,0,0], "i8", ALLOC_NORMAL);
_write_doc=allocate([119,114,105,116,101,40,98,121,116,101,115,41,32,45,62,32,105,110,116,46,32,32,87,114,105,116,101,32,98,121,116,101,115,32,116,111,32,102,105,108,101,46,10,10,82,101,116,117,114,110,32,116,104,101,32,110,117,109,98,101,114,32,111,102,32,98,121,116,101,115,32,119,114,105,116,116,101,110,46,0], "i8", ALLOC_NORMAL);
_writable_doc170=allocate([119,114,105,116,97,98,108,101,40,41,32,45,62,32,98,111,111,108,46,32,32,84,114,117,101,32,105,102,32,102,105,108,101,32,119,97,115,32,111,112,101,110,101,100,32,105,110,32,97,32,119,114,105,116,101,32,109,111,100,101,46,0,0,0], "i8", ALLOC_NORMAL);
_writable_doc=allocate([119,114,105,116,97,98,108,101,40,41,32,45,62,32,98,111,111,108,46,32,82,101,116,117,114,110,115,32,84,114,117,101,32,105,102,32,116,104,101,32,73,79,32,111,98,106,101,99,116,32,99,97,110,32,98,101,32,119,114,105,116,116,101,110,46,0,0,0], "i8", ALLOC_NORMAL);
_truncate_doc162=allocate([116,114,117,110,99,97,116,101,40,91,115,105,122,101,58,32,105,110,116,93,41,32,45,62,32,78,111,110,101,46,32,32,84,114,117,110,99,97,116,101,32,116,104,101,32,102,105,108,101,32,116,111,32,97,116,32,109,111,115,116,32,115,105,122,101,32,98,121,116,101,115,46,10,10,83,105,122,101,32,100,101,102,97,117,108,116,115,32,116,111,32,116,104,101,32,99,117,114,114,101,110,116,32,102,105,108,101,32,112,111,115,105,116,105,111,110,44,32,97,115,32,114,101,116,117,114,110,101,100,32,98,121,32,116,101,108,108,40,41,46,84,104,101,32,99,117,114,114,101,110,116,32,102,105,108,101,32,112,111,115,105,116,105,111,110,32,105,115,32,99,104,97,110,103,101,100,32,116,111,32,116,104,101,32,118,97,108,117,101,32,111,102,32,115,105,122,101,46,0,0], "i8", ALLOC_NORMAL);
_truncate_doc=allocate([116,114,117,110,99,97,116,101,40,91,115,105,122,101,93,41,32,45,62,32,105,110,116,46,32,32,84,114,117,110,99,97,116,101,32,116,104,101,32,102,105,108,101,32,116,111,32,97,116,32,109,111,115,116,32,115,105,122,101,32,98,121,116,101,115,46,10,10,83,105,122,101,32,100,101,102,97,117,108,116,115,32,116,111,32,116,104,101,32,99,117,114,114,101,110,116,32,102,105,108,101,32,112,111,115,105,116,105,111,110,44,32,97,115,32,114,101,116,117,114,110,101,100,32,98,121,32,116,101,108,108,40,41,46,10,84,104,101,32,99,117,114,114,101,110,116,32,102,105,108,101,32,112,111,115,105,116,105,111,110,32,105,115,32,117,110,99,104,97,110,103,101,100,46,32,32,82,101,116,117,114,110,115,32,116,104,101,32,110,101,119,32,115,105,122,101,46,10,0,0], "i8", ALLOC_NORMAL);
_textiowrapper_tell_cookie=allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_textiowrapper_methods=allocate([0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_textiowrapper_members=allocate([0,0,0,0,6,0,0,0,24,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,20,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,48,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_textiowrapper_init_kwlist=allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_textiowrapper_getset=allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_textiowrapper_doc=allocate([67,104,97,114,97,99,116,101,114,32,97,110,100,32,108,105,110,101,32,98,97,115,101,100,32,108,97,121,101,114,32,111,118,101,114,32,97,32,66,117,102,102,101,114,101,100,73,79,66,97,115,101,32,111,98,106,101,99,116,44,32,98,117,102,102,101,114,46,10,10,101,110,99,111,100,105,110,103,32,103,105,118,101,115,32,116,104,101,32,110,97,109,101,32,111,102,32,116,104,101,32,101,110,99,111,100,105,110,103,32,116,104,97,116,32,116,104,101,32,115,116,114,101,97,109,32,119,105,108,108,32,98,101,10,100,101,99,111,100,101,100,32,111,114,32,101,110,99,111,100,101,100,32,119,105,116,104,46,32,73,116,32,100,101,102,97,117,108,116,115,32,116,111,32,108,111,99,97,108,101,46,103,101,116,112,114,101,102,101,114,114,101,100,101,110,99,111,100,105,110,103,46,10,10,101,114,114,111,114,115,32,100,101,116,101,114,109,105,110,101,115,32,116,104,101,32,115,116,114,105,99,116,110,101,115,115,32,111,102,32,101,110,99,111,100,105,110,103,32,97,110,100,32,100,101,99,111,100,105,110,103,32,40,115,101,101,32,116,104,101,10,99,111,100,101,99,115,46,114,101,103,105,115,116,101,114,41,32,97,110,100,32,100,101,102,97,117,108,116,115,32,116,111,32,34,115,116,114,105,99,116,34,46,10,10,110,101,119,108,105,110,101,32,99,111,110,116,114,111,108,115,32,104,111,119,32,108,105,110,101,32,101,110,100,105,110,103,115,32,97,114,101,32,104,97,110,100,108,101,100,46,32,73,116,32,99,97,110,32,98,101,32,78,111,110,101,44,32,39,39,44,10,39,92,110,39,44,32,39,92,114,39,44,32,97,110,100,32,39,92,114,92,110,39,46,32,32,73,116,32,119,111,114,107,115,32,97,115,32,102,111,108,108,111,119,115,58,10,10,42,32,79,110,32,105,110,112,117,116,44,32,105,102,32,110,101,119,108,105,110,101,32,105,115,32,78,111,110,101,44,32,117,110,105,118,101,114,115,97,108,32,110,101,119,108,105,110,101,115,32,109,111,100,101,32,105,115,10,32,32,101,110,97,98,108,101,100,46,32,76,105,110,101,115,32,105,110,32,116,104,101,32,105,110,112,117,116,32,99,97,110,32,101,110,100,32,105,110,32,39,92,110,39,44,32,39,92,114,39,44,32,111,114,32,39,92,114,92,110,39,44,32,97,110,100,10,32,32,116,104,101,115,101,32,97,114,101,32,116,114,97,110,115,108,97,116,101,100,32,105,110,116,111,32,39,92,110,39,32,98,101,102,111,114,101,32,98,101,105,110,103,32,114,101,116,117,114,110,101,100,32,116,111,32,116,104,101,10,32,32,99,97,108,108,101,114,46,32,73,102,32,105,116,32,105,115,32,39,39,44,32,117,110,105,118,101,114,115,97,108,32,110,101,119,108,105,110,101,32,109,111,100,101,32,105,115,32,101,110,97,98,108,101,100,44,32,98,117,116,32,108,105,110,101,10,32,32,101,110,100,105,110,103,115,32,97,114,101,32,114,101,116,117,114,110,101,100,32,116,111,32,116,104,101,32,99,97,108,108,101,114,32,117,110,116,114,97,110,115,108,97,116,101,100,46,32,73,102,32,105,116,32,104,97,115,32,97,110,121,32,111,102,10,32,32,116,104,101,32,111,116,104,101,114,32,108,101,103,97,108,32,118,97,108,117,101,115,44,32,105,110,112,117,116,32,108,105,110,101,115,32,97,114,101,32,111,110,108,121,32,116,101,114,109,105,110,97,116,101,100,32,98,121,32,116,104,101,32,103,105,118,101,110,10,32,32,115,116,114,105,110,103,44,32,97,110,100,32,116,104,101,32,108,105,110,101,32,101,110,100,105,110,103,32,105,115,32,114,101,116,117,114,110,101,100,32,116,111,32,116,104,101,32,99,97,108,108,101,114,32,117,110,116,114,97,110,115,108,97,116,101,100,46,10,10,42,32,79,110,32,111,117,116,112,117,116,44,32,105,102,32,110,101,119,108,105,110,101,32,105,115,32,78,111,110,101,44,32,97,110,121,32,39,92,110,39,32,99,104,97,114,97,99,116,101,114,115,32,119,114,105,116,116,101,110,32,97,114,101,10,32,32,116,114,97,110,115,108,97,116,101,100,32,116,111,32,116,104,101,32,115,121,115,116,101,109,32,100,101,102,97,117,108,116,32,108,105,110,101,32,115,101,112,97,114,97,116,111,114,44,32,111,115,46,108,105,110,101,115,101,112,46,32,73,102,10,32,32,110,101,119,108,105,110,101,32,105,115,32,39,39,44,32,110,111,32,116,114,97,110,115,108,97,116,105,111,110,32,116,97,107,101,115,32,112,108,97,99,101,46,32,73,102,32,110,101,119,108,105,110,101,32,105,115,32,97,110,121,32,111,102,32,116,104,101,10,32,32,111,116,104,101,114,32,108,101,103,97,108,32,118,97,108,117,101,115,44,32,97,110,121,32,39,92,110,39,32,99,104,97,114,97,99,116,101,114,115,32,119,114,105,116,116,101,110,32,97,114,101,32,116,114,97,110,115,108,97,116,101,100,32,116,111,10,32,32,116,104,101,32,103,105,118,101,110,32,115,116,114,105,110,103,46,10,10,73,102,32,108,105,110,101,95,98,117,102,102,101,114,105,110,103,32,105,115,32,84,114,117,101,44,32,97,32,99,97,108,108,32,116,111,32,102,108,117,115,104,32,105,115,32,105,109,112,108,105,101,100,32,119,104,101,110,32,97,32,99,97,108,108,32,116,111,10,119,114,105,116,101,32,99,111,110,116,97,105,110,115,32,97,32,110,101,119,108,105,110,101,32,99,104,97,114,97,99,116,101,114,46,0,0,0], "i8", ALLOC_NORMAL);
_textiobase_write_doc=allocate([87,114,105,116,101,32,115,116,114,105,110,103,32,116,111,32,115,116,114,101,97,109,46,10,82,101,116,117,114,110,115,32,116,104,101,32,110,117,109,98,101,114,32,111,102,32,99,104,97,114,97,99,116,101,114,115,32,119,114,105,116,116,101,110,32,40,119,104,105,99,104,32,105,115,32,97,108,119,97,121,115,32,101,113,117,97,108,32,116,111,10,116,104,101,32,108,101,110,103,116,104,32,111,102,32,116,104,101,32,115,116,114,105,110,103,41,46,10,0,0], "i8", ALLOC_NORMAL);
_textiobase_readline_doc=allocate([82,101,97,100,32,117,110,116,105,108,32,110,101,119,108,105,110,101,32,111,114,32,69,79,70,46,10,10,82,101,116,117,114,110,115,32,97,110,32,101,109,112,116,121,32,115,116,114,105,110,103,32,105,102,32,69,79,70,32,105,115,32,104,105,116,32,105,109,109,101,100,105,97,116,101,108,121,46,10,0], "i8", ALLOC_NORMAL);
_textiobase_read_doc=allocate([82,101,97,100,32,97,116,32,109,111,115,116,32,110,32,99,104,97,114,97,99,116,101,114,115,32,102,114,111,109,32,115,116,114,101,97,109,46,10,10,82,101,97,100,32,102,114,111,109,32,117,110,100,101,114,108,121,105,110,103,32,98,117,102,102,101,114,32,117,110,116,105,108,32,119,101,32,104,97,118,101,32,110,32,99,104,97,114,97,99,116,101,114,115,32,111,114,32,119,101,32,104,105,116,32,69,79,70,46,10,73,102,32,110,32,105,115,32,110,101,103,97,116,105,118,101,32,111,114,32,111,109,105,116,116,101,100,44,32,114,101,97,100,32,117,110,116,105,108,32,69,79,70,46,10,0], "i8", ALLOC_NORMAL);
_textiobase_newlines_doc=allocate([76,105,110,101,32,101,110,100,105,110,103,115,32,116,114,97,110,115,108,97,116,101,100,32,115,111,32,102,97,114,46,10,10,79,110,108,121,32,108,105,110,101,32,101,110,100,105,110,103,115,32,116,114,97,110,115,108,97,116,101,100,32,100,117,114,105,110,103,32,114,101,97,100,105,110,103,32,97,114,101,32,99,111,110,115,105,100,101,114,101,100,46,10,10,83,117,98,99,108,97,115,115,101,115,32,115,104,111,117,108,100,32,111,118,101,114,114,105,100,101,46,10,0,0], "i8", ALLOC_NORMAL);
_textiobase_methods=allocate([0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_textiobase_getset=allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_textiobase_errors_doc=allocate([84,104,101,32,101,114,114,111,114,32,115,101,116,116,105,110,103,32,111,102,32,116,104,101,32,100,101,99,111,100,101,114,32,111,114,32,101,110,99,111,100,101,114,46,10,10,83,117,98,99,108,97,115,115,101,115,32,115,104,111,117,108,100,32,111,118,101,114,114,105,100,101,46,10,0,0], "i8", ALLOC_NORMAL);
_textiobase_encoding_doc=allocate([69,110,99,111,100,105,110,103,32,111,102,32,116,104,101,32,116,101,120,116,32,115,116,114,101,97,109,46,10,10,83,117,98,99,108,97,115,115,101,115,32,115,104,111,117,108,100,32,111,118,101,114,114,105,100,101,46,10,0,0], "i8", ALLOC_NORMAL);
_textiobase_doc=allocate([66,97,115,101,32,99,108,97,115,115,32,102,111,114,32,116,101,120,116,32,73,47,79,46,10,10,84,104,105,115,32,99,108,97,115,115,32,112,114,111,118,105,100,101,115,32,97,32,99,104,97,114,97,99,116,101,114,32,97,110,100,32,108,105,110,101,32,98,97,115,101,100,32,105,110,116,101,114,102,97,99,101,32,116,111,32,115,116,114,101,97,109,10,73,47,79,46,32,84,104,101,114,101,32,105,115,32,110,111,32,114,101,97,100,105,110,116,111,32,109,101,116,104,111,100,32,98,101,99,97,117,115,101,32,80,121,116,104,111,110,39,115,32,99,104,97,114,97,99,116,101,114,32,115,116,114,105,110,103,115,10,97,114,101,32,105,109,109,117,116,97,98,108,101,46,32,84,104,101,114,101,32,105,115,32,110,111,32,112,117,98,108,105,99,32,99,111,110,115,116,114,117,99,116,111,114,46,10,0,0,0,0], "i8", ALLOC_NORMAL);
_textiobase_detach_doc=allocate([83,101,112,97,114,97,116,101,32,116,104,101,32,117,110,100,101,114,108,121,105,110,103,32,98,117,102,102,101,114,32,102,114,111,109,32,116,104,101,32,84,101,120,116,73,79,66,97,115,101,32,97,110,100,32,114,101,116,117,114,110,32,105,116,46,10,10,65,102,116,101,114,32,116,104,101,32,117,110,100,101,114,108,121,105,110,103,32,98,117,102,102,101,114,32,104,97,115,32,98,101,101,110,32,100,101,116,97,99,104,101,100,44,32,116,104,101,32,84,101,120,116,73,79,32,105,115,32,105,110,32,97,110,10,117,110,117,115,97,98,108,101,32,115,116,97,116,101,46,10,0,0], "i8", ALLOC_NORMAL);
_tell_doc160=allocate([116,101,108,108,40,41,32,45,62,32,105,110,116,46,32,32,67,117,114,114,101,110,116,32,102,105,108,101,32,112,111,115,105,116,105,111,110,0,0,0], "i8", ALLOC_NORMAL);
_tell_doc=allocate([116,101,108,108,40,41,32,45,62,32,99,117,114,114,101,110,116,32,102,105,108,101,32,112,111,115,105,116,105,111,110,44,32,97,110,32,105,110,116,101,103,101,114,10,0,0,0,0], "i8", ALLOC_NORMAL);
_stringio_write_doc=allocate([87,114,105,116,101,32,115,116,114,105,110,103,32,116,111,32,102,105,108,101,46,10,10,82,101,116,117,114,110,115,32,116,104,101,32,110,117,109,98,101,114,32,111,102,32,99,104,97,114,97,99,116,101,114,115,32,119,114,105,116,116,101,110,44,32,119,104,105,99,104,32,105,115,32,97,108,119,97,121,115,32,101,113,117,97,108,32,116,111,10,116,104,101,32,108,101,110,103,116,104,32,111,102,32,116,104,101,32,115,116,114,105,110,103,46,10,0,0,0,0], "i8", ALLOC_NORMAL);
_stringio_writable_doc=allocate([119,114,105,116,97,98,108,101,40,41,32,45,62,32,98,111,111,108,46,32,82,101,116,117,114,110,115,32,84,114,117,101,32,105,102,32,116,104,101,32,73,79,32,111,98,106,101,99,116,32,99,97,110,32,98,101,32,119,114,105,116,116,101,110,46,0,0,0], "i8", ALLOC_NORMAL);
_stringio_truncate_doc=allocate([84,114,117,110,99,97,116,101,32,115,105,122,101,32,116,111,32,112,111,115,46,10,10,84,104,101,32,112,111,115,32,97,114,103,117,109,101,110,116,32,100,101,102,97,117,108,116,115,32,116,111,32,116,104,101,32,99,117,114,114,101,110,116,32,102,105,108,101,32,112,111,115,105,116,105,111,110,44,32,97,115,10,114,101,116,117,114,110,101,100,32,98,121,32,116,101,108,108,40,41,46,32,32,84,104,101,32,99,117,114,114,101,110,116,32,102,105,108,101,32,112,111,115,105,116,105,111,110,32,105,115,32,117,110,99,104,97,110,103,101,100,46,10,82,101,116,117,114,110,115,32,116,104,101,32,110,101,119,32,97,98,115,111,108,117,116,101,32,112,111,115,105,116,105,111,110,46,10,0,0], "i8", ALLOC_NORMAL);
_stringio_tell_doc=allocate([84,101,108,108,32,116,104,101,32,99,117,114,114,101,110,116,32,102,105,108,101,32,112,111,115,105,116,105,111,110,46,0], "i8", ALLOC_NORMAL);
_stringio_seekable_doc=allocate([115,101,101,107,97,98,108,101,40,41,32,45,62,32,98,111,111,108,46,32,82,101,116,117,114,110,115,32,84,114,117,101,32,105,102,32,116,104,101,32,73,79,32,111,98,106,101,99,116,32,99,97,110,32,98,101,32,115,101,101,107,101,100,46,0,0,0,0], "i8", ALLOC_NORMAL);
_stringio_seek_doc=allocate([67,104,97,110,103,101,32,115,116,114,101,97,109,32,112,111,115,105,116,105,111,110,46,10,10,83,101,101,107,32,116,111,32,99,104,97,114,97,99,116,101,114,32,111,102,102,115,101,116,32,112,111,115,32,114,101,108,97,116,105,118,101,32,116,111,32,112,111,115,105,116,105,111,110,32,105,110,100,105,99,97,116,101,100,32,98,121,32,119,104,101,110,99,101,58,10,32,32,32,32,48,32,32,83,116,97,114,116,32,111,102,32,115,116,114,101,97,109,32,40,116,104,101,32,100,101,102,97,117,108,116,41,46,32,32,112,111,115,32,115,104,111,117,108,100,32,98,101,32,62,61,32,48,59,10,32,32,32,32,49,32,32,67,117,114,114,101,110,116,32,112,111,115,105,116,105,111,110,32,45,32,112,111,115,32,109,117,115,116,32,98,101,32,48,59,10,32,32,32,32,50,32,32,69,110,100,32,111,102,32,115,116,114,101,97,109,32,45,32,112,111,115,32,109,117,115,116,32,98,101,32,48,46,10,82,101,116,117,114,110,115,32,116,104,101,32,110,101,119,32,97,98,115,111,108,117,116,101,32,112,111,115,105,116,105,111,110,46,10,0,0,0], "i8", ALLOC_NORMAL);
_stringio_readline_doc=allocate([82,101,97,100,32,117,110,116,105,108,32,110,101,119,108,105,110,101,32,111,114,32,69,79,70,46,10,10,82,101,116,117,114,110,115,32,97,110,32,101,109,112,116,121,32,115,116,114,105,110,103,32,105,102,32,69,79,70,32,105,115,32,104,105,116,32,105,109,109,101,100,105,97,116,101,108,121,46,10,0], "i8", ALLOC_NORMAL);
_stringio_readable_doc=allocate([114,101,97,100,97,98,108,101,40,41,32,45,62,32,98,111,111,108,46,32,82,101,116,117,114,110,115,32,84,114,117,101,32,105,102,32,116,104,101,32,73,79,32,111,98,106,101,99,116,32,99,97,110,32,98,101,32,114,101,97,100,46,0,0], "i8", ALLOC_NORMAL);
_stringio_read_doc=allocate([82,101,97,100,32,97,116,32,109,111,115,116,32,110,32,99,104,97,114,97,99,116,101,114,115,44,32,114,101,116,117,114,110,101,100,32,97,115,32,97,32,115,116,114,105,110,103,46,10,10,73,102,32,116,104,101,32,97,114,103,117,109,101,110,116,32,105,115,32,110,101,103,97,116,105,118,101,32,111,114,32,111,109,105,116,116,101,100,44,32,114,101,97,100,32,117,110,116,105,108,32,69,79,70,10,105,115,32,114,101,97,99,104,101,100,46,32,82,101,116,117,114,110,32,97,110,32,101,109,112,116,121,32,115,116,114,105,110,103,32,97,116,32,69,79,70,46,10,0,0,0,0], "i8", ALLOC_NORMAL);
_stringio_methods=allocate([0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_stringio_init_kwlist=allocate([0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_stringio_getvalue_doc=allocate([82,101,116,114,105,101,118,101,32,116,104,101,32,101,110,116,105,114,101,32,99,111,110,116,101,110,116,115,32,111,102,32,116,104,101,32,111,98,106,101,99,116,46,0], "i8", ALLOC_NORMAL);
_stringio_getset=allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_stringio_doc=allocate([84,101,120,116,32,73,47,79,32,105,109,112,108,101,109,101,110,116,97,116,105,111,110,32,117,115,105,110,103,32,97,110,32,105,110,45,109,101,109,111,114,121,32,98,117,102,102,101,114,46,10,10,84,104,101,32,105,110,105,116,105,97,108,95,118,97,108,117,101,32,97,114,103,117,109,101,110,116,32,115,101,116,115,32,116,104,101,32,118,97,108,117,101,32,111,102,32,111,98,106,101,99,116,46,32,32,84,104,101,32,110,101,119,108,105,110,101,10,97,114,103,117,109,101,110,116,32,105,115,32,108,105,107,101,32,116,104,101,32,111,110,101,32,111,102,32,84,101,120,116,73,79,87,114,97,112,112,101,114,39,115,32,99,111,110,115,116,114,117,99,116,111,114,46,0,0], "i8", ALLOC_NORMAL);
_stringio_close_doc=allocate([67,108,111,115,101,32,116,104,101,32,73,79,32,111,98,106,101,99,116,46,32,65,116,116,101,109,112,116,105,110,103,32,97,110,121,32,102,117,114,116,104,101,114,32,111,112,101,114,97,116,105,111,110,32,97,102,116,101,114,32,116,104,101,10,111,98,106,101,99,116,32,105,115,32,99,108,111,115,101,100,32,119,105,108,108,32,114,97,105,115,101,32,97,32,86,97,108,117,101,69,114,114,111,114,46,10,10,84,104,105,115,32,109,101,116,104,111,100,32,104,97,115,32,110,111,32,101,102,102,101,99,116,32,105,102,32,116,104,101,32,102,105,108,101,32,105,115,32,97,108,114,101,97,100,121,32,99,108,111,115,101,100,46,10,0,0,0,0], "i8", ALLOC_NORMAL);
_seekable_doc166=allocate([115,101,101,107,97,98,108,101,40,41,32,45,62,32,98,111,111,108,46,32,32,84,114,117,101,32,105,102,32,102,105,108,101,32,115,117,112,112,111,114,116,115,32,114,97,110,100,111,109,45,97,99,99,101,115,115,46,0,0,0], "i8", ALLOC_NORMAL);
_seekable_doc=allocate([115,101,101,107,97,98,108,101,40,41,32,45,62,32,98,111,111,108,46,32,82,101,116,117,114,110,115,32,84,114,117,101,32,105,102,32,116,104,101,32,73,79,32,111,98,106,101,99,116,32,99,97,110,32,98,101,32,115,101,101,107,101,100,46,0,0,0,0], "i8", ALLOC_NORMAL);
_seek_doc158=allocate([115,101,101,107,40,111,102,102,115,101,116,58,32,105,110,116,91,44,32,119,104,101,110,99,101,58,32,105,110,116,93,41,32,45,62,32,78,111,110,101,46,32,32,77,111,118,101,32,116,111,32,110,101,119,32,102,105,108,101,32,112,111,115,105,116,105,111,110,46,10,10,65,114,103,117,109,101,110,116,32,111,102,102,115,101,116,32,105,115,32,97,32,98,121,116,101,32,99,111,117,110,116,46,32,32,79,112,116,105,111,110,97,108,32,97,114,103,117,109,101,110,116,32,119,104,101,110,99,101,32,100,101,102,97,117,108,116,115,32,116,111,10,48,32,40,111,102,102,115,101,116,32,102,114,111,109,32,115,116,97,114,116,32,111,102,32,102,105,108,101,44,32,111,102,102,115,101,116,32,115,104,111,117,108,100,32,98,101,32,62,61,32,48,41,59,32,111,116,104,101,114,32,118,97,108,117,101,115,32,97,114,101,32,49,10,40,109,111,118,101,32,114,101,108,97,116,105,118,101,32,116,111,32,99,117,114,114,101,110,116,32,112,111,115,105,116,105,111,110,44,32,112,111,115,105,116,105,118,101,32,111,114,32,110,101,103,97,116,105,118,101,41,44,32,97,110,100,32,50,32,40,109,111,118,101,10,114,101,108,97,116,105,118,101,32,116,111,32,101,110,100,32,111,102,32,102,105,108,101,44,32,117,115,117,97,108,108,121,32,110,101,103,97,116,105,118,101,44,32,97,108,116,104,111,117,103,104,32,109,97,110,121,32,112,108,97,116,102,111,114,109,115,32,97,108,108,111,119,10,115,101,101,107,105,110,103,32,98,101,121,111,110,100,32,116,104,101,32,101,110,100,32,111,102,32,97,32,102,105,108,101,41,46,10,78,111,116,101,32,116,104,97,116,32,110,111,116,32,97,108,108,32,102,105,108,101,32,111,98,106,101,99,116,115,32,97,114,101,32,115,101,101,107,97,98,108,101,46,0,0], "i8", ALLOC_NORMAL);
_seek_doc=allocate([115,101,101,107,40,112,111,115,44,32,119,104,101,110,99,101,61,48,41,32,45,62,32,105,110,116,46,32,32,67,104,97,110,103,101,32,115,116,114,101,97,109,32,112,111,115,105,116,105,111,110,46,10,10,83,101,101,107,32,116,111,32,98,121,116,101,32,111,102,102,115,101,116,32,112,111,115,32,114,101,108,97,116,105,118,101,32,116,111,32,112,111,115,105,116,105,111,110,32,105,110,100,105,99,97,116,101,100,32,98,121,32,119,104,101,110,99,101,58,10,32,32,32,32,32,48,32,32,83,116,97,114,116,32,111,102,32,115,116,114,101,97,109,32,40,116,104,101,32,100,101,102,97,117,108,116,41,46,32,32,112,111,115,32,115,104,111,117,108,100,32,98,101,32,62,61,32,48,59,10,32,32,32,32,32,49,32,32,67,117,114,114,101,110,116,32,112,111,115,105,116,105,111,110,32,45,32,112,111,115,32,109,97,121,32,98,101,32,110,101,103,97,116,105,118,101,59,10,32,32,32,32,32,50,32,32,69,110,100,32,111,102,32,115,116,114,101,97,109,32,45,32,112,111,115,32,117,115,117,97,108,108,121,32,110,101,103,97,116,105,118,101,46,10,82,101,116,117,114,110,115,32,116,104,101,32,110,101,119,32,97,98,115,111,108,117,116,101,32,112,111,115,105,116,105,111,110,46,0,0,0,0], "i8", ALLOC_NORMAL);
_readlines_doc=allocate([114,101,97,100,108,105,110,101,115,40,91,115,105,122,101,93,41,32,45,62,32,108,105,115,116,32,111,102,32,115,116,114,105,110,103,115,44,32,101,97,99,104,32,97,32,108,105,110,101,32,102,114,111,109,32,116,104,101,32,102,105,108,101,46,10,10,67,97,108,108,32,114,101,97,100,108,105,110,101,40,41,32,114,101,112,101,97,116,101,100,108,121,32,97,110,100,32,114,101,116,117,114,110,32,97,32,108,105,115,116,32,111,102,32,116,104,101,32,108,105,110,101,115,32,115,111,32,114,101,97,100,46,10,84,104,101,32,111,112,116,105,111,110,97,108,32,115,105,122,101,32,97,114,103,117,109,101,110,116,44,32,105,102,32,103,105,118,101,110,44,32,105,115,32,97,110,32,97,112,112,114,111,120,105,109,97,116,101,32,98,111,117,110,100,32,111,110,32,116,104,101,10,116,111,116,97,108,32,110,117,109,98,101,114,32,111,102,32,98,121,116,101,115,32,105,110,32,116,104,101,32,108,105,110,101,115,32,114,101,116,117,114,110,101,100,46,10,0], "i8", ALLOC_NORMAL);
_readline_doc=allocate([114,101,97,100,108,105,110,101,40,91,115,105,122,101,93,41,32,45,62,32,110,101,120,116,32,108,105,110,101,32,102,114,111,109,32,116,104,101,32,102,105,108,101,44,32,97,115,32,97,32,115,116,114,105,110,103,46,10,10,82,101,116,97,105,110,32,110,101,119,108,105,110,101,46,32,32,65,32,110,111,110,45,110,101,103,97,116,105,118,101,32,115,105,122,101,32,97,114,103,117,109,101,110,116,32,108,105,109,105,116,115,32,116,104,101,32,109,97,120,105,109,117,109,10,110,117,109,98,101,114,32,111,102,32,98,121,116,101,115,32,116,111,32,114,101,116,117,114,110,32,40,97,110,32,105,110,99,111,109,112,108,101,116,101,32,108,105,110,101,32,109,97,121,32,98,101,32,114,101,116,117,114,110,101,100,32,116,104,101,110,41,46,10,82,101,116,117,114,110,32,97,110,32,101,109,112,116,121,32,115,116,114,105,110,103,32,97,116,32,69,79,70,46,10,0,0,0,0], "i8", ALLOC_NORMAL);
_readinto_doc154=allocate([114,101,97,100,105,110,116,111,40,41,32,45,62,32,83,97,109,101,32,97,115,32,82,97,119,73,79,66,97,115,101,46,114,101,97,100,105,110,116,111,40,41,46,0], "i8", ALLOC_NORMAL);
_readinto_doc=allocate([114,101,97,100,105,110,116,111,40,98,121,116,101,97,114,114,97,121,41,32,45,62,32,105,110,116,46,32,32,82,101,97,100,32,117,112,32,116,111,32,108,101,110,40,98,41,32,98,121,116,101,115,32,105,110,116,111,32,98,46,10,10,82,101,116,117,114,110,115,32,110,117,109,98,101,114,32,111,102,32,98,121,116,101,115,32,114,101,97,100,32,40,48,32,102,111,114,32,69,79,70,41,44,32,111,114,32,78,111,110,101,32,105,102,32,116,104,101,32,111,98,106,101,99,116,10,105,115,32,115,101,116,32,110,111,116,32,116,111,32,98,108,111,99,107,32,97,115,32,104,97,115,32,110,111,32,100,97,116,97,32,116,111,32,114,101,97,100,46,0,0,0], "i8", ALLOC_NORMAL);
_readall_doc=allocate([114,101,97,100,97,108,108,40,41,32,45,62,32,98,121,116,101,115,46,32,32,114,101,97,100,32,97,108,108,32,100,97,116,97,32,102,114,111,109,32,116,104,101,32,102,105,108,101,44,32,114,101,116,117,114,110,101,100,32,97,115,32,98,121,116,101,115,46,10,10,73,110,32,110,111,110,45,98,108,111,99,107,105,110,103,32,109,111,100,101,44,32,114,101,116,117,114,110,115,32,97,115,32,109,117,99,104,32,97,115,32,105,115,32,105,109,109,101,100,105,97,116,101,108,121,32,97,118,97,105,108,97,98,108,101,44,10,111,114,32,78,111,110,101,32,105,102,32,110,111,32,100,97,116,97,32,105,115,32,97,118,97,105,108,97,98,108,101,46,32,32,79,110,32,101,110,100,45,111,102,45,102,105,108,101,44,32,114,101,116,117,114,110,115,32,39,39,46,0,0], "i8", ALLOC_NORMAL);
_readable_doc168=allocate([114,101,97,100,97,98,108,101,40,41,32,45,62,32,98,111,111,108,46,32,32,84,114,117,101,32,105,102,32,102,105,108,101,32,119,97,115,32,111,112,101,110,101,100,32,105,110,32,97,32,114,101,97,100,32,109,111,100,101,46,0,0,0,0], "i8", ALLOC_NORMAL);
_readable_doc=allocate([114,101,97,100,97,98,108,101,40,41,32,45,62,32,98,111,111,108,46,32,82,101,116,117,114,110,115,32,84,114,117,101,32,105,102,32,116,104,101,32,73,79,32,111,98,106,101,99,116,32,99,97,110,32,98,101,32,114,101,97,100,46,0,0], "i8", ALLOC_NORMAL);
_read_doc151=allocate([114,101,97,100,40,115,105,122,101,58,32,105,110,116,41,32,45,62,32,98,121,116,101,115,46,32,32,114,101,97,100,32,97,116,32,109,111,115,116,32,115,105,122,101,32,98,121,116,101,115,44,32,114,101,116,117,114,110,101,100,32,97,115,32,98,121,116,101,115,46,10,10,79,110,108,121,32,109,97,107,101,115,32,111,110,101,32,115,121,115,116,101,109,32,99,97,108,108,44,32,115,111,32,108,101,115,115,32,100,97,116,97,32,109,97,121,32,98,101,32,114,101,116,117,114,110,101,100,32,116,104,97,110,32,114,101,113,117,101,115,116,101,100,10,73,110,32,110,111,110,45,98,108,111,99,107,105,110,103,32,109,111,100,101,44,32,114,101,116,117,114,110,115,32,78,111,110,101,32,105,102,32,110,111,32,100,97,116,97,32,105,115,32,97,118,97,105,108,97,98,108,101,46,10,79,110,32,101,110,100,45,111,102,45,102,105,108,101,44,32,114,101,116,117,114,110,115,32,39,39,46,0], "i8", ALLOC_NORMAL);
_read_doc=allocate([114,101,97,100,40,91,115,105,122,101,93,41,32,45,62,32,114,101,97,100,32,97,116,32,109,111,115,116,32,115,105,122,101,32,98,121,116,101,115,44,32,114,101,116,117,114,110,101,100,32,97,115,32,97,32,115,116,114,105,110,103,46,10,10,73,102,32,116,104,101,32,115,105,122,101,32,97,114,103,117,109,101,110,116,32,105,115,32,110,101,103,97,116,105,118,101,44,32,114,101,97,100,32,117,110,116,105,108,32,69,79,70,32,105,115,32,114,101,97,99,104,101,100,46,10,82,101,116,117,114,110,32,97,110,32,101,109,112,116,121,32,115,116,114,105,110,103,32,97,116,32,69,79,70,46,0], "i8", ALLOC_NORMAL);
_read1_doc=allocate([114,101,97,100,49,40,115,105,122,101,41,32,45,62,32,114,101,97,100,32,97,116,32,109,111,115,116,32,115,105,122,101,32,98,121,116,101,115,44,32,114,101,116,117,114,110,101,100,32,97,115,32,97,32,115,116,114,105,110,103,46,10,10,73,102,32,116,104,101,32,115,105,122,101,32,97,114,103,117,109,101,110,116,32,105,115,32,110,101,103,97,116,105,118,101,32,111,114,32,111,109,105,116,116,101,100,44,32,114,101,97,100,32,117,110,116,105,108,32,69,79,70,32,105,115,32,114,101,97,99,104,101,100,46,10,82,101,116,117,114,110,32,97,110,32,101,109,112,116,121,32,115,116,114,105,110,103,32,97,116,32,69,79,70,46,0,0,0], "i8", ALLOC_NORMAL);
_rawiobase_readall_doc=allocate([82,101,97,100,32,117,110,116,105,108,32,69,79,70,44,32,117,115,105,110,103,32,109,117,108,116,105,112,108,101,32,114,101,97,100,40,41,32,99,97,108,108,46,0], "i8", ALLOC_NORMAL);
_rawiobase_methods=allocate([0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_rawiobase_doc=allocate([66,97,115,101,32,99,108,97,115,115,32,102,111,114,32,114,97,119,32,98,105,110,97,114,121,32,73,47,79,46,0,0], "i8", ALLOC_NORMAL);
_open_doc=allocate([79,112,101,110,32,102,105,108,101,32,97,110,100,32,114,101,116,117,114,110,32,97,32,115,116,114,101,97,109,46,32,32,82,97,105,115,101,32,73,79,69,114,114,111,114,32,117,112,111,110,32,102,97,105,108,117,114,101,46,10,10,102,105,108,101,32,105,115,32,101,105,116,104,101,114,32,97,32,116,101,120,116,32,111,114,32,98,121,116,101,32,115,116,114,105,110,103,32,103,105,118,105,110,103,32,116,104,101,32,110,97,109,101,32,40,97,110,100,32,116,104,101,32,112,97,116,104,10,105,102,32,116,104,101,32,102,105,108,101,32,105,115,110,39,116,32,105,110,32,116,104,101,32,99,117,114,114,101,110,116,32,119,111,114,107,105,110,103,32,100,105,114,101,99,116,111,114,121,41,32,111,102,32,116,104,101,32,102,105,108,101,32,116,111,10,98,101,32,111,112,101,110,101,100,32,111,114,32,97,110,32,105,110,116,101,103,101,114,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,111,102,32,116,104,101,32,102,105,108,101,32,116,111,32,98,101,10,119,114,97,112,112,101,100,46,32,40,73,102,32,97,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,115,32,103,105,118,101,110,44,32,105,116,32,105,115,32,99,108,111,115,101,100,32,119,104,101,110,32,116,104,101,10,114,101,116,117,114,110,101,100,32,73,47,79,32,111,98,106,101,99,116,32,105,115,32,99,108,111,115,101,100,44,32,117,110,108,101,115,115,32,99,108,111,115,101,102,100,32,105,115,32,115,101,116,32,116,111,32,70,97,108,115,101,46,41,10,10,109,111,100,101,32,105,115,32,97,110,32,111,112,116,105,111,110,97,108,32,115,116,114,105,110,103,32,116,104,97,116,32,115,112,101,99,105,102,105,101,115,32,116,104,101,32,109,111,100,101,32,105,110,32,119,104,105,99,104,32,116,104,101,32,102,105,108,101,10,105,115,32,111,112,101,110,101,100,46,32,73,116,32,100,101,102,97,117,108,116,115,32,116,111,32,39,114,39,32,119,104,105,99,104,32,109,101,97,110,115,32,111,112,101,110,32,102,111,114,32,114,101,97,100,105,110,103,32,105,110,32,116,101,120,116,10,109,111,100,101,46,32,32,79,116,104,101,114,32,99,111,109,109,111,110,32,118,97,108,117,101,115,32,97,114,101,32,39,119,39,32,102,111,114,32,119,114,105,116,105,110,103,32,40,116,114,117,110,99,97,116,105,110,103,32,116,104,101,32,102,105,108,101,32,105,102,10,105,116,32,97,108,114,101,97,100,121,32,101,120,105,115,116,115,41,44,32,97,110,100,32,39,97,39,32,102,111,114,32,97,112,112,101,110,100,105,110,103,32,40,119,104,105,99,104,32,111,110,32,115,111,109,101,32,85,110,105,120,32,115,121,115,116,101,109,115,44,10,109,101,97,110,115,32,116,104,97,116,32,97,108,108,32,119,114,105,116,101,115,32,97,112,112,101,110,100,32,116,111,32,116,104,101,32,101,110,100,32,111,102,32,116,104,101,32,102,105,108,101,32,114,101,103,97,114,100,108,101,115,115,32,111,102,32,116,104,101,10,99,117,114,114,101,110,116,32,115,101,101,107,32,112,111,115,105,116,105,111,110,41,46,32,73,110,32,116,101,120,116,32,109,111,100,101,44,32,105,102,32,101,110,99,111,100,105,110,103,32,105,115,32,110,111,116,32,115,112,101,99,105,102,105,101,100,32,116,104,101,10,101,110,99,111,100,105,110,103,32,117,115,101,100,32,105,115,32,112,108,97,116,102,111,114,109,32,100,101,112,101,110,100,101,110,116,46,32,40,70,111,114,32,114,101,97,100,105,110,103,32,97,110,100,32,119,114,105,116,105,110,103,32,114,97,119,10,98,121,116,101,115,32,117,115,101,32,98,105,110,97,114,121,32,109,111,100,101,32,97,110,100,32,108,101,97,118,101,32,101,110,99,111,100,105,110,103,32,117,110,115,112,101,99,105,102,105,101,100,46,41,32,84,104,101,32,97,118,97,105,108,97,98,108,101,10,109,111,100,101,115,32,97,114,101,58,10,10,61,61,61,61,61,61,61,61,61,32,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,10,67,104,97,114,97,99,116,101,114,32,77,101,97,110,105,110,103,10,45,45,45,45,45,45,45,45,45,32,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,10,39,114,39,32,32,32,32,32,32,32,111,112,101,110,32,102,111,114,32,114,101,97,100,105,110,103,32,40,100,101,102,97,117,108,116,41,10,39,119,39,32,32,32,32,32,32,32,111,112,101,110,32,102,111,114,32,119,114,105,116,105,110,103,44,32,116,114,117,110,99,97,116,105,110,103,32,116,104,101,32,102,105,108,101,32,102,105,114,115,116,10,39,97,39,32,32,32,32,32,32,32,111,112,101,110,32,102,111,114,32,119,114,105,116,105,110,103,44,32,97,112,112,101,110,100,105,110,103,32,116,111,32,116,104,101,32,101,110,100,32,111,102,32,116,104,101,32,102,105,108,101,32,105,102,32,105,116,32,101,120,105,115,116,115,10,39,98,39,32,32,32,32,32,32,32,98,105,110,97,114,121,32,109,111,100,101,10,39,116,39,32,32,32,32,32,32,32,116,101,120,116,32,109,111,100,101,32,40,100,101,102,97,117,108,116,41,10,39,43,39,32,32,32,32,32,32,32,111,112,101,110,32,97,32,100,105,115,107,32,102,105,108,101,32,102,111,114,32,117,112,100,97,116,105,110,103,32,40,114,101,97,100,105,110,103,32,97,110,100,32,119,114,105,116,105,110,103,41,10,39,85,39,32,32,32,32,32,32,32,117,110,105,118,101,114,115,97,108,32,110,101,119,108,105,110,101,32,109,111,100,101,32,40,102,111,114,32,98,97,99,107,119,97,114,100,115,32,99,111,109,112,97,116,105,98,105,108,105,116,121,59,32,117,110,110,101,101,100,101,100,10,32,32,32,32,32,32,32,32,32,32,102,111,114,32,110,101,119,32,99,111,100,101,41,10,61,61,61,61,61,61,61,61,61,32,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,10,10,84,104,101,32,100,101,102,97,117,108,116,32,109,111,100,101,32,105,115,32,39,114,116,39,32,40,111,112,101,110,32,102,111,114,32,114,101,97,100,105,110,103,32,116,101,120,116,41,46,32,70,111,114,32,98,105,110,97,114,121,32,114,97,110,100,111,109,10,97,99,99,101,115,115,44,32,116,104,101,32,109,111,100,101,32,39,119,43,98,39,32,111,112,101,110,115,32,97,110,100,32,116,114,117,110,99,97,116,101,115,32,116,104,101,32,102,105,108,101,32,116,111,32,48,32,98,121,116,101,115,44,32,119,104,105,108,101,10,39,114,43,98,39,32,111,112,101,110,115,32,116,104,101,32,102,105,108,101,32,119,105,116,104,111,117,116,32,116,114,117,110,99,97,116,105,111,110,46,10,10,80,121,116,104,111,110,32,100,105,115,116,105,110,103,117,105,115,104,101,115,32,98,101,116,119,101,101,110,32,102,105,108,101,115,32,111,112,101,110,101,100,32,105,110,32,98,105,110,97,114,121,32,97,110,100,32,116,101,120,116,32,109,111,100,101,115,44,10,101,118,101,110,32,119,104,101,110,32,116,104,101,32,117,110,100,101,114,108,121,105,110,103,32,111,112,101,114,97,116,105,110,103,32,115,121,115,116,101,109,32,100,111,101,115,110,39,116,46,32,70,105,108,101,115,32,111,112,101,110,101,100,32,105,110,10,98,105,110,97,114,121,32,109,111,100,101,32,40,97,112,112,101,110,100,105,110,103,32,39,98,39,32,116,111,32,116,104,101,32,109,111,100,101,32,97,114,103,117,109,101,110,116,41,32,114,101,116,117,114,110,32,99,111,110,116,101,110,116,115,32,97,115,10,98,121,116,101,115,32,111,98,106,101,99,116,115,32,119,105,116,104,111,117,116,32,97,110,121,32,100,101,99,111,100,105,110,103,46,32,73,110,32,116,101,120,116,32,109,111,100,101,32,40,116,104,101,32,100,101,102,97,117,108,116,44,32,111,114,32,119,104,101,110,10,39,116,39,32,105,115,32,97,112,112,101,110,100,101,100,32,116,111,32,116,104,101,32,109,111,100,101,32,97,114,103,117,109,101,110,116,41,44,32,116,104,101,32,99,111,110,116,101,110,116,115,32,111,102,32,116,104,101,32,102,105,108,101,32,97,114,101,10,114,101,116,117,114,110,101,100,32,97,115,32,115,116,114,105,110,103,115,44,32,116,104,101,32,98,121,116,101,115,32,104,97,118,105,110,103,32,98,101,101,110,32,102,105,114,115,116,32,100,101,99,111,100,101,100,32,117,115,105,110,103,32,97,10,112,108,97,116,102,111,114,109,45,100,101,112,101,110,100,101,110,116,32,101,110,99,111,100,105,110,103,32,111,114,32,117,115,105,110,103,32,116,104,101,32,115,112,101,99,105,102,105,101,100,32,101,110,99,111,100,105,110,103,32,105,102,32,103,105,118,101,110,46,10,10,98,117,102,102,101,114,105,110,103,32,105,115,32,97,110,32,111,112,116,105,111,110,97,108,32,105,110,116,101,103,101,114,32,117,115,101,100,32,116,111,32,115,101,116,32,116,104,101,32,98,117,102,102,101,114,105,110,103,32,112,111,108,105,99,121,46,10,80,97,115,115,32,48,32,116,111,32,115,119,105,116,99,104,32,98,117,102,102,101,114,105,110,103,32,111,102,102,32,40,111,110,108,121,32,97,108,108,111,119,101,100,32,105,110,32,98,105,110,97,114,121,32,109,111,100,101,41,44,32,49,32,116,111,32,115,101,108,101,99,116,10,108,105,110,101,32,98,117,102,102,101,114,105,110,103,32,40,111,110,108,121,32,117,115,97,98,108,101,32,105,110,32,116,101,120,116,32,109,111,100,101,41,44,32,97,110,100,32,97,110,32,105,110,116,101,103,101,114,32,62,32,49,32,116,111,32,105,110,100,105,99,97,116,101,10,116,104,101,32,115,105,122,101,32,111,102,32,97,32,102,105,120,101,100,45,115,105,122,101,32,99,104,117,110,107,32,98,117,102,102,101,114,46,32,32,87,104,101,110,32,110,111,32,98,117,102,102,101,114,105,110,103,32,97,114,103,117,109,101,110,116,32,105,115,10,103,105,118,101,110,44,32,116,104,101,32,100,101,102,97,117,108,116,32,98,117,102,102,101,114,105,110,103,32,112,111,108,105,99,121,32,119,111,114,107,115,32,97,115,32,102,111,108,108,111,119,115,58,10,10,42,32,66,105,110,97,114,121,32,102,105,108,101,115,32,97,114,101,32,98,117,102,102,101,114,101,100,32,105,110,32,102,105,120,101,100,45,115,105,122,101,32,99,104,117,110,107,115,59,32,116,104,101,32,115,105,122,101,32,111,102,32,116,104,101,32,98,117,102,102,101,114,10,32,32,105,115,32,99,104,111,115,101,110,32,117,115,105,110,103,32,97,32,104,101,117,114,105,115,116,105,99,32,116,114,121,105,110,103,32,116,111,32,100,101,116,101,114,109,105,110,101,32,116,104,101,32,117,110,100,101,114,108,121,105,110,103,32,100,101,118,105,99,101,39,115,10,32,32,34,98,108,111,99,107,32,115,105,122,101,34,32,97,110,100,32,102,97,108,108,105,110,103,32,98,97,99,107,32,111,110,32,96,105,111,46,68,69,70,65,85,76,84,95,66,85,70,70,69,82,95,83,73,90,69,96,46,10,32,32,79,110,32,109,97,110,121,32,115,121,115,116,101,109,115,44,32,116,104,101,32,98,117,102,102,101,114,32,119,105,108,108,32,116,121,112,105,99,97,108,108,121,32,98,101,32,52,48,57,54,32,111,114,32,56,49,57,50,32,98,121,116,101,115,32,108,111,110,103,46,10,10,42,32,34,73,110,116,101,114,97,99,116,105,118,101,34,32,116,101,120,116,32,102,105,108,101,115,32,40,102,105,108,101,115,32,102,111,114,32,119,104,105,99,104,32,105,115,97,116,116,121,40,41,32,114,101,116,117,114,110,115,32,84,114,117,101,41,10,32,32,117,115,101,32,108,105,110,101,32,98,117,102,102,101,114,105,110,103,46,32,32,79,116,104,101,114,32,116,101,120,116,32,102,105,108,101,115,32,117,115,101,32,116,104,101,32,112,111,108,105,99,121,32,100,101,115,99,114,105,98,101,100,32,97,98,111,118,101,10,32,32,102,111,114,32,98,105,110,97,114,121,32,102,105,108,101,115,46,10,10,101,110,99,111,100,105,110,103,32,105,115,32,116,104,101,32,110,97,109,101,32,111,102,32,116,104,101,32,101,110,99,111,100,105,110,103,32,117,115,101,100,32,116,111,32,100,101,99,111,100,101,32,111,114,32,101,110,99,111,100,101,32,116,104,101,10,102,105,108,101,46,32,84,104,105,115,32,115,104,111,117,108,100,32,111,110,108,121,32,98,101,32,117,115,101,100,32,105,110,32,116,101,120,116,32,109,111,100,101,46,32,84,104,101,32,100,101,102,97,117,108,116,32,101,110,99,111,100,105,110,103,32,105,115,10,112,108,97,116,102,111,114,109,32,100,101,112,101,110,100,101,110,116,44,32,98,117,116,32,97,110,121,32,101,110,99,111,100,105,110,103,32,115,117,112,112,111,114,116,101,100,32,98,121,32,80,121,116,104,111,110,32,99,97,110,32,98,101,10,112,97,115,115,101,100,46,32,32,83,101,101,32,116,104,101,32,99,111,100,101,99,115,32,109,111,100,117,108,101,32,102,111,114,32,116,104,101,32,108,105,115,116,32,111,102,32,115,117,112,112,111,114,116,101,100,32,101,110,99,111,100,105,110,103,115,46,10,10,101,114,114,111,114,115,32,105,115,32,97,110,32,111,112,116,105,111,110,97,108,32,115,116,114,105,110,103,32,116,104,97,116,32,115,112,101,99,105,102,105,101,115,32,104,111,119,32,101,110,99,111,100,105,110,103,32,101,114,114,111,114,115,32,97,114,101,32,116,111,10,98,101,32,104,97,110,100,108,101,100,45,45,45,116,104,105,115,32,97,114,103,117,109,101,110,116,32,115,104,111,117,108,100,32,110,111,116,32,98,101,32,117,115,101,100,32,105,110,32,98,105,110,97,114,121,32,109,111,100,101,46,32,80,97,115,115,10,39,115,116,114,105,99,116,39,32,116,111,32,114,97,105,115,101,32,97,32,86,97,108,117,101,69,114,114,111,114,32,101,120,99,101,112,116,105,111,110,32,105,102,32,116,104,101,114,101,32,105,115,32,97,110,32,101,110,99,111,100,105,110,103,32,101,114,114,111,114,10,40,116,104,101,32,100,101,102,97,117,108,116,32,111,102,32,78,111,110,101,32,104,97,115,32,116,104,101,32,115,97,109,101,32,101,102,102,101,99,116,41,44,32,111,114,32,112,97,115,115,32,39,105,103,110,111,114,101,39,32,116,111,32,105,103,110,111,114,101,10,101,114,114,111,114,115,46,32,40,78,111,116,101,32,116,104,97,116,32,105,103,110,111,114,105,110,103,32,101,110,99,111,100,105,110,103,32,101,114,114,111,114,115,32,99,97,110,32,108,101,97,100,32,116,111,32,100,97,116,97,32,108,111,115,115,46,41,10,83,101,101,32,116,104,101,32,100,111,99,117,109,101,110,116,97,116,105,111,110,32,102,111,114,32,99,111,100,101,99,115,46,114,101,103,105,115,116,101,114,32,102,111,114,32,97,32,108,105,115,116,32,111,102,32,116,104,101,32,112,101,114,109,105,116,116,101,100,10,101,110,99,111,100,105,110,103,32,101,114,114,111,114,32,115,116,114,105,110,103,115,46,10,10,110,101,119,108,105,110,101,32,99,111,110,116,114,111,108,115,32,104,111,119,32,117,110,105,118,101,114,115,97,108,32,110,101,119,108,105,110,101,115,32,119,111,114,107,115,32,40,105,116,32,111,110,108,121,32,97,112,112,108,105,101,115,32,116,111,32,116,101,120,116,10,109,111,100,101,41,46,32,73,116,32,99,97,110,32,98,101,32,78,111,110,101,44,32,39,39,44,32,39,92,110,39,44,32,39,92,114,39,44,32,97,110,100,32,39,92,114,92,110,39,46,32,32,73,116,32,119,111,114,107,115,32,97,115,10,102,111,108,108,111,119,115,58,10,10,42,32,79,110,32,105,110,112,117,116,44,32,105,102,32,110,101,119,108,105,110,101,32,105,115,32,78,111,110,101,44,32,117,110,105,118,101,114,115,97,108,32,110,101,119,108,105,110,101,115,32,109,111,100,101,32,105,115,10,32,32,101,110,97,98,108,101,100,46,32,76,105,110,101,115,32,105,110,32,116,104,101,32,105,110,112,117,116,32,99,97,110,32,101,110,100,32,105,110,32,39,92,110,39,44,32,39,92,114,39,44,32,111,114,32,39,92,114,92,110,39,44,32,97,110,100,10,32,32,116,104,101,115,101,32,97,114,101,32,116,114,97,110,115,108,97,116,101,100,32,105,110,116,111,32,39,92,110,39,32,98,101,102,111,114,101,32,98,101,105,110,103,32,114,101,116,117,114,110,101,100,32,116,111,32,116,104,101,10,32,32,99,97,108,108,101,114,46,32,73,102,32,105,116,32,105,115,32,39,39,44,32,117,110,105,118,101,114,115,97,108,32,110,101,119,108,105,110,101,32,109,111,100,101,32,105,115,32,101,110,97,98,108,101,100,44,32,98,117,116,32,108,105,110,101,10,32,32,101,110,100,105,110,103,115,32,97,114,101,32,114,101,116,117,114,110,101,100,32,116,111,32,116,104,101,32,99,97,108,108,101,114,32,117,110,116,114,97,110,115,108,97,116,101,100,46,32,73,102,32,105,116,32,104,97,115,32,97,110,121,32,111,102,10,32,32,116,104,101,32,111,116,104,101,114,32,108,101,103,97,108,32,118,97,108,117,101,115,44,32,105,110,112,117,116,32,108,105,110,101,115,32,97,114,101,32,111,110,108,121,32,116,101,114,109,105,110,97,116,101,100,32,98,121,32,116,104,101,32,103,105,118,101,110,10,32,32,115,116,114,105,110,103,44,32,97,110,100,32,116,104,101,32,108,105,110,101,32,101,110,100,105,110,103,32,105,115,32,114,101,116,117,114,110,101,100,32,116,111,32,116,104,101,32,99,97,108,108,101,114,32,117,110,116,114,97,110,115,108,97,116,101,100,46,10,10,42,32,79,110,32,111,117,116,112,117,116,44,32,105,102,32,110,101,119,108,105,110,101,32,105,115,32,78,111,110,101,44,32,97,110,121,32,39,92,110,39,32,99,104,97,114,97,99,116,101,114,115,32,119,114,105,116,116,101,110,32,97,114,101,10,32,32,116,114,97,110,115,108,97,116,101,100,32,116,111,32,116,104,101,32,115,121,115,116,101,109,32,100,101,102,97,117,108,116,32,108,105,110,101,32,115,101,112,97,114,97,116,111,114,44,32,111,115,46,108,105,110,101,115,101,112,46,32,73,102,10,32,32,110,101,119,108,105,110,101,32,105,115,32,39,39,44,32,110,111,32,116,114,97,110,115,108,97,116,105,111,110,32,116,97,107,101,115,32,112,108,97,99,101,46,32,73,102,32,110,101,119,108,105,110,101,32,105,115,32,97,110,121,32,111,102,32,116,104,101,10,32,32,111,116,104,101,114,32,108,101,103,97,108,32,118,97,108,117,101,115,44,32,97,110,121,32,39,92,110,39,32,99,104,97,114,97,99,116,101,114,115,32,119,114,105,116,116,101,110,32,97,114,101,32,116,114,97,110,115,108,97,116,101,100,32,116,111,10,32,32,116,104,101,32,103,105,118,101,110,32,115,116,114,105,110,103,46,10,10,73,102,32,99,108,111,115,101,102,100,32,105,115,32,70,97,108,115,101,44,32,116,104,101,32,117,110,100,101,114,108,121,105,110,103,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,119,105,108,108,32,98,101,32,107,101,112,116,32,111,112,101,110,10,119,104,101,110,32,116,104,101,32,102,105,108,101,32,105,115,32,99,108,111,115,101,100,46,32,84,104,105,115,32,100,111,101,115,32,110,111,116,32,119,111,114,107,32,119,104,101,110,32,97,32,102,105,108,101,32,110,97,109,101,32,105,115,32,103,105,118,101,110,10,97,110,100,32,109,117,115,116,32,98,101,32,84,114,117,101,32,105,110,32,116,104,97,116,32,99,97,115,101,46,10,10,111,112,101,110,40,41,32,114,101,116,117,114,110,115,32,97,32,102,105,108,101,32,111,98,106,101,99,116,32,119,104,111,115,101,32,116,121,112,101,32,100,101,112,101,110,100,115,32,111,110,32,116,104,101,32,109,111,100,101,44,32,97,110,100,10,116,104,114,111,117,103,104,32,119,104,105,99,104,32,116,104,101,32,115,116,97,110,100,97,114,100,32,102,105,108,101,32,111,112,101,114,97,116,105,111,110,115,32,115,117,99,104,32,97,115,32,114,101,97,100,105,110,103,32,97,110,100,32,119,114,105,116,105,110,103,10,97,114,101,32,112,101,114,102,111,114,109,101,100,46,32,87,104,101,110,32,111,112,101,110,40,41,32,105,115,32,117,115,101,100,32,116,111,32,111,112,101,110,32,97,32,102,105,108,101,32,105,110,32,97,32,116,101,120,116,32,109,111,100,101,32,40,39,119,39,44,10,39,114,39,44,32,39,119,116,39,44,32,39,114,116,39,44,32,101,116,99,46,41,44,32,105,116,32,114,101,116,117,114,110,115,32,97,32,84,101,120,116,73,79,87,114,97,112,112,101,114,46,32,87,104,101,110,32,117,115,101,100,32,116,111,32,111,112,101,110,10,97,32,102,105,108,101,32,105,110,32,97,32,98,105,110,97,114,121,32,109,111,100,101,44,32,116,104,101,32,114,101,116,117,114,110,101,100,32,99,108,97,115,115,32,118,97,114,105,101,115,58,32,105,110,32,114,101,97,100,32,98,105,110,97,114,121,10,109,111,100,101,44,32,105,116,32,114,101,116,117,114,110,115,32,97,32,66,117,102,102,101,114,101,100,82,101,97,100,101,114,59,32,105,110,32,119,114,105,116,101,32,98,105,110,97,114,121,32,97,110,100,32,97,112,112,101,110,100,32,98,105,110,97,114,121,10,109,111,100,101,115,44,32,105,116,32,114,101,116,117,114,110,115,32,97,32,66,117,102,102,101,114,101,100,87,114,105,116,101,114,44,32,97,110,100,32,105,110,32,114,101,97,100,47,119,114,105,116,101,32,109,111,100,101,44,32,105,116,32,114,101,116,117,114,110,115,10,97,32,66,117,102,102,101,114,101,100,82,97,110,100,111,109,46,10,10,73,116,32,105,115,32,97,108,115,111,32,112,111,115,115,105,98,108,101,32,116,111,32,117,115,101,32,97,32,115,116,114,105,110,103,32,111,114,32,98,121,116,101,97,114,114,97,121,32,97,115,32,97,32,102,105,108,101,32,102,111,114,32,98,111,116,104,10,114,101,97,100,105,110,103,32,97,110,100,32,119,114,105,116,105,110,103,46,32,70,111,114,32,115,116,114,105,110,103,115,32,83,116,114,105,110,103,73,79,32,99,97,110,32,98,101,32,117,115,101,100,32,108,105,107,101,32,97,32,102,105,108,101,10,111,112,101,110,101,100,32,105,110,32,97,32,116,101,120,116,32,109,111,100,101,44,32,97,110,100,32,102,111,114,32,98,121,116,101,115,32,97,32,66,121,116,101,115,73,79,32,99,97,110,32,98,101,32,117,115,101,100,32,108,105,107,101,32,97,32,102,105,108,101,10,111,112,101,110,101,100,32,105,110,32,97,32,98,105,110,97,114,121,32,109,111,100,101,46,10,0,0], "i8", ALLOC_NORMAL);
_module_methods=allocate([0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_module_doc=allocate([84,104,101,32,105,111,32,109,111,100,117,108,101,32,112,114,111,118,105,100,101,115,32,116,104,101,32,80,121,116,104,111,110,32,105,110,116,101,114,102,97,99,101,115,32,116,111,32,115,116,114,101,97,109,32,104,97,110,100,108,105,110,103,46,32,84,104,101,10,98,117,105,108,116,105,110,32,111,112,101,110,32,102,117,110,99,116,105,111,110,32,105,115,32,100,101,102,105,110,101,100,32,105,110,32,116,104,105,115,32,109,111,100,117,108,101,46,10,10,65,116,32,116,104,101,32,116,111,112,32,111,102,32,116,104,101,32,73,47,79,32,104,105,101,114,97,114,99,104,121,32,105,115,32,116,104,101,32,97,98,115,116,114,97,99,116,32,98,97,115,101,32,99,108,97,115,115,32,73,79,66,97,115,101,46,32,73,116,10,100,101,102,105,110,101,115,32,116,104,101,32,98,97,115,105,99,32,105,110,116,101,114,102,97,99,101,32,116,111,32,97,32,115,116,114,101,97,109,46,32,78,111,116,101,44,32,104,111,119,101,118,101,114,44,32,116,104,97,116,32,116,104,101,114,101,32,105,115,32,110,111,10,115,101,112,97,114,97,116,105,111,110,32,98,101,116,119,101,101,110,32,114,101,97,100,105,110,103,32,97,110,100,32,119,114,105,116,105,110,103,32,116,111,32,115,116,114,101,97,109,115,59,32,105,109,112,108,101,109,101,110,116,97,116,105,111,110,115,32,97,114,101,10,97,108,108,111,119,101,100,32,116,111,32,114,97,105,115,101,32,97,110,32,73,79,69,114,114,111,114,32,105,102,32,116,104,101,121,32,100,111,32,110,111,116,32,115,117,112,112,111,114,116,32,97,32,103,105,118,101,110,32,111,112,101,114,97,116,105,111,110,46,10,10,69,120,116,101,110,100,105,110,103,32,73,79,66,97,115,101,32,105,115,32,82,97,119,73,79,66,97,115,101,32,119,104,105,99,104,32,100,101,97,108,115,32,115,105,109,112,108,121,32,119,105,116,104,32,116,104,101,32,114,101,97,100,105,110,103,32,97,110,100,10,119,114,105,116,105,110,103,32,111,102,32,114,97,119,32,98,121,116,101,115,32,116,111,32,97,32,115,116,114,101,97,109,46,32,70,105,108,101,73,79,32,115,117,98,99,108,97,115,115,101,115,32,82,97,119,73,79,66,97,115,101,32,116,111,32,112,114,111,118,105,100,101,10,97,110,32,105,110,116,101,114,102,97,99,101,32,116,111,32,79,83,32,102,105,108,101,115,46,10,10,66,117,102,102,101,114,101,100,73,79,66,97,115,101,32,100,101,97,108,115,32,119,105,116,104,32,98,117,102,102,101,114,105,110,103,32,111,110,32,97,32,114,97,119,32,98,121,116,101,32,115,116,114,101,97,109,32,40,82,97,119,73,79,66,97,115,101,41,46,32,73,116,115,10,115,117,98,99,108,97,115,115,101,115,44,32,66,117,102,102,101,114,101,100,87,114,105,116,101,114,44,32,66,117,102,102,101,114,101,100,82,101,97,100,101,114,44,32,97,110,100,32,66,117,102,102,101,114,101,100,82,87,80,97,105,114,32,98,117,102,102,101,114,10,115,116,114,101,97,109,115,32,116,104,97,116,32,97,114,101,32,114,101,97,100,97,98,108,101,44,32,119,114,105,116,97,98,108,101,44,32,97,110,100,32,98,111,116,104,32,114,101,115,112,101,99,116,105,118,101,108,121,46,10,66,117,102,102,101,114,101,100,82,97,110,100,111,109,32,112,114,111,118,105,100,101,115,32,97,32,98,117,102,102,101,114,101,100,32,105,110,116,101,114,102,97,99,101,32,116,111,32,114,97,110,100,111,109,32,97,99,99,101,115,115,10,115,116,114,101,97,109,115,46,32,66,121,116,101,115,73,79,32,105,115,32,97,32,115,105,109,112,108,101,32,115,116,114,101,97,109,32,111,102,32,105,110,45,109,101,109,111,114,121,32,98,121,116,101,115,46,10,10,65,110,111,116,104,101,114,32,73,79,66,97,115,101,32,115,117,98,99,108,97,115,115,44,32,84,101,120,116,73,79,66,97,115,101,44,32,100,101,97,108,115,32,119,105,116,104,32,116,104,101,32,101,110,99,111,100,105,110,103,32,97,110,100,32,100,101,99,111,100,105,110,103,10,111,102,32,115,116,114,101,97,109,115,32,105,110,116,111,32,116,101,120,116,46,32,84,101,120,116,73,79,87,114,97,112,112,101,114,44,32,119,104,105,99,104,32,101,120,116,101,110,100,115,32,105,116,44,32,105,115,32,97,32,98,117,102,102,101,114,101,100,32,116,101,120,116,10,105,110,116,101,114,102,97,99,101,32,116,111,32,97,32,98,117,102,102,101,114,101,100,32,114,97,119,32,115,116,114,101,97,109,32,40,96,66,117,102,102,101,114,101,100,73,79,66,97,115,101,96,41,46,32,70,105,110,97,108,108,121,44,32,83,116,114,105,110,103,73,79,10,105,115,32,97,32,105,110,45,109,101,109,111,114,121,32,115,116,114,101,97,109,32,102,111,114,32,116,101,120,116,46,10,10,65,114,103,117,109,101,110,116,32,110,97,109,101,115,32,97,114,101,32,110,111,116,32,112,97,114,116,32,111,102,32,116,104,101,32,115,112,101,99,105,102,105,99,97,116,105,111,110,44,32,97,110,100,32,111,110,108,121,32,116,104,101,32,97,114,103,117,109,101,110,116,115,10,111,102,32,111,112,101,110,40,41,32,97,114,101,32,105,110,116,101,110,100,101,100,32,116,111,32,98,101,32,117,115,101,100,32,97,115,32,107,101,121,119,111,114,100,32,97,114,103,117,109,101,110,116,115,46,10,10,100,97,116,97,58,10,10,68,69,70,65,85,76,84,95,66,85,70,70,69,82,95,83,73,90,69,10,10,32,32,32,65,110,32,105,110,116,32,99,111,110,116,97,105,110,105,110,103,32,116,104,101,32,100,101,102,97,117,108,116,32,98,117,102,102,101,114,32,115,105,122,101,32,117,115,101,100,32,98,121,32,116,104,101,32,109,111,100,117,108,101,39,115,32,98,117,102,102,101,114,101,100,10,32,32,32,73,47,79,32,99,108,97,115,115,101,115,46,32,111,112,101,110,40,41,32,117,115,101,115,32,116,104,101,32,102,105,108,101,39,115,32,98,108,107,115,105,122,101,32,40,97,115,32,111,98,116,97,105,110,101,100,32,98,121,32,111,115,46,115,116,97,116,41,32,105,102,10,32,32,32,112,111,115,115,105,98,108,101,46,10,0,0,0,0], "i8", ALLOC_NORMAL);
_isatty_doc173=allocate([105,115,97,116,116,121,40,41,32,45,62,32,98,111,111,108,46,32,32,84,114,117,101,32,105,102,32,116,104,101,32,102,105,108,101,32,105,115,32,99,111,110,110,101,99,116,101,100,32,116,111,32,97,32,116,116,121,32,100,101,118,105,99,101,46,0,0,0], "i8", ALLOC_NORMAL);
_isatty_doc=allocate([105,115,97,116,116,121,40,41,32,45,62,32,70,97,108,115,101,46,10,10,65,108,119,97,121,115,32,114,101,116,117,114,110,115,32,70,97,108,115,101,32,115,105,110,99,101,32,66,121,116,101,115,73,79,32,111,98,106,101,99,116,115,32,97,114,101,32,110,111,116,32,99,111,110,110,101,99,116,101,100,10,116,111,32,97,32,116,116,121,45,108,105,107,101,32,100,101,118,105,99,101,46,0,0], "i8", ALLOC_NORMAL);
_iobase_writable_doc=allocate([82,101,116,117,114,110,32,119,104,101,116,104,101,114,32,111,98,106,101,99,116,32,119,97,115,32,111,112,101,110,101,100,32,102,111,114,32,119,114,105,116,105,110,103,46,10,10,73,102,32,70,97,108,115,101,44,32,114,101,97,100,40,41,32,119,105,108,108,32,114,97,105,115,101,32,73,79,69,114,114,111,114,46,0], "i8", ALLOC_NORMAL);
_iobase_truncate_doc=allocate([84,114,117,110,99,97,116,101,32,102,105,108,101,32,116,111,32,115,105,122,101,32,98,121,116,101,115,46,10,10,70,105,108,101,32,112,111,105,110,116,101,114,32,105,115,32,108,101,102,116,32,117,110,99,104,97,110,103,101,100,46,32,32,83,105,122,101,32,100,101,102,97,117,108,116,115,32,116,111,32,116,104,101,32,99,117,114,114,101,110,116,32,73,79,10,112,111,115,105,116,105,111,110,32,97,115,32,114,101,112,111,114,116,101,100,32,98,121,32,116,101,108,108,40,41,46,32,32,82,101,116,117,114,110,115,32,116,104,101,32,110,101,119,32,115,105,122,101,46,0,0,0], "i8", ALLOC_NORMAL);
_iobase_tell_doc=allocate([82,101,116,117,114,110,32,99,117,114,114,101,110,116,32,115,116,114,101,97,109,32,112,111,115,105,116,105,111,110,46,0], "i8", ALLOC_NORMAL);
_iobase_seekable_doc=allocate([82,101,116,117,114,110,32,119,104,101,116,104,101,114,32,111,98,106,101,99,116,32,115,117,112,112,111,114,116,115,32,114,97,110,100,111,109,32,97,99,99,101,115,115,46,10,10,73,102,32,70,97,108,115,101,44,32,115,101,101,107,40,41,44,32,116,101,108,108,40,41,32,97,110,100,32,116,114,117,110,99,97,116,101,40,41,32,119,105,108,108,32,114,97,105,115,101,32,73,79,69,114,114,111,114,46,10,84,104,105,115,32,109,101,116,104,111,100,32,109,97,121,32,110,101,101,100,32,116,111,32,100,111,32,97,32,116,101,115,116,32,115,101,101,107,40,41,46,0,0,0,0], "i8", ALLOC_NORMAL);
_iobase_seek_doc=allocate([67,104,97,110,103,101,32,115,116,114,101,97,109,32,112,111,115,105,116,105,111,110,46,10,10,67,104,97,110,103,101,32,116,104,101,32,115,116,114,101,97,109,32,112,111,115,105,116,105,111,110,32,116,111,32,116,104,101,32,103,105,118,101,110,32,98,121,116,101,32,111,102,102,115,101,116,46,32,84,104,101,32,111,102,102,115,101,116,32,105,115,10,105,110,116,101,114,112,114,101,116,101,100,32,114,101,108,97,116,105,118,101,32,116,111,32,116,104,101,32,112,111,115,105,116,105,111,110,32,105,110,100,105,99,97,116,101,100,32,98,121,32,119,104,101,110,99,101,46,32,32,86,97,108,117,101,115,10,102,111,114,32,119,104,101,110,99,101,32,97,114,101,58,10,10,42,32,48,32,45,45,32,115,116,97,114,116,32,111,102,32,115,116,114,101,97,109,32,40,116,104,101,32,100,101,102,97,117,108,116,41,59,32,111,102,102,115,101,116,32,115,104,111,117,108,100,32,98,101,32,122,101,114,111,32,111,114,32,112,111,115,105,116,105,118,101,10,42,32,49,32,45,45,32,99,117,114,114,101,110,116,32,115,116,114,101,97,109,32,112,111,115,105,116,105,111,110,59,32,111,102,102,115,101,116,32,109,97,121,32,98,101,32,110,101,103,97,116,105,118,101,10,42,32,50,32,45,45,32,101,110,100,32,111,102,32,115,116,114,101,97,109,59,32,111,102,102,115,101,116,32,105,115,32,117,115,117,97,108,108,121,32,110,101,103,97,116,105,118,101,10,10,82,101,116,117,114,110,32,116,104,101,32,110,101,119,32,97,98,115,111,108,117,116,101,32,112,111,115,105,116,105,111,110,46,0,0,0], "i8", ALLOC_NORMAL);
_iobase_readlines_doc=allocate([82,101,116,117,114,110,32,97,32,108,105,115,116,32,111,102,32,108,105,110,101,115,32,102,114,111,109,32,116,104,101,32,115,116,114,101,97,109,46,10,10,104,105,110,116,32,99,97,110,32,98,101,32,115,112,101,99,105,102,105,101,100,32,116,111,32,99,111,110,116,114,111,108,32,116,104,101,32,110,117,109,98,101,114,32,111,102,32,108,105,110,101,115,32,114,101,97,100,58,32,110,111,32,109,111,114,101,10,108,105,110,101,115,32,119,105,108,108,32,98,101,32,114,101,97,100,32,105,102,32,116,104,101,32,116,111,116,97,108,32,115,105,122,101,32,40,105,110,32,98,121,116,101,115,47,99,104,97,114,97,99,116,101,114,115,41,32,111,102,32,97,108,108,10,108,105,110,101,115,32,115,111,32,102,97,114,32,101,120,99,101,101,100,115,32,104,105,110,116,46,0,0,0,0], "i8", ALLOC_NORMAL);
_iobase_readline_doc=allocate([82,101,97,100,32,97,110,100,32,114,101,116,117,114,110,32,97,32,108,105,110,101,32,102,114,111,109,32,116,104,101,32,115,116,114,101,97,109,46,10,10,73,102,32,108,105,109,105,116,32,105,115,32,115,112,101,99,105,102,105,101,100,44,32,97,116,32,109,111,115,116,32,108,105,109,105,116,32,98,121,116,101,115,32,119,105,108,108,32,98,101,32,114,101,97,100,46,10,10,84,104,101,32,108,105,110,101,32,116,101,114,109,105,110,97,116,111,114,32,105,115,32,97,108,119,97,121,115,32,98,39,92,110,39,32,102,111,114,32,98,105,110,97,114,121,32,102,105,108,101,115,59,32,102,111,114,32,116,101,120,116,10,102,105,108,101,115,44,32,116,104,101,32,110,101,119,108,105,110,101,115,32,97,114,103,117,109,101,110,116,32,116,111,32,111,112,101,110,32,99,97,110,32,98,101,32,117,115,101,100,32,116,111,32,115,101,108,101,99,116,32,116,104,101,32,108,105,110,101,10,116,101,114,109,105,110,97,116,111,114,40,115,41,32,114,101,99,111,103,110,105,122,101,100,46,10,0,0,0,0], "i8", ALLOC_NORMAL);
_iobase_readable_doc=allocate([82,101,116,117,114,110,32,119,104,101,116,104,101,114,32,111,98,106,101,99,116,32,119,97,115,32,111,112,101,110,101,100,32,102,111,114,32,114,101,97,100,105,110,103,46,10,10,73,102,32,70,97,108,115,101,44,32,114,101,97,100,40,41,32,119,105,108,108,32,114,97,105,115,101,32,73,79,69,114,114,111,114,46,0], "i8", ALLOC_NORMAL);
_iobase_methods=allocate([0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_iobase_isatty_doc=allocate([82,101,116,117,114,110,32,119,104,101,116,104,101,114,32,116,104,105,115,32,105,115,32,97,110,32,39,105,110,116,101,114,97,99,116,105,118,101,39,32,115,116,114,101,97,109,46,10,10,82,101,116,117,114,110,32,70,97,108,115,101,32,105,102,32,105,116,32,99,97,110,39,116,32,98,101,32,100,101,116,101,114,109,105,110,101,100,46,10,0,0,0], "i8", ALLOC_NORMAL);
_iobase_getset=allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_iobase_flush_doc=allocate([70,108,117,115,104,32,119,114,105,116,101,32,98,117,102,102,101,114,115,44,32,105,102,32,97,112,112,108,105,99,97,98,108,101,46,10,10,84,104,105,115,32,105,115,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,32,102,111,114,32,114,101,97,100,45,111,110,108,121,32,97,110,100,32,110,111,110,45,98,108,111,99,107,105,110,103,32,115,116,114,101,97,109,115,46,10,0,0,0], "i8", ALLOC_NORMAL);
_iobase_fileno_doc=allocate([82,101,116,117,114,110,115,32,117,110,100,101,114,108,121,105,110,103,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,102,32,111,110,101,32,101,120,105,115,116,115,46,10,10,65,110,32,73,79,69,114,114,111,114,32,105,115,32,114,97,105,115,101,100,32,105,102,32,116,104,101,32,73,79,32,111,98,106,101,99,116,32,100,111,101,115,32,110,111,116,32,117,115,101,32,97,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,46,10,0,0,0], "i8", ALLOC_NORMAL);
_iobase_doc=allocate([84,104,101,32,97,98,115,116,114,97,99,116,32,98,97,115,101,32,99,108,97,115,115,32,102,111,114,32,97,108,108,32,73,47,79,32,99,108,97,115,115,101,115,44,32,97,99,116,105,110,103,32,111,110,32,115,116,114,101,97,109,115,32,111,102,10,98,121,116,101,115,46,32,84,104,101,114,101,32,105,115,32,110,111,32,112,117,98,108,105,99,32,99,111,110,115,116,114,117,99,116,111,114,46,10,10,84,104,105,115,32,99,108,97,115,115,32,112,114,111,118,105,100,101,115,32,100,117,109,109,121,32,105,109,112,108,101,109,101,110,116,97,116,105,111,110,115,32,102,111,114,32,109,97,110,121,32,109,101,116,104,111,100,115,32,116,104,97,116,10,100,101,114,105,118,101,100,32,99,108,97,115,115,101,115,32,99,97,110,32,111,118,101,114,114,105,100,101,32,115,101,108,101,99,116,105,118,101,108,121,59,32,116,104,101,32,100,101,102,97,117,108,116,32,105,109,112,108,101,109,101,110,116,97,116,105,111,110,115,10,114,101,112,114,101,115,101,110,116,32,97,32,102,105,108,101,32,116,104,97,116,32,99,97,110,110,111,116,32,98,101,32,114,101,97,100,44,32,119,114,105,116,116,101,110,32,111,114,32,115,101,101,107,101,100,46,10,10,69,118,101,110,32,116,104,111,117,103,104,32,73,79,66,97,115,101,32,100,111,101,115,32,110,111,116,32,100,101,99,108,97,114,101,32,114,101,97,100,44,32,114,101,97,100,105,110,116,111,44,32,111,114,32,119,114,105,116,101,32,98,101,99,97,117,115,101,10,116,104,101,105,114,32,115,105,103,110,97,116,117,114,101,115,32,119,105,108,108,32,118,97,114,121,44,32,105,109,112,108,101,109,101,110,116,97,116,105,111,110,115,32,97,110,100,32,99,108,105,101,110,116,115,32,115,104,111,117,108,100,10,99,111,110,115,105,100,101,114,32,116,104,111,115,101,32,109,101,116,104,111,100,115,32,112,97,114,116,32,111,102,32,116,104,101,32,105,110,116,101,114,102,97,99,101,46,32,65,108,115,111,44,32,105,109,112,108,101,109,101,110,116,97,116,105,111,110,115,10,109,97,121,32,114,97,105,115,101,32,97,32,73,79,69,114,114,111,114,32,119,104,101,110,32,111,112,101,114,97,116,105,111,110,115,32,116,104,101,121,32,100,111,32,110,111,116,32,115,117,112,112,111,114,116,32,97,114,101,32,99,97,108,108,101,100,46,10,10,84,104,101,32,98,97,115,105,99,32,116,121,112,101,32,117,115,101,100,32,102,111,114,32,98,105,110,97,114,121,32,100,97,116,97,32,114,101,97,100,32,102,114,111,109,32,111,114,32,119,114,105,116,116,101,110,32,116,111,32,97,32,102,105,108,101,32,105,115,10,98,121,116,101,115,46,32,98,121,116,101,97,114,114,97,121,115,32,97,114,101,32,97,99,99,101,112,116,101,100,32,116,111,111,44,32,97,110,100,32,105,110,32,115,111,109,101,32,99,97,115,101,115,32,40,115,117,99,104,32,97,115,10,114,101,97,100,105,110,116,111,41,32,110,101,101,100,101,100,46,32,84,101,120,116,32,73,47,79,32,99,108,97,115,115,101,115,32,119,111,114,107,32,119,105,116,104,32,115,116,114,32,100,97,116,97,46,10,10,78,111,116,101,32,116,104,97,116,32,99,97,108,108,105,110,103,32,97,110,121,32,109,101,116,104,111,100,32,40,101,118,101,110,32,105,110,113,117,105,114,105,101,115,41,32,111,110,32,97,32,99,108,111,115,101,100,32,115,116,114,101,97,109,32,105,115,10,117,110,100,101,102,105,110,101,100,46,32,73,109,112,108,101,109,101,110,116,97,116,105,111,110,115,32,109,97,121,32,114,97,105,115,101,32,73,79,69,114,114,111,114,32,105,110,32,116,104,105,115,32,99,97,115,101,46,10,10,73,79,66,97,115,101,32,40,97,110,100,32,105,116,115,32,115,117,98,99,108,97,115,115,101,115,41,32,115,117,112,112,111,114,116,32,116,104,101,32,105,116,101,114,97,116,111,114,32,112,114,111,116,111,99,111,108,44,32,109,101,97,110,105,110,103,10,116,104,97,116,32,97,110,32,73,79,66,97,115,101,32,111,98,106,101,99,116,32,99,97,110,32,98,101,32,105,116,101,114,97,116,101,100,32,111,118,101,114,32,121,105,101,108,100,105,110,103,32,116,104,101,32,108,105,110,101,115,32,105,110,32,97,10,115,116,114,101,97,109,46,10,10,73,79,66,97,115,101,32,97,108,115,111,32,115,117,112,112,111,114,116,115,32,116,104,101,32,58,107,101,121,119,111,114,100,58,96,119,105,116,104,96,32,115,116,97,116,101,109,101,110,116,46,32,73,110,32,116,104,105,115,32,101,120,97,109,112,108,101,44,10,102,112,32,105,115,32,99,108,111,115,101,100,32,97,102,116,101,114,32,116,104,101,32,115,117,105,116,101,32,111,102,32,116,104,101,32,119,105,116,104,32,115,116,97,116,101,109,101,110,116,32,105,115,32,99,111,109,112,108,101,116,101,58,10,10,119,105,116,104,32,111,112,101,110,40,39,115,112,97,109,46,116,120,116,39,44,32,39,114,39,41,32,97,115,32,102,112,58,10,32,32,32,32,102,112,46,119,114,105,116,101,40,39,83,112,97,109,32,97,110,100,32,101,103,103,115,33,39,41,10,0,0], "i8", ALLOC_NORMAL);
_iobase_close_doc=allocate([70,108,117,115,104,32,97,110,100,32,99,108,111,115,101,32,116,104,101,32,73,79,32,111,98,106,101,99,116,46,10,10,84,104,105,115,32,109,101,116,104,111,100,32,104,97,115,32,110,111,32,101,102,102,101,99,116,32,105,102,32,116,104,101,32,102,105,108,101,32,105,115,32,97,108,114,101,97,100,121,32,99,108,111,115,101,100,46,10,0,0,0], "i8", ALLOC_NORMAL);
_io_open_kwlist=allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_incrementalnewlinedecoder_methods=allocate([0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_incrementalnewlinedecoder_init_kwlist=allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_incrementalnewlinedecoder_getset=allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_incrementalnewlinedecoder_doc=allocate([67,111,100,101,99,32,117,115,101,100,32,119,104,101,110,32,114,101,97,100,105,110,103,32,97,32,102,105,108,101,32,105,110,32,117,110,105,118,101,114,115,97,108,32,110,101,119,108,105,110,101,115,32,109,111,100,101,46,32,32,73,116,32,119,114,97,112,115,10,97,110,111,116,104,101,114,32,105,110,99,114,101,109,101,110,116,97,108,32,100,101,99,111,100,101,114,44,32,116,114,97,110,115,108,97,116,105,110,103,32,92,114,92,110,32,97,110,100,32,92,114,32,105,110,116,111,32,92,110,46,32,32,73,116,32,97,108,115,111,10,114,101,99,111,114,100,115,32,116,104,101,32,116,121,112,101,115,32,111,102,32,110,101,119,108,105,110,101,115,32,101,110,99,111,117,110,116,101,114,101,100,46,32,32,87,104,101,110,32,117,115,101,100,32,119,105,116,104,10,116,114,97,110,115,108,97,116,101,61,70,97,108,115,101,44,32,105,116,32,101,110,115,117,114,101,115,32,116,104,97,116,32,116,104,101,32,110,101,119,108,105,110,101,32,115,101,113,117,101,110,99,101,32,105,115,32,114,101,116,117,114,110,101,100,32,105,110,10,111,110,101,32,112,105,101,99,101,46,32,87,104,101,110,32,117,115,101,100,32,119,105,116,104,32,100,101,99,111,100,101,114,61,78,111,110,101,44,32,105,116,32,101,120,112,101,99,116,115,32,117,110,105,99,111,100,101,32,115,116,114,105,110,103,115,32,97,115,10,100,101,99,111,100,101,32,105,110,112,117,116,32,97,110,100,32,116,114,97,110,115,108,97,116,101,115,32,110,101,119,108,105,110,101,115,32,119,105,116,104,111,117,116,32,102,105,114,115,116,32,105,110,118,111,107,105,110,103,32,97,110,32,101,120,116,101,114,110,97,108,10,100,101,99,111,100,101,114,46,10,0], "i8", ALLOC_NORMAL);
_incrementalnewlinedecoder_decode_kwlist=allocate([0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_getval_doc=allocate([103,101,116,118,97,108,117,101,40,41,32,45,62,32,98,121,116,101,115,46,10,10,82,101,116,114,105,101,118,101,32,116,104,101,32,101,110,116,105,114,101,32,99,111,110,116,101,110,116,115,32,111,102,32,116,104,101,32,66,121,116,101,115,73,79,32,111,98,106,101,99,116,46,0,0,0], "i8", ALLOC_NORMAL);
_flush_doc=allocate([102,108,117,115,104,40,41,32,45,62,32,78,111,110,101,46,32,32,68,111,101,115,32,110,111,116,104,105,110,103,46,0], "i8", ALLOC_NORMAL);
_fileno_doc=allocate([102,105,108,101,110,111,40,41,32,45,62,32,105,110,116,46,32,34,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,34,46,10,10,84,104,105,115,32,105,115,32,110,101,101,100,101,100,32,102,111,114,32,108,111,119,101,114,45,108,101,118,101,108,32,102,105,108,101,32,105,110,116,101,114,102,97,99,101,115,44,32,115,117,99,104,32,116,104,101,32,102,99,110,116,108,32,109,111,100,117,108,101,46,0], "i8", ALLOC_NORMAL);
_fileio_methods=allocate([0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_fileio_init_kwlist=allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_fileio_getsetlist=allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_fileio_doc=allocate([102,105,108,101,40,110,97,109,101,58,32,115,116,114,91,44,32,109,111,100,101,58,32,115,116,114,93,41,32,45,62,32,102,105,108,101,32,73,79,32,111,98,106,101,99,116,10,10,79,112,101,110,32,97,32,102,105,108,101,46,32,32,84,104,101,32,109,111,100,101,32,99,97,110,32,98,101,32,39,114,39,44,32,39,119,39,32,111,114,32,39,97,39,32,102,111,114,32,114,101,97,100,105,110,103,32,40,100,101,102,97,117,108,116,41,44,10,119,114,105,116,105,110,103,32,111,114,32,97,112,112,101,110,100,105,110,103,46,32,32,84,104,101,32,102,105,108,101,32,119,105,108,108,32,98,101,32,99,114,101,97,116,101,100,32,105,102,32,105,116,32,100,111,101,115,110,39,116,32,101,120,105,115,116,10,119,104,101,110,32,111,112,101,110,101,100,32,102,111,114,32,119,114,105,116,105,110,103,32,111,114,32,97,112,112,101,110,100,105,110,103,59,32,105,116,32,119,105,108,108,32,98,101,32,116,114,117,110,99,97,116,101,100,32,119,104,101,110,10,111,112,101,110,101,100,32,102,111,114,32,119,114,105,116,105,110,103,46,32,32,65,100,100,32,97,32,39,43,39,32,116,111,32,116,104,101,32,109,111,100,101,32,116,111,32,97,108,108,111,119,32,115,105,109,117,108,116,97,110,101,111,117,115,10,114,101,97,100,105,110,103,32,97,110,100,32,119,114,105,116,105,110,103,46,0,0], "i8", ALLOC_NORMAL);
_encodefuncs=allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_close_doc164=allocate([99,108,111,115,101,40,41,32,45,62,32,78,111,110,101,46,32,32,67,108,111,115,101,32,116,104,101,32,102,105,108,101,46,10,10,65,32,99,108,111,115,101,100,32,102,105,108,101,32,99,97,110,110,111,116,32,98,101,32,117,115,101,100,32,102,111,114,32,102,117,114,116,104,101,114,32,73,47,79,32,111,112,101,114,97,116,105,111,110,115,46,32,32,99,108,111,115,101,40,41,32,109,97,121,32,98,101,10,99,97,108,108,101,100,32,109,111,114,101,32,116,104,97,110,32,111,110,99,101,32,119,105,116,104,111,117,116,32,101,114,114,111,114,46,32,32,67,104,97,110,103,101,115,32,116,104,101,32,102,105,108,101,110,111,32,116,111,32,45,49,46,0], "i8", ALLOC_NORMAL);
_close_doc=allocate([99,108,111,115,101,40,41,32,45,62,32,78,111,110,101,46,32,32,68,105,115,97,98,108,101,32,97,108,108,32,73,47,79,32,111,112,101,114,97,116,105,111,110,115,46,0,0,0], "i8", ALLOC_NORMAL);
_bytesio_methods=allocate([0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_bytesio_init_kwlist=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_bytesio_getsetlist=allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_bytesio_doc=allocate([66,121,116,101,115,73,79,40,91,98,117,102,102,101,114,93,41,32,45,62,32,111,98,106,101,99,116,10,10,67,114,101,97,116,101,32,97,32,98,117,102,102,101,114,101,100,32,73,47,79,32,105,109,112,108,101,109,101,110,116,97,116,105,111,110,32,117,115,105,110,103,32,97,110,32,105,110,45,109,101,109,111,114,121,32,98,121,116,101,115,10,98,117,102,102,101,114,44,32,114,101,97,100,121,32,102,111,114,32,114,101,97,100,105,110,103,32,97,110,100,32,119,114,105,116,105,110,103,46,0,0,0], "i8", ALLOC_NORMAL);
_bufferedwriter_methods=allocate([0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_bufferedwriter_members=allocate([0,0,0,0,6,0,0,0,8,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_bufferedwriter_init_kwlist=allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_bufferedwriter_getset=allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_bufferedwriter_doc=allocate([65,32,98,117,102,102,101,114,32,102,111,114,32,97,32,119,114,105,116,101,97,98,108,101,32,115,101,113,117,101,110,116,105,97,108,32,82,97,119,73,79,32,111,98,106,101,99,116,46,10,10,84,104,101,32,99,111,110,115,116,114,117,99,116,111,114,32,99,114,101,97,116,101,115,32,97,32,66,117,102,102,101,114,101,100,87,114,105,116,101,114,32,102,111,114,32,116,104,101,32,103,105,118,101,110,32,119,114,105,116,101,97,98,108,101,32,114,97,119,10,115,116,114,101,97,109,46,32,73,102,32,116,104,101,32,98,117,102,102,101,114,95,115,105,122,101,32,105,115,32,110,111,116,32,103,105,118,101,110,44,32,105,116,32,100,101,102,97,117,108,116,115,32,116,111,10,68,69,70,65,85,76,84,95,66,85,70,70,69,82,95,83,73,90,69,46,32,109,97,120,95,98,117,102,102,101,114,95,115,105,122,101,32,105,115,110,39,116,32,117,115,101,100,32,97,110,121,109,111,114,101,46,10,0,0,0], "i8", ALLOC_NORMAL);
_bufferedrwpair_methods=allocate([0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_bufferedrwpair_getset=allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_bufferedrwpair_doc=allocate([65,32,98,117,102,102,101,114,101,100,32,114,101,97,100,101,114,32,97,110,100,32,119,114,105,116,101,114,32,111,98,106,101,99,116,32,116,111,103,101,116,104,101,114,46,10,10,65,32,98,117,102,102,101,114,101,100,32,114,101,97,100,101,114,32,111,98,106,101,99,116,32,97,110,100,32,98,117,102,102,101,114,101,100,32,119,114,105,116,101,114,32,111,98,106,101,99,116,32,112,117,116,32,116,111,103,101,116,104,101,114,32,116,111,10,102,111,114,109,32,97,32,115,101,113,117,101,110,116,105,97,108,32,73,79,32,111,98,106,101,99,116,32,116,104,97,116,32,99,97,110,32,114,101,97,100,32,97,110,100,32,119,114,105,116,101,46,32,84,104,105,115,32,105,115,32,116,121,112,105,99,97,108,108,121,10,117,115,101,100,32,119,105,116,104,32,97,32,115,111,99,107,101,116,32,111,114,32,116,119,111,45,119,97,121,32,112,105,112,101,46,10,10,114,101,97,100,101,114,32,97,110,100,32,119,114,105,116,101,114,32,97,114,101,32,82,97,119,73,79,66,97,115,101,32,111,98,106,101,99,116,115,32,116,104,97,116,32,97,114,101,32,114,101,97,100,97,98,108,101,32,97,110,100,10,119,114,105,116,101,97,98,108,101,32,114,101,115,112,101,99,116,105,118,101,108,121,46,32,73,102,32,116,104,101,32,98,117,102,102,101,114,95,115,105,122,101,32,105,115,32,111,109,105,116,116,101,100,32,105,116,32,100,101,102,97,117,108,116,115,32,116,111,10,68,69,70,65,85,76,84,95,66,85,70,70,69,82,95,83,73,90,69,46,10,0], "i8", ALLOC_NORMAL);
_bufferedreader_methods=allocate([0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_bufferedreader_members=allocate([0,0,0,0,6,0,0,0,8,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_bufferedreader_init_kwlist=allocate([0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_bufferedreader_getset=allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_bufferedreader_doc=allocate([67,114,101,97,116,101,32,97,32,110,101,119,32,98,117,102,102,101,114,101,100,32,114,101,97,100,101,114,32,117,115,105,110,103,32,116,104,101,32,103,105,118,101,110,32,114,101,97,100,97,98,108,101,32,114,97,119,32,73,79,32,111,98,106,101,99,116,46,0,0,0,0], "i8", ALLOC_NORMAL);
_bufferedrandom_methods=allocate([0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_bufferedrandom_members=allocate([0,0,0,0,6,0,0,0,8,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_bufferedrandom_init_kwlist=allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_bufferedrandom_getset=allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_bufferedrandom_doc=allocate([65,32,98,117,102,102,101,114,101,100,32,105,110,116,101,114,102,97,99,101,32,116,111,32,114,97,110,100,111,109,32,97,99,99,101,115,115,32,115,116,114,101,97,109,115,46,10,10,84,104,101,32,99,111,110,115,116,114,117,99,116,111,114,32,99,114,101,97,116,101,115,32,97,32,114,101,97,100,101,114,32,97,110,100,32,119,114,105,116,101,114,32,102,111,114,32,97,32,115,101,101,107,97,98,108,101,32,115,116,114,101,97,109,44,10,114,97,119,44,32,103,105,118,101,110,32,105,110,32,116,104,101,32,102,105,114,115,116,32,97,114,103,117,109,101,110,116,46,32,73,102,32,116,104,101,32,98,117,102,102,101,114,95,115,105,122,101,32,105,115,32,111,109,105,116,116,101,100,32,105,116,10,100,101,102,97,117,108,116,115,32,116,111,32,68,69,70,65,85,76,84,95,66,85,70,70,69,82,95,83,73,90,69,46,32,109,97,120,95,98,117,102,102,101,114,95,115,105,122,101,32,105,115,110,39,116,32,117,115,101,100,32,97,110,121,109,111,114,101,46,10,0], "i8", ALLOC_NORMAL);
_bufferediobase_write_doc=allocate([87,114,105,116,101,32,116,104,101,32,103,105,118,101,110,32,98,117,102,102,101,114,32,116,111,32,116,104,101,32,73,79,32,115,116,114,101,97,109,46,10,10,82,101,116,117,114,110,115,32,116,104,101,32,110,117,109,98,101,114,32,111,102,32,98,121,116,101,115,32,119,114,105,116,116,101,110,44,32,119,104,105,99,104,32,105,115,32,110,101,118,101,114,32,108,101,115,115,32,116,104,97,110,10,108,101,110,40,98,41,46,10,10,82,97,105,115,101,115,32,66,108,111,99,107,105,110,103,73,79,69,114,114,111,114,32,105,102,32,116,104,101,32,98,117,102,102,101,114,32,105,115,32,102,117,108,108,32,97,110,100,32,116,104,101,10,117,110,100,101,114,108,121,105,110,103,32,114,97,119,32,115,116,114,101,97,109,32,99,97,110,110,111,116,32,97,99,99,101,112,116,32,109,111,114,101,32,100,97,116,97,32,97,116,32,116,104,101,32,109,111,109,101,110,116,46,10,0], "i8", ALLOC_NORMAL);
_bufferediobase_read_doc=allocate([82,101,97,100,32,97,110,100,32,114,101,116,117,114,110,32,117,112,32,116,111,32,110,32,98,121,116,101,115,46,10,10,73,102,32,116,104,101,32,97,114,103,117,109,101,110,116,32,105,115,32,111,109,105,116,116,101,100,44,32,78,111,110,101,44,32,111,114,32,110,101,103,97,116,105,118,101,44,32,114,101,97,100,115,32,97,110,100,10,114,101,116,117,114,110,115,32,97,108,108,32,100,97,116,97,32,117,110,116,105,108,32,69,79,70,46,10,10,73,102,32,116,104,101,32,97,114,103,117,109,101,110,116,32,105,115,32,112,111,115,105,116,105,118,101,44,32,97,110,100,32,116,104,101,32,117,110,100,101,114,108,121,105,110,103,32,114,97,119,32,115,116,114,101,97,109,32,105,115,10,110,111,116,32,39,105,110,116,101,114,97,99,116,105,118,101,39,44,32,109,117,108,116,105,112,108,101,32,114,97,119,32,114,101,97,100,115,32,109,97,121,32,98,101,32,105,115,115,117,101,100,32,116,111,32,115,97,116,105,115,102,121,10,116,104,101,32,98,121,116,101,32,99,111,117,110,116,32,40,117,110,108,101,115,115,32,69,79,70,32,105,115,32,114,101,97,99,104,101,100,32,102,105,114,115,116,41,46,32,32,66,117,116,32,102,111,114,10,105,110,116,101,114,97,99,116,105,118,101,32,114,97,119,32,115,116,114,101,97,109,115,32,40,97,115,32,119,101,108,108,32,97,115,32,115,111,99,107,101,116,115,32,97,110,100,32,112,105,112,101,115,41,44,32,97,116,32,109,111,115,116,10,111,110,101,32,114,97,119,32,114,101,97,100,32,119,105,108,108,32,98,101,32,105,115,115,117,101,100,44,32,97,110,100,32,97,32,115,104,111,114,116,32,114,101,115,117,108,116,32,100,111,101,115,32,110,111,116,32,105,109,112,108,121,10,116,104,97,116,32,69,79,70,32,105,115,32,105,109,109,105,110,101,110,116,46,10,10,82,101,116,117,114,110,115,32,97,110,32,101,109,112,116,121,32,98,121,116,101,115,32,111,98,106,101,99,116,32,111,110,32,69,79,70,46,10,10,82,101,116,117,114,110,115,32,78,111,110,101,32,105,102,32,116,104,101,32,117,110,100,101,114,108,121,105,110,103,32,114,97,119,32,115,116,114,101,97,109,32,119,97,115,32,111,112,101,110,32,105,110,32,110,111,110,45,98,108,111,99,107,105,110,103,10,109,111,100,101,32,97,110,100,32,110,111,32,100,97,116,97,32,105,115,32,97,118,97,105,108,97,98,108,101,32,97,116,32,116,104,101,32,109,111,109,101,110,116,46,10,0], "i8", ALLOC_NORMAL);
_bufferediobase_read1_doc=allocate([82,101,97,100,32,97,110,100,32,114,101,116,117,114,110,32,117,112,32,116,111,32,110,32,98,121,116,101,115,44,32,119,105,116,104,32,97,116,32,109,111,115,116,32,111,110,101,32,114,101,97,100,40,41,32,99,97,108,108,10,116,111,32,116,104,101,32,117,110,100,101,114,108,121,105,110,103,32,114,97,119,32,115,116,114,101,97,109,46,32,65,32,115,104,111,114,116,32,114,101,115,117,108,116,32,100,111,101,115,32,110,111,116,32,105,109,112,108,121,10,116,104,97,116,32,69,79,70,32,105,115,32,105,109,109,105,110,101,110,116,46,10,10,82,101,116,117,114,110,115,32,97,110,32,101,109,112,116,121,32,98,121,116,101,115,32,111,98,106,101,99,116,32,111,110,32,69,79,70,46,10,0,0,0], "i8", ALLOC_NORMAL);
_bufferediobase_methods=allocate([0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_bufferediobase_doc=allocate([66,97,115,101,32,99,108,97,115,115,32,102,111,114,32,98,117,102,102,101,114,101,100,32,73,79,32,111,98,106,101,99,116,115,46,10,10,84,104,101,32,109,97,105,110,32,100,105,102,102,101,114,101,110,99,101,32,119,105,116,104,32,82,97,119,73,79,66,97,115,101,32,105,115,32,116,104,97,116,32,116,104,101,32,114,101,97,100,40,41,32,109,101,116,104,111,100,10,115,117,112,112,111,114,116,115,32,111,109,105,116,116,105,110,103,32,116,104,101,32,115,105,122,101,32,97,114,103,117,109,101,110,116,44,32,97,110,100,32,100,111,101,115,32,110,111,116,32,104,97,118,101,32,97,32,100,101,102,97,117,108,116,10,105,109,112,108,101,109,101,110,116,97,116,105,111,110,32,116,104,97,116,32,100,101,102,101,114,115,32,116,111,32,114,101,97,100,105,110,116,111,40,41,46,10,10,73,110,32,97,100,100,105,116,105,111,110,44,32,114,101,97,100,40,41,44,32,114,101,97,100,105,110,116,111,40,41,32,97,110,100,32,119,114,105,116,101,40,41,32,109,97,121,32,114,97,105,115,101,10,66,108,111,99,107,105,110,103,73,79,69,114,114,111,114,32,105,102,32,116,104,101,32,117,110,100,101,114,108,121,105,110,103,32,114,97,119,32,115,116,114,101,97,109,32,105,115,32,105,110,32,110,111,110,45,98,108,111,99,107,105,110,103,10,109,111,100,101,32,97,110,100,32,110,111,116,32,114,101,97,100,121,59,32,117,110,108,105,107,101,32,116,104,101,105,114,32,114,97,119,32,99,111,117,110,116,101,114,112,97,114,116,115,44,32,116,104,101,121,32,119,105,108,108,32,110,101,118,101,114,10,114,101,116,117,114,110,32,78,111,110,101,46,10,10,65,32,116,121,112,105,99,97,108,32,105,109,112,108,101,109,101,110,116,97,116,105,111,110,32,115,104,111,117,108,100,32,110,111,116,32,105,110,104,101,114,105,116,32,102,114,111,109,32,97,32,82,97,119,73,79,66,97,115,101,10,105,109,112,108,101,109,101,110,116,97,116,105,111,110,44,32,98,117,116,32,119,114,97,112,32,111,110,101,46,10,0,0,0,0], "i8", ALLOC_NORMAL);
_bufferediobase_detach_doc=allocate([68,105,115,99,111,110,110,101,99,116,32,116,104,105,115,32,98,117,102,102,101,114,32,102,114,111,109,32,105,116,115,32,117,110,100,101,114,108,121,105,110,103,32,114,97,119,32,115,116,114,101,97,109,32,97,110,100,32,114,101,116,117,114,110,32,105,116,46,10,10,65,102,116,101,114,32,116,104,101,32,114,97,119,32,115,116,114,101,97,109,32,104,97,115,32,98,101,101,110,32,100,101,116,97,99,104,101,100,44,32,116,104,101,32,98,117,102,102,101,114,32,105,115,32,105,110,32,97,110,32,117,110,117,115,97,98,108,101,10,115,116,97,116,101,46,10,0,0], "i8", ALLOC_NORMAL);
_blockingioerror_members=allocate([0,0,0,0,19,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
__str99=allocate([13,0,0,0], "i8", ALLOC_NORMAL);
__str980=allocate([110,101,119,32,98,117,102,102,101,114,32,115,105,122,101,32,116,111,111,32,108,97,114,103,101,0,0,0], "i8", ALLOC_NORMAL);
__str98=allocate([79,105,124,79,58,73,110,99,114,101,109,101,110,116,97,108,78,101,119,108,105,110,101,68,101,99,111,100,101,114,0,0], "i8", ALLOC_NORMAL);
__str97=allocate([116,114,97,110,115,108,97,116,101,0,0,0], "i8", ALLOC_NORMAL);
__str96=allocate([100,101,99,111,100,101,114,0], "i8", ALLOC_NORMAL);
__str95=allocate([103,45,62,103,99,46,103,99,95,114,101,102,115,32,33,61,32,95,80,121,71,67,95,82,69,70,83,95,85,78,84,82,65,67,75,69,68,0,0,0], "i8", ALLOC_NORMAL);
__str9432=allocate([110,101,119,108,105,110,101,0], "i8", ALLOC_NORMAL);
__str94=allocate([60,95,105,111,46,84,101,120,116,73,79,87,114,97,112,112,101,114,32,110,97,109,101,61,37,115,32,101,110,99,111,100,105,110,103,61,37,115,62,0], "i8", ALLOC_NORMAL);
__str9371=allocate([79,105,0,0], "i8", ALLOC_NORMAL);
__str93=allocate([60,95,105,111,46,84,101,120,116,73,79,87,114,97,112,112,101,114,32,101,110,99,111,100,105,110,103,61,37,115,62,0], "i8", ALLOC_NORMAL);
__str9261=allocate([66,108,111,99,107,105,110,103,73,79,69,114,114,111,114,0], "i8", ALLOC_NORMAL);
__str9204=allocate([114,101,97,100,40,41,32,115,104,111,117,108,100,32,114,101,116,117,114,110,32,98,121,116,101,115,0,0], "i8", ALLOC_NORMAL);
__str92=allocate([114,101,97,100,108,105,110,101,40,41,32,115,104,111,117,108,100,32,104,97,118,101,32,114,101,116,117,114,110,101,100,32,97,110,32,115,116,114,32,111,98,106,101,99,116,44,32,110,111,116,32,39,37,46,50,48,48,115,39,0], "i8", ALLOC_NORMAL);
__str9134=allocate([105,110,116,101,103,101,114,32,97,114,103,117,109,101,110,116,32,101,120,112,101,99,116,101,100,44,32,103,111,116,32,102,108,111,97,116,0,0,0,0], "i8", ALLOC_NORMAL);
__str91=allocate([115,115,0,0], "i8", ALLOC_NORMAL);
__str90=allocate([114,101,112,108,97,99,101,0], "i8", ALLOC_NORMAL);
__str9=allocate([98,117,102,102,101,114,95,115,105,122,101,0], "i8", ALLOC_NORMAL);
__str89=allocate([110,111,116,32,119,114,105,116,97,98,108,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str88=allocate([85,58,119,114,105,116,101,0], "i8", ALLOC_NORMAL);
__str879=allocate([108,101,110,32,62,61,32,48,0,0,0,0], "i8", ALLOC_NORMAL);
__str87=allocate([97,118,97,105,108,32,62,61,32,48,0,0], "i8", ALLOC_NORMAL);
__str86=allocate([124,79,38,58,114,101,97,100,0,0,0,0], "i8", ALLOC_NORMAL);
__str85=allocate([78,78,0,0], "i8", ALLOC_NORMAL);
__str8431=allocate([101,114,114,111,114,115,0,0], "i8", ALLOC_NORMAL);
__str84=allocate([100,101,99,111,100,101,114,32,103,101,116,115,116,97,116,101,40,41,32,115,104,111,117,108,100,32,104,97,118,101,32,114,101,116,117,114,110,101,100,32,97,32,98,121,116,101,115,32,111,98,106,101,99,116,44,32,110,111,116,32,39,37,46,50,48,48,115,39,0,0,0,0], "i8", ALLOC_NORMAL);
__str8370=allocate([105,110,105,116,105,97,108,95,118,97,108,117,101,32,109,117,115,116,32,98,101,32,117,110,105,99,111,100,101,32,111,114,32,78,111,110,101,44,32,110,111,116,32,37,46,50,48,48,115,0,0,0], "i8", ALLOC_NORMAL);
__str83=allocate([117,110,100,101,114,108,121,105,110,103,32,114,101,97,100,49,40,41,32,115,104,111,117,108,100,32,104,97,118,101,32,114,101,116,117,114,110,101,100,32,97,32,98,121,116,101,115,32,111,98,106,101,99,116,44,32,110,111,116,32,39,37,46,50,48,48,115,39,0,0,0,0], "i8", ALLOC_NORMAL);
__str8260=allocate([85,110,115,117,112,112,111,114,116,101,100,79,112,101,114,97,116,105,111,110,0,0,0,0], "i8", ALLOC_NORMAL);
__str8203=allocate([105,0,0,0], "i8", ALLOC_NORMAL);
__str82=allocate([40,79,79,41,0,0,0,0], "i8", ALLOC_NORMAL);
__str8133=allocate([79,124,115,105,58,102,105,108,101,105,111,0], "i8", ALLOC_NORMAL);
__str81=allocate([110,111,116,32,114,101,97,100,97,98,108,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str80=allocate([115,101,108,102,45,62,100,101,99,111,100,101,100,95,99,104,97,114,115,95,117,115,101,100,32,61,61,32,48,0,0,0], "i8", ALLOC_NORMAL);
__str8=allocate([114,97,119,0], "i8", ALLOC_NORMAL);
__str79=allocate([105,110,116,101,103,101,114,32,97,114,103,117,109,101,110,116,32,101,120,112,101,99,116,101,100,44,32,103,111,116,32,39,37,46,50,48,48,115,39,0], "i8", ALLOC_NORMAL);
__str78=allocate([124,79,58,114,101,97,100,108,105,110,101,0], "i8", ALLOC_NORMAL);
__str778=allocate([115,101,108,102,45,62,112,111,115,32,62,61,32,48,0,0], "i8", ALLOC_NORMAL);
__str77=allocate([105,115,0,0], "i8", ALLOC_NORMAL);
__str76=allocate([99,97,110,39,116,32,114,101,115,116,111,114,101,32,108,111,103,105,99,97,108,32,102,105,108,101,32,112,111,115,105,116,105,111,110,0], "i8", ALLOC_NORMAL);
__str75=allocate([105,78,0,0], "i8", ALLOC_NORMAL);
__str7430=allocate([101,110,99,111,100,105,110,103,0,0,0,0], "i8", ALLOC_NORMAL);
__str74=allocate([117,110,100,101,114,108,121,105,110,103,32,114,101,97,100,40,41,32,115,104,111,117,108,100,32,104,97,118,101,32,114,101,116,117,114,110,101,100,32,97,32,98,121,116,101,115,32,111,98,106,101,99,116,44,32,110,111,116,32,39,37,46,50,48,48,115,39,0], "i8", ALLOC_NORMAL);
__str7369=allocate([105,108,108,101,103,97,108,32,110,101,119,108,105,110,101,32,118,97,108,117,101,58,32,37,115,0,0,0], "i8", ALLOC_NORMAL);
__str73496=allocate([105,0,0,0], "i8", ALLOC_NORMAL);
__str73=allocate([99,104,97,114,97,99,116,101,114,115,95,119,114,105,116,116,101,110,0,0], "i8", ALLOC_NORMAL);
__str7259=allocate([115,40,79,79,41,123,125,0], "i8", ALLOC_NORMAL);
__str72495=allocate([110,101,103,97,116,105,118,101,32,115,101,101,107,32,112,111,115,105,116,105,111,110,32,37,115,0,0,0], "i8", ALLOC_NORMAL);
__str7202=allocate([114,101,97,100,97,108,108,0], "i8", ALLOC_NORMAL);
__str72=allocate([79,79,124,110,58,66,108,111,99,107,105,110,103,73,79,69,114,114,111,114,0,0,0,0], "i8", ALLOC_NORMAL);
__str71494=allocate([105,110,118,97,108,105,100,32,119,104,101,110,99,101,32,40,37,100,44,32,115,104,111,117,108,100,32,98,101,32,48,44,32,49,32,111,114,32,50,41,0,0,0,0], "i8", ALLOC_NORMAL);
__str71355=allocate([80,121,84,117,112,108,101,95,67,104,101,99,107,40,97,114,103,115,41,0], "i8", ALLOC_NORMAL);
__str7132=allocate([80,121,70,105,108,101,73,79,95,67,104,101,99,107,40,111,115,101,108,102,41,0,0,0], "i8", ALLOC_NORMAL);
__str71=allocate([95,105,111,46,66,121,116,101,115,73,79,0], "i8", ALLOC_NORMAL);
__str70493=allocate([105,105,0,0], "i8", ALLOC_NORMAL);
__str70354=allocate([69,120,99,101,112,116,105,111,110,32,114,97,105,115,101,100,32,119,104,101,110,32,73,47,79,32,119,111,117,108,100,32,98,108,111,99,107,32,111,110,32,97,32,110,111,110,45,98,108,111,99,107,105,110,103,32,73,47,79,32,115,116,114,101,97,109,0,0], "i8", ALLOC_NORMAL);
__str70=allocate([60,37,115,32,110,97,109,101,61,37,115,62,0,0,0,0], "i8", ALLOC_NORMAL);
__str7=allocate([95,105,111,46,66,117,102,102,101,114,101,100,82,97,110,100,111,109,0,0], "i8", ALLOC_NORMAL);
__str69492=allocate([114,101,115,101,116,0,0,0], "i8", ALLOC_NORMAL);
__str69353=allocate([79,115,115,115,105,0,0,0], "i8", ALLOC_NORMAL);
__str69=allocate([60,37,115,62,0,0,0,0], "i8", ALLOC_NORMAL);
__str68491=allocate([99,97,110,39,116,32,100,111,32,110,111,110,122,101,114,111,32,101,110,100,45,114,101,108,97,116,105,118,101,32,115,101,101,107,115,0], "i8", ALLOC_NORMAL);
__str68352=allocate([79,105,0,0], "i8", ALLOC_NORMAL);
__str68=allocate([114,101,97,100,108,105,110,101,40,41,32,115,104,111,117,108,100,32,104,97,118,101,32,114,101,116,117,114,110,101,100,32,97,32,98,121,116,101,115,32,111,98,106,101,99,116,44,32,110,111,116,32,39,37,46,50,48,48,115,39,0,0,0,0], "i8", ALLOC_NORMAL);
__str677=allocate([115,101,108,102,45,62,98,117,102,32,33,61,32,78,85,76,76,0,0,0], "i8", ALLOC_NORMAL);
__str67490=allocate([99,97,110,39,116,32,100,111,32,110,111,110,122,101,114,111,32,99,117,114,45,114,101,108,97,116,105,118,101,32,115,101,101,107,115,0], "i8", ALLOC_NORMAL);
__str67351=allocate([117,110,107,110,111,119,110,32,109,111,100,101,58,32,39,37,115,39,0,0], "i8", ALLOC_NORMAL);
__str67=allocate([79,124,110,58,66,117,102,102,101,114,101,100,82,101,97,100,101,114,0,0], "i8", ALLOC_NORMAL);
__str66489=allocate([79,124,105,58,115,101,101,107,0,0,0,0], "i8", ALLOC_NORMAL);
__str66350=allocate([99,97,110,39,116,32,104,97,118,101,32,117,110,98,117,102,102,101,114,101,100,32,116,101,120,116,32,73,47,79,0,0], "i8", ALLOC_NORMAL);
__str66=allocate([79,124,110,110,58,66,117,102,102,101,114,101,100,87,114,105,116,101,114,0], "i8", ALLOC_NORMAL);
__str65488=allocate([40,40,115,105,41,41,0,0], "i8", ALLOC_NORMAL);
__str65349=allocate([105,110,118,97,108,105,100,32,98,117,102,102,101,114,105,110,103,32,115,105,122,101,0,0], "i8", ALLOC_NORMAL);
__str65=allocate([103,45,62,103,99,46,103,99,95,114,101,102,115,32,33,61,32,95,80,121,71,67,95,82,69,70,83,95,85,78,84,82,65,67,75,69,68,0,0,0], "i8", ALLOC_NORMAL);
__str64487=allocate([40,79,41,0], "i8", ALLOC_NORMAL);
__str64348=allocate([79,115,105,0], "i8", ALLOC_NORMAL);
__str6429=allocate([98,117,102,102,101,114,0,0], "i8", ALLOC_NORMAL);
__str64=allocate([116,104,101,32,66,117,102,102,101,114,101,100,82,87,80,97,105,114,32,111,98,106,101,99,116,32,105,115,32,98,101,105,110,103,32,103,97,114,98,97,103,101,45,99,111,108,108,101,99,116,101,100,0,0,0,0], "i8", ALLOC_NORMAL);
__str6368=allocate([124,79,122,58,95,95,105,110,105,116,95,95,0,0,0,0], "i8", ALLOC_NORMAL);
__str63486=allocate([115,101,116,115,116,97,116,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str63347=allocate([98,105,110,97,114,121,32,109,111,100,101,32,100,111,101,115,110,39,116,32,116,97,107,101,32,97,32,110,101,119,108,105,110,101,32,97,114,103,117,109,101,110,116,0], "i8", ALLOC_NORMAL);
__str63=allocate([79,110,0,0], "i8", ALLOC_NORMAL);
__str6258=allocate([68,69,70,65,85,76,84,95,66,85,70,70,69,82,95,83,73,90,69,0], "i8", ALLOC_NORMAL);
__str62485=allocate([99,97,110,39,116,32,114,101,99,111,110,115,116,114,117,99,116,32,108,111,103,105,99,97,108,32,102,105,108,101,32,112,111,115,105,116,105,111,110,0], "i8", ALLOC_NORMAL);
__str62346=allocate([98,105,110,97,114,121,32,109,111,100,101,32,100,111,101,115,110,39,116,32,116,97,107,101,32,97,110,32,101,114,114,111,114,115,32,97,114,103,117,109,101,110,116,0], "i8", ALLOC_NORMAL);
__str6201=allocate([114,101,97,100,0,0,0,0], "i8", ALLOC_NORMAL);
__str62=allocate([79,79,124,110,110,58,66,117,102,102,101,114,101,100,82,87,80,97,105,114,0,0,0,0], "i8", ALLOC_NORMAL);
__str61484=allocate([0,0,0,0], "i8", ALLOC_NORMAL);
__str61345=allocate([98,105,110,97,114,121,32,109,111,100,101,32,100,111,101,115,110,39,116,32,116,97,107,101,32,97,110,32,101,110,99,111,100,105,110,103,32,97,114,103,117,109,101,110,116,0,0,0], "i8", ALLOC_NORMAL);
__str6131=allocate([114,0,0,0], "i8", ALLOC_NORMAL);
__str61=allocate([102,108,117,115,104,32,111,102,32,99,108,111,115,101,100,32,102,105,108,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str60483=allocate([115,105,0,0], "i8", ALLOC_NORMAL);
__str60344=allocate([109,117,115,116,32,104,97,118,101,32,101,120,97,99,116,108,121,32,111,110,101,32,111,102,32,114,101,97,100,47,119,114,105,116,101,47,97,112,112,101,110,100,32,109,111,100,101,0], "i8", ALLOC_NORMAL);
__str60=allocate([115,101,101,107,32,111,102,32,99,108,111,115,101,100,32,102,105,108,101,0], "i8", ALLOC_NORMAL);
__str6=allocate([95,105,111,46,66,117,102,102,101,114,101,100,82,87,80,97,105,114,0,0], "i8", ALLOC_NORMAL);
__str59482=allocate([40,115,35,105,41,0,0,0], "i8", ALLOC_NORMAL);
__str59343=allocate([99,97,110,39,116,32,104,97,118,101,32,116,101,120,116,32,97,110,100,32,98,105,110,97,114,121,32,109,111,100,101,32,97,116,32,111,110,99,101,0], "i8", ALLOC_NORMAL);
__str59=allocate([119,104,101,110,99,101,32,109,117,115,116,32,98,101,32,98,101,116,119,101,101,110,32,48,32,97,110,100,32,50,44,32,110,111,116,32,37,100,0,0], "i8", ALLOC_NORMAL);
__str58481=allocate([115,35,0,0], "i8", ALLOC_NORMAL);
__str58342=allocate([99,97,110,39,116,32,117,115,101,32,85,32,97,110,100,32,119,114,105,116,105,110,103,32,109,111,100,101,32,97,116,32,111,110,99,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str58=allocate([79,124,105,58,115,101,101,107,0,0,0,0], "i8", ALLOC_NORMAL);
__str576=allocate([73,47,79,32,111,112,101,114,97,116,105,111,110,32,111,110,32,99,108,111,115,101,100,32,102,105,108,101,46,0,0,0], "i8", ALLOC_NORMAL);
__str57480=allocate([100,101,99,111,100,101,0,0], "i8", ALLOC_NORMAL);
__str57341=allocate([105,110,118,97,108,105,100,32,109,111,100,101,58,32,39,37,115,39,0,0], "i8", ALLOC_NORMAL);
__str57=allocate([124,79,58,116,114,117,110,99,97,116,101,0], "i8", ALLOC_NORMAL);
__str56479=allocate([80,121,66,121,116,101,115,95,67,104,101,99,107,40,110,101,120,116,95,105,110,112,117,116,41,0,0,0], "i8", ALLOC_NORMAL);
__str56340=allocate([105,110,118,97,108,105,100,32,102,105,108,101,58,32,37,115,0,0,0,0], "i8", ALLOC_NORMAL);
__str56=allocate([114,101,109,97,105,110,105,110,103,32,60,61,32,115,101,108,102,45,62,98,117,102,102,101,114,95,115,105,122,101,0,0], "i8", ALLOC_NORMAL);
__str55478=allocate([40,105,79,41,0,0,0,0], "i8", ALLOC_NORMAL);
__str55339=allocate([79,124,115,105,122,122,122,105,58,111,112,101,110,0,0,0], "i8", ALLOC_NORMAL);
__str55=allocate([114,101,97,100,32,111,102,32,99,108,111,115,101,100,32,102,105,108,101,0], "i8", ALLOC_NORMAL);
__str54477=allocate([115,101,108,102,45,62,100,101,99,111,100,101,100,95,99,104,97,114,115,32,61,61,32,78,85,76,76,32,124,124,32,80,121,85,110,105,99,111,100,101,95,71,101,116,83,105,122,101,40,115,101,108,102,45,62,100,101,99,111,100,101,100,95,99,104,97,114,115,41,32,61,61,32,48,0,0], "i8", ALLOC_NORMAL);
__str54338=allocate([114,0,0,0], "i8", ALLOC_NORMAL);
__str5426=allocate([95,105,111,46,84,101,120,116,73,79,87,114,97,112,112,101,114,0,0,0], "i8", ALLOC_NORMAL);
__str54=allocate([114,101,97,100,32,108,101,110,103,116,104,32,109,117,115,116,32,98,101,32,112,111,115,105,116,105,118,101,32,111,114,32,45,49,0,0], "i8", ALLOC_NORMAL);
__str5367=allocate([10,0,0,0], "i8", ALLOC_NORMAL);
__str53476=allocate([116,101,108,108,105,110,103,32,112,111,115,105,116,105,111,110,32,100,105,115,97,98,108,101,100,32,98,121,32,110,101,120,116,40,41,32,99,97,108,108,0,0,0,0], "i8", ALLOC_NORMAL);
__str53337=allocate([99,108,111,115,101,102,100,0], "i8", ALLOC_NORMAL);
__str53=allocate([124,79,38,58,114,101,97,100,0,0,0,0], "i8", ALLOC_NORMAL);
__str5257=allocate([111,115,0,0], "i8", ALLOC_NORMAL);
__str52475=allocate([117,110,100,101,114,108,121,105,110,103,32,115,116,114,101,97,109,32,105,115,32,110,111,116,32,115,101,101,107,97,98,108,101,0,0,0], "i8", ALLOC_NORMAL);
__str52415=allocate([103,45,62,103,99,46,103,99,95,114,101,102,115,32,33,61,32,95,80,121,71,67,95,82,69,70,83,95,85,78,84,82,65,67,75,69,68,0,0,0], "i8", ALLOC_NORMAL);
__str52336=allocate([110,101,119,108,105,110,101,0], "i8", ALLOC_NORMAL);
__str52188=allocate([103,45,62,103,99,46,103,99,95,114,101,102,115,32,33,61,32,95,80,121,71,67,95,82,69,70,83,95,85,78,84,82,65,67,75,69,68,0,0,0], "i8", ALLOC_NORMAL);
__str52=allocate([114,101,97,100,32,108,101,110,103,116,104,32,109,117,115,116,32,98,101,32,112,111,115,105,116,105,118,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str5198=allocate([95,105,111,46,95,82,97,119,73,79,66,97,115,101,0,0], "i8", ALLOC_NORMAL);
__str51474=allocate([73,47,79,32,111,112,101,114,97,116,105,111,110,32,111,110,32,99,108,111,115,101,100,32,102,105,108,101,46,0,0,0], "i8", ALLOC_NORMAL);
__str51414=allocate([114,101,97,100,108,105,110,101,40,41,32,115,104,111,117,108,100,32,104,97,118,101,32,114,101,116,117,114,110,101,100,32,97,110,32,115,116,114,32,111,98,106,101,99,116,44,32,110,111,116,32,39,37,46,50,48,48,115,39,0], "i8", ALLOC_NORMAL);
__str51335=allocate([101,114,114,111,114,115,0,0], "i8", ALLOC_NORMAL);
__str5130=allocate([99,108,111,115,101,102,100,0], "i8", ALLOC_NORMAL);
__str51187=allocate([60,95,105,111,46,70,105,108,101,73,79,32,110,97,109,101,61,37,115,32,109,111,100,101,61,39,37,115,39,62,0,0], "i8", ALLOC_NORMAL);
__str51122=allocate([103,45,62,103,99,46,103,99,95,114,101,102,115,32,33,61,32,95,80,121,71,67,95,82,69,70,83,95,85,78,84,82,65,67,75,69,68,0,0,0], "i8", ALLOC_NORMAL);
__str51=allocate([110,58,114,101,97,100,49,0], "i8", ALLOC_NORMAL);
__str50473=allocate([124,79,58,116,114,117,110,99,97,116,101,0], "i8", ALLOC_NORMAL);
__str50413=allocate([124,79,58,114,101,97,100,0], "i8", ALLOC_NORMAL);
__str50334=allocate([101,110,99,111,100,105,110,103,0,0,0,0], "i8", ALLOC_NORMAL);
__str50186=allocate([60,95,105,111,46,70,105,108,101,73,79,32,102,100,61,37,100,32,109,111,100,101,61,39,37,115,39,62,0,0,0,0], "i8", ALLOC_NORMAL);
__str50121=allocate([115,101,108,102,45,62,112,111,115,32,43,32,108,101,110,32,60,32,80,89,95,83,83,73,90,69,95,84,95,77,65,88,0,0,0,0], "i8", ALLOC_NORMAL);
__str50=allocate([114,101,97,100,40,41,32,115,104,111,117,108,100,32,114,101,116,117,114,110,32,98,121,116,101,115,0,0], "i8", ALLOC_NORMAL);
__str5=allocate([95,105,111,46,66,117,102,102,101,114,101,100,87,114,105,116,101,114,0,0], "i8", ALLOC_NORMAL);
__str49472=allocate([116,114,117,110,99,97,116,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str49412=allocate([0,0,0,0], "i8", ALLOC_NORMAL);
__str49333=allocate([98,117,102,102,101,114,105,110,103,0,0,0], "i8", ALLOC_NORMAL);
__str49185=allocate([60,95,105,111,46,70,105,108,101,73,79,32,91,99,108,111,115,101,100,93,62,0,0,0], "i8", ALLOC_NORMAL);
__str49120=allocate([119,42,0,0], "i8", ALLOC_NORMAL);
__str49=allocate([110,0,0,0], "i8", ALLOC_NORMAL);
__str48471=allocate([116,101,108,108,0,0,0,0], "i8", ALLOC_NORMAL);
__str48411=allocate([124,79,58,114,101,97,100,108,105,110,101,0], "i8", ALLOC_NORMAL);
__str48332=allocate([109,111,100,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str48184=allocate([124,79,38,0], "i8", ALLOC_NORMAL);
__str48119=allocate([124,79,58,114,101,97,100,108,105,110,101,0], "i8", ALLOC_NORMAL);
__str48=allocate([119,42,58,114,101,97,100,105,110,116,111,0], "i8", ALLOC_NORMAL);
__str475=allocate([124,79,58,66,121,116,101,115,73,79,0,0], "i8", ALLOC_NORMAL);
__str47470=allocate([115,101,101,107,0,0,0,0], "i8", ALLOC_NORMAL);
__str47410=allocate([78,101,103,97,116,105,118,101,32,115,105,122,101,32,118,97,108,117,101,32,37,122,100,0], "i8", ALLOC_NORMAL);
__str47331=allocate([102,105,108,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str47183=allocate([117,110,98,111,117,110,100,101,100,32,114,101,97,100,32,114,101,116,117,114,110,101,100,32,109,111,114,101,32,98,121,116,101,115,32,116,104,97,110,32,97,32,80,121,116,104,111,110,32,115,116,114,105,110,103,32,99,97,110,32,104,111,108,100,32,0,0,0], "i8", ALLOC_NORMAL);
__str47118=allocate([115,101,108,102,45,62,112,111,115,32,60,32,80,89,95,83,83,73,90,69,95,84,95,77,65,88,32,45,32,108,101,110,0,0,0,0], "i8", ALLOC_NORMAL);
__str47=allocate([114,101,97,100,108,105,110,101,32,111,102,32,99,108,111,115,101,100,32,102,105,108,101,0], "i8", ALLOC_NORMAL);
__str46469=allocate([105,115,97,116,116,121,0,0], "i8", ALLOC_NORMAL);
__str46409=allocate([105,110,116,101,103,101,114,32,97,114,103,117,109,101,110,116,32,101,120,112,101,99,116,101,100,44,32,103,111,116,32,39,37,115,39,0], "i8", ALLOC_NORMAL);
__str46330=allocate([111,112,101,110,0,0,0,0], "i8", ALLOC_NORMAL);
__str46182=allocate([119,42,0,0], "i8", ALLOC_NORMAL);
__str46117=allocate([124,79,58,114,101,97,100,108,105,110,101,115,0,0,0,0], "i8", ALLOC_NORMAL);
__str46=allocate([124,79,38,58,114,101,97,100,108,105,110,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str45468=allocate([102,105,108,101,110,111,0,0], "i8", ALLOC_NORMAL);
__str45408=allocate([124,79,58,116,114,117,110,99,97,116,101,0], "i8", ALLOC_NORMAL);
__str45325=allocate([119,114,105,116,97,98,108,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str45181=allocate([114,101,97,100,105,110,103,0], "i8", ALLOC_NORMAL);
__str45116=allocate([124,79,58,114,101,97,100,0], "i8", ALLOC_NORMAL);
__str45=allocate([114,97,119,32,114,101,97,100,105,110,116,111,40,41,32,114,101,116,117,114,110,101,100,32,105,110,118,97,108,105,100,32,108,101,110,103,116,104,32,37,122,100,32,40,115,104,111,117,108,100,32,104,97,118,101,32,98,101,101,110,32,98,101,116,119,101,101,110,32,48,32,97,110,100,32,37,122,100,41,0], "i8", ALLOC_NORMAL);
__str44467=allocate([99,108,111,115,101,0,0,0], "i8", ALLOC_NORMAL);
__str44407=allocate([67,97,110,39,116,32,100,111,32,110,111,110,122,101,114,111,32,99,117,114,45,114,101,108,97,116,105,118,101,32,115,101,101,107,115,0], "i8", ALLOC_NORMAL);
__str44322=allocate([119,114,105,116,101,0,0,0], "i8", ALLOC_NORMAL);
__str44239=allocate([103,45,62,103,99,46,103,99,95,114,101,102,115,32,33,61,32,95,80,121,71,67,95,82,69,70,83,95,85,78,84,82,65,67,75,69,68,0,0,0], "i8", ALLOC_NORMAL);
__str4423=allocate([95,105,111,46,73,110,99,114,101,109,101,110,116,97,108,78,101,119,108,105,110,101,68,101,99,111,100,101,114,0,0,0], "i8", ALLOC_NORMAL);
__str44180=allocate([115,42,0,0], "i8", ALLOC_NORMAL);
__str44115=allocate([105,110,118,97,108,105,100,32,119,104,101,110,99,101,32,40,37,105,44,32,115,104,111,117,108,100,32,98,101,32,48,44,32,49,32,111,114,32,50,41,0,0,0,0], "i8", ALLOC_NORMAL);
__str44=allocate([124,110,58,112,101,101,107,0], "i8", ALLOC_NORMAL);
__str4366=allocate([110,101,119,108,105,110,101,0], "i8", ALLOC_NORMAL);
__str43466=allocate([102,108,117,115,104,0,0,0], "i8", ALLOC_NORMAL);
__str43406=allocate([78,101,103,97,116,105,118,101,32,115,101,101,107,32,112,111,115,105,116,105,111,110,32,37,122,100,0,0], "i8", ALLOC_NORMAL);
__str43319=allocate([116,114,117,110,99,97,116,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str43238=allocate([105,105,0,0], "i8", ALLOC_NORMAL);
__str43179=allocate([79,124,105,0], "i8", ALLOC_NORMAL);
__str43114=allocate([110,101,119,32,112,111,115,105,116,105,111,110,32,116,111,111,32,108,97,114,103,101,0,0], "i8", ALLOC_NORMAL);
__str43=allocate([105,115,110,0], "i8", ALLOC_NORMAL);
__str4256=allocate([95,105,111,0], "i8", ALLOC_NORMAL);
__str42465=allocate([114,101,97,100,108,105,110,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str42405=allocate([73,110,118,97,108,105,100,32,119,104,101,110,99,101,32,40,37,105,44,32,115,104,111,117,108,100,32,98,101,32,48,44,32,49,32,111,114,32,50,41,0,0,0,0], "i8", ALLOC_NORMAL);
__str42316=allocate([116,101,108,108,0,0,0,0], "i8", ALLOC_NORMAL);
__str42237=allocate([80,121,66,121,116,101,65,114,114,97,121,95,67,104,101,99,107,40,98,117,102,102,101,114,41,0,0,0], "i8", ALLOC_NORMAL);
__str42178=allocate([70,105,108,101,32,110,111,116,32,111,112,101,110,32,102,111,114,32,37,115,0,0,0,0], "i8", ALLOC_NORMAL);
__str42113=allocate([110,101,103,97,116,105,118,101,32,115,101,101,107,32,118,97,108,117,101,32,37,122,100,0], "i8", ALLOC_NORMAL);
__str42=allocate([114,97,119,32,119,114,105,116,101,40,41,32,114,101,116,117,114,110,101,100,32,105,110,118,97,108,105,100,32,108,101,110,103,116,104,32,37,122,100,32,40,115,104,111,117,108,100,32,104,97,118,101,32,98,101,101,110,32,98,101,116,119,101,101,110,32,48,32,97,110,100,32,37,122,100,41,0,0,0,0], "i8", ALLOC_NORMAL);
__str4195=allocate([95,105,111,46,95,73,79,66,97,115,101,0], "i8", ALLOC_NORMAL);
__str417=allocate([95,105,111,46,95,84,101,120,116,73,79,66,97,115,101,0], "i8", ALLOC_NORMAL);
__str41464=allocate([114,101,97,100,0,0,0,0], "i8", ALLOC_NORMAL);
__str41404=allocate([79,124,105,58,115,101,101,107,0,0,0,0], "i8", ALLOC_NORMAL);
__str41315=allocate([115,101,116,115,116,97,116,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str4129=allocate([109,111,100,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str41236=allocate([46,46,47,77,111,100,117,108,101,115,47,95,105,111,47,105,111,98,97,115,101,46,99,0], "i8", ALLOC_NORMAL);
__str41177=allocate([124,79,0,0], "i8", ALLOC_NORMAL);
__str41112=allocate([79,124,105,58,115,101,101,107,0,0,0,0], "i8", ALLOC_NORMAL);
__str41=allocate([119,114,105,116,101,32,99,111,117,108,100,32,110,111,116,32,99,111,109,112,108,101,116,101,32,119,105,116,104,111,117,116,32,98,108,111,99,107,105,110,103,0,0,0], "i8", ALLOC_NORMAL);
__str40463=allocate([119,114,105,116,101,0,0,0], "i8", ALLOC_NORMAL);
__str40403=allocate([117,110,105,99,111,100,101,32,97,114,103,117,109,101,110,116,32,101,120,112,101,99,116,101,100,44,32,103,111,116,32,39,37,115,39,0], "i8", ALLOC_NORMAL);
__str40312=allocate([115,101,101,107,97,98,108,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str40235=allocate([114,101,97,100,40,41,32,115,104,111,117,108,100,32,104,97,118,101,32,114,101,116,117,114,110,101,100,32,97,32,98,121,116,101,115,32,111,98,106,101,99,116,44,32,110,111,116,32,39,37,46,50,48,48,115,39,0,0,0,0], "i8", ALLOC_NORMAL);
__str40176=allocate([119,114,105,116,105,110,103,0], "i8", ALLOC_NORMAL);
__str40111=allocate([110,101,103,97,116,105,118,101,32,115,105,122,101,32,118,97,108,117,101,32,37,122,100,0], "i8", ALLOC_NORMAL);
__str40=allocate([86,65,76,73,68,95,87,82,73,84,69,95,66,85,70,70,69,82,40,115,101,108,102,41,0,0,0,0], "i8", ALLOC_NORMAL);
__str4=allocate([95,105,111,46,66,117,102,102,101,114,101,100,82,101,97,100,101,114,0,0], "i8", ALLOC_NORMAL);
__str39462=allocate([100,101,116,97,99,104,0,0], "i8", ALLOC_NORMAL);
__str39402=allocate([40,79,79,110,78,41,0,0], "i8", ALLOC_NORMAL);
__str39309=allocate([115,101,101,107,0,0,0,0], "i8", ALLOC_NORMAL);
__str39234=allocate([110,0,0,0], "i8", ALLOC_NORMAL);
__str39175=allocate([79,0,0,0], "i8", ALLOC_NORMAL);
__str39110=allocate([105,110,116,101,103,101,114,32,97,114,103,117,109,101,110,116,32,101,120,112,101,99,116,101,100,44,32,103,111,116,32,39,37,115,39,0], "i8", ALLOC_NORMAL);
__str39=allocate([119,114,105,116,101,32,116,111,32,99,108,111,115,101,100,32,102,105,108,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str38461=allocate([97,32,115,116,114,105,99,116,108,121,32,112,111,115,105,116,105,118,101,32,105,110,116,101,103,101,114,32,105,115,32,114,101,113,117,105,114,101,100,0], "i8", ALLOC_NORMAL);
__str38401=allocate([102,111,117,114,116,104,32,105,116,101,109,32,111,102,32,115,116,97,116,101,32,115,104,111,117,108,100,32,98,101,32,97,32,100,105,99,116,44,32,103,111,116,32,97,32,37,46,50,48,48,115,0], "i8", ALLOC_NORMAL);
__str38308=allocate([114,101,115,101,116,0,0,0], "i8", ALLOC_NORMAL);
__str38233=allocate([112,101,101,107,40,41,32,115,104,111,117,108,100,32,104,97,118,101,32,114,101,116,117,114,110,101,100,32,97,32,98,121,116,101,115,32,111,98,106,101,99,116,44,32,110,111,116,32,39,37,46,50,48,48,115,39,0,0,0,0], "i8", ALLOC_NORMAL);
__str38174=allocate([73,47,79,32,111,112,101,114,97,116,105,111,110,32,111,110,32,99,108,111,115,101,100,32,102,105,108,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str38109=allocate([124,79,58,116,114,117,110,99,97,116,101,0], "i8", ALLOC_NORMAL);
__str38=allocate([115,42,58,119,114,105,116,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str37460=allocate([73,47,79,32,111,112,101,114,97,116,105,111,110,32,111,110,32,117,110,105,110,105,116,105,97,108,105,122,101,100,32,111,98,106,101,99,116,0,0,0], "i8", ALLOC_NORMAL);
__str37400=allocate([112,111,115,105,116,105,111,110,32,118,97,108,117,101,32,99,97,110,110,111,116,32,98,101,32,110,101,103,97,116,105,118,101,0,0,0], "i8", ALLOC_NORMAL);
__str374=allocate([105,110,105,116,105,97,108,95,98,121,116,101,115,0,0,0], "i8", ALLOC_NORMAL);
__str37305=allocate([114,101,97,100,108,105,110,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str37232=allocate([112,101,101,107,0,0,0,0], "i8", ALLOC_NORMAL);
__str37172=allocate([105,115,97,116,116,121,0,0], "i8", ALLOC_NORMAL);
__str37108=allocate([40,79,110,78,41,0,0,0], "i8", ALLOC_NORMAL);
__str37=allocate([95,95,115,105,122,101,111,102,95,95,0,0], "i8", ALLOC_NORMAL);
__str36459=allocate([117,110,100,101,114,108,121,105,110,103,32,98,117,102,102,101,114,32,104,97,115,32,98,101,101,110,32,100,101,116,97,99,104,101,100,0], "i8", ALLOC_NORMAL);
__str36399=allocate([116,104,105,114,100,32,105,116,101,109,32,111,102,32,115,116,97,116,101,32,109,117,115,116,32,98,101,32,97,110,32,105,110,116,101,103,101,114,44,32,103,111,116,32,37,46,50,48,48,115,0,0], "i8", ALLOC_NORMAL);
__str36302=allocate([114,101,97,100,105,110,116,111,0,0,0,0], "i8", ALLOC_NORMAL);
__str36231=allocate([124,79,38,58,114,101,97,100,108,105,110,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str36171=allocate([102,105,108,101,110,111,0,0], "i8", ALLOC_NORMAL);
__str36107=allocate([116,104,105,114,100,32,105,116,101,109,32,111,102,32,115,116,97,116,101,32,115,104,111,117,108,100,32,98,101,32,97,32,100,105,99,116,44,32,103,111,116,32,97,32,37,46,50,48,48,115,0,0], "i8", ALLOC_NORMAL);
__str360=allocate([95,105,111,46,83,116,114,105,110,103,73,79,0,0,0,0], "i8", ALLOC_NORMAL);
__str36=allocate([119,114,105,116,101,0,0,0], "i8", ALLOC_NORMAL);
__str35458=allocate([95,67,72,85,78,75,95,83,73,90,69,0], "i8", ALLOC_NORMAL);
__str35398=allocate([37,46,50,48,48,115,46,95,95,115,101,116,115,116,97,116,101,95,95,32,97,114,103,117,109,101,110,116,32,115,104,111,117,108,100,32,98,101,32,52,45,116,117,112,108,101,44,32,103,111,116,32,37,46,50,48,48,115,0,0], "i8", ALLOC_NORMAL);
__str35299=allocate([114,101,97,100,97,98,108,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str35230=allocate([79,0,0,0], "i8", ALLOC_NORMAL);
__str35169=allocate([119,114,105,116,97,98,108,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str35106=allocate([112,111,115,105,116,105,111,110,32,118,97,108,117,101,32,99,97,110,110,111,116,32,98,101,32,110,101,103,97,116,105,118,101,0,0,0], "i8", ALLOC_NORMAL);
__str35=allocate([112,101,101,107,0,0,0,0], "i8", ALLOC_NORMAL);
__str34457=allocate([110,101,119,108,105,110,101,115,0,0,0,0], "i8", ALLOC_NORMAL);
__str34397=allocate([115,116,97,116,101,32,33,61,32,78,85,76,76,0,0,0], "i8", ALLOC_NORMAL);
__str34298=allocate([114,101,97,100,49,0,0,0], "i8", ALLOC_NORMAL);
__str34229=allocate([101,120,116,101,110,100,0,0], "i8", ALLOC_NORMAL);
__str3422=allocate([80,121,95,82,69,70,67,78,84,40,116,114,97,110,115,108,97,116,101,100,41,32,61,61,32,49,0,0], "i8", ALLOC_NORMAL);
__str34167=allocate([114,101,97,100,97,98,108,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str34105=allocate([115,101,99,111,110,100,32,105,116,101,109,32,111,102,32,115,116,97,116,101,32,109,117,115,116,32,98,101,32,97,110,32,105,110,116,101,103,101,114,44,32,110,111,116,32,37,46,50,48,48,115,0], "i8", ALLOC_NORMAL);
__str34=allocate([114,101,97,100,108,105,110,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str3365=allocate([105,110,105,116,105,97,108,95,118,97,108,117,101,0,0,0], "i8", ALLOC_NORMAL);
__str33456=allocate([99,108,111,115,101,100,0,0], "i8", ALLOC_NORMAL);
__str33396=allocate([95,95,115,101,116,115,116,97,116,101,95,95,0,0,0,0], "i8", ALLOC_NORMAL);
__str33295=allocate([114,101,97,100,0,0,0,0], "i8", ALLOC_NORMAL);
__str33228=allocate([124,79,38,58,114,101,97,100,108,105,110,101,115,0,0,0], "i8", ALLOC_NORMAL);
__str33165=allocate([115,101,101,107,97,98,108,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str33104=allocate([37,46,50,48,48,115,46,95,95,115,101,116,115,116,97,116,101,95,95,32,97,114,103,117,109,101,110,116,32,115,104,111,117,108,100,32,98,101,32,51,45,116,117,112,108,101,44,32,103,111,116,32,37,46,50,48,48,115,0,0], "i8", ALLOC_NORMAL);
__str33=allocate([114,101,97,100,105,110,116,111,0,0,0,0], "i8", ALLOC_NORMAL);
__str3253=allocate([105,110,116,101,103,101,114,32,97,114,103,117,109,101,110,116,32,101,120,112,101,99,116,101,100,44,32,103,111,116,32,39,37,46,50,48,48,115,39,0], "i8", ALLOC_NORMAL);
__str32455=allocate([117,116,102,45,51,50,0,0], "i8", ALLOC_NORMAL);
__str32395=allocate([95,95,103,101,116,115,116,97,116,101,95,95,0,0,0,0], "i8", ALLOC_NORMAL);
__str32294=allocate([10,0,0,0], "i8", ALLOC_NORMAL);
__str32227=allocate([79,58,119,114,105,116,101,108,105,110,101,115,0,0,0,0], "i8", ALLOC_NORMAL);
__str32163=allocate([99,108,111,115,101,0,0,0], "i8", ALLOC_NORMAL);
__str32103=allocate([115,116,97,116,101,32,33,61,32,78,85,76,76,0,0,0], "i8", ALLOC_NORMAL);
__str32=allocate([114,101,97,100,49,0,0,0], "i8", ALLOC_NORMAL);
__str3194=allocate([70,105,108,101,32,111,114,32,115,116,114,101,97,109,32,105,115,32,110,111,116,32,119,114,105,116,97,98,108,101,46,0], "i8", ALLOC_NORMAL);
__str31454=allocate([117,116,102,45,51,50,45,108,101,0,0,0], "i8", ALLOC_NORMAL);
__str31394=allocate([119,114,105,116,97,98,108,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str31293=allocate([110,101,119,108,105,110,101,115,0,0,0,0], "i8", ALLOC_NORMAL);
__str3128=allocate([102,105,108,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str31226=allocate([119,114,105,116,101,108,105,110,101,115,0,0], "i8", ALLOC_NORMAL);
__str31161=allocate([116,114,117,110,99,97,116,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str31102=allocate([95,95,115,105,122,101,111,102,95,95,0,0], "i8", ALLOC_NORMAL);
__str31=allocate([114,101,97,100,0,0,0,0], "i8", ALLOC_NORMAL);
__str30453=allocate([117,116,102,45,51,50,45,98,101,0,0,0], "i8", ALLOC_NORMAL);
__str30393=allocate([114,101,97,100,97,98,108,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str30290=allocate([105,115,97,116,116,121,0,0], "i8", ALLOC_NORMAL);
__str30225=allocate([114,101,97,100,108,105,110,101,115,0,0,0], "i8", ALLOC_NORMAL);
__str30159=allocate([116,101,108,108,0,0,0,0], "i8", ALLOC_NORMAL);
__str30101=allocate([95,95,115,101,116,115,116,97,116,101,95,95,0,0,0,0], "i8", ALLOC_NORMAL);
__str30=allocate([116,114,117,110,99,97,116,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str3=allocate([101,110,118,95,101,114,114,32,33,61,32,78,85,76,76,0], "i8", ALLOC_NORMAL);
__str29452=allocate([117,116,102,45,49,54,0,0], "i8", ALLOC_NORMAL);
__str29392=allocate([115,101,101,107,97,98,108,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str29289=allocate([103,101,116,115,116,97,116,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str29224=allocate([114,101,97,100,108,105,110,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str29157=allocate([115,101,101,107,0,0,0,0], "i8", ALLOC_NORMAL);
__str29100=allocate([95,95,103,101,116,115,116,97,116,101,95,95,0,0,0,0], "i8", ALLOC_NORMAL);
__str29=allocate([116,101,108,108,0,0,0,0], "i8", ALLOC_NORMAL);
__str2899=allocate([116,114,117,110,99,97,116,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str28451=allocate([117,116,102,45,49,54,45,108,101,0,0,0], "i8", ALLOC_NORMAL);
__str28391=allocate([119,114,105,116,101,0,0,0], "i8", ALLOC_NORMAL);
__str28286=allocate([102,108,117,115,104,0,0,0], "i8", ALLOC_NORMAL);
__str28223=allocate([95,95,101,120,105,116,95,95,0,0,0,0], "i8", ALLOC_NORMAL);
__str28155=allocate([119,114,105,116,101,0,0,0], "i8", ALLOC_NORMAL);
__str28=allocate([115,101,101,107,0,0,0,0], "i8", ALLOC_NORMAL);
__str2798=allocate([115,101,101,107,0,0,0,0], "i8", ALLOC_NORMAL);
__str27450=allocate([117,116,102,45,49,54,45,98,101,0,0,0], "i8", ALLOC_NORMAL);
__str27390=allocate([115,101,101,107,0,0,0,0], "i8", ALLOC_NORMAL);
__str273=allocate([116,121,112,101,32,33,61,32,78,85,76,76,32,38,38,32,116,121,112,101,45,62,116,112,95,97,108,108,111,99,32,33,61,32,78,85,76,76,0,0], "i8", ALLOC_NORMAL);
__str27283=allocate([102,105,108,101,110,111,0,0], "i8", ALLOC_NORMAL);
__str27222=allocate([95,95,101,110,116,101,114,95,95,0,0,0], "i8", ALLOC_NORMAL);
__str27153=allocate([114,101,97,100,105,110,116,111,0,0,0,0], "i8", ALLOC_NORMAL);
__str27=allocate([102,108,117,115,104,0,0,0], "i8", ALLOC_NORMAL);
__str2697=allocate([103,101,116,118,97,108,117,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str26449=allocate([117,116,102,45,56,0,0,0], "i8", ALLOC_NORMAL);
__str26389=allocate([116,114,117,110,99,97,116,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str26282=allocate([101,110,99,111,100,101,0,0], "i8", ALLOC_NORMAL);
__str26221=allocate([105,115,97,116,116,121,0,0], "i8", ALLOC_NORMAL);
__str26152=allocate([114,101,97,100,97,108,108,0], "i8", ALLOC_NORMAL);
__str26=allocate([105,115,97,116,116,121,0,0], "i8", ALLOC_NORMAL);
__str2596=allocate([114,101,97,100,0,0,0,0], "i8", ALLOC_NORMAL);
__str25448=allocate([105,115,111,56,56,53,57,45,49,0,0,0], "i8", ALLOC_NORMAL);
__str25388=allocate([116,101,108,108,0,0,0,0], "i8", ALLOC_NORMAL);
__str25281=allocate([100,101,99,111,100,101,0,0], "i8", ALLOC_NORMAL);
__str25220=allocate([102,105,108,101,110,111,0,0], "i8", ALLOC_NORMAL);
__str25150=allocate([114,101,97,100,0,0,0,0], "i8", ALLOC_NORMAL);
__str250=allocate([46,46,47,77,111,100,117,108,101,115,47,95,105,111,47,95,105,111,109,111,100,117,108,101,46,99,0,0], "i8", ALLOC_NORMAL);
__str25=allocate([102,105,108,101,110,111,0,0], "i8", ALLOC_NORMAL);
__str2495=allocate([114,101,97,100,108,105,110,101,115,0,0,0], "i8", ALLOC_NORMAL);
__str24447=allocate([115,101,101,107,97,98,108,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str24387=allocate([114,101,97,100,108,105,110,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str24278=allocate([99,108,111,115,101,100,0,0], "i8", ALLOC_NORMAL);
__str24219=allocate([95,99,104,101,99,107,87,114,105,116,97,98,108,101,0,0], "i8", ALLOC_NORMAL);
__str2421=allocate([46,46,47,77,111,100,117,108,101,115,47,95,105,111,47,116,101,120,116,105,111,46,99,0], "i8", ALLOC_NORMAL);
__str24149=allocate([119,98,0,0], "i8", ALLOC_NORMAL);
__str24=allocate([119,114,105,116,97,98,108,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str2394=allocate([114,101,97,100,108,105,110,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str2364=allocate([116,121,112,101,32,33,61,32,78,85,76,76,32,38,38,32,116,121,112,101,45,62,116,112,95,97,108,108,111,99,32,33,61,32,78,85,76,76,0,0], "i8", ALLOC_NORMAL);
__str23446=allocate([114,97,119,0], "i8", ALLOC_NORMAL);
__str23386=allocate([114,101,97,100,0,0,0,0], "i8", ALLOC_NORMAL);
__str23275=allocate([99,108,111,115,101,0,0,0], "i8", ALLOC_NORMAL);
__str23218=allocate([95,99,104,101,99,107,82,101,97,100,97,98,108,101,0,0], "i8", ALLOC_NORMAL);
__str23148=allocate([114,98,0,0], "i8", ALLOC_NORMAL);
__str23=allocate([114,101,97,100,97,98,108,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str2293=allocate([114,101,97,100,105,110,116,111,0,0,0,0], "i8", ALLOC_NORMAL);
__str2252=allocate([99,97,110,110,111,116,32,102,105,116,32,39,37,46,50,48,48,115,39,32,105,110,116,111,32,97,110,32,111,102,102,115,101,116,45,115,105,122,101,100,32,105,110,116,101,103,101,114,0,0,0,0], "i8", ALLOC_NORMAL);
__str22445=allocate([110,97,109,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str22385=allocate([103,101,116,118,97,108,117,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str22274=allocate([73,110,99,114,101,109,101,110,116,97,108,78,101,119,108,105,110,101,68,101,99,111,100,101,114,0,0,0], "i8", ALLOC_NORMAL);
__str22217=allocate([95,99,104,101,99,107,83,101,101,107,97,98,108,101,0,0], "i8", ALLOC_NORMAL);
__str22147=allocate([114,98,43,0], "i8", ALLOC_NORMAL);
__str22=allocate([115,101,101,107,97,98,108,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str2193=allocate([70,105,108,101,32,111,114,32,115,116,114,101,97,109,32,105,115,32,110,111,116,32,114,101,97,100,97,98,108,101,46,0], "i8", ALLOC_NORMAL);
__str2192=allocate([114,101,97,100,49,0,0,0], "i8", ALLOC_NORMAL);
__str21444=allocate([119,114,105,116,97,98,108,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str21384=allocate([99,108,111,115,101,0,0,0], "i8", ALLOC_NORMAL);
__str21273=allocate([84,101,120,116,73,79,87,114,97,112,112,101,114,0,0,0], "i8", ALLOC_NORMAL);
__str2127=allocate([116,121,112,101,32,33,61,32,78,85,76,76,32,38,38,32,116,121,112,101,45,62,116,112,95,97,108,108,111,99,32,33,61,32,78,85,76,76,0,0], "i8", ALLOC_NORMAL);
__str21216=allocate([95,99,104,101,99,107,67,108,111,115,101,100,0,0,0,0], "i8", ALLOC_NORMAL);
__str21146=allocate([83,116,114,105,110,103,32,103,105,118,105,110,103,32,116,104,101,32,102,105,108,101,32,109,111,100,101,0], "i8", ALLOC_NORMAL);
__str21=allocate([100,101,116,97,99,104,0,0], "i8", ALLOC_NORMAL);
__str2091=allocate([119,114,105,116,101,108,105,110,101,115,0,0], "i8", ALLOC_NORMAL);
__str20443=allocate([79,105,0,0], "i8", ALLOC_NORMAL);
__str20383=allocate([73,47,79,32,111,112,101,114,97,116,105,111,110,32,111,110,32,99,108,111,115,101,100,32,102,105,108,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str20272=allocate([66,117,102,102,101,114,101,100,82,97,110,100,111,109,0,0], "i8", ALLOC_NORMAL);
__str20215=allocate([119,114,105,116,97,98,108,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str20145=allocate([84,114,117,101,32,105,102,32,116,104,101,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,119,105,108,108,32,98,101,32,99,108,111,115,101,100,0,0], "i8", ALLOC_NORMAL);
__str20=allocate([99,108,111,115,101,0,0,0], "i8", ALLOC_NORMAL);
__str2=allocate([101,105,110,116,114,95,105,110,116,32,33,61,32,78,85,76,76,0,0,0], "i8", ALLOC_NORMAL);
__str1990=allocate([119,114,105,116,101,0,0,0], "i8", ALLOC_NORMAL);
__str19442=allocate([114,101,97,100,97,98,108,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str19382=allocate([73,47,79,32,111,112,101,114,97,116,105,111,110,32,111,110,32,117,110,105,110,105,116,105,97,108,105,122,101,100,32,111,98,106,101,99,116,0,0,0], "i8", ALLOC_NORMAL);
__str19271=allocate([66,117,102,102,101,114,101,100,82,87,80,97,105,114,0,0], "i8", ALLOC_NORMAL);
__str19214=allocate([114,101,97,100,97,98,108,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str19144=allocate([84,114,117,101,32,105,102,32,116,104,101,32,102,105,108,101,32,105,115,32,99,108,111,115,101,100,0,0], "i8", ALLOC_NORMAL);
__str191=allocate([73,47,79,32,111,112,101,114,97,116,105,111,110,32,111,110,32,99,108,111,115,101,100,32,102,105,108,101,46,0,0,0], "i8", ALLOC_NORMAL);
__str19=allocate([73,47,79,32,111,112,101,114,97,116,105,111,110,32,111,110,32,117,110,105,110,105,116,105,97,108,105,122,101,100,32,111,98,106,101,99,116,0,0,0], "i8", ALLOC_NORMAL);
__str1889=allocate([116,101,108,108,0,0,0,0], "i8", ALLOC_NORMAL);
__str18441=allocate([10,0,0,0], "i8", ALLOC_NORMAL);
__str18381=allocate([108,105,110,101,95,98,117,102,102,101,114,105,110,103,0,0], "i8", ALLOC_NORMAL);
__str18270=allocate([66,117,102,102,101,114,101,100,87,114,105,116,101,114,0,0], "i8", ALLOC_NORMAL);
__str18213=allocate([115,101,101,107,97,98,108,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str18143=allocate([99,108,111,115,101,100,0,0], "i8", ALLOC_NORMAL);
__str18=allocate([114,97,119,32,115,116,114,101,97,109,32,104,97,115,32,98,101,101,110,32,100,101,116,97,99,104,101,100,0,0,0,0], "i8", ALLOC_NORMAL);
__str1788=allocate([105,115,97,116,116,121,0,0], "i8", ALLOC_NORMAL);
__str17440=allocate([115,116,114,105,99,116,0,0], "i8", ALLOC_NORMAL);
__str17380=allocate([110,101,119,108,105,110,101,115,0,0,0,0], "i8", ALLOC_NORMAL);
__str17269=allocate([66,117,102,102,101,114,101,100,82,101,97,100,101,114,0,0], "i8", ALLOC_NORMAL);
__str17212=allocate([99,108,111,115,101,0,0,0], "i8", ALLOC_NORMAL);
__str172=allocate([46,46,47,77,111,100,117,108,101,115,47,95,105,111,47,98,121,116,101,115,105,111,46,99,0,0,0,0], "i8", ALLOC_NORMAL);
__str17142=allocate([40,105,115,41,0,0,0,0], "i8", ALLOC_NORMAL);
__str17=allocate([109,111,100,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str1687=allocate([102,108,117,115,104,0,0,0], "i8", ALLOC_NORMAL);
__str16439=allocate([99,111,117,108,100,32,110,111,116,32,100,101,116,101,114,109,105,110,101,32,100,101,102,97,117,108,116,32,101,110,99,111,100,105,110,103,0,0,0,0], "i8", ALLOC_NORMAL);
__str16379=allocate([99,108,111,115,101,100,0,0], "i8", ALLOC_NORMAL);
__str16268=allocate([83,116,114,105,110,103,73,79,0,0,0,0], "i8", ALLOC_NORMAL);
__str16211=allocate([102,108,117,115,104,0,0,0], "i8", ALLOC_NORMAL);
__str16141=allocate([97,110,32,105,110,116,101,103,101,114,32,105,115,32,114,101,113,117,105,114,101,100,0,0], "i8", ALLOC_NORMAL);
__str16=allocate([110,97,109,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str1586=allocate([99,108,111,115,101,0,0,0], "i8", ALLOC_NORMAL);
__str15438=allocate([97,115,99,105,105,0,0,0], "i8", ALLOC_NORMAL);
__str15378=allocate([110,101,119,32,98,117,102,102,101,114,32,115,105,122,101,32,116,111,111,32,108,97,114,103,101,0,0,0], "i8", ALLOC_NORMAL);
__str15267=allocate([66,121,116,101,115,73,79,0], "i8", ALLOC_NORMAL);
__str15210=allocate([116,114,117,110,99,97,116,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str15140=allocate([110,97,109,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str15=allocate([99,108,111,115,101,100,0,0], "i8", ALLOC_NORMAL);
__str1485=allocate([119,114,105,116,97,98,108,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str14437=allocate([103,101,116,112,114,101,102,101,114,114,101,100,101,110,99,111,100,105,110,103,0,0,0,0], "i8", ALLOC_NORMAL);
__str14376=allocate([110,101,119,32,112,111,115,105,116,105,111,110,32,116,111,111,32,108,97,114,103,101,0,0], "i8", ALLOC_NORMAL);
__str14266=allocate([70,105,108,101,73,79,0,0], "i8", ALLOC_NORMAL);
__str14209=allocate([116,101,108,108,0,0,0,0], "i8", ALLOC_NORMAL);
__str1420=allocate([73,110,99,114,101,109,101,110,116,97,108,78,101,119,108,105,110,101,68,101,99,111,100,101,114,46,95,95,105,110,105,116,95,95,32,110,111,116,32,99,97,108,108,101,100,0,0,0], "i8", ALLOC_NORMAL);
__str14139=allocate([67,97,110,110,111,116,32,117,115,101,32,99,108,111,115,101,102,100,61,70,97,108,115,101,32,119,105,116,104,32,102,105,108,101,32,110,97,109,101,0], "i8", ALLOC_NORMAL);
__str14=allocate([109,97,120,95,98,117,102,102,101,114,95,115,105,122,101,32,105,115,32,100,101,112,114,101,99,97,116,101,100,0,0,0], "i8", ALLOC_NORMAL);
__str1384=allocate([115,101,101,107,97,98,108,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str1363=allocate([46,46,47,77,111,100,117,108,101,115,47,95,105,111,47,115,116,114,105,110,103,105,111,46,99,0,0,0], "i8", ALLOC_NORMAL);
__str13436=allocate([108,111,99,97,108,101,0,0], "i8", ALLOC_NORMAL);
__str13375=allocate([108,101,110,32,62,61,32,48,0,0,0,0], "i8", ALLOC_NORMAL);
__str13265=allocate([95,84,101,120,116,73,79,66,97,115,101,0], "i8", ALLOC_NORMAL);
__str13208=allocate([115,101,101,107,0,0,0,0], "i8", ALLOC_NORMAL);
__str13138=allocate([105,110,118,97,108,105,100,32,109,111,100,101,58,32,37,46,50,48,48,115,0,0,0,0], "i8", ALLOC_NORMAL);
__str13=allocate([82,97,119,32,115,116,114,101,97,109,32,114,101,116,117,114,110,101,100,32,105,110,118,97,108,105,100,32,112,111,115,105,116,105,111,110,32,37,122,100,0,0,0,0], "i8", ALLOC_NORMAL);
__str1283=allocate([114,101,97,100,97,98,108,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str1251=allocate([80,121,76,111,110,103,95,67,104,101,99,107,40,118,97,108,117,101,41,0], "i8", ALLOC_NORMAL);
__str12435=allocate([105,108,108,101,103,97,108,32,110,101,119,108,105,110,101,32,118,97,108,117,101,58,32,37,115,0,0,0], "i8", ALLOC_NORMAL);
__str12374=allocate([80,121,85,110,105,99,111,100,101,95,67,104,101,99,107,40,100,101,99,111,100,101,100,41,0,0,0,0], "i8", ALLOC_NORMAL);
__str123=allocate([95,105,111,46,70,105,108,101,73,79,0,0], "i8", ALLOC_NORMAL);
__str12264=allocate([95,66,117,102,102,101,114,101,100,73,79,66,97,115,101,0], "i8", ALLOC_NORMAL);
__str12207=allocate([95,95,73,79,66,97,115,101,95,99,108,111,115,101,100,0], "i8", ALLOC_NORMAL);
__str12137=allocate([77,117,115,116,32,104,97,118,101,32,101,120,97,99,116,108,121,32,111,110,101,32,111,102,32,114,101,97,100,47,119,114,105,116,101,47,97,112,112,101,110,100,32,109,111,100,101,32,97,110,100,32,97,116,32,109,111,115,116,32,111,110,101,32,112,108,117,115,0,0,0,0], "i8", ALLOC_NORMAL);
__str12=allocate([98,117,102,102,101,114,32,115,105,122,101,32,109,117,115,116,32,98,101,32,115,116,114,105,99,116,108,121,32,112,111,115,105,116,105,118,101,0,0,0], "i8", ALLOC_NORMAL);
__str1192=allocate([70,105,108,101,32,111,114,32,115,116,114,101,97,109,32,105,115,32,110,111,116,32,115,101,101,107,97,98,108,101,46,0], "i8", ALLOC_NORMAL);
__str1182=allocate([84,114,117,101,32,105,102,32,116,104,101,32,102,105,108,101,32,105,115,32,99,108,111,115,101,100,46,0], "i8", ALLOC_NORMAL);
__str11434=allocate([79,124,122,122,122,105,58,102,105,108,101,105,111,0,0,0], "i8", ALLOC_NORMAL);
__str11373=allocate([115,101,108,102,45,62,112,111,115,32,62,61,32,48,0,0], "i8", ALLOC_NORMAL);
__str11263=allocate([95,82,97,119,73,79,66,97,115,101,0,0], "i8", ALLOC_NORMAL);
__str1126=allocate([46,46,47,77,111,100,117,108,101,115,47,95,105,111,47,102,105,108,101,105,111,46,99,0], "i8", ALLOC_NORMAL);
__str11206=allocate([99,108,111,115,101,100,0,0], "i8", ALLOC_NORMAL);
__str11136=allocate([101,110,99,111,100,101,114,32,102,97,105,108,101,100,32,116,111,32,114,101,116,117,114,110,32,98,121,116,101,115,0,0], "i8", ALLOC_NORMAL);
__str11=allocate([79,124,110,110,58,66,117,102,102,101,114,101,100,82,97,110,100,111,109,0], "i8", ALLOC_NORMAL);
__str109=allocate([100,101,99,111,100,101,114,32,115,104,111,117,108,100,32,114,101,116,117,114,110,32,97,32,115,116,114,105,110,103,32,114,101,115,117,108,116,44,32,110,111,116,32,39,37,46,50,48,48,115,39,0], "i8", ALLOC_NORMAL);
__str1081=allocate([99,108,111,115,101,100,0,0], "i8", ALLOC_NORMAL);
__str108=allocate([79,124,105,58,73,110,99,114,101,109,101,110,116,97,108,78,101,119,108,105,110,101,68,101,99,111,100,101,114,0,0,0], "i8", ALLOC_NORMAL);
__str107=allocate([102,105,110,97,108,0,0,0], "i8", ALLOC_NORMAL);
__str106=allocate([105,110,112,117,116,0,0,0], "i8", ALLOC_NORMAL);
__str105=allocate([78,75,0,0], "i8", ALLOC_NORMAL);
__str10433=allocate([108,105,110,101,95,98,117,102,102,101,114,105,110,103,0,0], "i8", ALLOC_NORMAL);
__str104=allocate([40,40,79,75,41,41,0,0], "i8", ALLOC_NORMAL);
__str10372=allocate([115,101,108,102,45,62,98,117,102,32,33,61,32,78,85,76,76,0,0,0], "i8", ALLOC_NORMAL);
__str103=allocate([40,79,75,41,0,0,0,0], "i8", ALLOC_NORMAL);
__str10262=allocate([95,73,79,66,97,115,101,0], "i8", ALLOC_NORMAL);
__str10205=allocate([124,110,58,114,101,97,100,0], "i8", ALLOC_NORMAL);
__str102=allocate([103,101,116,115,116,97,116,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str10135=allocate([78,101,103,97,116,105,118,101,32,102,105,108,101,100,101,115,99,114,105,112,116,111,114,0], "i8", ALLOC_NORMAL);
__str101=allocate([115,115,115,0], "i8", ALLOC_NORMAL);
__str100=allocate([13,10,0,0], "i8", ALLOC_NORMAL);
__str10=allocate([109,97,120,95,98,117,102,102,101,114,95,115,105,122,101,0], "i8", ALLOC_NORMAL);
__str1=allocate([46,46,47,77,111,100,117,108,101,115,47,95,105,111,47,98,117,102,102,101,114,101,100,105,111,46,99,0], "i8", ALLOC_NORMAL);
__str=allocate([95,105,111,46,95,66,117,102,102,101,114,101,100,73,79,66,97,115,101,0], "i8", ALLOC_NORMAL);
___func___write_str=allocate([119,114,105,116,101,95,115,116,114,0,0,0], "i8", ALLOC_NORMAL);
___func___write_bytes=allocate([119,114,105,116,101,95,98,121,116,101,115,0], "i8", ALLOC_NORMAL);
___func___textiowrapper_tell=allocate([116,101,120,116,105,111,119,114,97,112,112,101,114,95,116,101,108,108,0,0], "i8", ALLOC_NORMAL);
___func___textiowrapper_get_decoded_chars=allocate([116,101,120,116,105,111,119,114,97,112,112,101,114,95,103,101,116,95,100,101,99,111,100,101,100,95,99,104,97,114,115,0], "i8", ALLOC_NORMAL);
___func___textiowrapper_dealloc=allocate([116,101,120,116,105,111,119,114,97,112,112,101,114,95,100,101,97,108,108,111,99,0,0,0], "i8", ALLOC_NORMAL);
___func___stringio_setstate=allocate([115,116,114,105,110,103,105,111,95,115,101,116,115,116,97,116,101,0,0,0], "i8", ALLOC_NORMAL);
___func___stringio_new=allocate([115,116,114,105,110,103,105,111,95,110,101,119,0,0,0,0], "i8", ALLOC_NORMAL);
___func___stringio_dealloc=allocate([115,116,114,105,110,103,105,111,95,100,101,97,108,108,111,99,0,0,0,0], "i8", ALLOC_NORMAL);
___func___resize_buffer377=allocate([114,101,115,105,122,101,95,98,117,102,102,101,114,0,0,0], "i8", ALLOC_NORMAL);
___func___resize_buffer=allocate([114,101,115,105,122,101,95,98,117,102,102,101,114,0,0,0], "i8", ALLOC_NORMAL);
___func___iobase_readline=allocate([105,111,98,97,115,101,95,114,101,97,100,108,105,110,101,0], "i8", ALLOC_NORMAL);
___func___iobase_dealloc=allocate([105,111,98,97,115,101,95,100,101,97,108,108,111,99,0,0], "i8", ALLOC_NORMAL);
___func___get_line=allocate([103,101,116,95,108,105,110,101,0,0,0,0], "i8", ALLOC_NORMAL);
___func___fileio_new=allocate([102,105,108,101,105,111,95,110,101,119,0,0], "i8", ALLOC_NORMAL);
___func___fileio_init=allocate([102,105,108,101,105,111,95,105,110,105,116,0], "i8", ALLOC_NORMAL);
___func___fileio_dealloc=allocate([102,105,108,101,105,111,95,100,101,97,108,108,111,99,0,0], "i8", ALLOC_NORMAL);
___func___bytesio_setstate=allocate([98,121,116,101,115,105,111,95,115,101,116,115,116,97,116,101,0,0,0,0], "i8", ALLOC_NORMAL);
___func___bytesio_readinto=allocate([98,121,116,101,115,105,111,95,114,101,97,100,105,110,116,111,0,0,0,0], "i8", ALLOC_NORMAL);
___func___bytesio_read=allocate([98,121,116,101,115,105,111,95,114,101,97,100,0,0,0,0], "i8", ALLOC_NORMAL);
___func___bytesio_new=allocate([98,121,116,101,115,105,111,95,110,101,119,0], "i8", ALLOC_NORMAL);
___func___bytesio_dealloc=allocate([98,121,116,101,115,105,111,95,100,101,97,108,108,111,99,0], "i8", ALLOC_NORMAL);
___func___bufferedwriter_write=allocate([98,117,102,102,101,114,101,100,119,114,105,116,101,114,95,119,114,105,116,101,0,0,0,0], "i8", ALLOC_NORMAL);
___func___bufferedrwpair_dealloc=allocate([98,117,102,102,101,114,101,100,114,119,112,97,105,114,95,100,101,97,108,108,111,99,0,0], "i8", ALLOC_NORMAL);
___func___buffered_dealloc=allocate([98,117,102,102,101,114,101,100,95,100,101,97,108,108,111,99,0,0,0,0], "i8", ALLOC_NORMAL);
___func___blockingioerror_init=allocate([98,108,111,99,107,105,110,103,105,111,101,114,114,111,114,95,105,110,105,116,0,0,0,0], "i8", ALLOC_NORMAL);
___func____textiowrapper_readline=allocate([95,116,101,120,116,105,111,119,114,97,112,112,101,114,95,114,101,97,100,108,105,110,101,0], "i8", ALLOC_NORMAL);
___func____bufferedreader_read_generic=allocate([95,98,117,102,102,101,114,101,100,114,101,97,100,101,114,95,114,101,97,100,95,103,101,110,101,114,105,99,0,0,0,0], "i8", ALLOC_NORMAL);
___func____PyIncrementalNewlineDecoder_decode=allocate([95,80,121,73,110,99,114,101,109,101,110,116,97,108,78,101,119,108,105,110,101,68,101,99,111,100,101,114,95,100,101,99,111,100,101,0], "i8", ALLOC_NORMAL);
___func____PyIO_trap_eintr=allocate([95,80,121,73,79,95,116,114,97,112,95,101,105,110,116,114,0,0,0,0], "i8", ALLOC_NORMAL);
___func___PyNumber_AsOff_t=allocate([80,121,78,117,109,98,101,114,95,65,115,79,102,102,95,116,0,0,0,0], "i8", ALLOC_NORMAL);
__PyIO_zero=allocate([0,0,0,0], "i8", ALLOC_NORMAL);
__PyIO_unsupported_operation=allocate([0,0,0,0], "i8", ALLOC_NORMAL);
__PyIO_trap_eintr_eintr_int=allocate([0,0,0,0], "i8", ALLOC_NORMAL);
__PyIO_str_write=allocate([0,0,0,0], "i8", ALLOC_NORMAL);
__PyIO_str_writable=allocate([0,0,0,0], "i8", ALLOC_NORMAL);
__PyIO_str_truncate=allocate([0,0,0,0], "i8", ALLOC_NORMAL);
__PyIO_str_tell=allocate([0,0,0,0], "i8", ALLOC_NORMAL);
__PyIO_str_setstate=allocate([0,0,0,0], "i8", ALLOC_NORMAL);
__PyIO_str_seekable=allocate([0,0,0,0], "i8", ALLOC_NORMAL);
__PyIO_str_seek=allocate([0,0,0,0], "i8", ALLOC_NORMAL);
__PyIO_str_reset=allocate([0,0,0,0], "i8", ALLOC_NORMAL);
__PyIO_str_readline=allocate([0,0,0,0], "i8", ALLOC_NORMAL);
__PyIO_str_readinto=allocate([0,0,0,0], "i8", ALLOC_NORMAL);
__PyIO_str_readable=allocate([0,0,0,0], "i8", ALLOC_NORMAL);
__PyIO_str_read1=allocate([0,0,0,0], "i8", ALLOC_NORMAL);
__PyIO_str_read=allocate([0,0,0,0], "i8", ALLOC_NORMAL);
__PyIO_str_nl=allocate([0,0,0,0], "i8", ALLOC_NORMAL);
__PyIO_str_newlines=allocate([0,0,0,0], "i8", ALLOC_NORMAL);
__PyIO_str_isatty=allocate([0,0,0,0], "i8", ALLOC_NORMAL);
__PyIO_str_getstate=allocate([0,0,0,0], "i8", ALLOC_NORMAL);
__PyIO_str_flush=allocate([0,0,0,0], "i8", ALLOC_NORMAL);
__PyIO_str_fileno=allocate([0,0,0,0], "i8", ALLOC_NORMAL);
__PyIO_str_encode=allocate([0,0,0,0], "i8", ALLOC_NORMAL);
__PyIO_str_decode=allocate([0,0,0,0], "i8", ALLOC_NORMAL);
__PyIO_str_closed=allocate([0,0,0,0], "i8", ALLOC_NORMAL);
__PyIO_str_close=allocate([0,0,0,0], "i8", ALLOC_NORMAL);
__PyIO_os_module=allocate([0,0,0,0], "i8", ALLOC_NORMAL);
__PyIO_locale_module=allocate([0,0,0,0], "i8", ALLOC_NORMAL);
__PyIO_empty_str=allocate([0,0,0,0], "i8", ALLOC_NORMAL);
__PyIO_empty_bytes=allocate([0,0,0,0], "i8", ALLOC_NORMAL);
__PyExc_BlockingIOError=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,5,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_PyTextIOWrapper_Type=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,69,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_PyTextIOBase_Type=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,5,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_PyStringIO_Type=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,69,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_PyRawIOBase_Type=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,5,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_PyIncrementalNewlineDecoder_Type=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,5,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_PyIOBase_Type=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,69,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_PyFileIO_Type=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,69,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_PyExc_BlockingIOError=allocate([0,0,0,0], "i8", ALLOC_NORMAL);
_PyBytesIO_Type=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,69,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_PyBufferedWriter_Type=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,69,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_PyBufferedReader_Type=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,69,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_PyBufferedRandom_Type=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,69,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_PyBufferedRWPair_Type=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,69,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_PyBufferedIOBase_Type=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,5,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
/* no memory initializer */
function runPostSets() {
HEAP32[((_textiowrapper_methods)>>2)]=((__str39462)|0);
HEAP32[(((_textiowrapper_methods)+(4))>>2)]=((FUNCTION_TABLE_OFFSET + 110));
HEAP32[(((_textiowrapper_methods)+(16))>>2)]=((__str40463)|0);
HEAP32[(((_textiowrapper_methods)+(20))>>2)]=((FUNCTION_TABLE_OFFSET + 66));
HEAP32[(((_textiowrapper_methods)+(32))>>2)]=((__str41464)|0);
HEAP32[(((_textiowrapper_methods)+(36))>>2)]=((FUNCTION_TABLE_OFFSET + 30));
HEAP32[(((_textiowrapper_methods)+(48))>>2)]=((__str42465)|0);
HEAP32[(((_textiowrapper_methods)+(52))>>2)]=((FUNCTION_TABLE_OFFSET + 366));
HEAP32[(((_textiowrapper_methods)+(64))>>2)]=((__str43466)|0);
HEAP32[(((_textiowrapper_methods)+(68))>>2)]=((FUNCTION_TABLE_OFFSET + 208));
HEAP32[(((_textiowrapper_methods)+(80))>>2)]=((__str44467)|0);
HEAP32[(((_textiowrapper_methods)+(84))>>2)]=((FUNCTION_TABLE_OFFSET + 222));
HEAP32[(((_textiowrapper_methods)+(96))>>2)]=((__str45468)|0);
HEAP32[(((_textiowrapper_methods)+(100))>>2)]=((FUNCTION_TABLE_OFFSET + 84));
HEAP32[(((_textiowrapper_methods)+(112))>>2)]=((__str24447)|0);
HEAP32[(((_textiowrapper_methods)+(116))>>2)]=((FUNCTION_TABLE_OFFSET + 274));
HEAP32[(((_textiowrapper_methods)+(128))>>2)]=((__str19442)|0);
HEAP32[(((_textiowrapper_methods)+(132))>>2)]=((FUNCTION_TABLE_OFFSET + 94));
HEAP32[(((_textiowrapper_methods)+(144))>>2)]=((__str21444)|0);
HEAP32[(((_textiowrapper_methods)+(148))>>2)]=((FUNCTION_TABLE_OFFSET + 178));
HEAP32[(((_textiowrapper_methods)+(160))>>2)]=((__str46469)|0);
HEAP32[(((_textiowrapper_methods)+(164))>>2)]=((FUNCTION_TABLE_OFFSET + 240));
HEAP32[(((_textiowrapper_methods)+(176))>>2)]=((__str47470)|0);
HEAP32[(((_textiowrapper_methods)+(180))>>2)]=((FUNCTION_TABLE_OFFSET + 406));
HEAP32[(((_textiowrapper_methods)+(192))>>2)]=((__str48471)|0);
HEAP32[(((_textiowrapper_methods)+(196))>>2)]=((FUNCTION_TABLE_OFFSET + 8));
HEAP32[(((_textiowrapper_methods)+(208))>>2)]=((__str49472)|0);
HEAP32[(((_textiowrapper_methods)+(212))>>2)]=((FUNCTION_TABLE_OFFSET + 332));
HEAP32[((_textiowrapper_members)>>2)]=((__str7430)|0);
HEAP32[(((_textiowrapper_members)+(20))>>2)]=((__str6429)|0);
HEAP32[(((_textiowrapper_members)+(40))>>2)]=((__str10433)|0);
HEAP32[((_textiowrapper_init_kwlist)>>2)]=((__str6429)|0);
HEAP32[(((_textiowrapper_init_kwlist)+(4))>>2)]=((__str7430)|0);
HEAP32[(((_textiowrapper_init_kwlist)+(8))>>2)]=((__str8431)|0);
HEAP32[(((_textiowrapper_init_kwlist)+(12))>>2)]=((__str9432)|0);
HEAP32[(((_textiowrapper_init_kwlist)+(16))>>2)]=((__str10433)|0);
HEAP32[((_textiowrapper_getset)>>2)]=((__str22445)|0);
HEAP32[(((_textiowrapper_getset)+(4))>>2)]=((FUNCTION_TABLE_OFFSET + 310));
HEAP32[(((_textiowrapper_getset)+(20))>>2)]=((__str33456)|0);
HEAP32[(((_textiowrapper_getset)+(24))>>2)]=((FUNCTION_TABLE_OFFSET + 40));
HEAP32[(((_textiowrapper_getset)+(40))>>2)]=((__str34457)|0);
HEAP32[(((_textiowrapper_getset)+(44))>>2)]=((FUNCTION_TABLE_OFFSET + 228));
HEAP32[(((_textiowrapper_getset)+(60))>>2)]=((__str8431)|0);
HEAP32[(((_textiowrapper_getset)+(64))>>2)]=((FUNCTION_TABLE_OFFSET + 192));
HEAP32[(((_textiowrapper_getset)+(80))>>2)]=((__str35458)|0);
HEAP32[(((_textiowrapper_getset)+(84))>>2)]=((FUNCTION_TABLE_OFFSET + 138));
HEAP32[(((_textiowrapper_getset)+(88))>>2)]=((FUNCTION_TABLE_OFFSET + 182));
HEAP32[((_textiobase_methods)>>2)]=((__str39462)|0);
HEAP32[(((_textiobase_methods)+(4))>>2)]=((FUNCTION_TABLE_OFFSET + 308));
HEAP32[(((_textiobase_methods)+(12))>>2)]=((_textiobase_detach_doc)|0);
HEAP32[(((_textiobase_methods)+(16))>>2)]=((__str41464)|0);
HEAP32[(((_textiobase_methods)+(20))>>2)]=(FUNCTION_TABLE_OFFSET + 180);
HEAP32[(((_textiobase_methods)+(28))>>2)]=((_textiobase_read_doc)|0);
HEAP32[(((_textiobase_methods)+(32))>>2)]=((__str42465)|0);
HEAP32[(((_textiobase_methods)+(36))>>2)]=(FUNCTION_TABLE_OFFSET + 326);
HEAP32[(((_textiobase_methods)+(44))>>2)]=((_textiobase_readline_doc)|0);
HEAP32[(((_textiobase_methods)+(48))>>2)]=((__str40463)|0);
HEAP32[(((_textiobase_methods)+(52))>>2)]=(FUNCTION_TABLE_OFFSET + 388);
HEAP32[(((_textiobase_methods)+(60))>>2)]=((_textiobase_write_doc)|0);
HEAP32[((_textiobase_getset)>>2)]=((__str7430)|0);
HEAP32[(((_textiobase_getset)+(4))>>2)]=(FUNCTION_TABLE_OFFSET + 134);
HEAP32[(((_textiobase_getset)+(12))>>2)]=((_textiobase_encoding_doc)|0);
HEAP32[(((_textiobase_getset)+(20))>>2)]=((__str34457)|0);
HEAP32[(((_textiobase_getset)+(24))>>2)]=(FUNCTION_TABLE_OFFSET + 226);
HEAP32[(((_textiobase_getset)+(32))>>2)]=((_textiobase_newlines_doc)|0);
HEAP32[(((_textiobase_getset)+(40))>>2)]=((__str8431)|0);
HEAP32[(((_textiobase_getset)+(44))>>2)]=(FUNCTION_TABLE_OFFSET + 348);
HEAP32[(((_textiobase_getset)+(52))>>2)]=((_textiobase_errors_doc)|0);
HEAP32[((_stringio_methods)>>2)]=((__str21384)|0);
HEAP32[(((_stringio_methods)+(4))>>2)]=((FUNCTION_TABLE_OFFSET + 196));
HEAP32[(((_stringio_methods)+(12))>>2)]=((_stringio_close_doc)|0);
HEAP32[(((_stringio_methods)+(16))>>2)]=((__str22385)|0);
HEAP32[(((_stringio_methods)+(20))>>2)]=((FUNCTION_TABLE_OFFSET + 118));
HEAP32[(((_stringio_methods)+(28))>>2)]=((_stringio_getvalue_doc)|0);
HEAP32[(((_stringio_methods)+(32))>>2)]=((__str23386)|0);
HEAP32[(((_stringio_methods)+(36))>>2)]=((FUNCTION_TABLE_OFFSET + 170));
HEAP32[(((_stringio_methods)+(44))>>2)]=((_stringio_read_doc)|0);
HEAP32[(((_stringio_methods)+(48))>>2)]=((__str24387)|0);
HEAP32[(((_stringio_methods)+(52))>>2)]=((FUNCTION_TABLE_OFFSET + 106));
HEAP32[(((_stringio_methods)+(60))>>2)]=((_stringio_readline_doc)|0);
HEAP32[(((_stringio_methods)+(64))>>2)]=((__str25388)|0);
HEAP32[(((_stringio_methods)+(68))>>2)]=((FUNCTION_TABLE_OFFSET + 354));
HEAP32[(((_stringio_methods)+(76))>>2)]=((_stringio_tell_doc)|0);
HEAP32[(((_stringio_methods)+(80))>>2)]=((__str26389)|0);
HEAP32[(((_stringio_methods)+(84))>>2)]=((FUNCTION_TABLE_OFFSET + 152));
HEAP32[(((_stringio_methods)+(92))>>2)]=((_stringio_truncate_doc)|0);
HEAP32[(((_stringio_methods)+(96))>>2)]=((__str27390)|0);
HEAP32[(((_stringio_methods)+(100))>>2)]=((FUNCTION_TABLE_OFFSET + 300));
HEAP32[(((_stringio_methods)+(108))>>2)]=((_stringio_seek_doc)|0);
HEAP32[(((_stringio_methods)+(112))>>2)]=((__str28391)|0);
HEAP32[(((_stringio_methods)+(116))>>2)]=((FUNCTION_TABLE_OFFSET + 158));
HEAP32[(((_stringio_methods)+(124))>>2)]=((_stringio_write_doc)|0);
HEAP32[(((_stringio_methods)+(128))>>2)]=((__str29392)|0);
HEAP32[(((_stringio_methods)+(132))>>2)]=((FUNCTION_TABLE_OFFSET + 56));
HEAP32[(((_stringio_methods)+(140))>>2)]=((_stringio_seekable_doc)|0);
HEAP32[(((_stringio_methods)+(144))>>2)]=((__str30393)|0);
HEAP32[(((_stringio_methods)+(148))>>2)]=((FUNCTION_TABLE_OFFSET + 262));
HEAP32[(((_stringio_methods)+(156))>>2)]=((_stringio_readable_doc)|0);
HEAP32[(((_stringio_methods)+(160))>>2)]=((__str31394)|0);
HEAP32[(((_stringio_methods)+(164))>>2)]=((FUNCTION_TABLE_OFFSET + 362));
HEAP32[(((_stringio_methods)+(172))>>2)]=((_stringio_writable_doc)|0);
HEAP32[(((_stringio_methods)+(176))>>2)]=((__str32395)|0);
HEAP32[(((_stringio_methods)+(180))>>2)]=((FUNCTION_TABLE_OFFSET + 232));
HEAP32[(((_stringio_methods)+(192))>>2)]=((__str33396)|0);
HEAP32[(((_stringio_methods)+(196))>>2)]=((FUNCTION_TABLE_OFFSET + 64));
HEAP32[((_stringio_init_kwlist)>>2)]=((__str3365)|0);
HEAP32[(((_stringio_init_kwlist)+(4))>>2)]=((__str4366)|0);
HEAP32[((_stringio_getset)>>2)]=((__str16379)|0);
HEAP32[(((_stringio_getset)+(4))>>2)]=((FUNCTION_TABLE_OFFSET + 54));
HEAP32[(((_stringio_getset)+(20))>>2)]=((__str17380)|0);
HEAP32[(((_stringio_getset)+(24))>>2)]=((FUNCTION_TABLE_OFFSET + 212));
HEAP32[(((_stringio_getset)+(40))>>2)]=((__str18381)|0);
HEAP32[(((_stringio_getset)+(44))>>2)]=((FUNCTION_TABLE_OFFSET + 294));
HEAP32[((_rawiobase_methods)>>2)]=((__str6201)|0);
HEAP32[(((_rawiobase_methods)+(4))>>2)]=(FUNCTION_TABLE_OFFSET + 288);
HEAP32[(((_rawiobase_methods)+(16))>>2)]=((__str7202)|0);
HEAP32[(((_rawiobase_methods)+(20))>>2)]=(FUNCTION_TABLE_OFFSET + 108);
HEAP32[(((_rawiobase_methods)+(28))>>2)]=((_rawiobase_readall_doc)|0);
HEAP32[((_module_methods)>>2)]=((__str46330)|0);
HEAP32[(((_module_methods)+(4))>>2)]=((FUNCTION_TABLE_OFFSET + 296));
HEAP32[(((_module_methods)+(12))>>2)]=((_open_doc)|0);
HEAP32[((_iobase_methods)>>2)]=((__str13208)|0);
HEAP32[(((_iobase_methods)+(4))>>2)]=(FUNCTION_TABLE_OFFSET + 78);
HEAP32[(((_iobase_methods)+(12))>>2)]=((_iobase_seek_doc)|0);
HEAP32[(((_iobase_methods)+(16))>>2)]=((__str14209)|0);
HEAP32[(((_iobase_methods)+(20))>>2)]=(FUNCTION_TABLE_OFFSET + 96);
HEAP32[(((_iobase_methods)+(28))>>2)]=((_iobase_tell_doc)|0);
HEAP32[(((_iobase_methods)+(32))>>2)]=((__str15210)|0);
HEAP32[(((_iobase_methods)+(36))>>2)]=(FUNCTION_TABLE_OFFSET + 166);
HEAP32[(((_iobase_methods)+(44))>>2)]=((_iobase_truncate_doc)|0);
HEAP32[(((_iobase_methods)+(48))>>2)]=((__str16211)|0);
HEAP32[(((_iobase_methods)+(52))>>2)]=(FUNCTION_TABLE_OFFSET + 142);
HEAP32[(((_iobase_methods)+(60))>>2)]=((_iobase_flush_doc)|0);
HEAP32[(((_iobase_methods)+(64))>>2)]=((__str17212)|0);
HEAP32[(((_iobase_methods)+(68))>>2)]=(FUNCTION_TABLE_OFFSET + 200);
HEAP32[(((_iobase_methods)+(76))>>2)]=((_iobase_close_doc)|0);
HEAP32[(((_iobase_methods)+(80))>>2)]=((__str18213)|0);
HEAP32[(((_iobase_methods)+(84))>>2)]=(FUNCTION_TABLE_OFFSET + 238);
HEAP32[(((_iobase_methods)+(92))>>2)]=((_iobase_seekable_doc)|0);
HEAP32[(((_iobase_methods)+(96))>>2)]=((__str19214)|0);
HEAP32[(((_iobase_methods)+(100))>>2)]=(FUNCTION_TABLE_OFFSET + 256);
HEAP32[(((_iobase_methods)+(108))>>2)]=((_iobase_readable_doc)|0);
HEAP32[(((_iobase_methods)+(112))>>2)]=((__str20215)|0);
HEAP32[(((_iobase_methods)+(116))>>2)]=(FUNCTION_TABLE_OFFSET + 172);
HEAP32[(((_iobase_methods)+(124))>>2)]=((_iobase_writable_doc)|0);
HEAP32[(((_iobase_methods)+(128))>>2)]=((__str21216)|0);
HEAP32[(((_iobase_methods)+(132))>>2)]=(FUNCTION_TABLE_OFFSET + 382);
HEAP32[(((_iobase_methods)+(144))>>2)]=((__str22217)|0);
HEAP32[(((_iobase_methods)+(148))>>2)]=(FUNCTION_TABLE_OFFSET + 140);
HEAP32[(((_iobase_methods)+(160))>>2)]=((__str23218)|0);
HEAP32[(((_iobase_methods)+(164))>>2)]=(FUNCTION_TABLE_OFFSET + 52);
HEAP32[(((_iobase_methods)+(176))>>2)]=((__str24219)|0);
HEAP32[(((_iobase_methods)+(180))>>2)]=(FUNCTION_TABLE_OFFSET + 44);
HEAP32[(((_iobase_methods)+(192))>>2)]=((__str25220)|0);
HEAP32[(((_iobase_methods)+(196))>>2)]=(FUNCTION_TABLE_OFFSET + 104);
HEAP32[(((_iobase_methods)+(204))>>2)]=((_iobase_fileno_doc)|0);
HEAP32[(((_iobase_methods)+(208))>>2)]=((__str26221)|0);
HEAP32[(((_iobase_methods)+(212))>>2)]=(FUNCTION_TABLE_OFFSET + 304);
HEAP32[(((_iobase_methods)+(220))>>2)]=((_iobase_isatty_doc)|0);
HEAP32[(((_iobase_methods)+(224))>>2)]=((__str27222)|0);
HEAP32[(((_iobase_methods)+(228))>>2)]=(FUNCTION_TABLE_OFFSET + 350);
HEAP32[(((_iobase_methods)+(240))>>2)]=((__str28223)|0);
HEAP32[(((_iobase_methods)+(244))>>2)]=(FUNCTION_TABLE_OFFSET + 98);
HEAP32[(((_iobase_methods)+(256))>>2)]=((__str29224)|0);
HEAP32[(((_iobase_methods)+(260))>>2)]=(FUNCTION_TABLE_OFFSET + 380);
HEAP32[(((_iobase_methods)+(268))>>2)]=((_iobase_readline_doc)|0);
HEAP32[(((_iobase_methods)+(272))>>2)]=((__str30225)|0);
HEAP32[(((_iobase_methods)+(276))>>2)]=(FUNCTION_TABLE_OFFSET + 398);
HEAP32[(((_iobase_methods)+(284))>>2)]=((_iobase_readlines_doc)|0);
HEAP32[(((_iobase_methods)+(288))>>2)]=((__str31226)|0);
HEAP32[(((_iobase_methods)+(292))>>2)]=(FUNCTION_TABLE_OFFSET + 114);
HEAP32[((_iobase_getset)>>2)]=((__str11206)|0);
HEAP32[(((_iobase_getset)+(4))>>2)]=(FUNCTION_TABLE_OFFSET + 306);
HEAP32[((_io_open_kwlist)>>2)]=((__str47331)|0);
HEAP32[(((_io_open_kwlist)+(4))>>2)]=((__str48332)|0);
HEAP32[(((_io_open_kwlist)+(8))>>2)]=((__str49333)|0);
HEAP32[(((_io_open_kwlist)+(12))>>2)]=((__str50334)|0);
HEAP32[(((_io_open_kwlist)+(16))>>2)]=((__str51335)|0);
HEAP32[(((_io_open_kwlist)+(20))>>2)]=((__str52336)|0);
HEAP32[(((_io_open_kwlist)+(24))>>2)]=((__str53337)|0);
HEAP32[((_incrementalnewlinedecoder_methods)>>2)]=((__str57480)|0);
HEAP32[(((_incrementalnewlinedecoder_methods)+(4))>>2)]=((FUNCTION_TABLE_OFFSET + 36));
HEAP32[(((_incrementalnewlinedecoder_methods)+(16))>>2)]=((__str102)|0);
HEAP32[(((_incrementalnewlinedecoder_methods)+(20))>>2)]=((FUNCTION_TABLE_OFFSET + 28));
HEAP32[(((_incrementalnewlinedecoder_methods)+(32))>>2)]=((__str63486)|0);
HEAP32[(((_incrementalnewlinedecoder_methods)+(36))>>2)]=((FUNCTION_TABLE_OFFSET + 298));
HEAP32[(((_incrementalnewlinedecoder_methods)+(48))>>2)]=((__str69492)|0);
HEAP32[(((_incrementalnewlinedecoder_methods)+(52))>>2)]=((FUNCTION_TABLE_OFFSET + 82));
HEAP32[((_incrementalnewlinedecoder_init_kwlist)>>2)]=((__str96)|0);
HEAP32[(((_incrementalnewlinedecoder_init_kwlist)+(4))>>2)]=((__str97)|0);
HEAP32[(((_incrementalnewlinedecoder_init_kwlist)+(8))>>2)]=((__str8431)|0);
HEAP32[((_incrementalnewlinedecoder_getset)>>2)]=((__str34457)|0);
HEAP32[(((_incrementalnewlinedecoder_getset)+(4))>>2)]=((FUNCTION_TABLE_OFFSET + 50));
HEAP32[((_incrementalnewlinedecoder_decode_kwlist)>>2)]=((__str106)|0);
HEAP32[(((_incrementalnewlinedecoder_decode_kwlist)+(4))>>2)]=((__str107)|0);
HEAP32[((_fileio_methods)>>2)]=((__str25150)|0);
HEAP32[(((_fileio_methods)+(4))>>2)]=((FUNCTION_TABLE_OFFSET + 340));
HEAP32[(((_fileio_methods)+(12))>>2)]=((_read_doc151)|0);
HEAP32[(((_fileio_methods)+(16))>>2)]=((__str26152)|0);
HEAP32[(((_fileio_methods)+(20))>>2)]=((FUNCTION_TABLE_OFFSET + 136));
HEAP32[(((_fileio_methods)+(28))>>2)]=((_readall_doc)|0);
HEAP32[(((_fileio_methods)+(32))>>2)]=((__str27153)|0);
HEAP32[(((_fileio_methods)+(36))>>2)]=((FUNCTION_TABLE_OFFSET + 248));
HEAP32[(((_fileio_methods)+(44))>>2)]=((_readinto_doc154)|0);
HEAP32[(((_fileio_methods)+(48))>>2)]=((__str28155)|0);
HEAP32[(((_fileio_methods)+(52))>>2)]=((FUNCTION_TABLE_OFFSET + 254));
HEAP32[(((_fileio_methods)+(60))>>2)]=((_write_doc156)|0);
HEAP32[(((_fileio_methods)+(64))>>2)]=((__str29157)|0);
HEAP32[(((_fileio_methods)+(68))>>2)]=((FUNCTION_TABLE_OFFSET + 126));
HEAP32[(((_fileio_methods)+(76))>>2)]=((_seek_doc158)|0);
HEAP32[(((_fileio_methods)+(80))>>2)]=((__str30159)|0);
HEAP32[(((_fileio_methods)+(84))>>2)]=((FUNCTION_TABLE_OFFSET + 386));
HEAP32[(((_fileio_methods)+(92))>>2)]=((_tell_doc160)|0);
HEAP32[(((_fileio_methods)+(96))>>2)]=((__str31161)|0);
HEAP32[(((_fileio_methods)+(100))>>2)]=((FUNCTION_TABLE_OFFSET + 34));
HEAP32[(((_fileio_methods)+(108))>>2)]=((_truncate_doc162)|0);
HEAP32[(((_fileio_methods)+(112))>>2)]=((__str32163)|0);
HEAP32[(((_fileio_methods)+(116))>>2)]=((FUNCTION_TABLE_OFFSET + 174));
HEAP32[(((_fileio_methods)+(124))>>2)]=((_close_doc164)|0);
HEAP32[(((_fileio_methods)+(128))>>2)]=((__str33165)|0);
HEAP32[(((_fileio_methods)+(132))>>2)]=((FUNCTION_TABLE_OFFSET + 360));
HEAP32[(((_fileio_methods)+(140))>>2)]=((_seekable_doc166)|0);
HEAP32[(((_fileio_methods)+(144))>>2)]=((__str34167)|0);
HEAP32[(((_fileio_methods)+(148))>>2)]=((FUNCTION_TABLE_OFFSET + 210));
HEAP32[(((_fileio_methods)+(156))>>2)]=((_readable_doc168)|0);
HEAP32[(((_fileio_methods)+(160))>>2)]=((__str35169)|0);
HEAP32[(((_fileio_methods)+(164))>>2)]=((FUNCTION_TABLE_OFFSET + 122));
HEAP32[(((_fileio_methods)+(172))>>2)]=((_writable_doc170)|0);
HEAP32[(((_fileio_methods)+(176))>>2)]=((__str36171)|0);
HEAP32[(((_fileio_methods)+(180))>>2)]=((FUNCTION_TABLE_OFFSET + 314));
HEAP32[(((_fileio_methods)+(188))>>2)]=((_fileno_doc)|0);
HEAP32[(((_fileio_methods)+(192))>>2)]=((__str37172)|0);
HEAP32[(((_fileio_methods)+(196))>>2)]=((FUNCTION_TABLE_OFFSET + 322));
HEAP32[(((_fileio_methods)+(204))>>2)]=((_isatty_doc173)|0);
HEAP32[((_fileio_init_kwlist)>>2)]=((__str3128)|0);
HEAP32[(((_fileio_init_kwlist)+(4))>>2)]=((__str4129)|0);
HEAP32[(((_fileio_init_kwlist)+(8))>>2)]=((__str5130)|0);
HEAP32[((_fileio_getsetlist)>>2)]=((__str18143)|0);
HEAP32[(((_fileio_getsetlist)+(4))>>2)]=((FUNCTION_TABLE_OFFSET + 22));
HEAP32[(((_fileio_getsetlist)+(12))>>2)]=((__str19144)|0);
HEAP32[(((_fileio_getsetlist)+(20))>>2)]=((__str5130)|0);
HEAP32[(((_fileio_getsetlist)+(24))>>2)]=((FUNCTION_TABLE_OFFSET + 176));
HEAP32[(((_fileio_getsetlist)+(32))>>2)]=((__str20145)|0);
HEAP32[(((_fileio_getsetlist)+(40))>>2)]=((__str4129)|0);
HEAP32[(((_fileio_getsetlist)+(44))>>2)]=((FUNCTION_TABLE_OFFSET + 378));
HEAP32[(((_fileio_getsetlist)+(52))>>2)]=((__str21146)|0);
HEAP32[((_encodefuncs)>>2)]=((__str15438)|0);
HEAP32[(((_encodefuncs)+(4))>>2)]=((FUNCTION_TABLE_OFFSET + 396));
HEAP32[(((_encodefuncs)+(8))>>2)]=((__str25448)|0);
HEAP32[(((_encodefuncs)+(12))>>2)]=((FUNCTION_TABLE_OFFSET + 280));
HEAP32[(((_encodefuncs)+(16))>>2)]=((__str26449)|0);
HEAP32[(((_encodefuncs)+(20))>>2)]=((FUNCTION_TABLE_OFFSET + 202));
HEAP32[(((_encodefuncs)+(24))>>2)]=((__str27450)|0);
HEAP32[(((_encodefuncs)+(28))>>2)]=((FUNCTION_TABLE_OFFSET + 218));
HEAP32[(((_encodefuncs)+(32))>>2)]=((__str28451)|0);
HEAP32[(((_encodefuncs)+(36))>>2)]=((FUNCTION_TABLE_OFFSET + 318));
HEAP32[(((_encodefuncs)+(40))>>2)]=((__str29452)|0);
HEAP32[(((_encodefuncs)+(44))>>2)]=((FUNCTION_TABLE_OFFSET + 206));
HEAP32[(((_encodefuncs)+(48))>>2)]=((__str30453)|0);
HEAP32[(((_encodefuncs)+(52))>>2)]=((FUNCTION_TABLE_OFFSET + 2));
HEAP32[(((_encodefuncs)+(56))>>2)]=((__str31454)|0);
HEAP32[(((_encodefuncs)+(60))>>2)]=((FUNCTION_TABLE_OFFSET + 404));
HEAP32[(((_encodefuncs)+(64))>>2)]=((__str32455)|0);
HEAP32[(((_encodefuncs)+(68))>>2)]=((FUNCTION_TABLE_OFFSET + 120));
HEAP32[((_bytesio_methods)>>2)]=((__str1283)|0);
HEAP32[(((_bytesio_methods)+(4))>>2)]=((FUNCTION_TABLE_OFFSET + 352));
HEAP32[(((_bytesio_methods)+(12))>>2)]=((_readable_doc)|0);
HEAP32[(((_bytesio_methods)+(16))>>2)]=((__str1384)|0);
HEAP32[(((_bytesio_methods)+(20))>>2)]=((FUNCTION_TABLE_OFFSET + 352));
HEAP32[(((_bytesio_methods)+(28))>>2)]=((_seekable_doc)|0);
HEAP32[(((_bytesio_methods)+(32))>>2)]=((__str1485)|0);
HEAP32[(((_bytesio_methods)+(36))>>2)]=((FUNCTION_TABLE_OFFSET + 352));
HEAP32[(((_bytesio_methods)+(44))>>2)]=((_writable_doc)|0);
HEAP32[(((_bytesio_methods)+(48))>>2)]=((__str1586)|0);
HEAP32[(((_bytesio_methods)+(52))>>2)]=((FUNCTION_TABLE_OFFSET + 214));
HEAP32[(((_bytesio_methods)+(60))>>2)]=((_close_doc)|0);
HEAP32[(((_bytesio_methods)+(64))>>2)]=((__str1687)|0);
HEAP32[(((_bytesio_methods)+(68))>>2)]=((FUNCTION_TABLE_OFFSET + 216));
HEAP32[(((_bytesio_methods)+(76))>>2)]=((_flush_doc)|0);
HEAP32[(((_bytesio_methods)+(80))>>2)]=((__str1788)|0);
HEAP32[(((_bytesio_methods)+(84))>>2)]=((FUNCTION_TABLE_OFFSET + 338));
HEAP32[(((_bytesio_methods)+(92))>>2)]=((_isatty_doc)|0);
HEAP32[(((_bytesio_methods)+(96))>>2)]=((__str1889)|0);
HEAP32[(((_bytesio_methods)+(100))>>2)]=((FUNCTION_TABLE_OFFSET + 344));
HEAP32[(((_bytesio_methods)+(108))>>2)]=((_tell_doc)|0);
HEAP32[(((_bytesio_methods)+(112))>>2)]=((__str1990)|0);
HEAP32[(((_bytesio_methods)+(116))>>2)]=((FUNCTION_TABLE_OFFSET + 258));
HEAP32[(((_bytesio_methods)+(124))>>2)]=((_write_doc)|0);
HEAP32[(((_bytesio_methods)+(128))>>2)]=((__str2091)|0);
HEAP32[(((_bytesio_methods)+(132))>>2)]=((FUNCTION_TABLE_OFFSET + 146));
HEAP32[(((_bytesio_methods)+(140))>>2)]=((_writelines_doc)|0);
HEAP32[(((_bytesio_methods)+(144))>>2)]=((__str2192)|0);
HEAP32[(((_bytesio_methods)+(148))>>2)]=((FUNCTION_TABLE_OFFSET + 384));
HEAP32[(((_bytesio_methods)+(156))>>2)]=((_read1_doc)|0);
HEAP32[(((_bytesio_methods)+(160))>>2)]=((__str2293)|0);
HEAP32[(((_bytesio_methods)+(164))>>2)]=((FUNCTION_TABLE_OFFSET + 224));
HEAP32[(((_bytesio_methods)+(172))>>2)]=((_readinto_doc)|0);
HEAP32[(((_bytesio_methods)+(176))>>2)]=((__str2394)|0);
HEAP32[(((_bytesio_methods)+(180))>>2)]=((FUNCTION_TABLE_OFFSET + 144));
HEAP32[(((_bytesio_methods)+(188))>>2)]=((_readline_doc)|0);
HEAP32[(((_bytesio_methods)+(192))>>2)]=((__str2495)|0);
HEAP32[(((_bytesio_methods)+(196))>>2)]=((FUNCTION_TABLE_OFFSET + 260));
HEAP32[(((_bytesio_methods)+(204))>>2)]=((_readlines_doc)|0);
HEAP32[(((_bytesio_methods)+(208))>>2)]=((__str2596)|0);
HEAP32[(((_bytesio_methods)+(212))>>2)]=((FUNCTION_TABLE_OFFSET + 264));
HEAP32[(((_bytesio_methods)+(220))>>2)]=((_read_doc)|0);
HEAP32[(((_bytesio_methods)+(224))>>2)]=((__str2697)|0);
HEAP32[(((_bytesio_methods)+(228))>>2)]=((FUNCTION_TABLE_OFFSET + 150));
HEAP32[(((_bytesio_methods)+(236))>>2)]=((_getval_doc)|0);
HEAP32[(((_bytesio_methods)+(240))>>2)]=((__str2798)|0);
HEAP32[(((_bytesio_methods)+(244))>>2)]=((FUNCTION_TABLE_OFFSET + 156));
HEAP32[(((_bytesio_methods)+(252))>>2)]=((_seek_doc)|0);
HEAP32[(((_bytesio_methods)+(256))>>2)]=((__str2899)|0);
HEAP32[(((_bytesio_methods)+(260))>>2)]=((FUNCTION_TABLE_OFFSET + 46));
HEAP32[(((_bytesio_methods)+(268))>>2)]=((_truncate_doc)|0);
HEAP32[(((_bytesio_methods)+(272))>>2)]=((__str29100)|0);
HEAP32[(((_bytesio_methods)+(276))>>2)]=((FUNCTION_TABLE_OFFSET + 220));
HEAP32[(((_bytesio_methods)+(288))>>2)]=((__str30101)|0);
HEAP32[(((_bytesio_methods)+(292))>>2)]=((FUNCTION_TABLE_OFFSET + 252));
HEAP32[(((_bytesio_methods)+(304))>>2)]=((__str31102)|0);
HEAP32[(((_bytesio_methods)+(308))>>2)]=((FUNCTION_TABLE_OFFSET + 336));
HEAP32[((_bytesio_init_kwlist)>>2)]=((__str374)|0);
HEAP32[((_bytesio_getsetlist)>>2)]=((__str1081)|0);
HEAP32[(((_bytesio_getsetlist)+(4))>>2)]=((FUNCTION_TABLE_OFFSET + 346));
HEAP32[(((_bytesio_getsetlist)+(12))>>2)]=((__str1182)|0);
HEAP32[((_bufferedwriter_methods)>>2)]=((__str20)|0);
HEAP32[(((_bufferedwriter_methods)+(4))>>2)]=((FUNCTION_TABLE_OFFSET + 74));
HEAP32[(((_bufferedwriter_methods)+(16))>>2)]=((__str21)|0);
HEAP32[(((_bufferedwriter_methods)+(20))>>2)]=((FUNCTION_TABLE_OFFSET + 168));
HEAP32[(((_bufferedwriter_methods)+(32))>>2)]=((__str22)|0);
HEAP32[(((_bufferedwriter_methods)+(36))>>2)]=((FUNCTION_TABLE_OFFSET + 234));
HEAP32[(((_bufferedwriter_methods)+(48))>>2)]=((__str23)|0);
HEAP32[(((_bufferedwriter_methods)+(52))>>2)]=((FUNCTION_TABLE_OFFSET + 250));
HEAP32[(((_bufferedwriter_methods)+(64))>>2)]=((__str24)|0);
HEAP32[(((_bufferedwriter_methods)+(68))>>2)]=((FUNCTION_TABLE_OFFSET + 102));
HEAP32[(((_bufferedwriter_methods)+(80))>>2)]=((__str25)|0);
HEAP32[(((_bufferedwriter_methods)+(84))>>2)]=((FUNCTION_TABLE_OFFSET + 10));
HEAP32[(((_bufferedwriter_methods)+(96))>>2)]=((__str26)|0);
HEAP32[(((_bufferedwriter_methods)+(100))>>2)]=((FUNCTION_TABLE_OFFSET + 188));
HEAP32[(((_bufferedwriter_methods)+(112))>>2)]=((__str36)|0);
HEAP32[(((_bufferedwriter_methods)+(116))>>2)]=((FUNCTION_TABLE_OFFSET + 272));
HEAP32[(((_bufferedwriter_methods)+(128))>>2)]=((__str30)|0);
HEAP32[(((_bufferedwriter_methods)+(132))>>2)]=((FUNCTION_TABLE_OFFSET + 12));
HEAP32[(((_bufferedwriter_methods)+(144))>>2)]=((__str27)|0);
HEAP32[(((_bufferedwriter_methods)+(148))>>2)]=((FUNCTION_TABLE_OFFSET + 4));
HEAP32[(((_bufferedwriter_methods)+(160))>>2)]=((__str28)|0);
HEAP32[(((_bufferedwriter_methods)+(164))>>2)]=((FUNCTION_TABLE_OFFSET + 334));
HEAP32[(((_bufferedwriter_methods)+(176))>>2)]=((__str29)|0);
HEAP32[(((_bufferedwriter_methods)+(180))>>2)]=((FUNCTION_TABLE_OFFSET + 330));
HEAP32[(((_bufferedwriter_methods)+(192))>>2)]=((__str37)|0);
HEAP32[(((_bufferedwriter_methods)+(196))>>2)]=((FUNCTION_TABLE_OFFSET + 320));
HEAP32[((_bufferedwriter_members)>>2)]=((__str8)|0);
HEAP32[((_bufferedwriter_init_kwlist)>>2)]=((__str8)|0);
HEAP32[(((_bufferedwriter_init_kwlist)+(4))>>2)]=((__str9)|0);
HEAP32[(((_bufferedwriter_init_kwlist)+(8))>>2)]=((__str10)|0);
HEAP32[((_bufferedwriter_getset)>>2)]=((__str15)|0);
HEAP32[(((_bufferedwriter_getset)+(4))>>2)]=((FUNCTION_TABLE_OFFSET + 392));
HEAP32[(((_bufferedwriter_getset)+(20))>>2)]=((__str16)|0);
HEAP32[(((_bufferedwriter_getset)+(24))>>2)]=((FUNCTION_TABLE_OFFSET + 14));
HEAP32[(((_bufferedwriter_getset)+(40))>>2)]=((__str17)|0);
HEAP32[(((_bufferedwriter_getset)+(44))>>2)]=((FUNCTION_TABLE_OFFSET + 18));
HEAP32[((_bufferedrwpair_methods)>>2)]=((__str31)|0);
HEAP32[(((_bufferedrwpair_methods)+(4))>>2)]=((FUNCTION_TABLE_OFFSET + 76));
HEAP32[(((_bufferedrwpair_methods)+(16))>>2)]=((__str35)|0);
HEAP32[(((_bufferedrwpair_methods)+(20))>>2)]=((FUNCTION_TABLE_OFFSET + 198));
HEAP32[(((_bufferedrwpair_methods)+(32))>>2)]=((__str32)|0);
HEAP32[(((_bufferedrwpair_methods)+(36))>>2)]=((FUNCTION_TABLE_OFFSET + 154));
HEAP32[(((_bufferedrwpair_methods)+(48))>>2)]=((__str33)|0);
HEAP32[(((_bufferedrwpair_methods)+(52))>>2)]=((FUNCTION_TABLE_OFFSET + 302));
HEAP32[(((_bufferedrwpair_methods)+(64))>>2)]=((__str36)|0);
HEAP32[(((_bufferedrwpair_methods)+(68))>>2)]=((FUNCTION_TABLE_OFFSET + 372));
HEAP32[(((_bufferedrwpair_methods)+(80))>>2)]=((__str27)|0);
HEAP32[(((_bufferedrwpair_methods)+(84))>>2)]=((FUNCTION_TABLE_OFFSET + 358));
HEAP32[(((_bufferedrwpair_methods)+(96))>>2)]=((__str23)|0);
HEAP32[(((_bufferedrwpair_methods)+(100))>>2)]=((FUNCTION_TABLE_OFFSET + 148));
HEAP32[(((_bufferedrwpair_methods)+(112))>>2)]=((__str24)|0);
HEAP32[(((_bufferedrwpair_methods)+(116))>>2)]=((FUNCTION_TABLE_OFFSET + 284));
HEAP32[(((_bufferedrwpair_methods)+(128))>>2)]=((__str20)|0);
HEAP32[(((_bufferedrwpair_methods)+(132))>>2)]=((FUNCTION_TABLE_OFFSET + 270));
HEAP32[(((_bufferedrwpair_methods)+(144))>>2)]=((__str26)|0);
HEAP32[(((_bufferedrwpair_methods)+(148))>>2)]=((FUNCTION_TABLE_OFFSET + 290));
HEAP32[((_bufferedrwpair_getset)>>2)]=((__str15)|0);
HEAP32[(((_bufferedrwpair_getset)+(4))>>2)]=((FUNCTION_TABLE_OFFSET + 86));
HEAP32[((_bufferedreader_methods)>>2)]=((__str21)|0);
HEAP32[(((_bufferedreader_methods)+(4))>>2)]=((FUNCTION_TABLE_OFFSET + 168));
HEAP32[(((_bufferedreader_methods)+(16))>>2)]=((__str27)|0);
HEAP32[(((_bufferedreader_methods)+(20))>>2)]=((FUNCTION_TABLE_OFFSET + 236));
HEAP32[(((_bufferedreader_methods)+(32))>>2)]=((__str20)|0);
HEAP32[(((_bufferedreader_methods)+(36))>>2)]=((FUNCTION_TABLE_OFFSET + 74));
HEAP32[(((_bufferedreader_methods)+(48))>>2)]=((__str22)|0);
HEAP32[(((_bufferedreader_methods)+(52))>>2)]=((FUNCTION_TABLE_OFFSET + 234));
HEAP32[(((_bufferedreader_methods)+(64))>>2)]=((__str23)|0);
HEAP32[(((_bufferedreader_methods)+(68))>>2)]=((FUNCTION_TABLE_OFFSET + 250));
HEAP32[(((_bufferedreader_methods)+(80))>>2)]=((__str24)|0);
HEAP32[(((_bufferedreader_methods)+(84))>>2)]=((FUNCTION_TABLE_OFFSET + 102));
HEAP32[(((_bufferedreader_methods)+(96))>>2)]=((__str25)|0);
HEAP32[(((_bufferedreader_methods)+(100))>>2)]=((FUNCTION_TABLE_OFFSET + 10));
HEAP32[(((_bufferedreader_methods)+(112))>>2)]=((__str26)|0);
HEAP32[(((_bufferedreader_methods)+(116))>>2)]=((FUNCTION_TABLE_OFFSET + 188));
HEAP32[(((_bufferedreader_methods)+(128))>>2)]=((__str31)|0);
HEAP32[(((_bufferedreader_methods)+(132))>>2)]=((FUNCTION_TABLE_OFFSET + 244));
HEAP32[(((_bufferedreader_methods)+(144))>>2)]=((__str35)|0);
HEAP32[(((_bufferedreader_methods)+(148))>>2)]=((FUNCTION_TABLE_OFFSET + 246));
HEAP32[(((_bufferedreader_methods)+(160))>>2)]=((__str32)|0);
HEAP32[(((_bufferedreader_methods)+(164))>>2)]=((FUNCTION_TABLE_OFFSET + 374));
HEAP32[(((_bufferedreader_methods)+(176))>>2)]=((__str34)|0);
HEAP32[(((_bufferedreader_methods)+(180))>>2)]=((FUNCTION_TABLE_OFFSET + 100));
HEAP32[(((_bufferedreader_methods)+(192))>>2)]=((__str28)|0);
HEAP32[(((_bufferedreader_methods)+(196))>>2)]=((FUNCTION_TABLE_OFFSET + 334));
HEAP32[(((_bufferedreader_methods)+(208))>>2)]=((__str29)|0);
HEAP32[(((_bufferedreader_methods)+(212))>>2)]=((FUNCTION_TABLE_OFFSET + 330));
HEAP32[(((_bufferedreader_methods)+(224))>>2)]=((__str30)|0);
HEAP32[(((_bufferedreader_methods)+(228))>>2)]=((FUNCTION_TABLE_OFFSET + 12));
HEAP32[(((_bufferedreader_methods)+(240))>>2)]=((__str37)|0);
HEAP32[(((_bufferedreader_methods)+(244))>>2)]=((FUNCTION_TABLE_OFFSET + 320));
HEAP32[((_bufferedreader_members)>>2)]=((__str8)|0);
HEAP32[((_bufferedreader_init_kwlist)>>2)]=((__str8)|0);
HEAP32[(((_bufferedreader_init_kwlist)+(4))>>2)]=((__str9)|0);
HEAP32[((_bufferedreader_getset)>>2)]=((__str15)|0);
HEAP32[(((_bufferedreader_getset)+(4))>>2)]=((FUNCTION_TABLE_OFFSET + 392));
HEAP32[(((_bufferedreader_getset)+(20))>>2)]=((__str16)|0);
HEAP32[(((_bufferedreader_getset)+(24))>>2)]=((FUNCTION_TABLE_OFFSET + 14));
HEAP32[(((_bufferedreader_getset)+(40))>>2)]=((__str17)|0);
HEAP32[(((_bufferedreader_getset)+(44))>>2)]=((FUNCTION_TABLE_OFFSET + 18));
HEAP32[((_bufferedrandom_methods)>>2)]=((__str20)|0);
HEAP32[(((_bufferedrandom_methods)+(4))>>2)]=((FUNCTION_TABLE_OFFSET + 74));
HEAP32[(((_bufferedrandom_methods)+(16))>>2)]=((__str21)|0);
HEAP32[(((_bufferedrandom_methods)+(20))>>2)]=((FUNCTION_TABLE_OFFSET + 168));
HEAP32[(((_bufferedrandom_methods)+(32))>>2)]=((__str22)|0);
HEAP32[(((_bufferedrandom_methods)+(36))>>2)]=((FUNCTION_TABLE_OFFSET + 234));
HEAP32[(((_bufferedrandom_methods)+(48))>>2)]=((__str23)|0);
HEAP32[(((_bufferedrandom_methods)+(52))>>2)]=((FUNCTION_TABLE_OFFSET + 250));
HEAP32[(((_bufferedrandom_methods)+(64))>>2)]=((__str24)|0);
HEAP32[(((_bufferedrandom_methods)+(68))>>2)]=((FUNCTION_TABLE_OFFSET + 102));
HEAP32[(((_bufferedrandom_methods)+(80))>>2)]=((__str25)|0);
HEAP32[(((_bufferedrandom_methods)+(84))>>2)]=((FUNCTION_TABLE_OFFSET + 10));
HEAP32[(((_bufferedrandom_methods)+(96))>>2)]=((__str26)|0);
HEAP32[(((_bufferedrandom_methods)+(100))>>2)]=((FUNCTION_TABLE_OFFSET + 188));
HEAP32[(((_bufferedrandom_methods)+(112))>>2)]=((__str27)|0);
HEAP32[(((_bufferedrandom_methods)+(116))>>2)]=((FUNCTION_TABLE_OFFSET + 4));
HEAP32[(((_bufferedrandom_methods)+(128))>>2)]=((__str28)|0);
HEAP32[(((_bufferedrandom_methods)+(132))>>2)]=((FUNCTION_TABLE_OFFSET + 334));
HEAP32[(((_bufferedrandom_methods)+(144))>>2)]=((__str29)|0);
HEAP32[(((_bufferedrandom_methods)+(148))>>2)]=((FUNCTION_TABLE_OFFSET + 330));
HEAP32[(((_bufferedrandom_methods)+(160))>>2)]=((__str30)|0);
HEAP32[(((_bufferedrandom_methods)+(164))>>2)]=((FUNCTION_TABLE_OFFSET + 12));
HEAP32[(((_bufferedrandom_methods)+(176))>>2)]=((__str31)|0);
HEAP32[(((_bufferedrandom_methods)+(180))>>2)]=((FUNCTION_TABLE_OFFSET + 244));
HEAP32[(((_bufferedrandom_methods)+(192))>>2)]=((__str32)|0);
HEAP32[(((_bufferedrandom_methods)+(196))>>2)]=((FUNCTION_TABLE_OFFSET + 374));
HEAP32[(((_bufferedrandom_methods)+(208))>>2)]=((__str33)|0);
HEAP32[(((_bufferedrandom_methods)+(212))>>2)]=((FUNCTION_TABLE_OFFSET + 324));
HEAP32[(((_bufferedrandom_methods)+(224))>>2)]=((__str34)|0);
HEAP32[(((_bufferedrandom_methods)+(228))>>2)]=((FUNCTION_TABLE_OFFSET + 100));
HEAP32[(((_bufferedrandom_methods)+(240))>>2)]=((__str35)|0);
HEAP32[(((_bufferedrandom_methods)+(244))>>2)]=((FUNCTION_TABLE_OFFSET + 246));
HEAP32[(((_bufferedrandom_methods)+(256))>>2)]=((__str36)|0);
HEAP32[(((_bufferedrandom_methods)+(260))>>2)]=((FUNCTION_TABLE_OFFSET + 272));
HEAP32[(((_bufferedrandom_methods)+(272))>>2)]=((__str37)|0);
HEAP32[(((_bufferedrandom_methods)+(276))>>2)]=((FUNCTION_TABLE_OFFSET + 320));
HEAP32[((_bufferedrandom_members)>>2)]=((__str8)|0);
HEAP32[((_bufferedrandom_init_kwlist)>>2)]=((__str8)|0);
HEAP32[(((_bufferedrandom_init_kwlist)+(4))>>2)]=((__str9)|0);
HEAP32[(((_bufferedrandom_init_kwlist)+(8))>>2)]=((__str10)|0);
HEAP32[((_bufferedrandom_getset)>>2)]=((__str15)|0);
HEAP32[(((_bufferedrandom_getset)+(4))>>2)]=((FUNCTION_TABLE_OFFSET + 392));
HEAP32[(((_bufferedrandom_getset)+(20))>>2)]=((__str16)|0);
HEAP32[(((_bufferedrandom_getset)+(24))>>2)]=((FUNCTION_TABLE_OFFSET + 14));
HEAP32[(((_bufferedrandom_getset)+(40))>>2)]=((__str17)|0);
HEAP32[(((_bufferedrandom_getset)+(44))>>2)]=((FUNCTION_TABLE_OFFSET + 18));
HEAP32[((_bufferediobase_methods)>>2)]=((__str21)|0);
HEAP32[(((_bufferediobase_methods)+(4))>>2)]=((FUNCTION_TABLE_OFFSET + 292));
HEAP32[(((_bufferediobase_methods)+(12))>>2)]=((_bufferediobase_detach_doc)|0);
HEAP32[(((_bufferediobase_methods)+(16))>>2)]=((__str31)|0);
HEAP32[(((_bufferediobase_methods)+(20))>>2)]=(FUNCTION_TABLE_OFFSET + 90);
HEAP32[(((_bufferediobase_methods)+(28))>>2)]=((_bufferediobase_read_doc)|0);
HEAP32[(((_bufferediobase_methods)+(32))>>2)]=((__str32)|0);
HEAP32[(((_bufferediobase_methods)+(36))>>2)]=(FUNCTION_TABLE_OFFSET + 6);
HEAP32[(((_bufferediobase_methods)+(44))>>2)]=((_bufferediobase_read1_doc)|0);
HEAP32[(((_bufferediobase_methods)+(48))>>2)]=((__str33)|0);
HEAP32[(((_bufferediobase_methods)+(52))>>2)]=(FUNCTION_TABLE_OFFSET + 394);
HEAP32[(((_bufferediobase_methods)+(64))>>2)]=((__str36)|0);
HEAP32[(((_bufferediobase_methods)+(68))>>2)]=(FUNCTION_TABLE_OFFSET + 230);
HEAP32[(((_bufferediobase_methods)+(76))>>2)]=((_bufferediobase_write_doc)|0);
HEAP32[((_blockingioerror_members)>>2)]=((__str73)|0);
HEAP32[(((__PyExc_BlockingIOError)+(12))>>2)]=((__str9261)|0);
HEAP32[(((__PyExc_BlockingIOError)+(88))>>2)]=((__str70354)|0);
HEAP32[(((__PyExc_BlockingIOError)+(120))>>2)]=((_blockingioerror_members)|0);
HEAP32[(((__PyExc_BlockingIOError)+(148))>>2)]=((FUNCTION_TABLE_OFFSET + 38));
HEAP32[(((_PyTextIOWrapper_Type)+(12))>>2)]=((__str5426)|0);
HEAP32[(((_PyTextIOWrapper_Type)+(24))>>2)]=((FUNCTION_TABLE_OFFSET + 62));
HEAP32[(((_PyTextIOWrapper_Type)+(44))>>2)]=((FUNCTION_TABLE_OFFSET + 130));
HEAP32[(((_PyTextIOWrapper_Type)+(88))>>2)]=((_textiowrapper_doc)|0);
HEAP32[(((_PyTextIOWrapper_Type)+(92))>>2)]=((FUNCTION_TABLE_OFFSET + 328));
HEAP32[(((_PyTextIOWrapper_Type)+(96))>>2)]=((FUNCTION_TABLE_OFFSET + 132));
HEAP32[(((_PyTextIOWrapper_Type)+(112))>>2)]=((FUNCTION_TABLE_OFFSET + 160));
HEAP32[(((_PyTextIOWrapper_Type)+(116))>>2)]=((_textiowrapper_methods)|0);
HEAP32[(((_PyTextIOWrapper_Type)+(120))>>2)]=((_textiowrapper_members)|0);
HEAP32[(((_PyTextIOWrapper_Type)+(124))>>2)]=((_textiowrapper_getset)|0);
HEAP32[(((_PyTextIOWrapper_Type)+(148))>>2)]=((FUNCTION_TABLE_OFFSET + 16));
HEAP32[(((_PyTextIOWrapper_Type)+(156))>>2)]=(FUNCTION_TABLE_OFFSET + 42);
HEAP32[(((_PyTextIOBase_Type)+(12))>>2)]=((__str417)|0);
HEAP32[(((_PyTextIOBase_Type)+(88))>>2)]=((_textiobase_doc)|0);
HEAP32[(((_PyTextIOBase_Type)+(116))>>2)]=((_textiobase_methods)|0);
HEAP32[(((_PyTextIOBase_Type)+(124))>>2)]=((_textiobase_getset)|0);
HEAP32[(((_PyTextIOBase_Type)+(128))>>2)]=_PyIOBase_Type;
HEAP32[(((_PyStringIO_Type)+(12))>>2)]=((__str360)|0);
HEAP32[(((_PyStringIO_Type)+(24))>>2)]=((FUNCTION_TABLE_OFFSET + 370));
HEAP32[(((_PyStringIO_Type)+(88))>>2)]=((_stringio_doc)|0);
HEAP32[(((_PyStringIO_Type)+(92))>>2)]=((FUNCTION_TABLE_OFFSET + 376));
HEAP32[(((_PyStringIO_Type)+(96))>>2)]=((FUNCTION_TABLE_OFFSET + 80));
HEAP32[(((_PyStringIO_Type)+(112))>>2)]=((FUNCTION_TABLE_OFFSET + 20));
HEAP32[(((_PyStringIO_Type)+(116))>>2)]=((_stringio_methods)|0);
HEAP32[(((_PyStringIO_Type)+(124))>>2)]=((_stringio_getset)|0);
HEAP32[(((_PyStringIO_Type)+(148))>>2)]=((FUNCTION_TABLE_OFFSET + 316));
HEAP32[(((_PyStringIO_Type)+(156))>>2)]=(FUNCTION_TABLE_OFFSET + 48);
HEAP32[(((_PyRawIOBase_Type)+(12))>>2)]=((__str5198)|0);
HEAP32[(((_PyRawIOBase_Type)+(88))>>2)]=((_rawiobase_doc)|0);
HEAP32[(((_PyRawIOBase_Type)+(116))>>2)]=((_rawiobase_methods)|0);
HEAP32[(((_PyRawIOBase_Type)+(128))>>2)]=_PyIOBase_Type;
HEAP32[(((_PyIncrementalNewlineDecoder_Type)+(12))>>2)]=((__str4423)|0);
HEAP32[(((_PyIncrementalNewlineDecoder_Type)+(24))>>2)]=((FUNCTION_TABLE_OFFSET + 72));
HEAP32[(((_PyIncrementalNewlineDecoder_Type)+(88))>>2)]=((_incrementalnewlinedecoder_doc)|0);
HEAP32[(((_PyIncrementalNewlineDecoder_Type)+(116))>>2)]=((_incrementalnewlinedecoder_methods)|0);
HEAP32[(((_PyIncrementalNewlineDecoder_Type)+(124))>>2)]=((_incrementalnewlinedecoder_getset)|0);
HEAP32[(((_PyIncrementalNewlineDecoder_Type)+(148))>>2)]=((FUNCTION_TABLE_OFFSET + 342));
HEAP32[(((_PyIncrementalNewlineDecoder_Type)+(156))>>2)]=(FUNCTION_TABLE_OFFSET + 42);
HEAP32[(((_PyIOBase_Type)+(12))>>2)]=((__str4195)|0);
HEAP32[(((_PyIOBase_Type)+(24))>>2)]=((FUNCTION_TABLE_OFFSET + 60));
HEAP32[(((_PyIOBase_Type)+(88))>>2)]=((_iobase_doc)|0);
HEAP32[(((_PyIOBase_Type)+(92))>>2)]=((FUNCTION_TABLE_OFFSET + 204));
HEAP32[(((_PyIOBase_Type)+(96))>>2)]=((FUNCTION_TABLE_OFFSET + 402));
HEAP32[(((_PyIOBase_Type)+(108))>>2)]=(FUNCTION_TABLE_OFFSET + 190);
HEAP32[(((_PyIOBase_Type)+(112))>>2)]=(FUNCTION_TABLE_OFFSET + 124);
HEAP32[(((_PyIOBase_Type)+(116))>>2)]=((_iobase_methods)|0);
HEAP32[(((_PyIOBase_Type)+(124))>>2)]=((_iobase_getset)|0);
HEAP32[(((_PyIOBase_Type)+(156))>>2)]=((FUNCTION_TABLE_OFFSET + 42));
HEAP32[(((_PyFileIO_Type)+(12))>>2)]=((__str123)|0);
HEAP32[(((_PyFileIO_Type)+(24))>>2)]=((FUNCTION_TABLE_OFFSET + 286));
HEAP32[(((_PyFileIO_Type)+(44))>>2)]=((FUNCTION_TABLE_OFFSET + 58));
HEAP32[(((_PyFileIO_Type)+(72))>>2)]=(FUNCTION_TABLE_OFFSET + 364);
HEAP32[(((_PyFileIO_Type)+(88))>>2)]=((_fileio_doc)|0);
HEAP32[(((_PyFileIO_Type)+(92))>>2)]=((FUNCTION_TABLE_OFFSET + 88));
HEAP32[(((_PyFileIO_Type)+(96))>>2)]=((FUNCTION_TABLE_OFFSET + 268));
HEAP32[(((_PyFileIO_Type)+(116))>>2)]=((_fileio_methods)|0);
HEAP32[(((_PyFileIO_Type)+(124))>>2)]=((_fileio_getsetlist)|0);
HEAP32[(((_PyFileIO_Type)+(148))>>2)]=(FUNCTION_TABLE_OFFSET + 164);
HEAP32[(((_PyFileIO_Type)+(152))>>2)]=(FUNCTION_TABLE_OFFSET + 162);
HEAP32[(((_PyFileIO_Type)+(156))>>2)]=(FUNCTION_TABLE_OFFSET + 186);
HEAP32[(((_PyFileIO_Type)+(160))>>2)]=(FUNCTION_TABLE_OFFSET + 400);
HEAP32[((_PyExc_BlockingIOError)>>2)]=__PyExc_BlockingIOError;
HEAP32[(((_PyBytesIO_Type)+(12))>>2)]=((__str71)|0);
HEAP32[(((_PyBytesIO_Type)+(24))>>2)]=((FUNCTION_TABLE_OFFSET + 32));
HEAP32[(((_PyBytesIO_Type)+(88))>>2)]=((_bytesio_doc)|0);
HEAP32[(((_PyBytesIO_Type)+(92))>>2)]=((FUNCTION_TABLE_OFFSET + 356));
HEAP32[(((_PyBytesIO_Type)+(96))>>2)]=((FUNCTION_TABLE_OFFSET + 112));
HEAP32[(((_PyBytesIO_Type)+(108))>>2)]=(FUNCTION_TABLE_OFFSET + 70);
HEAP32[(((_PyBytesIO_Type)+(112))>>2)]=((FUNCTION_TABLE_OFFSET + 390));
HEAP32[(((_PyBytesIO_Type)+(116))>>2)]=((_bytesio_methods)|0);
HEAP32[(((_PyBytesIO_Type)+(124))>>2)]=((_bytesio_getsetlist)|0);
HEAP32[(((_PyBytesIO_Type)+(148))>>2)]=((FUNCTION_TABLE_OFFSET + 92));
HEAP32[(((_PyBytesIO_Type)+(156))>>2)]=(FUNCTION_TABLE_OFFSET + 24);
HEAP32[(((_PyBufferedWriter_Type)+(12))>>2)]=((__str5)|0);
HEAP32[(((_PyBufferedWriter_Type)+(24))>>2)]=((FUNCTION_TABLE_OFFSET + 128));
HEAP32[(((_PyBufferedWriter_Type)+(44))>>2)]=((FUNCTION_TABLE_OFFSET + 116));
HEAP32[(((_PyBufferedWriter_Type)+(88))>>2)]=((_bufferedwriter_doc)|0);
HEAP32[(((_PyBufferedWriter_Type)+(92))>>2)]=((FUNCTION_TABLE_OFFSET + 266));
HEAP32[(((_PyBufferedWriter_Type)+(96))>>2)]=((FUNCTION_TABLE_OFFSET + 282));
HEAP32[(((_PyBufferedWriter_Type)+(116))>>2)]=((_bufferedwriter_methods)|0);
HEAP32[(((_PyBufferedWriter_Type)+(120))>>2)]=((_bufferedwriter_members)|0);
HEAP32[(((_PyBufferedWriter_Type)+(124))>>2)]=((_bufferedwriter_getset)|0);
HEAP32[(((_PyBufferedWriter_Type)+(148))>>2)]=((FUNCTION_TABLE_OFFSET + 368));
HEAP32[(((_PyBufferedWriter_Type)+(156))>>2)]=(FUNCTION_TABLE_OFFSET + 42);
HEAP32[(((_PyBufferedReader_Type)+(12))>>2)]=((__str4)|0);
HEAP32[(((_PyBufferedReader_Type)+(24))>>2)]=((FUNCTION_TABLE_OFFSET + 128));
HEAP32[(((_PyBufferedReader_Type)+(44))>>2)]=((FUNCTION_TABLE_OFFSET + 116));
HEAP32[(((_PyBufferedReader_Type)+(88))>>2)]=((_bufferedreader_doc)|0);
HEAP32[(((_PyBufferedReader_Type)+(92))>>2)]=((FUNCTION_TABLE_OFFSET + 266));
HEAP32[(((_PyBufferedReader_Type)+(96))>>2)]=((FUNCTION_TABLE_OFFSET + 282));
HEAP32[(((_PyBufferedReader_Type)+(112))>>2)]=((FUNCTION_TABLE_OFFSET + 278));
HEAP32[(((_PyBufferedReader_Type)+(116))>>2)]=((_bufferedreader_methods)|0);
HEAP32[(((_PyBufferedReader_Type)+(120))>>2)]=((_bufferedreader_members)|0);
HEAP32[(((_PyBufferedReader_Type)+(124))>>2)]=((_bufferedreader_getset)|0);
HEAP32[(((_PyBufferedReader_Type)+(148))>>2)]=((FUNCTION_TABLE_OFFSET + 194));
HEAP32[(((_PyBufferedReader_Type)+(156))>>2)]=(FUNCTION_TABLE_OFFSET + 42);
HEAP32[(((_PyBufferedRandom_Type)+(12))>>2)]=((__str7)|0);
HEAP32[(((_PyBufferedRandom_Type)+(24))>>2)]=((FUNCTION_TABLE_OFFSET + 128));
HEAP32[(((_PyBufferedRandom_Type)+(44))>>2)]=((FUNCTION_TABLE_OFFSET + 116));
HEAP32[(((_PyBufferedRandom_Type)+(88))>>2)]=((_bufferedrandom_doc)|0);
HEAP32[(((_PyBufferedRandom_Type)+(92))>>2)]=((FUNCTION_TABLE_OFFSET + 266));
HEAP32[(((_PyBufferedRandom_Type)+(96))>>2)]=((FUNCTION_TABLE_OFFSET + 282));
HEAP32[(((_PyBufferedRandom_Type)+(112))>>2)]=((FUNCTION_TABLE_OFFSET + 278));
HEAP32[(((_PyBufferedRandom_Type)+(116))>>2)]=((_bufferedrandom_methods)|0);
HEAP32[(((_PyBufferedRandom_Type)+(120))>>2)]=((_bufferedrandom_members)|0);
HEAP32[(((_PyBufferedRandom_Type)+(124))>>2)]=((_bufferedrandom_getset)|0);
HEAP32[(((_PyBufferedRandom_Type)+(148))>>2)]=((FUNCTION_TABLE_OFFSET + 276));
HEAP32[(((_PyBufferedRandom_Type)+(156))>>2)]=(FUNCTION_TABLE_OFFSET + 42);
HEAP32[(((_PyBufferedRWPair_Type)+(12))>>2)]=((__str6)|0);
HEAP32[(((_PyBufferedRWPair_Type)+(24))>>2)]=((FUNCTION_TABLE_OFFSET + 312));
HEAP32[(((_PyBufferedRWPair_Type)+(88))>>2)]=((_bufferedrwpair_doc)|0);
HEAP32[(((_PyBufferedRWPair_Type)+(92))>>2)]=((FUNCTION_TABLE_OFFSET + 26));
HEAP32[(((_PyBufferedRWPair_Type)+(96))>>2)]=((FUNCTION_TABLE_OFFSET + 184));
HEAP32[(((_PyBufferedRWPair_Type)+(116))>>2)]=((_bufferedrwpair_methods)|0);
HEAP32[(((_PyBufferedRWPair_Type)+(124))>>2)]=((_bufferedrwpair_getset)|0);
HEAP32[(((_PyBufferedRWPair_Type)+(148))>>2)]=((FUNCTION_TABLE_OFFSET + 68));
HEAP32[(((_PyBufferedRWPair_Type)+(156))>>2)]=(FUNCTION_TABLE_OFFSET + 42);
HEAP32[(((_PyBufferedIOBase_Type)+(12))>>2)]=((__str)|0);
HEAP32[(((_PyBufferedIOBase_Type)+(88))>>2)]=((_bufferediobase_doc)|0);
HEAP32[(((_PyBufferedIOBase_Type)+(116))>>2)]=((_bufferediobase_methods)|0);
HEAP32[(((_PyBufferedIOBase_Type)+(128))>>2)]=_PyIOBase_Type;
}
if (!awaitingMemoryInitializer) runPostSets();
FUNCTION_TABLE.push.apply(FUNCTION_TABLE, [0,0,_utf32be_encode,0,_buffered_flush,0,_bufferediobase_read1,0,_textiowrapper_tell,0,_buffered_fileno
,0,_buffered_truncate,0,_buffered_name_get,0,_textiowrapper_init,0,_buffered_mode_get,0,_stringio_iternext
,0,_get_closed,0,_bytesio_new,0,_bufferedrwpair_traverse,0,_incrementalnewlinedecoder_getstate,0,_textiowrapper_read
,0,_bytesio_dealloc,0,_fileio_truncate,0,_incrementalnewlinedecoder_decode,0,_blockingioerror_init,0,_textiowrapper_closed_get
,0,_PyType_GenericNew,0,__PyIOBase_check_writable,0,_bytesio_truncate,0,_stringio_new,0,_incrementalnewlinedecoder_newlines_get
,0,__PyIOBase_check_readable,0,_stringio_closed,0,_stringio_seekable,0,_fileio_repr,0,_iobase_dealloc
,0,_textiowrapper_dealloc,0,_stringio_setstate,0,_textiowrapper_write,0,_bufferedrwpair_init,0,_PyObject_SelfIter
,0,_incrementalnewlinedecoder_dealloc,0,_buffered_close,0,_bufferedrwpair_read,0,_iobase_seek,0,_stringio_clear
,0,_incrementalnewlinedecoder_reset,0,_textiowrapper_fileno,0,_bufferedrwpair_closed_get,0,_fileio_traverse,0,_bufferediobase_read
,0,_bytesio_init,0,_textiowrapper_readable,0,_iobase_tell,0,_iobase_exit,0,_buffered_readline
,0,_buffered_writable,0,_iobase_fileno,0,_stringio_readline,0,_rawiobase_readall,0,_textiowrapper_detach
,0,_bytesio_clear,0,_iobase_writelines,0,_buffered_repr,0,_stringio_getvalue,0,_utf32_encode
,0,_fileio_writable,0,_iobase_iternext,0,_fileio_seek,0,_buffered_dealloc,0,_textiowrapper_repr
,0,_textiowrapper_clear,0,_textiobase_encoding_get,0,_fileio_readall,0,_textiowrapper_chunk_size_get,0,__PyIOBase_check_seekable
,0,_iobase_flush,0,_bytesio_readline,0,_bytesio_writelines,0,_bufferedrwpair_readable,0,_bytesio_getvalue
,0,_stringio_truncate,0,_bufferedrwpair_read1,0,_bytesio_seek,0,_stringio_write,0,_textiowrapper_iternext
,0,_PyType_GenericAlloc,0,_fileio_init,0,_iobase_truncate,0,_buffered_detach,0,_stringio_read
,0,_iobase_writable,0,_fileio_close,0,_get_closefd,0,_textiowrapper_writable,0,_textiobase_read
,0,_textiowrapper_chunk_size_set,0,_bufferedrwpair_clear,0,_fileio_new,0,_buffered_isatty,0,_iobase_iter
,0,_textiowrapper_errors_get,0,_bufferedreader_init,0,_stringio_close,0,_bufferedrwpair_peek,0,_iobase_close
,0,_utf8_encode,0,_iobase_traverse,0,_utf16_encode,0,_textiowrapper_flush,0,_fileio_readable
,0,_stringio_newlines,0,_bytesio_close,0,_bytesio_flush,0,_utf16be_encode,0,_bytesio_getstate
,0,_textiowrapper_close,0,_bytesio_readinto,0,_textiobase_newlines_get,0,_textiowrapper_newlines_get,0,_bufferediobase_write
,0,_stringio_getstate,0,_buffered_seekable,0,_buffered_simple_flush,0,_iobase_seekable,0,_textiowrapper_isatty
,0,__PyIO_ConvertSsize_t,0,_buffered_read,0,_buffered_peek,0,_fileio_readinto,0,_buffered_readable
,0,_bytesio_setstate,0,_fileio_write,0,_iobase_readable,0,_bytesio_write,0,_bytesio_readlines
,0,_stringio_readable,0,_bytesio_read,0,_buffered_traverse,0,_fileio_clear,0,_bufferedrwpair_close
,0,_bufferedwriter_write,0,_textiowrapper_seekable,0,_bufferedrandom_init,0,_buffered_iternext,0,_latin1_encode
,0,_buffered_clear,0,_bufferedrwpair_writable,0,_fileio_dealloc,0,_rawiobase_read,0,_bufferedrwpair_isatty
,0,_bufferediobase_detach,0,_stringio_line_buffering,0,_io_open,0,_incrementalnewlinedecoder_setstate,0,_stringio_seek
,0,_bufferedrwpair_readinto,0,_iobase_isatty,0,_iobase_closed_get,0,_textiobase_detach,0,_textiowrapper_name_get
,0,_bufferedrwpair_dealloc,0,_fileio_fileno,0,_stringio_init,0,_utf16le_encode,0,_buffered_sizeof
,0,_fileio_isatty,0,_buffered_readinto,0,_textiobase_readline,0,_textiowrapper_traverse,0,_buffered_tell
,0,_textiowrapper_truncate,0,_buffered_seek,0,_bytesio_sizeof,0,_bytesio_isatty,0,_fileio_read
,0,_incrementalnewlinedecoder_init,0,_bytesio_tell,0,_bytesio_get_closed,0,_textiobase_errors_get,0,_iobase_enter
,0,_return_not_closed,0,_stringio_tell,0,_bytesio_traverse,0,_bufferedrwpair_flush,0,_fileio_seekable
,0,_stringio_writable,0,_PyObject_GenericGetAttr,0,_textiowrapper_readline,0,_bufferedwriter_init,0,_stringio_dealloc
,0,_bufferedrwpair_write,0,_buffered_read1,0,_stringio_traverse,0,_get_mode,0,_iobase_readline
,0,__PyIOBase_check_closed,0,_bytesio_read1,0,_fileio_tell,0,_textiobase_write,0,_bytesio_iternext
,0,_buffered_closed_get,0,_bufferediobase_readinto,0,_ascii_encode,0,_iobase_readlines,0,_PyObject_GC_Del,0,_iobase_clear,0,_utf32le_encode,0,_textiowrapper_seek,0]);
// EMSCRIPTEN_START_FUNCS
function _buffered_repr($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $nameobj;
      var $res;
      var $repr;
      $2=$self;
      var $3=$2;
      var $4=$3;
      var $5=_PyObject_GetAttrString($4, ((__str16)|0));
      $nameobj=$5;
      var $6=$nameobj;
      var $7=(($6)|(0))==0;
      if ($7) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $9=HEAP32[((_PyExc_AttributeError)>>2)];
      var $10=_PyErr_ExceptionMatches($9);
      var $11=(($10)|(0))!=0;
      if ($11) { label = 3; break; } else { label = 4; break; }
    case 3: 
      _PyErr_Clear();
      label = 5; break;
    case 4: 
      $1=0;
      label = 20; break;
    case 5: 
      var $15=$2;
      var $16=$15;
      var $17=(($16+4)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18+12)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=_PyString_FromFormat(((__str69)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$20,tempInt));
      $res=$21;
      label = 19; break;
    case 6: 
      var $23=$nameobj;
      var $24=_PyObject_Repr($23);
      $repr=$24;
      label = 7; break;
    case 7: 
      var $26=$nameobj;
      var $27=(($26)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=((($28)-(1))|0);
      HEAP32[(($27)>>2)]=$29;
      var $30=(($29)|(0))!=0;
      if ($30) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 10; break;
    case 9: 
      var $33=$nameobj;
      var $34=(($33+4)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35+24)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=$nameobj;
      FUNCTION_TABLE[$37]($38);
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $41=$repr;
      var $42=(($41)|(0))==0;
      if ($42) { label = 12; break; } else { label = 13; break; }
    case 12: 
      $1=0;
      label = 20; break;
    case 13: 
      var $45=$2;
      var $46=$45;
      var $47=(($46+4)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=(($48+12)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=$repr;
      var $52=$51;
      var $53=(($52+20)|0);
      var $54=(($53)|0);
      var $55=_PyString_FromFormat(((__str70)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$50,HEAP32[(((tempInt)+(4))>>2)]=$54,tempInt));
      $res=$55;
      label = 14; break;
    case 14: 
      var $57=$repr;
      var $58=(($57)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=((($59)-(1))|0);
      HEAP32[(($58)>>2)]=$60;
      var $61=(($60)|(0))!=0;
      if ($61) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 17; break;
    case 16: 
      var $64=$repr;
      var $65=(($64+4)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66+24)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=$repr;
      FUNCTION_TABLE[$68]($69);
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $73=$res;
      $1=$73;
      label = 20; break;
    case 20: 
      var $75=$1;
      STACKTOP = __stackBase__;
      return $75;
    default: assert(0, "bad label: " + label);
  }
}
function _buffered_traverse($self, $visit, $arg) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $vret;
      var $vret1;
      $2=$self;
      $3=$visit;
      $4=$arg;
      label = 2; break;
    case 2: 
      var $6=$2;
      var $7=(($6+8)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $11=$3;
      var $12=$2;
      var $13=(($12+8)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$4;
      var $16=FUNCTION_TABLE[$11]($14, $15);
      $vret=$16;
      var $17=$vret;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $20=$vret;
      $1=$20;
      label = 14; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $25=$2;
      var $26=(($25+68)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27)|(0))!=0;
      if ($28) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $30=$3;
      var $31=$2;
      var $32=(($31+68)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=$4;
      var $35=FUNCTION_TABLE[$30]($33, $34);
      $vret1=$35;
      var $36=$vret1;
      var $37=(($36)|(0))!=0;
      if ($37) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $39=$vret1;
      $1=$39;
      label = 14; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      $1=0;
      label = 14; break;
    case 14: 
      var $44=$1;
      return $44;
    default: assert(0, "bad label: " + label);
  }
}
function _buffered_clear($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $_py_tmp;
      var $_py_tmp1;
      $2=$self;
      var $3=$2;
      var $4=(($3+12)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))!=0;
      if ($6) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $8=$2;
      var $9=$8;
      var $10=__PyIOBase_finalize($9);
      var $11=(($10)|(0)) < 0;
      if ($11) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=-1;
      label = 23; break;
    case 4: 
      var $14=$2;
      var $15=(($14+12)|0);
      HEAP32[(($15)>>2)]=0;
      label = 5; break;
    case 5: 
      var $17=$2;
      var $18=(($17+8)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19)|(0))!=0;
      if ($20) { label = 6; break; } else { label = 12; break; }
    case 6: 
      var $22=$2;
      var $23=(($22+8)|0);
      var $24=HEAP32[(($23)>>2)];
      $_py_tmp=$24;
      var $25=$2;
      var $26=(($25+8)|0);
      HEAP32[(($26)>>2)]=0;
      label = 7; break;
    case 7: 
      var $28=$_py_tmp;
      var $29=(($28)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=((($30)-(1))|0);
      HEAP32[(($29)>>2)]=$31;
      var $32=(($31)|(0))!=0;
      if ($32) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 10; break;
    case 9: 
      var $35=$_py_tmp;
      var $36=(($35+4)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37+24)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=$_py_tmp;
      FUNCTION_TABLE[$39]($40);
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $46=$2;
      var $47=(($46+68)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=(($48)|(0))!=0;
      if ($49) { label = 15; break; } else { label = 21; break; }
    case 15: 
      var $51=$2;
      var $52=(($51+68)|0);
      var $53=HEAP32[(($52)>>2)];
      $_py_tmp1=$53;
      var $54=$2;
      var $55=(($54+68)|0);
      HEAP32[(($55)>>2)]=0;
      label = 16; break;
    case 16: 
      var $57=$_py_tmp1;
      var $58=(($57)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=((($59)-(1))|0);
      HEAP32[(($58)>>2)]=$60;
      var $61=(($60)|(0))!=0;
      if ($61) { label = 17; break; } else { label = 18; break; }
    case 17: 
      label = 19; break;
    case 18: 
      var $64=$_py_tmp1;
      var $65=(($64+4)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66+24)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=$_py_tmp1;
      FUNCTION_TABLE[$68]($69);
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      $1=0;
      label = 23; break;
    case 23: 
      var $75=$1;
      return $75;
    default: assert(0, "bad label: " + label);
  }
}
function _buffered_iternext($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $line;
      var $tp;
      $2=$self;
      var $3=$2;
      var $4=(($3+12)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0)) <= 0;
      if ($6) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $8=$2;
      var $9=(($8+16)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|(0))!=0;
      if ($11) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $13=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($13, ((__str18)|0));
      label = 5; break;
    case 4: 
      var $15=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($15, ((__str19)|0));
      label = 5; break;
    case 5: 
      $1=0;
      label = 28; break;
    case 6: 
      var $18=$2;
      var $19=$18;
      var $20=(($19+4)|0);
      var $21=HEAP32[(($20)>>2)];
      $tp=$21;
      var $22=$tp;
      var $23=(($22)|(0))==((_PyBufferedReader_Type)|(0));
      if ($23) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $25=$tp;
      var $26=(($25)|(0))==((_PyBufferedRandom_Type)|(0));
      if ($26) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $28=$2;
      var $29=__buffered_readline($28, -1);
      $line=$29;
      label = 18; break;
    case 9: 
      var $31=$2;
      var $32=$31;
      var $33=HEAP32[((__PyIO_str_readline)>>2)];
      var $34=_PyObject_CallMethodObjArgs($32, $33, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $line=$34;
      var $35=$line;
      var $36=(($35)|(0))!=0;
      if ($36) { label = 10; break; } else { label = 17; break; }
    case 10: 
      var $38=$line;
      var $39=(($38+4)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40+84)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=$42 & 134217728;
      var $44=(($43)|(0))!=0;
      if ($44) { label = 17; break; } else { label = 11; break; }
    case 11: 
      var $46=HEAP32[((_PyExc_IOError)>>2)];
      var $47=$line;
      var $48=(($47+4)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=(($49+12)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=_PyErr_Format($46, ((__str68)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$51,tempInt));
      label = 12; break;
    case 12: 
      var $54=$line;
      var $55=(($54)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=((($56)-(1))|0);
      HEAP32[(($55)>>2)]=$57;
      var $58=(($57)|(0))!=0;
      if ($58) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 15; break;
    case 14: 
      var $61=$line;
      var $62=(($61+4)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=(($63+24)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=$line;
      FUNCTION_TABLE[$65]($66);
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      $1=0;
      label = 28; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $71=$line;
      var $72=(($71)|(0))==0;
      if ($72) { label = 19; break; } else { label = 20; break; }
    case 19: 
      $1=0;
      label = 28; break;
    case 20: 
      var $75=$line;
      var $76=$75;
      var $77=(($76+8)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=(($78)|(0))==0;
      if ($79) { label = 21; break; } else { label = 27; break; }
    case 21: 
      label = 22; break;
    case 22: 
      var $82=$line;
      var $83=(($82)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=((($84)-(1))|0);
      HEAP32[(($83)>>2)]=$85;
      var $86=(($85)|(0))!=0;
      if ($86) { label = 23; break; } else { label = 24; break; }
    case 23: 
      label = 25; break;
    case 24: 
      var $89=$line;
      var $90=(($89+4)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=(($91+24)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=$line;
      FUNCTION_TABLE[$93]($94);
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      $1=0;
      label = 28; break;
    case 27: 
      var $98=$line;
      $1=$98;
      label = 28; break;
    case 28: 
      var $100=$1;
      STACKTOP = __stackBase__;
      return $100;
    default: assert(0, "bad label: " + label);
  }
}
function __PyIO_trap_eintr() {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $typ=__stackBase__;
      var $val=(__stackBase__)+(4);
      var $tb=(__stackBase__)+(8);
      var $env_err;
      var $2=HEAP32[((__PyIO_trap_eintr_eintr_int)>>2)];
      var $3=(($2)|(0))==0;
      if ($3) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $5=_PyLong_FromLong(4);
      HEAP32[((__PyIO_trap_eintr_eintr_int)>>2)]=$5;
      var $6=HEAP32[((__PyIO_trap_eintr_eintr_int)>>2)];
      var $7=(($6)|(0))!=0;
      if ($7) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 5; break;
    case 4: 
      ___assert_func(((__str1)|0), 734, ((___func____PyIO_trap_eintr)|0), ((__str2)|0));
      throw "Reached an unreachable!";
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $13=HEAP32[((_PyExc_EnvironmentError)>>2)];
      var $14=_PyErr_ExceptionMatches($13);
      var $15=(($14)|(0))!=0;
      if ($15) { label = 8; break; } else { label = 7; break; }
    case 7: 
      $1=0;
      label = 35; break;
    case 8: 
      _PyErr_Fetch($typ, $val, $tb);
      _PyErr_NormalizeException($typ, $val, $tb);
      var $18=HEAP32[(($val)>>2)];
      var $19=$18;
      $env_err=$19;
      var $20=$env_err;
      var $21=(($20)|(0))!=0;
      if ($21) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 11; break;
    case 10: 
      ___assert_func(((__str1)|0), 741, ((___func____PyIO_trap_eintr)|0), ((__str3)|0));
      throw "Reached an unreachable!";
      label = 11; break;
    case 11: 
      var $26=$env_err;
      var $27=(($26+20)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28)|(0))!=0;
      if ($29) { label = 12; break; } else { label = 34; break; }
    case 12: 
      var $31=$env_err;
      var $32=(($31+20)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=HEAP32[((__PyIO_trap_eintr_eintr_int)>>2)];
      var $35=_PyObject_RichCompareBool($33, $34, 2);
      var $36=(($35)|(0)) > 0;
      if ($36) { label = 13; break; } else { label = 34; break; }
    case 13: 
      label = 14; break;
    case 14: 
      var $39=HEAP32[(($typ)>>2)];
      var $40=(($39)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=((($41)-(1))|0);
      HEAP32[(($40)>>2)]=$42;
      var $43=(($42)|(0))!=0;
      if ($43) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 17; break;
    case 16: 
      var $46=HEAP32[(($typ)>>2)];
      var $47=(($46+4)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=(($48+24)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=HEAP32[(($typ)>>2)];
      FUNCTION_TABLE[$50]($51);
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $55=HEAP32[(($val)>>2)];
      var $56=(($55)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=((($57)-(1))|0);
      HEAP32[(($56)>>2)]=$58;
      var $59=(($58)|(0))!=0;
      if ($59) { label = 20; break; } else { label = 21; break; }
    case 20: 
      label = 22; break;
    case 21: 
      var $62=HEAP32[(($val)>>2)];
      var $63=(($62+4)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=(($64+24)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=HEAP32[(($val)>>2)];
      FUNCTION_TABLE[$66]($67);
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $71=HEAP32[(($tb)>>2)];
      var $72=(($71)|(0))==0;
      if ($72) { label = 25; break; } else { label = 26; break; }
    case 25: 
      label = 32; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $76=HEAP32[(($tb)>>2)];
      var $77=(($76)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=((($78)-(1))|0);
      HEAP32[(($77)>>2)]=$79;
      var $80=(($79)|(0))!=0;
      if ($80) { label = 28; break; } else { label = 29; break; }
    case 28: 
      label = 30; break;
    case 29: 
      var $83=HEAP32[(($tb)>>2)];
      var $84=(($83+4)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=(($85+24)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=HEAP32[(($tb)>>2)];
      FUNCTION_TABLE[$87]($88);
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      $1=1;
      label = 35; break;
    case 34: 
      var $94=HEAP32[(($typ)>>2)];
      var $95=HEAP32[(($val)>>2)];
      var $96=HEAP32[(($tb)>>2)];
      _PyErr_Restore($94, $95, $96);
      $1=0;
      label = 35; break;
    case 35: 
      var $98=$1;
      STACKTOP = __stackBase__;
      return $98;
    default: assert(0, "bad label: " + label);
  }
}
function _buffered_dealloc($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $g;
      var $_py_tmp;
      var $_py_tmp1;
      $1=$self;
      var $2=$1;
      var $3=(($2+12)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=(($4)|(0))!=0;
      if ($5) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $7=$1;
      var $8=$7;
      var $9=__PyIOBase_finalize($8);
      var $10=(($9)|(0)) < 0;
      if ($10) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 32; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $14=$1;
      var $15=$14;
      var $16=((($15)-(12))|0);
      $g=$16;
      var $17=$g;
      var $18=$17;
      var $19=(($18+8)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20)|(0))!=-2;
      if ($21) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 8; break;
    case 7: 
      ___assert_func(((__str1)|0), 370, ((___func___buffered_dealloc)|0), ((__str65)|0));
      throw "Reached an unreachable!";
      label = 8; break;
    case 8: 
      var $26=$g;
      var $27=$26;
      var $28=(($27+8)|0);
      HEAP32[(($28)>>2)]=-2;
      var $29=$g;
      var $30=$29;
      var $31=(($30)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=$g;
      var $34=$33;
      var $35=(($34+4)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=$36;
      var $38=(($37)|0);
      HEAP32[(($38)>>2)]=$32;
      var $39=$g;
      var $40=$39;
      var $41=(($40+4)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=$g;
      var $44=$43;
      var $45=(($44)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=$46;
      var $48=(($47+4)|0);
      HEAP32[(($48)>>2)]=$42;
      var $49=$g;
      var $50=$49;
      var $51=(($50)|0);
      HEAP32[(($51)>>2)]=0;
      label = 9; break;
    case 9: 
      var $53=$1;
      var $54=(($53+12)|0);
      HEAP32[(($54)>>2)]=0;
      var $55=$1;
      var $56=(($55+72)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=(($57)|(0))!=0;
      if ($58) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $60=$1;
      var $61=$60;
      _PyObject_ClearWeakRefs($61);
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $64=$1;
      var $65=(($64+8)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66)|(0))!=0;
      if ($67) { label = 13; break; } else { label = 19; break; }
    case 13: 
      var $69=$1;
      var $70=(($69+8)|0);
      var $71=HEAP32[(($70)>>2)];
      $_py_tmp=$71;
      var $72=$1;
      var $73=(($72+8)|0);
      HEAP32[(($73)>>2)]=0;
      label = 14; break;
    case 14: 
      var $75=$_py_tmp;
      var $76=(($75)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=((($77)-(1))|0);
      HEAP32[(($76)>>2)]=$78;
      var $79=(($78)|(0))!=0;
      if ($79) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 17; break;
    case 16: 
      var $82=$_py_tmp;
      var $83=(($82+4)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=(($84+24)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=$_py_tmp;
      FUNCTION_TABLE[$86]($87);
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $92=$1;
      var $93=(($92+36)|0);
      var $94=HEAP32[(($93)>>2)];
      var $95=(($94)|(0))!=0;
      if ($95) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $97=$1;
      var $98=(($97+36)|0);
      var $99=HEAP32[(($98)>>2)];
      _PyMem_Free($99);
      var $100=$1;
      var $101=(($100+36)|0);
      HEAP32[(($101)>>2)]=0;
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $104=$1;
      var $105=(($104+68)|0);
      var $106=HEAP32[(($105)>>2)];
      var $107=(($106)|(0))!=0;
      if ($107) { label = 24; break; } else { label = 30; break; }
    case 24: 
      var $109=$1;
      var $110=(($109+68)|0);
      var $111=HEAP32[(($110)>>2)];
      $_py_tmp1=$111;
      var $112=$1;
      var $113=(($112+68)|0);
      HEAP32[(($113)>>2)]=0;
      label = 25; break;
    case 25: 
      var $115=$_py_tmp1;
      var $116=(($115)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=((($117)-(1))|0);
      HEAP32[(($116)>>2)]=$118;
      var $119=(($118)|(0))!=0;
      if ($119) { label = 26; break; } else { label = 27; break; }
    case 26: 
      label = 28; break;
    case 27: 
      var $122=$_py_tmp1;
      var $123=(($122+4)|0);
      var $124=HEAP32[(($123)>>2)];
      var $125=(($124+24)|0);
      var $126=HEAP32[(($125)>>2)];
      var $127=$_py_tmp1;
      FUNCTION_TABLE[$126]($127);
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $132=$1;
      var $133=$132;
      var $134=(($133+4)|0);
      var $135=HEAP32[(($134)>>2)];
      var $136=(($135+160)|0);
      var $137=HEAP32[(($136)>>2)];
      var $138=$1;
      var $139=$138;
      var $140=$139;
      FUNCTION_TABLE[$137]($140);
      label = 32; break;
    case 32: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _bufferedreader_init($self, $args, $kwds) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 20)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $kwlist=__stackBase__;
      var $buffer_size=(__stackBase__)+(12);
      var $raw=(__stackBase__)+(16);
      var $_py_tmp;
      $2=$self;
      $3=$args;
      $4=$kwds;
      var $5=$kwlist;
      assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[((_bufferedreader_init_kwlist)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[(((_bufferedreader_init_kwlist)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[(((_bufferedreader_init_kwlist)+(8))>>2)];
      HEAP32[(($buffer_size)>>2)]=8192;
      var $6=$2;
      var $7=(($6+12)|0);
      HEAP32[(($7)>>2)]=0;
      var $8=$2;
      var $9=(($8+16)|0);
      HEAP32[(($9)>>2)]=0;
      var $10=$3;
      var $11=$4;
      var $12=(($kwlist)|0);
      var $13=__PyArg_ParseTupleAndKeywords_SizeT($10, $11, ((__str67)|0), $12, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$raw,HEAP32[(((tempInt)+(4))>>2)]=$buffer_size,tempInt));
      var $14=(($13)|(0))!=0;
      if ($14) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=-1;
      label = 19; break;
    case 3: 
      var $17=HEAP32[(($raw)>>2)];
      var $18=__PyIOBase_check_readable($17, __Py_TrueStruct);
      var $19=(($18)|(0))==0;
      if ($19) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=-1;
      label = 19; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $23=$2;
      var $24=(($23+8)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25)|(0))!=0;
      if ($26) { label = 7; break; } else { label = 13; break; }
    case 7: 
      var $28=$2;
      var $29=(($28+8)|0);
      var $30=HEAP32[(($29)>>2)];
      $_py_tmp=$30;
      var $31=$2;
      var $32=(($31+8)|0);
      HEAP32[(($32)>>2)]=0;
      label = 8; break;
    case 8: 
      var $34=$_py_tmp;
      var $35=(($34)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=((($36)-(1))|0);
      HEAP32[(($35)>>2)]=$37;
      var $38=(($37)|(0))!=0;
      if ($38) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 11; break;
    case 10: 
      var $41=$_py_tmp;
      var $42=(($41+4)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($43+24)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=$_py_tmp;
      FUNCTION_TABLE[$45]($46);
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $51=HEAP32[(($raw)>>2)];
      var $52=(($51)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=((($53)+(1))|0);
      HEAP32[(($52)>>2)]=$54;
      var $55=HEAP32[(($raw)>>2)];
      var $56=$2;
      var $57=(($56+8)|0);
      HEAP32[(($57)>>2)]=$55;
      var $58=HEAP32[(($buffer_size)>>2)];
      var $59=$2;
      var $60=(($59+60)|0);
      HEAP32[(($60)>>2)]=$58;
      var $61=$2;
      var $62=(($61+20)|0);
      HEAP32[(($62)>>2)]=1;
      var $63=$2;
      var $64=(($63+24)|0);
      HEAP32[(($64)>>2)]=0;
      var $65=$2;
      var $66=__buffered_init($65);
      var $67=(($66)|(0)) < 0;
      if ($67) { label = 15; break; } else { label = 16; break; }
    case 15: 
      $1=-1;
      label = 19; break;
    case 16: 
      var $70=$2;
      __bufferedreader_reset_buf($70);
      var $71=$2;
      var $72=$71;
      var $73=(($72+4)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=(($74)|(0))==((_PyBufferedReader_Type)|(0));
      if ($75) { label = 17; break; } else { var $82 = 0;label = 18; break; }
    case 17: 
      var $77=HEAP32[(($raw)>>2)];
      var $78=(($77+4)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=(($79)|(0))==((_PyFileIO_Type)|(0));
      var $82 = $80;label = 18; break;
    case 18: 
      var $82;
      var $83=(($82)&(1));
      var $84=$2;
      var $85=(($84+28)|0);
      HEAP32[(($85)>>2)]=$83;
      var $86=$2;
      var $87=(($86+12)|0);
      HEAP32[(($87)>>2)]=1;
      $1=0;
      label = 19; break;
    case 19: 
      var $89=$1;
      STACKTOP = __stackBase__;
      return $89;
    default: assert(0, "bad label: " + label);
  }
}
function _bufferedwriter_init($self, $args, $kwds) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $kwlist=__stackBase__;
      var $buffer_size=(__stackBase__)+(16);
      var $max_buffer_size=(__stackBase__)+(20);
      var $raw=(__stackBase__)+(24);
      var $_py_tmp;
      $2=$self;
      $3=$args;
      $4=$kwds;
      var $5=$kwlist;
      assert(16 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[((_bufferedwriter_init_kwlist)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[(((_bufferedwriter_init_kwlist)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[(((_bufferedwriter_init_kwlist)+(8))>>2)];HEAP32[((($5)+(12))>>2)]=HEAP32[(((_bufferedwriter_init_kwlist)+(12))>>2)];
      HEAP32[(($buffer_size)>>2)]=8192;
      HEAP32[(($max_buffer_size)>>2)]=-234;
      var $6=$2;
      var $7=(($6+12)|0);
      HEAP32[(($7)>>2)]=0;
      var $8=$2;
      var $9=(($8+16)|0);
      HEAP32[(($9)>>2)]=0;
      var $10=$3;
      var $11=$4;
      var $12=(($kwlist)|0);
      var $13=__PyArg_ParseTupleAndKeywords_SizeT($10, $11, ((__str66)|0), $12, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$raw,HEAP32[(((tempInt)+(4))>>2)]=$buffer_size,HEAP32[(((tempInt)+(8))>>2)]=$max_buffer_size,tempInt));
      var $14=(($13)|(0))!=0;
      if ($14) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=-1;
      label = 22; break;
    case 3: 
      var $17=HEAP32[(($max_buffer_size)>>2)];
      var $18=(($17)|(0))!=-234;
      if ($18) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $20=_complain_about_max_buffer_size();
      var $21=(($20)|(0))!=0;
      if ($21) { label = 6; break; } else { label = 5; break; }
    case 5: 
      $1=-1;
      label = 22; break;
    case 6: 
      var $24=HEAP32[(($raw)>>2)];
      var $25=__PyIOBase_check_writable($24, __Py_TrueStruct);
      var $26=(($25)|(0))==0;
      if ($26) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $1=-1;
      label = 22; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $30=$2;
      var $31=(($30+8)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32)|(0))!=0;
      if ($33) { label = 10; break; } else { label = 16; break; }
    case 10: 
      var $35=$2;
      var $36=(($35+8)|0);
      var $37=HEAP32[(($36)>>2)];
      $_py_tmp=$37;
      var $38=$2;
      var $39=(($38+8)|0);
      HEAP32[(($39)>>2)]=0;
      label = 11; break;
    case 11: 
      var $41=$_py_tmp;
      var $42=(($41)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=((($43)-(1))|0);
      HEAP32[(($42)>>2)]=$44;
      var $45=(($44)|(0))!=0;
      if ($45) { label = 12; break; } else { label = 13; break; }
    case 12: 
      label = 14; break;
    case 13: 
      var $48=$_py_tmp;
      var $49=(($48+4)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=(($50+24)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=$_py_tmp;
      FUNCTION_TABLE[$52]($53);
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $58=HEAP32[(($raw)>>2)];
      var $59=(($58)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=((($60)+(1))|0);
      HEAP32[(($59)>>2)]=$61;
      var $62=HEAP32[(($raw)>>2)];
      var $63=$2;
      var $64=(($63+8)|0);
      HEAP32[(($64)>>2)]=$62;
      var $65=$2;
      var $66=(($65+20)|0);
      HEAP32[(($66)>>2)]=0;
      var $67=$2;
      var $68=(($67+24)|0);
      HEAP32[(($68)>>2)]=1;
      var $69=HEAP32[(($buffer_size)>>2)];
      var $70=$2;
      var $71=(($70+60)|0);
      HEAP32[(($71)>>2)]=$69;
      var $72=$2;
      var $73=__buffered_init($72);
      var $74=(($73)|(0)) < 0;
      if ($74) { label = 18; break; } else { label = 19; break; }
    case 18: 
      $1=-1;
      label = 22; break;
    case 19: 
      var $77=$2;
      __bufferedwriter_reset_buf($77);
      var $78=$2;
      var $79=(($78+40)|0);
      HEAP32[(($79)>>2)]=0;
      var $80=$2;
      var $81=$80;
      var $82=(($81+4)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=(($83)|(0))==((_PyBufferedWriter_Type)|(0));
      if ($84) { label = 20; break; } else { var $91 = 0;label = 21; break; }
    case 20: 
      var $86=HEAP32[(($raw)>>2)];
      var $87=(($86+4)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=(($88)|(0))==((_PyFileIO_Type)|(0));
      var $91 = $89;label = 21; break;
    case 21: 
      var $91;
      var $92=(($91)&(1));
      var $93=$2;
      var $94=(($93+28)|0);
      HEAP32[(($94)>>2)]=$92;
      var $95=$2;
      var $96=(($95+12)|0);
      HEAP32[(($96)>>2)]=1;
      $1=0;
      label = 22; break;
    case 22: 
      var $98=$1;
      STACKTOP = __stackBase__;
      return $98;
    default: assert(0, "bad label: " + label);
  }
}
function _bufferedrwpair_traverse($self, $visit, $arg) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $vret;
      $2=$self;
      $3=$visit;
      $4=$arg;
      label = 2; break;
    case 2: 
      var $6=$2;
      var $7=(($6+16)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $11=$3;
      var $12=$2;
      var $13=(($12+16)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$4;
      var $16=FUNCTION_TABLE[$11]($14, $15);
      $vret=$16;
      var $17=$vret;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $20=$vret;
      $1=$20;
      label = 8; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      $1=0;
      label = 8; break;
    case 8: 
      var $25=$1;
      return $25;
    default: assert(0, "bad label: " + label);
  }
}
function _bufferedrwpair_clear($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $_py_tmp;
      var $_py_tmp1;
      var $_py_tmp2;
      $1=$self;
      label = 2; break;
    case 2: 
      var $3=$1;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 9; break; }
    case 3: 
      var $8=$1;
      var $9=(($8+8)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=$10;
      $_py_tmp=$11;
      var $12=$1;
      var $13=(($12+8)|0);
      HEAP32[(($13)>>2)]=0;
      label = 4; break;
    case 4: 
      var $15=$_py_tmp;
      var $16=(($15)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=((($17)-(1))|0);
      HEAP32[(($16)>>2)]=$18;
      var $19=(($18)|(0))!=0;
      if ($19) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 7; break;
    case 6: 
      var $22=$_py_tmp;
      var $23=(($22+4)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24+24)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$_py_tmp;
      FUNCTION_TABLE[$26]($27);
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $33=$1;
      var $34=(($33+12)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35)|(0))!=0;
      if ($36) { label = 12; break; } else { label = 18; break; }
    case 12: 
      var $38=$1;
      var $39=(($38+12)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=$40;
      $_py_tmp1=$41;
      var $42=$1;
      var $43=(($42+12)|0);
      HEAP32[(($43)>>2)]=0;
      label = 13; break;
    case 13: 
      var $45=$_py_tmp1;
      var $46=(($45)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=((($47)-(1))|0);
      HEAP32[(($46)>>2)]=$48;
      var $49=(($48)|(0))!=0;
      if ($49) { label = 14; break; } else { label = 15; break; }
    case 14: 
      label = 16; break;
    case 15: 
      var $52=$_py_tmp1;
      var $53=(($52+4)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54+24)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=$_py_tmp1;
      FUNCTION_TABLE[$56]($57);
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $63=$1;
      var $64=(($63+16)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=(($65)|(0))!=0;
      if ($66) { label = 21; break; } else { label = 27; break; }
    case 21: 
      var $68=$1;
      var $69=(($68+16)|0);
      var $70=HEAP32[(($69)>>2)];
      $_py_tmp2=$70;
      var $71=$1;
      var $72=(($71+16)|0);
      HEAP32[(($72)>>2)]=0;
      label = 22; break;
    case 22: 
      var $74=$_py_tmp2;
      var $75=(($74)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=((($76)-(1))|0);
      HEAP32[(($75)>>2)]=$77;
      var $78=(($77)|(0))!=0;
      if ($78) { label = 23; break; } else { label = 24; break; }
    case 23: 
      label = 25; break;
    case 24: 
      var $81=$_py_tmp2;
      var $82=(($81+4)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=(($83+24)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=$_py_tmp2;
      FUNCTION_TABLE[$85]($86);
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      return 0;
    default: assert(0, "bad label: " + label);
  }
}
function _bufferedrwpair_init($self, $args, $kwds) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $reader=__stackBase__;
      var $writer=(__stackBase__)+(4);
      var $buffer_size=(__stackBase__)+(8);
      var $max_buffer_size=(__stackBase__)+(12);
      var $_py_tmp;
      $2=$self;
      $3=$args;
      $4=$kwds;
      HEAP32[(($buffer_size)>>2)]=8192;
      HEAP32[(($max_buffer_size)>>2)]=-234;
      var $5=$3;
      var $6=__PyArg_ParseTuple_SizeT($5, ((__str62)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$reader,HEAP32[(((tempInt)+(4))>>2)]=$writer,HEAP32[(((tempInt)+(8))>>2)]=$buffer_size,HEAP32[(((tempInt)+(12))>>2)]=$max_buffer_size,tempInt));
      var $7=(($6)|(0))!=0;
      if ($7) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=-1;
      label = 24; break;
    case 3: 
      var $10=HEAP32[(($max_buffer_size)>>2)];
      var $11=(($10)|(0))!=-234;
      if ($11) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $13=_complain_about_max_buffer_size();
      var $14=(($13)|(0))!=0;
      if ($14) { label = 6; break; } else { label = 5; break; }
    case 5: 
      $1=-1;
      label = 24; break;
    case 6: 
      var $17=HEAP32[(($reader)>>2)];
      var $18=__PyIOBase_check_readable($17, __Py_TrueStruct);
      var $19=(($18)|(0))==0;
      if ($19) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $1=-1;
      label = 24; break;
    case 8: 
      var $22=HEAP32[(($writer)>>2)];
      var $23=__PyIOBase_check_writable($22, __Py_TrueStruct);
      var $24=(($23)|(0))==0;
      if ($24) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $1=-1;
      label = 24; break;
    case 10: 
      var $27=HEAP32[(($reader)>>2)];
      var $28=HEAP32[(($buffer_size)>>2)];
      var $29=__PyObject_CallFunction_SizeT(_PyBufferedReader_Type, ((__str63)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$27,HEAP32[(((tempInt)+(4))>>2)]=$28,tempInt));
      var $30=$29;
      var $31=$2;
      var $32=(($31+8)|0);
      HEAP32[(($32)>>2)]=$30;
      var $33=$2;
      var $34=(($33+8)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35)|(0))==0;
      if ($36) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $1=-1;
      label = 24; break;
    case 12: 
      var $39=HEAP32[(($writer)>>2)];
      var $40=HEAP32[(($buffer_size)>>2)];
      var $41=__PyObject_CallFunction_SizeT(_PyBufferedWriter_Type, ((__str63)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$39,HEAP32[(((tempInt)+(4))>>2)]=$40,tempInt));
      var $42=$41;
      var $43=$2;
      var $44=(($43+12)|0);
      HEAP32[(($44)>>2)]=$42;
      var $45=$2;
      var $46=(($45+12)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=(($47)|(0))==0;
      if ($48) { label = 13; break; } else { label = 23; break; }
    case 13: 
      label = 14; break;
    case 14: 
      var $51=$2;
      var $52=(($51+8)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=(($53)|(0))!=0;
      if ($54) { label = 15; break; } else { label = 21; break; }
    case 15: 
      var $56=$2;
      var $57=(($56+8)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=$58;
      $_py_tmp=$59;
      var $60=$2;
      var $61=(($60+8)|0);
      HEAP32[(($61)>>2)]=0;
      label = 16; break;
    case 16: 
      var $63=$_py_tmp;
      var $64=(($63)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=((($65)-(1))|0);
      HEAP32[(($64)>>2)]=$66;
      var $67=(($66)|(0))!=0;
      if ($67) { label = 17; break; } else { label = 18; break; }
    case 17: 
      label = 19; break;
    case 18: 
      var $70=$_py_tmp;
      var $71=(($70+4)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=(($72+24)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=$_py_tmp;
      FUNCTION_TABLE[$74]($75);
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      $1=-1;
      label = 24; break;
    case 23: 
      $1=0;
      label = 24; break;
    case 24: 
      var $82=$1;
      STACKTOP = __stackBase__;
      return $82;
    default: assert(0, "bad label: " + label);
  }
}
function _bufferedrwpair_dealloc($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $g;
      var $_py_tmp;
      var $_py_tmp1;
      var $_py_tmp2;
      $1=$self;
      label = 2; break;
    case 2: 
      var $3=$1;
      var $4=$3;
      var $5=((($4)-(12))|0);
      $g=$5;
      var $6=$g;
      var $7=$6;
      var $8=(($7+8)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9)|(0))!=-2;
      if ($10) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 5; break;
    case 4: 
      ___assert_func(((__str1)|0), 2122, ((___func___bufferedrwpair_dealloc)|0), ((__str65)|0));
      throw "Reached an unreachable!";
      label = 5; break;
    case 5: 
      var $15=$g;
      var $16=$15;
      var $17=(($16+8)|0);
      HEAP32[(($17)>>2)]=-2;
      var $18=$g;
      var $19=$18;
      var $20=(($19)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$g;
      var $23=$22;
      var $24=(($23+4)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=$25;
      var $27=(($26)|0);
      HEAP32[(($27)>>2)]=$21;
      var $28=$g;
      var $29=$28;
      var $30=(($29+4)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=$g;
      var $33=$32;
      var $34=(($33)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=$35;
      var $37=(($36+4)|0);
      HEAP32[(($37)>>2)]=$31;
      var $38=$g;
      var $39=$38;
      var $40=(($39)|0);
      HEAP32[(($40)>>2)]=0;
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $43=$1;
      var $44=(($43+8)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=(($45)|(0))!=0;
      if ($46) { label = 8; break; } else { label = 14; break; }
    case 8: 
      var $48=$1;
      var $49=(($48+8)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=$50;
      $_py_tmp=$51;
      var $52=$1;
      var $53=(($52+8)|0);
      HEAP32[(($53)>>2)]=0;
      label = 9; break;
    case 9: 
      var $55=$_py_tmp;
      var $56=(($55)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=((($57)-(1))|0);
      HEAP32[(($56)>>2)]=$58;
      var $59=(($58)|(0))!=0;
      if ($59) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 12; break;
    case 11: 
      var $62=$_py_tmp;
      var $63=(($62+4)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=(($64+24)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=$_py_tmp;
      FUNCTION_TABLE[$66]($67);
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $73=$1;
      var $74=(($73+12)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=(($75)|(0))!=0;
      if ($76) { label = 17; break; } else { label = 23; break; }
    case 17: 
      var $78=$1;
      var $79=(($78+12)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=$80;
      $_py_tmp1=$81;
      var $82=$1;
      var $83=(($82+12)|0);
      HEAP32[(($83)>>2)]=0;
      label = 18; break;
    case 18: 
      var $85=$_py_tmp1;
      var $86=(($85)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=((($87)-(1))|0);
      HEAP32[(($86)>>2)]=$88;
      var $89=(($88)|(0))!=0;
      if ($89) { label = 19; break; } else { label = 20; break; }
    case 19: 
      label = 21; break;
    case 20: 
      var $92=$_py_tmp1;
      var $93=(($92+4)|0);
      var $94=HEAP32[(($93)>>2)];
      var $95=(($94+24)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=$_py_tmp1;
      FUNCTION_TABLE[$96]($97);
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $103=$1;
      var $104=(($103+16)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=(($105)|(0))!=0;
      if ($106) { label = 26; break; } else { label = 32; break; }
    case 26: 
      var $108=$1;
      var $109=(($108+16)|0);
      var $110=HEAP32[(($109)>>2)];
      $_py_tmp2=$110;
      var $111=$1;
      var $112=(($111+16)|0);
      HEAP32[(($112)>>2)]=0;
      label = 27; break;
    case 27: 
      var $114=$_py_tmp2;
      var $115=(($114)|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=((($116)-(1))|0);
      HEAP32[(($115)>>2)]=$117;
      var $118=(($117)|(0))!=0;
      if ($118) { label = 28; break; } else { label = 29; break; }
    case 28: 
      label = 30; break;
    case 29: 
      var $121=$_py_tmp2;
      var $122=(($121+4)|0);
      var $123=HEAP32[(($122)>>2)];
      var $124=(($123+24)|0);
      var $125=HEAP32[(($124)>>2)];
      var $126=$_py_tmp2;
      FUNCTION_TABLE[$125]($126);
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      var $131=$1;
      var $132=$131;
      var $133=(($132+4)|0);
      var $134=HEAP32[(($133)>>2)];
      var $135=(($134+160)|0);
      var $136=HEAP32[(($135)>>2)];
      var $137=$1;
      var $138=$137;
      var $139=$138;
      FUNCTION_TABLE[$136]($139);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __bufferedreader_reset_buf($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+48)|0);
  HEAP32[(($3)>>2)]=-1;
  return;
}
function __bufferedwriter_reset_buf($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=(($2+52)|0);
  HEAP32[(($3)>>2)]=0;
  var $4=$1;
  var $5=(($4+56)|0);
  HEAP32[(($5)>>2)]=-1;
  return;
}
function _bufferedrandom_init($self, $args, $kwds) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $kwlist=__stackBase__;
      var $buffer_size=(__stackBase__)+(16);
      var $max_buffer_size=(__stackBase__)+(20);
      var $raw=(__stackBase__)+(24);
      var $_py_tmp;
      $2=$self;
      $3=$args;
      $4=$kwds;
      var $5=$kwlist;
      assert(16 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[((_bufferedrandom_init_kwlist)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[(((_bufferedrandom_init_kwlist)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[(((_bufferedrandom_init_kwlist)+(8))>>2)];HEAP32[((($5)+(12))>>2)]=HEAP32[(((_bufferedrandom_init_kwlist)+(12))>>2)];
      HEAP32[(($buffer_size)>>2)]=8192;
      HEAP32[(($max_buffer_size)>>2)]=-234;
      var $6=$2;
      var $7=(($6+12)|0);
      HEAP32[(($7)>>2)]=0;
      var $8=$2;
      var $9=(($8+16)|0);
      HEAP32[(($9)>>2)]=0;
      var $10=$3;
      var $11=$4;
      var $12=(($kwlist)|0);
      var $13=__PyArg_ParseTupleAndKeywords_SizeT($10, $11, ((__str11)|0), $12, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$raw,HEAP32[(((tempInt)+(4))>>2)]=$buffer_size,HEAP32[(((tempInt)+(8))>>2)]=$max_buffer_size,tempInt));
      var $14=(($13)|(0))!=0;
      if ($14) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=-1;
      label = 26; break;
    case 3: 
      var $17=HEAP32[(($max_buffer_size)>>2)];
      var $18=(($17)|(0))!=-234;
      if ($18) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $20=_complain_about_max_buffer_size();
      var $21=(($20)|(0))!=0;
      if ($21) { label = 6; break; } else { label = 5; break; }
    case 5: 
      $1=-1;
      label = 26; break;
    case 6: 
      var $24=HEAP32[(($raw)>>2)];
      var $25=__PyIOBase_check_seekable($24, __Py_TrueStruct);
      var $26=(($25)|(0))==0;
      if ($26) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $1=-1;
      label = 26; break;
    case 8: 
      var $29=HEAP32[(($raw)>>2)];
      var $30=__PyIOBase_check_readable($29, __Py_TrueStruct);
      var $31=(($30)|(0))==0;
      if ($31) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $1=-1;
      label = 26; break;
    case 10: 
      var $34=HEAP32[(($raw)>>2)];
      var $35=__PyIOBase_check_writable($34, __Py_TrueStruct);
      var $36=(($35)|(0))==0;
      if ($36) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $1=-1;
      label = 26; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $40=$2;
      var $41=(($40+8)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($42)|(0))!=0;
      if ($43) { label = 14; break; } else { label = 20; break; }
    case 14: 
      var $45=$2;
      var $46=(($45+8)|0);
      var $47=HEAP32[(($46)>>2)];
      $_py_tmp=$47;
      var $48=$2;
      var $49=(($48+8)|0);
      HEAP32[(($49)>>2)]=0;
      label = 15; break;
    case 15: 
      var $51=$_py_tmp;
      var $52=(($51)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=((($53)-(1))|0);
      HEAP32[(($52)>>2)]=$54;
      var $55=(($54)|(0))!=0;
      if ($55) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 18; break;
    case 17: 
      var $58=$_py_tmp;
      var $59=(($58+4)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=(($60+24)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=$_py_tmp;
      FUNCTION_TABLE[$62]($63);
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $68=HEAP32[(($raw)>>2)];
      var $69=(($68)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=((($70)+(1))|0);
      HEAP32[(($69)>>2)]=$71;
      var $72=HEAP32[(($raw)>>2)];
      var $73=$2;
      var $74=(($73+8)|0);
      HEAP32[(($74)>>2)]=$72;
      var $75=HEAP32[(($buffer_size)>>2)];
      var $76=$2;
      var $77=(($76+60)|0);
      HEAP32[(($77)>>2)]=$75;
      var $78=$2;
      var $79=(($78+20)|0);
      HEAP32[(($79)>>2)]=1;
      var $80=$2;
      var $81=(($80+24)|0);
      HEAP32[(($81)>>2)]=1;
      var $82=$2;
      var $83=__buffered_init($82);
      var $84=(($83)|(0)) < 0;
      if ($84) { label = 22; break; } else { label = 23; break; }
    case 22: 
      $1=-1;
      label = 26; break;
    case 23: 
      var $87=$2;
      __bufferedreader_reset_buf($87);
      var $88=$2;
      __bufferedwriter_reset_buf($88);
      var $89=$2;
      var $90=(($89+40)|0);
      HEAP32[(($90)>>2)]=0;
      var $91=$2;
      var $92=$91;
      var $93=(($92+4)|0);
      var $94=HEAP32[(($93)>>2)];
      var $95=(($94)|(0))==((_PyBufferedRandom_Type)|(0));
      if ($95) { label = 24; break; } else { var $102 = 0;label = 25; break; }
    case 24: 
      var $97=HEAP32[(($raw)>>2)];
      var $98=(($97+4)|0);
      var $99=HEAP32[(($98)>>2)];
      var $100=(($99)|(0))==((_PyFileIO_Type)|(0));
      var $102 = $100;label = 25; break;
    case 25: 
      var $102;
      var $103=(($102)&(1));
      var $104=$2;
      var $105=(($104+28)|0);
      HEAP32[(($105)>>2)]=$103;
      var $106=$2;
      var $107=(($106+12)|0);
      HEAP32[(($107)>>2)]=1;
      $1=0;
      label = 26; break;
    case 26: 
      var $109=$1;
      STACKTOP = __stackBase__;
      return $109;
    default: assert(0, "bad label: " + label);
  }
}
function _complain_about_max_buffer_size() {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2=HEAP32[((_PyExc_DeprecationWarning)>>2)];
      var $3=_PyErr_WarnEx($2, ((__str14)|0), 1);
      var $4=(($3)|(0)) < 0;
      if ($4) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 4; break;
    case 3: 
      $1=1;
      label = 4; break;
    case 4: 
      var $8=$1;
      return $8;
    default: assert(0, "bad label: " + label);
  }
}
function __buffered_init($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $n;
      $2=$self;
      var $3=$2;
      var $4=(($3+60)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0)) <= 0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($8, ((__str12)|0));
      $1=-1;
      label = 17; break;
    case 3: 
      var $10=$2;
      var $11=(($10+36)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12)|(0))!=0;
      if ($13) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $15=$2;
      var $16=(($15+36)|0);
      var $17=HEAP32[(($16)>>2)];
      _PyMem_Free($17);
      label = 5; break;
    case 5: 
      var $19=$2;
      var $20=(($19+60)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=_PyMem_Malloc($21);
      var $23=$2;
      var $24=(($23+36)|0);
      HEAP32[(($24)>>2)]=$22;
      var $25=$2;
      var $26=(($25+36)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27)|(0))==0;
      if ($28) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $30=_PyErr_NoMemory();
      $1=-1;
      label = 17; break;
    case 7: 
      var $32=$2;
      var $33=(($32+60)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=((($34)-(1))|0);
      $n=$35;
      label = 8; break;
    case 8: 
      var $37=$n;
      var $38=$37 & 1;
      var $39=(($38)|(0))!=0;
      if ($39) { label = 9; break; } else { label = 11; break; }
    case 9: 
      label = 10; break;
    case 10: 
      var $42=$n;
      var $43=$42 >> 1;
      $n=$43;
      label = 8; break;
    case 11: 
      var $45=$n;
      var $46=(($45)|(0))==0;
      if ($46) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $48=$2;
      var $49=(($48+60)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=((($50)-(1))|0);
      var $52=$2;
      var $53=(($52+64)|0);
      HEAP32[(($53)>>2)]=$51;
      label = 14; break;
    case 13: 
      var $55=$2;
      var $56=(($55+64)|0);
      HEAP32[(($56)>>2)]=0;
      label = 14; break;
    case 14: 
      var $58=$2;
      var $59=__buffered_raw_tell($58);
      var $60=(($59)|(0))==-1;
      if ($60) { label = 15; break; } else { label = 16; break; }
    case 15: 
      _PyErr_Clear();
      label = 16; break;
    case 16: 
      $1=0;
      label = 17; break;
    case 17: 
      var $64=$1;
      return $64;
    default: assert(0, "bad label: " + label);
  }
}
function __buffered_raw_tell($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $n;
      var $res;
      $2=$self;
      var $3=$2;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=HEAP32[((__PyIO_str_tell)>>2)];
      var $7=_PyObject_CallMethodObjArgs($5, $6, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $res=$7;
      var $8=$res;
      var $9=(($8)|(0))==0;
      if ($9) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=-1;
      label = 13; break;
    case 3: 
      var $12=$res;
      var $13=HEAP32[((_PyExc_ValueError)>>2)];
      var $14=_PyNumber_AsOff_t($12, $13);
      $n=$14;
      label = 4; break;
    case 4: 
      var $16=$res;
      var $17=(($16)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=((($18)-(1))|0);
      HEAP32[(($17)>>2)]=$19;
      var $20=(($19)|(0))!=0;
      if ($20) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 7; break;
    case 6: 
      var $23=$res;
      var $24=(($23+4)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25+24)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$res;
      FUNCTION_TABLE[$27]($28);
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $31=$n;
      var $32=(($31)|(0)) < 0;
      if ($32) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $34=_PyErr_Occurred();
      var $35=(($34)|(0))!=0;
      if ($35) { label = 11; break; } else { label = 10; break; }
    case 10: 
      var $37=HEAP32[((_PyExc_IOError)>>2)];
      var $38=$n;
      var $39=_PyErr_Format($37, ((__str13)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$38,tempInt));
      label = 11; break;
    case 11: 
      $1=-1;
      label = 13; break;
    case 12: 
      var $42=$n;
      var $43=$2;
      var $44=(($43+32)|0);
      HEAP32[(($44)>>2)]=$42;
      var $45=$n;
      $1=$45;
      label = 13; break;
    case 13: 
      var $47=$1;
      STACKTOP = __stackBase__;
      return $47;
    default: assert(0, "bad label: " + label);
  }
}
function _buffered_closed_get($self, $context) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$self;
      $3=$context;
      var $4=$2;
      var $5=(($4+12)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0)) <= 0;
      if ($7) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $9=$2;
      var $10=(($9+16)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($14, ((__str18)|0));
      label = 5; break;
    case 4: 
      var $16=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($16, ((__str19)|0));
      label = 5; break;
    case 5: 
      $1=0;
      label = 7; break;
    case 6: 
      var $19=$2;
      var $20=(($19+8)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=HEAP32[((__PyIO_str_closed)>>2)];
      var $23=_PyObject_GetAttr($21, $22);
      $1=$23;
      label = 7; break;
    case 7: 
      var $25=$1;
      return $25;
    default: assert(0, "bad label: " + label);
  }
}
function _buffered_name_get($self, $context) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$self;
      $3=$context;
      var $4=$2;
      var $5=(($4+12)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0)) <= 0;
      if ($7) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $9=$2;
      var $10=(($9+16)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($14, ((__str18)|0));
      label = 5; break;
    case 4: 
      var $16=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($16, ((__str19)|0));
      label = 5; break;
    case 5: 
      $1=0;
      label = 7; break;
    case 6: 
      var $19=$2;
      var $20=(($19+8)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=_PyObject_GetAttrString($21, ((__str16)|0));
      $1=$22;
      label = 7; break;
    case 7: 
      var $24=$1;
      return $24;
    default: assert(0, "bad label: " + label);
  }
}
function _buffered_mode_get($self, $context) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$self;
      $3=$context;
      var $4=$2;
      var $5=(($4+12)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0)) <= 0;
      if ($7) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $9=$2;
      var $10=(($9+16)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($14, ((__str18)|0));
      label = 5; break;
    case 4: 
      var $16=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($16, ((__str19)|0));
      label = 5; break;
    case 5: 
      $1=0;
      label = 7; break;
    case 6: 
      var $19=$2;
      var $20=(($19+8)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=_PyObject_GetAttrString($21, ((__str17)|0));
      $1=$22;
      label = 7; break;
    case 7: 
      var $24=$1;
      return $24;
    default: assert(0, "bad label: " + label);
  }
}
function _buffered_close($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $res;
      var $exc=__stackBase__;
      var $val=(__stackBase__)+(4);
      var $tb=(__stackBase__)+(8);
      var $r;
      var $_py_tmp;
      $2=$self;
      $3=$args;
      $res=0;
      HEAP32[(($exc)>>2)]=0;
      var $4=$2;
      var $5=(($4+12)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0)) <= 0;
      if ($7) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $9=$2;
      var $10=(($9+16)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($14, ((__str18)|0));
      label = 5; break;
    case 4: 
      var $16=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($16, ((__str19)|0));
      label = 5; break;
    case 5: 
      $1=0;
      label = 59; break;
    case 6: 
      var $19=$2;
      var $20=_buffered_closed($19);
      $r=$20;
      var $21=$r;
      var $22=(($21)|(0)) < 0;
      if ($22) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 58; break;
    case 8: 
      var $25=$r;
      var $26=(($25)|(0)) > 0;
      if ($26) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $res=__Py_NoneStruct;
      var $28=$res;
      var $29=(($28)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=((($30)+(1))|0);
      HEAP32[(($29)>>2)]=$31;
      label = 58; break;
    case 10: 
      var $33=$2;
      var $34=$33;
      var $35=HEAP32[((__PyIO_str_flush)>>2)];
      var $36=_PyObject_CallMethodObjArgs($34, $35, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $res=$36;
      var $37=$res;
      var $38=(($37)|(0))==0;
      if ($38) { label = 11; break; } else { label = 12; break; }
    case 11: 
      _PyErr_Fetch($exc, $val, $tb);
      label = 18; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $42=$res;
      var $43=(($42)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=((($44)-(1))|0);
      HEAP32[(($43)>>2)]=$45;
      var $46=(($45)|(0))!=0;
      if ($46) { label = 14; break; } else { label = 15; break; }
    case 14: 
      label = 16; break;
    case 15: 
      var $49=$res;
      var $50=(($49+4)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=(($51+24)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=$res;
      FUNCTION_TABLE[$53]($54);
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $58=$2;
      var $59=(($58+8)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=HEAP32[((__PyIO_str_close)>>2)];
      var $62=_PyObject_CallMethodObjArgs($60, $61, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $res=$62;
      var $63=HEAP32[(($exc)>>2)];
      var $64=(($63)|(0))!=0;
      if ($64) { label = 19; break; } else { label = 57; break; }
    case 19: 
      var $66=$res;
      var $67=(($66)|(0))!=0;
      if ($67) { label = 20; break; } else { label = 30; break; }
    case 20: 
      label = 21; break;
    case 21: 
      var $70=$res;
      var $71=(($70)|(0))!=0;
      if ($71) { label = 22; break; } else { label = 28; break; }
    case 22: 
      var $73=$res;
      $_py_tmp=$73;
      $res=0;
      label = 23; break;
    case 23: 
      var $75=$_py_tmp;
      var $76=(($75)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=((($77)-(1))|0);
      HEAP32[(($76)>>2)]=$78;
      var $79=(($78)|(0))!=0;
      if ($79) { label = 24; break; } else { label = 25; break; }
    case 24: 
      label = 26; break;
    case 25: 
      var $82=$_py_tmp;
      var $83=(($82+4)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=(($84+24)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=$_py_tmp;
      FUNCTION_TABLE[$86]($87);
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $92=HEAP32[(($exc)>>2)];
      var $93=HEAP32[(($val)>>2)];
      var $94=HEAP32[(($tb)>>2)];
      _PyErr_Restore($92, $93, $94);
      label = 56; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $97=HEAP32[(($exc)>>2)];
      var $98=(($97)|0);
      var $99=HEAP32[(($98)>>2)];
      var $100=((($99)-(1))|0);
      HEAP32[(($98)>>2)]=$100;
      var $101=(($100)|(0))!=0;
      if ($101) { label = 32; break; } else { label = 33; break; }
    case 32: 
      label = 34; break;
    case 33: 
      var $104=HEAP32[(($exc)>>2)];
      var $105=(($104+4)|0);
      var $106=HEAP32[(($105)>>2)];
      var $107=(($106+24)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=HEAP32[(($exc)>>2)];
      FUNCTION_TABLE[$108]($109);
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $113=HEAP32[(($val)>>2)];
      var $114=(($113)|(0))==0;
      if ($114) { label = 37; break; } else { label = 38; break; }
    case 37: 
      label = 44; break;
    case 38: 
      label = 39; break;
    case 39: 
      var $118=HEAP32[(($val)>>2)];
      var $119=(($118)|0);
      var $120=HEAP32[(($119)>>2)];
      var $121=((($120)-(1))|0);
      HEAP32[(($119)>>2)]=$121;
      var $122=(($121)|(0))!=0;
      if ($122) { label = 40; break; } else { label = 41; break; }
    case 40: 
      label = 42; break;
    case 41: 
      var $125=HEAP32[(($val)>>2)];
      var $126=(($125+4)|0);
      var $127=HEAP32[(($126)>>2)];
      var $128=(($127+24)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=HEAP32[(($val)>>2)];
      FUNCTION_TABLE[$129]($130);
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      var $136=HEAP32[(($tb)>>2)];
      var $137=(($136)|(0))==0;
      if ($137) { label = 47; break; } else { label = 48; break; }
    case 47: 
      label = 54; break;
    case 48: 
      label = 49; break;
    case 49: 
      var $141=HEAP32[(($tb)>>2)];
      var $142=(($141)|0);
      var $143=HEAP32[(($142)>>2)];
      var $144=((($143)-(1))|0);
      HEAP32[(($142)>>2)]=$144;
      var $145=(($144)|(0))!=0;
      if ($145) { label = 50; break; } else { label = 51; break; }
    case 50: 
      label = 52; break;
    case 51: 
      var $148=HEAP32[(($tb)>>2)];
      var $149=(($148+4)|0);
      var $150=HEAP32[(($149)>>2)];
      var $151=(($150+24)|0);
      var $152=HEAP32[(($151)>>2)];
      var $153=HEAP32[(($tb)>>2)];
      FUNCTION_TABLE[$152]($153);
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      var $161=$res;
      $1=$161;
      label = 59; break;
    case 59: 
      var $163=$1;
      STACKTOP = __stackBase__;
      return $163;
    default: assert(0, "bad label: " + label);
  }
}
function _buffered_detach($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $raw;
      var $res;
      $2=$self;
      $3=$args;
      var $4=$2;
      var $5=(($4+12)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0)) <= 0;
      if ($7) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $9=$2;
      var $10=(($9+16)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($14, ((__str18)|0));
      label = 5; break;
    case 4: 
      var $16=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($16, ((__str19)|0));
      label = 5; break;
    case 5: 
      $1=0;
      label = 14; break;
    case 6: 
      var $19=$2;
      var $20=$19;
      var $21=HEAP32[((__PyIO_str_flush)>>2)];
      var $22=_PyObject_CallMethodObjArgs($20, $21, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $res=$22;
      var $23=$res;
      var $24=(($23)|(0))==0;
      if ($24) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $1=0;
      label = 14; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $28=$res;
      var $29=(($28)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=((($30)-(1))|0);
      HEAP32[(($29)>>2)]=$31;
      var $32=(($31)|(0))!=0;
      if ($32) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 12; break;
    case 11: 
      var $35=$res;
      var $36=(($35+4)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37+24)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=$res;
      FUNCTION_TABLE[$39]($40);
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $43=$2;
      var $44=(($43+8)|0);
      var $45=HEAP32[(($44)>>2)];
      $raw=$45;
      var $46=$2;
      var $47=(($46+8)|0);
      HEAP32[(($47)>>2)]=0;
      var $48=$2;
      var $49=(($48+16)|0);
      HEAP32[(($49)>>2)]=1;
      var $50=$2;
      var $51=(($50+12)|0);
      HEAP32[(($51)>>2)]=0;
      var $52=$raw;
      $1=$52;
      label = 14; break;
    case 14: 
      var $54=$1;
      STACKTOP = __stackBase__;
      return $54;
    default: assert(0, "bad label: " + label);
  }
}
function _buffered_seekable($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$self;
      $3=$args;
      var $4=$2;
      var $5=(($4+12)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0)) <= 0;
      if ($7) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $9=$2;
      var $10=(($9+16)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($14, ((__str18)|0));
      label = 5; break;
    case 4: 
      var $16=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($16, ((__str19)|0));
      label = 5; break;
    case 5: 
      $1=0;
      label = 7; break;
    case 6: 
      var $19=$2;
      var $20=(($19+8)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=HEAP32[((__PyIO_str_seekable)>>2)];
      var $23=_PyObject_CallMethodObjArgs($21, $22, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=$23;
      label = 7; break;
    case 7: 
      var $25=$1;
      STACKTOP = __stackBase__;
      return $25;
    default: assert(0, "bad label: " + label);
  }
}
function _buffered_readable($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$self;
      $3=$args;
      var $4=$2;
      var $5=(($4+12)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0)) <= 0;
      if ($7) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $9=$2;
      var $10=(($9+16)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($14, ((__str18)|0));
      label = 5; break;
    case 4: 
      var $16=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($16, ((__str19)|0));
      label = 5; break;
    case 5: 
      $1=0;
      label = 7; break;
    case 6: 
      var $19=$2;
      var $20=(($19+8)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=HEAP32[((__PyIO_str_readable)>>2)];
      var $23=_PyObject_CallMethodObjArgs($21, $22, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=$23;
      label = 7; break;
    case 7: 
      var $25=$1;
      STACKTOP = __stackBase__;
      return $25;
    default: assert(0, "bad label: " + label);
  }
}
function _buffered_writable($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$self;
      $3=$args;
      var $4=$2;
      var $5=(($4+12)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0)) <= 0;
      if ($7) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $9=$2;
      var $10=(($9+16)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($14, ((__str18)|0));
      label = 5; break;
    case 4: 
      var $16=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($16, ((__str19)|0));
      label = 5; break;
    case 5: 
      $1=0;
      label = 7; break;
    case 6: 
      var $19=$2;
      var $20=(($19+8)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=HEAP32[((__PyIO_str_writable)>>2)];
      var $23=_PyObject_CallMethodObjArgs($21, $22, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=$23;
      label = 7; break;
    case 7: 
      var $25=$1;
      STACKTOP = __stackBase__;
      return $25;
    default: assert(0, "bad label: " + label);
  }
}
function _buffered_fileno($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$self;
      $3=$args;
      var $4=$2;
      var $5=(($4+12)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0)) <= 0;
      if ($7) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $9=$2;
      var $10=(($9+16)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($14, ((__str18)|0));
      label = 5; break;
    case 4: 
      var $16=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($16, ((__str19)|0));
      label = 5; break;
    case 5: 
      $1=0;
      label = 7; break;
    case 6: 
      var $19=$2;
      var $20=(($19+8)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=HEAP32[((__PyIO_str_fileno)>>2)];
      var $23=_PyObject_CallMethodObjArgs($21, $22, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=$23;
      label = 7; break;
    case 7: 
      var $25=$1;
      STACKTOP = __stackBase__;
      return $25;
    default: assert(0, "bad label: " + label);
  }
}
function _buffered_isatty($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$self;
      $3=$args;
      var $4=$2;
      var $5=(($4+12)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0)) <= 0;
      if ($7) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $9=$2;
      var $10=(($9+16)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($14, ((__str18)|0));
      label = 5; break;
    case 4: 
      var $16=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($16, ((__str19)|0));
      label = 5; break;
    case 5: 
      $1=0;
      label = 7; break;
    case 6: 
      var $19=$2;
      var $20=(($19+8)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=HEAP32[((__PyIO_str_isatty)>>2)];
      var $23=_PyObject_CallMethodObjArgs($21, $22, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=$23;
      label = 7; break;
    case 7: 
      var $25=$1;
      STACKTOP = __stackBase__;
      return $25;
    default: assert(0, "bad label: " + label);
  }
}
function _buffered_flush($self, $args) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $res;
      $2=$self;
      $3=$args;
      var $4=$2;
      var $5=(($4+12)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0)) <= 0;
      if ($7) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $9=$2;
      var $10=(($9+16)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($14, ((__str18)|0));
      label = 5; break;
    case 4: 
      var $16=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($16, ((__str19)|0));
      label = 5; break;
    case 5: 
      $1=0;
      label = 11; break;
    case 6: 
      var $19=$2;
      var $20=(($19+28)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21)|(0))!=0;
      if ($22) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $24=$2;
      var $25=(($24+8)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=__PyFileIO_closed($26);
      var $28=(($27)|(0))!=0;
      if ($28) { label = 9; break; } else { label = 10; break; }
    case 8: 
      var $30=$2;
      var $31=_buffered_closed($30);
      var $32=(($31)|(0))!=0;
      if ($32) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $34=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($34, ((__str61)|0));
      $1=0;
      label = 11; break;
    case 10: 
      var $36=$2;
      var $37=_buffered_flush_and_rewind_unlocked($36);
      $res=$37;
      var $38=$res;
      $1=$38;
      label = 11; break;
    case 11: 
      var $40=$1;
      return $40;
    default: assert(0, "bad label: " + label);
  }
}
function _buffered_seek($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $target;
      var $n;
      var $whence=__stackBase__;
      var $targetobj=(__stackBase__)+(4);
      var $res;
      var $current;
      var $avail;
      var $offset;
      var $_py_tmp;
      $2=$self;
      $3=$args;
      HEAP32[(($whence)>>2)]=0;
      $res=0;
      var $4=$2;
      var $5=(($4+12)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0)) <= 0;
      if ($7) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $9=$2;
      var $10=(($9+16)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($14, ((__str18)|0));
      label = 5; break;
    case 4: 
      var $16=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($16, ((__str19)|0));
      label = 5; break;
    case 5: 
      $1=0;
      label = 73; break;
    case 6: 
      var $19=$3;
      var $20=__PyArg_ParseTuple_SizeT($19, ((__str58)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$targetobj,HEAP32[(((tempInt)+(4))>>2)]=$whence,tempInt));
      var $21=(($20)|(0))!=0;
      if ($21) { label = 8; break; } else { label = 7; break; }
    case 7: 
      $1=0;
      label = 73; break;
    case 8: 
      var $24=HEAP32[(($whence)>>2)];
      var $25=(($24)|(0)) < 0;
      if ($25) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $27=HEAP32[(($whence)>>2)];
      var $28=(($27)|(0)) > 2;
      if ($28) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $30=HEAP32[((_PyExc_ValueError)>>2)];
      var $31=HEAP32[(($whence)>>2)];
      var $32=_PyErr_Format($30, ((__str59)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$31,tempInt));
      $1=0;
      label = 73; break;
    case 11: 
      var $34=$2;
      var $35=(($34+28)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36)|(0))!=0;
      if ($37) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $39=$2;
      var $40=(($39+8)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=__PyFileIO_closed($41);
      var $43=(($42)|(0))!=0;
      if ($43) { label = 14; break; } else { label = 15; break; }
    case 13: 
      var $45=$2;
      var $46=_buffered_closed($45);
      var $47=(($46)|(0))!=0;
      if ($47) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $49=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($49, ((__str60)|0));
      $1=0;
      label = 73; break;
    case 15: 
      var $51=HEAP32[(($targetobj)>>2)];
      var $52=HEAP32[((_PyExc_ValueError)>>2)];
      var $53=_PyNumber_AsOff_t($51, $52);
      $target=$53;
      var $54=$target;
      var $55=(($54)|(0))==-1;
      if ($55) { label = 16; break; } else { label = 18; break; }
    case 16: 
      var $57=_PyErr_Occurred();
      var $58=(($57)|(0))!=0;
      if ($58) { label = 17; break; } else { label = 18; break; }
    case 17: 
      $1=0;
      label = 73; break;
    case 18: 
      var $61=HEAP32[(($whence)>>2)];
      var $62=(($61)|(0))!=2;
      if ($62) { label = 19; break; } else { label = 44; break; }
    case 19: 
      var $64=$2;
      var $65=(($64+20)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66)|(0))!=0;
      if ($67) { label = 20; break; } else { label = 44; break; }
    case 20: 
      var $69=$2;
      var $70=(($69+32)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=(($71)|(0))!=-1;
      if ($72) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $74=$2;
      var $75=(($74+32)|0);
      var $76=HEAP32[(($75)>>2)];
      var $81 = $76;label = 23; break;
    case 22: 
      var $78=$2;
      var $79=__buffered_raw_tell($78);
      var $81 = $79;label = 23; break;
    case 23: 
      var $81;
      $current=$81;
      var $82=$2;
      var $83=(($82+20)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=(($84)|(0))!=0;
      if ($85) { label = 24; break; } else { label = 27; break; }
    case 24: 
      var $87=$2;
      var $88=(($87+20)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=(($89)|(0))!=0;
      if ($90) { label = 25; break; } else { label = 27; break; }
    case 25: 
      var $92=$2;
      var $93=(($92+48)|0);
      var $94=HEAP32[(($93)>>2)];
      var $95=(($94)|(0))!=-1;
      if ($95) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $97=$2;
      var $98=(($97+48)|0);
      var $99=HEAP32[(($98)>>2)];
      var $100=$2;
      var $101=(($100+40)|0);
      var $102=HEAP32[(($101)>>2)];
      var $103=((($99)-($102))|0);
      var $106 = $103;label = 28; break;
    case 27: 
      var $106 = 0;label = 28; break;
    case 28: 
      var $106;
      $avail=$106;
      var $107=$avail;
      var $108=(($107)|(0)) > 0;
      if ($108) { label = 29; break; } else { label = 43; break; }
    case 29: 
      var $110=HEAP32[(($whence)>>2)];
      var $111=(($110)|(0))==0;
      if ($111) { label = 30; break; } else { label = 38; break; }
    case 30: 
      var $113=$target;
      var $114=$current;
      var $115=$2;
      var $116=(($115+20)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=(($117)|(0))!=0;
      if ($118) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $120=$2;
      var $121=(($120+48)|0);
      var $122=HEAP32[(($121)>>2)];
      var $123=(($122)|(0))!=-1;
      if ($123) { label = 34; break; } else { label = 32; break; }
    case 32: 
      var $125=$2;
      var $126=(($125+24)|0);
      var $127=HEAP32[(($126)>>2)];
      var $128=(($127)|(0))!=0;
      if ($128) { label = 33; break; } else { label = 36; break; }
    case 33: 
      var $130=$2;
      var $131=(($130+56)|0);
      var $132=HEAP32[(($131)>>2)];
      var $133=(($132)|(0))!=-1;
      if ($133) { label = 34; break; } else { label = 36; break; }
    case 34: 
      var $135=$2;
      var $136=(($135+44)|0);
      var $137=HEAP32[(($136)>>2)];
      var $138=(($137)|(0)) >= 0;
      if ($138) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $140=$2;
      var $141=(($140+44)|0);
      var $142=HEAP32[(($141)>>2)];
      var $143=$2;
      var $144=(($143+40)|0);
      var $145=HEAP32[(($144)>>2)];
      var $146=((($142)-($145))|0);
      var $149 = $146;label = 37; break;
    case 36: 
      var $149 = 0;label = 37; break;
    case 37: 
      var $149;
      var $150=((($114)-($149))|0);
      var $151=((($113)-($150))|0);
      $offset=$151;
      label = 39; break;
    case 38: 
      var $153=$target;
      $offset=$153;
      label = 39; break;
    case 39: 
      var $155=$offset;
      var $156=$2;
      var $157=(($156+40)|0);
      var $158=HEAP32[(($157)>>2)];
      var $159=(((-$158))|0);
      var $160=(($155)|(0)) >= (($159)|(0));
      if ($160) { label = 40; break; } else { label = 42; break; }
    case 40: 
      var $162=$offset;
      var $163=$avail;
      var $164=(($162)|(0)) <= (($163)|(0));
      if ($164) { label = 41; break; } else { label = 42; break; }
    case 41: 
      var $166=$offset;
      var $167=$2;
      var $168=(($167+40)|0);
      var $169=HEAP32[(($168)>>2)];
      var $170=((($169)+($166))|0);
      HEAP32[(($168)>>2)]=$170;
      var $171=$current;
      var $172=$avail;
      var $173=((($171)-($172))|0);
      var $174=$offset;
      var $175=((($173)+($174))|0);
      var $176=_PyLong_FromSsize_t($175);
      $1=$176;
      label = 73; break;
    case 42: 
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      var $180=$2;
      var $181=(($180+24)|0);
      var $182=HEAP32[(($181)>>2)];
      var $183=(($182)|(0))!=0;
      if ($183) { label = 45; break; } else { label = 57; break; }
    case 45: 
      var $185=$2;
      var $186=__bufferedwriter_flush_unlocked($185);
      $res=$186;
      var $187=$res;
      var $188=(($187)|(0))==0;
      if ($188) { label = 46; break; } else { label = 47; break; }
    case 46: 
      label = 72; break;
    case 47: 
      label = 48; break;
    case 48: 
      var $192=$res;
      var $193=(($192)|(0))!=0;
      if ($193) { label = 49; break; } else { label = 55; break; }
    case 49: 
      var $195=$res;
      $_py_tmp=$195;
      $res=0;
      label = 50; break;
    case 50: 
      var $197=$_py_tmp;
      var $198=(($197)|0);
      var $199=HEAP32[(($198)>>2)];
      var $200=((($199)-(1))|0);
      HEAP32[(($198)>>2)]=$200;
      var $201=(($200)|(0))!=0;
      if ($201) { label = 51; break; } else { label = 52; break; }
    case 51: 
      label = 53; break;
    case 52: 
      var $204=$_py_tmp;
      var $205=(($204+4)|0);
      var $206=HEAP32[(($205)>>2)];
      var $207=(($206+24)|0);
      var $208=HEAP32[(($207)>>2)];
      var $209=$_py_tmp;
      FUNCTION_TABLE[$208]($209);
      label = 53; break;
    case 53: 
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      var $214=$2;
      __bufferedwriter_reset_buf($214);
      label = 57; break;
    case 57: 
      var $216=HEAP32[(($whence)>>2)];
      var $217=(($216)|(0))==1;
      if ($217) { label = 58; break; } else { label = 66; break; }
    case 58: 
      var $219=$2;
      var $220=(($219+20)|0);
      var $221=HEAP32[(($220)>>2)];
      var $222=(($221)|(0))!=0;
      if ($222) { label = 59; break; } else { label = 60; break; }
    case 59: 
      var $224=$2;
      var $225=(($224+48)|0);
      var $226=HEAP32[(($225)>>2)];
      var $227=(($226)|(0))!=-1;
      if ($227) { label = 62; break; } else { label = 60; break; }
    case 60: 
      var $229=$2;
      var $230=(($229+24)|0);
      var $231=HEAP32[(($230)>>2)];
      var $232=(($231)|(0))!=0;
      if ($232) { label = 61; break; } else { label = 64; break; }
    case 61: 
      var $234=$2;
      var $235=(($234+56)|0);
      var $236=HEAP32[(($235)>>2)];
      var $237=(($236)|(0))!=-1;
      if ($237) { label = 62; break; } else { label = 64; break; }
    case 62: 
      var $239=$2;
      var $240=(($239+44)|0);
      var $241=HEAP32[(($240)>>2)];
      var $242=(($241)|(0)) >= 0;
      if ($242) { label = 63; break; } else { label = 64; break; }
    case 63: 
      var $244=$2;
      var $245=(($244+44)|0);
      var $246=HEAP32[(($245)>>2)];
      var $247=$2;
      var $248=(($247+40)|0);
      var $249=HEAP32[(($248)>>2)];
      var $250=((($246)-($249))|0);
      var $253 = $250;label = 65; break;
    case 64: 
      var $253 = 0;label = 65; break;
    case 65: 
      var $253;
      var $254=$target;
      var $255=((($254)-($253))|0);
      $target=$255;
      label = 66; break;
    case 66: 
      var $257=$2;
      var $258=$target;
      var $259=HEAP32[(($whence)>>2)];
      var $260=__buffered_raw_seek($257, $258, $259);
      $n=$260;
      var $261=$n;
      var $262=(($261)|(0))==-1;
      if ($262) { label = 67; break; } else { label = 68; break; }
    case 67: 
      label = 72; break;
    case 68: 
      var $265=$2;
      var $266=(($265+44)|0);
      HEAP32[(($266)>>2)]=-1;
      var $267=$n;
      var $268=_PyLong_FromSsize_t($267);
      $res=$268;
      var $269=$res;
      var $270=(($269)|(0))!=0;
      if ($270) { label = 69; break; } else { label = 71; break; }
    case 69: 
      var $272=$2;
      var $273=(($272+20)|0);
      var $274=HEAP32[(($273)>>2)];
      var $275=(($274)|(0))!=0;
      if ($275) { label = 70; break; } else { label = 71; break; }
    case 70: 
      var $277=$2;
      __bufferedreader_reset_buf($277);
      label = 71; break;
    case 71: 
      label = 72; break;
    case 72: 
      var $280=$res;
      $1=$280;
      label = 73; break;
    case 73: 
      var $282=$1;
      STACKTOP = __stackBase__;
      return $282;
    default: assert(0, "bad label: " + label);
  }
}
function _buffered_tell($self, $args) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $pos;
      $2=$self;
      $3=$args;
      var $4=$2;
      var $5=(($4+12)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0)) <= 0;
      if ($7) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $9=$2;
      var $10=(($9+16)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($14, ((__str18)|0));
      label = 5; break;
    case 4: 
      var $16=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($16, ((__str19)|0));
      label = 5; break;
    case 5: 
      $1=0;
      label = 16; break;
    case 6: 
      var $19=$2;
      var $20=__buffered_raw_tell($19);
      $pos=$20;
      var $21=$pos;
      var $22=(($21)|(0))==-1;
      if ($22) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $1=0;
      label = 16; break;
    case 8: 
      var $25=$2;
      var $26=(($25+20)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27)|(0))!=0;
      if ($28) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $30=$2;
      var $31=(($30+48)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32)|(0))!=-1;
      if ($33) { label = 12; break; } else { label = 10; break; }
    case 10: 
      var $35=$2;
      var $36=(($35+24)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37)|(0))!=0;
      if ($38) { label = 11; break; } else { label = 14; break; }
    case 11: 
      var $40=$2;
      var $41=(($40+56)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($42)|(0))!=-1;
      if ($43) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $45=$2;
      var $46=(($45+44)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=(($47)|(0)) >= 0;
      if ($48) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $50=$2;
      var $51=(($50+44)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=$2;
      var $54=(($53+40)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=((($52)-($55))|0);
      var $59 = $56;label = 15; break;
    case 14: 
      var $59 = 0;label = 15; break;
    case 15: 
      var $59;
      var $60=$pos;
      var $61=((($60)-($59))|0);
      $pos=$61;
      var $62=$pos;
      var $63=_PyLong_FromSsize_t($62);
      $1=$63;
      label = 16; break;
    case 16: 
      var $65=$1;
      return $65;
    default: assert(0, "bad label: " + label);
  }
}
function _buffered_truncate($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $pos=__stackBase__;
      var $res;
      var $_py_tmp;
      $2=$self;
      $3=$args;
      HEAP32[(($pos)>>2)]=__Py_NoneStruct;
      $res=0;
      var $4=$2;
      var $5=(($4+12)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0)) <= 0;
      if ($7) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $9=$2;
      var $10=(($9+16)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($14, ((__str18)|0));
      label = 5; break;
    case 4: 
      var $16=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($16, ((__str19)|0));
      label = 5; break;
    case 5: 
      $1=0;
      label = 27; break;
    case 6: 
      var $19=$3;
      var $20=__PyArg_ParseTuple_SizeT($19, ((__str57)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$pos,tempInt));
      var $21=(($20)|(0))!=0;
      if ($21) { label = 8; break; } else { label = 7; break; }
    case 7: 
      $1=0;
      label = 27; break;
    case 8: 
      var $24=$2;
      var $25=(($24+24)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26)|(0))!=0;
      if ($27) { label = 9; break; } else { label = 21; break; }
    case 9: 
      var $29=$2;
      var $30=_buffered_flush_and_rewind_unlocked($29);
      $res=$30;
      var $31=$res;
      var $32=(($31)|(0))==0;
      if ($32) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 26; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $36=$res;
      var $37=(($36)|(0))!=0;
      if ($37) { label = 13; break; } else { label = 19; break; }
    case 13: 
      var $39=$res;
      $_py_tmp=$39;
      $res=0;
      label = 14; break;
    case 14: 
      var $41=$_py_tmp;
      var $42=(($41)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=((($43)-(1))|0);
      HEAP32[(($42)>>2)]=$44;
      var $45=(($44)|(0))!=0;
      if ($45) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 17; break;
    case 16: 
      var $48=$_py_tmp;
      var $49=(($48+4)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=(($50+24)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=$_py_tmp;
      FUNCTION_TABLE[$52]($53);
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $59=$2;
      var $60=(($59+8)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=HEAP32[((__PyIO_str_truncate)>>2)];
      var $63=HEAP32[(($pos)>>2)];
      var $64=_PyObject_CallMethodObjArgs($61, $62, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$63,HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
      $res=$64;
      var $65=$res;
      var $66=(($65)|(0))==0;
      if ($66) { label = 22; break; } else { label = 23; break; }
    case 22: 
      label = 26; break;
    case 23: 
      var $69=$2;
      var $70=__buffered_raw_tell($69);
      var $71=(($70)|(0))==-1;
      if ($71) { label = 24; break; } else { label = 25; break; }
    case 24: 
      _PyErr_Clear();
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $75=$res;
      $1=$75;
      label = 27; break;
    case 27: 
      var $77=$1;
      STACKTOP = __stackBase__;
      return $77;
    default: assert(0, "bad label: " + label);
  }
}
function _buffered_read($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $n=__stackBase__;
      var $res;
      $2=$self;
      $3=$args;
      HEAP32[(($n)>>2)]=-1;
      var $4=$2;
      var $5=(($4+12)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0)) <= 0;
      if ($7) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $9=$2;
      var $10=(($9+16)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($14, ((__str18)|0));
      label = 5; break;
    case 4: 
      var $16=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($16, ((__str19)|0));
      label = 5; break;
    case 5: 
      $1=0;
      label = 25; break;
    case 6: 
      var $19=$3;
      var $20=__PyArg_ParseTuple_SizeT($19, ((__str53)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=(FUNCTION_TABLE_OFFSET + 242),HEAP32[(((tempInt)+(4))>>2)]=$n,tempInt));
      var $21=(($20)|(0))!=0;
      if ($21) { label = 8; break; } else { label = 7; break; }
    case 7: 
      $1=0;
      label = 25; break;
    case 8: 
      var $24=HEAP32[(($n)>>2)];
      var $25=(($24)|(0)) < -1;
      if ($25) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $27=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($27, ((__str54)|0));
      $1=0;
      label = 25; break;
    case 10: 
      var $29=$2;
      var $30=(($29+28)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31)|(0))!=0;
      if ($32) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $34=$2;
      var $35=(($34+8)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=__PyFileIO_closed($36);
      var $38=(($37)|(0))!=0;
      if ($38) { label = 13; break; } else { label = 14; break; }
    case 12: 
      var $40=$2;
      var $41=_buffered_closed($40);
      var $42=(($41)|(0))!=0;
      if ($42) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $44=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($44, ((__str55)|0));
      $1=0;
      label = 25; break;
    case 14: 
      var $46=HEAP32[(($n)>>2)];
      var $47=(($46)|(0))==-1;
      if ($47) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $49=$2;
      var $50=__bufferedreader_read_all($49);
      $res=$50;
      label = 24; break;
    case 16: 
      var $52=$2;
      var $53=HEAP32[(($n)>>2)];
      var $54=__bufferedreader_read_fast($52, $53);
      $res=$54;
      var $55=$res;
      var $56=(($55)|(0))!=((__Py_NoneStruct)|(0));
      if ($56) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $58=$res;
      $1=$58;
      label = 25; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $61=$res;
      var $62=(($61)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=((($63)-(1))|0);
      HEAP32[(($62)>>2)]=$64;
      var $65=(($64)|(0))!=0;
      if ($65) { label = 20; break; } else { label = 21; break; }
    case 20: 
      label = 22; break;
    case 21: 
      var $68=$res;
      var $69=(($68+4)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=(($70+24)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=$res;
      FUNCTION_TABLE[$72]($73);
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $76=$2;
      var $77=HEAP32[(($n)>>2)];
      var $78=__bufferedreader_read_generic($76, $77);
      $res=$78;
      label = 24; break;
    case 24: 
      var $80=$res;
      $1=$80;
      label = 25; break;
    case 25: 
      var $82=$1;
      STACKTOP = __stackBase__;
      return $82;
    default: assert(0, "bad label: " + label);
  }
}
function _buffered_read1($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $n=__stackBase__;
      var $have;
      var $r;
      var $res;
      $2=$self;
      $3=$args;
      $res=0;
      var $4=$2;
      var $5=(($4+12)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0)) <= 0;
      if ($7) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $9=$2;
      var $10=(($9+16)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($14, ((__str18)|0));
      label = 5; break;
    case 4: 
      var $16=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($16, ((__str19)|0));
      label = 5; break;
    case 5: 
      $1=0;
      label = 42; break;
    case 6: 
      var $19=$3;
      var $20=__PyArg_ParseTuple_SizeT($19, ((__str51)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$n,tempInt));
      var $21=(($20)|(0))!=0;
      if ($21) { label = 8; break; } else { label = 7; break; }
    case 7: 
      $1=0;
      label = 42; break;
    case 8: 
      var $24=HEAP32[(($n)>>2)];
      var $25=(($24)|(0)) < 0;
      if ($25) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $27=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($27, ((__str52)|0));
      $1=0;
      label = 42; break;
    case 10: 
      var $29=HEAP32[(($n)>>2)];
      var $30=(($29)|(0))==0;
      if ($30) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $32=_PyString_FromStringAndSize(0, 0);
      $1=$32;
      label = 42; break;
    case 12: 
      var $34=$2;
      var $35=(($34+20)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36)|(0))!=0;
      if ($37) { label = 13; break; } else { label = 16; break; }
    case 13: 
      var $39=$2;
      var $40=(($39+20)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($41)|(0))!=0;
      if ($42) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $44=$2;
      var $45=(($44+48)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46)|(0))!=-1;
      if ($47) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $49=$2;
      var $50=(($49+48)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=$2;
      var $53=(($52+40)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=((($51)-($54))|0);
      var $58 = $55;label = 17; break;
    case 16: 
      var $58 = 0;label = 17; break;
    case 17: 
      var $58;
      $have=$58;
      var $59=$have;
      var $60=(($59)|(0)) > 0;
      if ($60) { label = 18; break; } else { label = 23; break; }
    case 18: 
      var $62=HEAP32[(($n)>>2)];
      var $63=$have;
      var $64=(($62)|(0)) > (($63)|(0));
      if ($64) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $66=$have;
      HEAP32[(($n)>>2)]=$66;
      label = 20; break;
    case 20: 
      var $68=$2;
      var $69=(($68+36)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=$2;
      var $72=(($71+40)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=(($70+$73)|0);
      var $75=HEAP32[(($n)>>2)];
      var $76=_PyString_FromStringAndSize($74, $75);
      $res=$76;
      var $77=$res;
      var $78=(($77)|(0))==0;
      if ($78) { label = 21; break; } else { label = 22; break; }
    case 21: 
      label = 41; break;
    case 22: 
      var $81=HEAP32[(($n)>>2)];
      var $82=$2;
      var $83=(($82+40)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=((($84)+($81))|0);
      HEAP32[(($83)>>2)]=$85;
      label = 41; break;
    case 23: 
      var $87=$2;
      var $88=(($87+24)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=(($89)|(0))!=0;
      if ($90) { label = 24; break; } else { label = 32; break; }
    case 24: 
      var $92=$2;
      var $93=_buffered_flush_and_rewind_unlocked($92);
      $res=$93;
      var $94=$res;
      var $95=(($94)|(0))==0;
      if ($95) { label = 25; break; } else { label = 26; break; }
    case 25: 
      label = 41; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $99=$res;
      var $100=(($99)|0);
      var $101=HEAP32[(($100)>>2)];
      var $102=((($101)-(1))|0);
      HEAP32[(($100)>>2)]=$102;
      var $103=(($102)|(0))!=0;
      if ($103) { label = 28; break; } else { label = 29; break; }
    case 28: 
      label = 30; break;
    case 29: 
      var $106=$res;
      var $107=(($106+4)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=(($108+24)|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=$res;
      FUNCTION_TABLE[$110]($111);
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      var $115=$2;
      __bufferedreader_reset_buf($115);
      var $116=$2;
      var $117=__bufferedreader_fill_buffer($116);
      $r=$117;
      var $118=$r;
      var $119=(($118)|(0))==-1;
      if ($119) { label = 33; break; } else { label = 34; break; }
    case 33: 
      label = 41; break;
    case 34: 
      var $122=$r;
      var $123=(($122)|(0))==-2;
      if ($123) { label = 35; break; } else { label = 36; break; }
    case 35: 
      $r=0;
      label = 36; break;
    case 36: 
      var $126=HEAP32[(($n)>>2)];
      var $127=$r;
      var $128=(($126)|(0)) > (($127)|(0));
      if ($128) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $130=$r;
      HEAP32[(($n)>>2)]=$130;
      label = 38; break;
    case 38: 
      var $132=$2;
      var $133=(($132+36)|0);
      var $134=HEAP32[(($133)>>2)];
      var $135=HEAP32[(($n)>>2)];
      var $136=_PyString_FromStringAndSize($134, $135);
      $res=$136;
      var $137=$res;
      var $138=(($137)|(0))==0;
      if ($138) { label = 39; break; } else { label = 40; break; }
    case 39: 
      label = 41; break;
    case 40: 
      var $141=HEAP32[(($n)>>2)];
      var $142=$2;
      var $143=(($142+40)|0);
      HEAP32[(($143)>>2)]=$141;
      label = 41; break;
    case 41: 
      var $145=$res;
      $1=$145;
      label = 42; break;
    case 42: 
      var $147=$1;
      STACKTOP = __stackBase__;
      return $147;
    default: assert(0, "bad label: " + label);
  }
}
function _buffered_readinto($self, $args) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$self;
      $3=$args;
      var $4=$2;
      var $5=(($4+12)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0)) <= 0;
      if ($7) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $9=$2;
      var $10=(($9+16)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($14, ((__str18)|0));
      label = 5; break;
    case 4: 
      var $16=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($16, ((__str19)|0));
      label = 5; break;
    case 5: 
      $1=0;
      label = 7; break;
    case 6: 
      var $19=$2;
      var $20=$19;
      var $21=$3;
      var $22=_bufferediobase_readinto($20, $21);
      $1=$22;
      label = 7; break;
    case 7: 
      var $24=$1;
      return $24;
    default: assert(0, "bad label: " + label);
  }
}
function _buffered_readline($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $limit=__stackBase__;
      $2=$self;
      $3=$args;
      HEAP32[(($limit)>>2)]=-1;
      var $4=$2;
      var $5=(($4+12)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0)) <= 0;
      if ($7) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $9=$2;
      var $10=(($9+16)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($14, ((__str18)|0));
      label = 5; break;
    case 4: 
      var $16=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($16, ((__str19)|0));
      label = 5; break;
    case 5: 
      $1=0;
      label = 9; break;
    case 6: 
      var $19=$3;
      var $20=__PyArg_ParseTuple_SizeT($19, ((__str46)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=(FUNCTION_TABLE_OFFSET + 242),HEAP32[(((tempInt)+(4))>>2)]=$limit,tempInt));
      var $21=(($20)|(0))!=0;
      if ($21) { label = 8; break; } else { label = 7; break; }
    case 7: 
      $1=0;
      label = 9; break;
    case 8: 
      var $24=$2;
      var $25=HEAP32[(($limit)>>2)];
      var $26=__buffered_readline($24, $25);
      $1=$26;
      label = 9; break;
    case 9: 
      var $28=$1;
      STACKTOP = __stackBase__;
      return $28;
    default: assert(0, "bad label: " + label);
  }
}
function _buffered_peek($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $n=__stackBase__;
      var $res;
      var $_py_tmp;
      $2=$self;
      $3=$args;
      HEAP32[(($n)>>2)]=0;
      $res=0;
      var $4=$2;
      var $5=(($4+12)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0)) <= 0;
      if ($7) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $9=$2;
      var $10=(($9+16)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($14, ((__str18)|0));
      label = 5; break;
    case 4: 
      var $16=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($16, ((__str19)|0));
      label = 5; break;
    case 5: 
      $1=0;
      label = 23; break;
    case 6: 
      var $19=$3;
      var $20=__PyArg_ParseTuple_SizeT($19, ((__str44)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$n,tempInt));
      var $21=(($20)|(0))!=0;
      if ($21) { label = 8; break; } else { label = 7; break; }
    case 7: 
      $1=0;
      label = 23; break;
    case 8: 
      var $24=$2;
      var $25=(($24+24)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26)|(0))!=0;
      if ($27) { label = 9; break; } else { label = 21; break; }
    case 9: 
      var $29=$2;
      var $30=_buffered_flush_and_rewind_unlocked($29);
      $res=$30;
      var $31=$res;
      var $32=(($31)|(0))==0;
      if ($32) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 22; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $36=$res;
      var $37=(($36)|(0))!=0;
      if ($37) { label = 13; break; } else { label = 19; break; }
    case 13: 
      var $39=$res;
      $_py_tmp=$39;
      $res=0;
      label = 14; break;
    case 14: 
      var $41=$_py_tmp;
      var $42=(($41)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=((($43)-(1))|0);
      HEAP32[(($42)>>2)]=$44;
      var $45=(($44)|(0))!=0;
      if ($45) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 17; break;
    case 16: 
      var $48=$_py_tmp;
      var $49=(($48+4)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=(($50+24)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=$_py_tmp;
      FUNCTION_TABLE[$52]($53);
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $59=$2;
      var $60=HEAP32[(($n)>>2)];
      var $61=__bufferedreader_peek_unlocked($59, $60);
      $res=$61;
      label = 22; break;
    case 22: 
      var $63=$res;
      $1=$63;
      label = 23; break;
    case 23: 
      var $65=$1;
      STACKTOP = __stackBase__;
      return $65;
    default: assert(0, "bad label: " + label);
  }
}
function _buffered_sizeof($self, $unused) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $res;
      $1=$self;
      $2=$unused;
      $res=76;
      var $3=$1;
      var $4=(($3+36)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))!=0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=$1;
      var $9=(($8+60)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=$res;
      var $12=((($11)+($10))|0);
      $res=$12;
      label = 3; break;
    case 3: 
      var $14=$res;
      var $15=_PyLong_FromSsize_t($14);
      return $15;
    default: assert(0, "bad label: " + label);
  }
}
function _buffered_closed($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $closed;
      var $res;
      $2=$self;
      var $3=$2;
      var $4=(($3+12)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0)) <= 0;
      if ($6) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $8=$2;
      var $9=(($8+16)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|(0))!=0;
      if ($11) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $13=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($13, ((__str18)|0));
      label = 5; break;
    case 4: 
      var $15=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($15, ((__str19)|0));
      label = 5; break;
    case 5: 
      $1=-1;
      label = 14; break;
    case 6: 
      var $18=$2;
      var $19=(($18+8)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=HEAP32[((__PyIO_str_closed)>>2)];
      var $22=_PyObject_GetAttr($20, $21);
      $res=$22;
      var $23=$res;
      var $24=(($23)|(0))==0;
      if ($24) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $1=-1;
      label = 14; break;
    case 8: 
      var $27=$res;
      var $28=_PyObject_IsTrue($27);
      $closed=$28;
      label = 9; break;
    case 9: 
      var $30=$res;
      var $31=(($30)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=((($32)-(1))|0);
      HEAP32[(($31)>>2)]=$33;
      var $34=(($33)|(0))!=0;
      if ($34) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 12; break;
    case 11: 
      var $37=$res;
      var $38=(($37+4)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39+24)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=$res;
      FUNCTION_TABLE[$41]($42);
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $45=$closed;
      $1=$45;
      label = 14; break;
    case 14: 
      var $47=$1;
      return $47;
    default: assert(0, "bad label: " + label);
  }
}
function _bufferedwriter_write($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 52)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $res;
      var $buf=__stackBase__;
      var $written;
      var $avail;
      var $remaining;
      var $offset;
      var $w;
      var $_py_tmp;
      var $n;
      $2=$self;
      $3=$args;
      $res=0;
      var $4=$2;
      var $5=(($4+12)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0)) <= 0;
      if ($7) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $9=$2;
      var $10=(($9+16)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($14, ((__str18)|0));
      label = 5; break;
    case 4: 
      var $16=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($16, ((__str19)|0));
      label = 5; break;
    case 5: 
      $1=0;
      label = 94; break;
    case 6: 
      var $19=$3;
      var $20=__PyArg_ParseTuple_SizeT($19, ((__str38)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$buf,tempInt));
      var $21=(($20)|(0))!=0;
      if ($21) { label = 8; break; } else { label = 7; break; }
    case 7: 
      $1=0;
      label = 94; break;
    case 8: 
      var $24=$2;
      var $25=(($24+28)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26)|(0))!=0;
      if ($27) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $29=$2;
      var $30=(($29+8)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=__PyFileIO_closed($31);
      var $33=(($32)|(0))!=0;
      if ($33) { label = 11; break; } else { label = 12; break; }
    case 10: 
      var $35=$2;
      var $36=_buffered_closed($35);
      var $37=(($36)|(0))!=0;
      if ($37) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $39=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($39, ((__str39)|0));
      _PyBuffer_Release($buf);
      $1=0;
      label = 94; break;
    case 12: 
      var $41=$2;
      var $42=(($41+20)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($43)|(0))!=0;
      if ($44) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $46=$2;
      var $47=(($46+48)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=(($48)|(0))!=-1;
      if ($49) { label = 17; break; } else { label = 14; break; }
    case 14: 
      var $51=$2;
      var $52=(($51+24)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=(($53)|(0))!=0;
      if ($54) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $56=$2;
      var $57=(($56+56)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=(($58)|(0))!=-1;
      if ($59) { label = 17; break; } else { label = 16; break; }
    case 16: 
      var $61=$2;
      var $62=(($61+40)|0);
      HEAP32[(($62)>>2)]=0;
      var $63=$2;
      var $64=(($63+44)|0);
      HEAP32[(($64)>>2)]=0;
      label = 17; break;
    case 17: 
      var $66=$2;
      var $67=(($66+60)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=$2;
      var $70=(($69+40)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=((($68)-($71))|0);
      $avail=$72;
      var $73=(($buf+8)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=$avail;
      var $76=(($74)|(0)) <= (($75)|(0));
      if ($76) { label = 18; break; } else { label = 31; break; }
    case 18: 
      var $78=$2;
      var $79=(($78+36)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=$2;
      var $82=(($81+40)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=(($80+$83)|0);
      var $85=(($buf)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=(($buf+8)|0);
      var $88=HEAP32[(($87)>>2)];
      assert($88 % 1 === 0);_memcpy($84, $86, $88);
      var $89=$2;
      var $90=(($89+24)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=(($91)|(0))!=0;
      if ($92) { label = 19; break; } else { label = 21; break; }
    case 19: 
      var $94=$2;
      var $95=(($94+56)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=(($96)|(0))!=-1;
      if ($97) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $99=$2;
      var $100=(($99+52)|0);
      var $101=HEAP32[(($100)>>2)];
      var $102=$2;
      var $103=(($102+40)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=(($101)|(0)) > (($104)|(0));
      if ($105) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $107=$2;
      var $108=(($107+40)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=$2;
      var $111=(($110+52)|0);
      HEAP32[(($111)>>2)]=$109;
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $114=$2;
      var $115=(($114+40)|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=(($buf+8)|0);
      var $118=HEAP32[(($117)>>2)];
      var $119=((($116)+($118))|0);
      var $120=$2;
      var $121=(($120+40)|0);
      HEAP32[(($121)>>2)]=$119;
      var $122=$2;
      var $123=(($122+20)|0);
      var $124=HEAP32[(($123)>>2)];
      var $125=(($124)|(0))!=0;
      if ($125) { label = 24; break; } else { label = 27; break; }
    case 24: 
      var $127=$2;
      var $128=(($127+48)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=(($129)|(0))!=-1;
      if ($130) { label = 25; break; } else { label = 27; break; }
    case 25: 
      var $132=$2;
      var $133=(($132+48)|0);
      var $134=HEAP32[(($133)>>2)];
      var $135=$2;
      var $136=(($135+40)|0);
      var $137=HEAP32[(($136)>>2)];
      var $138=(($134)|(0)) < (($137)|(0));
      if ($138) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $140=$2;
      var $141=(($140+40)|0);
      var $142=HEAP32[(($141)>>2)];
      var $143=$2;
      var $144=(($143+48)|0);
      HEAP32[(($144)>>2)]=$142;
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      var $147=$2;
      var $148=(($147+40)|0);
      var $149=HEAP32[(($148)>>2)];
      var $150=$2;
      var $151=(($150+56)|0);
      var $152=HEAP32[(($151)>>2)];
      var $153=(($149)|(0)) > (($152)|(0));
      if ($153) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $155=$2;
      var $156=(($155+40)|0);
      var $157=HEAP32[(($156)>>2)];
      var $158=$2;
      var $159=(($158+56)|0);
      HEAP32[(($159)>>2)]=$157;
      label = 30; break;
    case 30: 
      var $161=(($buf+8)|0);
      var $162=HEAP32[(($161)>>2)];
      $written=$162;
      label = 92; break;
    case 31: 
      var $164=$2;
      var $165=__bufferedwriter_flush_unlocked($164);
      $res=$165;
      var $166=$res;
      var $167=(($166)|(0))==0;
      if ($167) { label = 32; break; } else { label = 43; break; }
    case 32: 
      var $169=__buffered_check_blocking_error();
      $w=$169;
      var $170=$w;
      var $171=(($170)|(0))==0;
      if ($171) { label = 33; break; } else { label = 34; break; }
    case 33: 
      label = 93; break;
    case 34: 
      var $174=$2;
      var $175=(($174+20)|0);
      var $176=HEAP32[(($175)>>2)];
      var $177=(($176)|(0))!=0;
      if ($177) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $179=$2;
      __bufferedreader_reset_buf($179);
      label = 36; break;
    case 36: 
      var $181=$2;
      var $182=(($181+24)|0);
      var $183=HEAP32[(($182)>>2)];
      var $184=(($183)|(0))!=0;
      if ($184) { label = 37; break; } else { label = 39; break; }
    case 37: 
      var $186=$2;
      var $187=(($186+56)|0);
      var $188=HEAP32[(($187)>>2)];
      var $189=(($188)|(0))!=-1;
      if ($189) { label = 38; break; } else { label = 39; break; }
    case 38: 
      label = 40; break;
    case 39: 
      ___assert_func(((__str1)|0), 1865, ((___func___bufferedwriter_write)|0), ((__str40)|0));
      throw "Reached an unreachable!";
      label = 40; break;
    case 40: 
      var $194=$2;
      var $195=(($194+36)|0);
      var $196=HEAP32[(($195)>>2)];
      var $197=$2;
      var $198=(($197+36)|0);
      var $199=HEAP32[(($198)>>2)];
      var $200=$2;
      var $201=(($200+52)|0);
      var $202=HEAP32[(($201)>>2)];
      var $203=(($199+$202)|0);
      var $204=$2;
      var $205=(($204+56)|0);
      var $206=HEAP32[(($205)>>2)];
      var $207=$2;
      var $208=(($207+52)|0);
      var $209=HEAP32[(($208)>>2)];
      var $210=((($206)-($209))|0);
      _memmove($196, $203, $210, 1, 0);
      var $211=$2;
      var $212=(($211+52)|0);
      var $213=HEAP32[(($212)>>2)];
      var $214=$2;
      var $215=(($214+56)|0);
      var $216=HEAP32[(($215)>>2)];
      var $217=((($216)-($213))|0);
      HEAP32[(($215)>>2)]=$217;
      var $218=$2;
      var $219=(($218+52)|0);
      var $220=HEAP32[(($219)>>2)];
      var $221=$2;
      var $222=(($221+44)|0);
      var $223=HEAP32[(($222)>>2)];
      var $224=((($223)-($220))|0);
      HEAP32[(($222)>>2)]=$224;
      var $225=$2;
      var $226=(($225+52)|0);
      var $227=HEAP32[(($226)>>2)];
      var $228=$2;
      var $229=(($228+40)|0);
      var $230=HEAP32[(($229)>>2)];
      var $231=((($230)-($227))|0);
      HEAP32[(($229)>>2)]=$231;
      var $232=$2;
      var $233=(($232+52)|0);
      HEAP32[(($233)>>2)]=0;
      var $234=$2;
      var $235=(($234+60)|0);
      var $236=HEAP32[(($235)>>2)];
      var $237=$2;
      var $238=(($237+56)|0);
      var $239=HEAP32[(($238)>>2)];
      var $240=((($236)-($239))|0);
      $avail=$240;
      var $241=(($buf+8)|0);
      var $242=HEAP32[(($241)>>2)];
      var $243=$avail;
      var $244=(($242)|(0)) <= (($243)|(0));
      if ($244) { label = 41; break; } else { label = 42; break; }
    case 41: 
      _PyErr_Clear();
      var $246=$2;
      var $247=(($246+36)|0);
      var $248=HEAP32[(($247)>>2)];
      var $249=$2;
      var $250=(($249+56)|0);
      var $251=HEAP32[(($250)>>2)];
      var $252=(($248+$251)|0);
      var $253=(($buf)|0);
      var $254=HEAP32[(($253)>>2)];
      var $255=(($buf+8)|0);
      var $256=HEAP32[(($255)>>2)];
      assert($256 % 1 === 0);_memcpy($252, $254, $256);
      var $257=(($buf+8)|0);
      var $258=HEAP32[(($257)>>2)];
      var $259=$2;
      var $260=(($259+56)|0);
      var $261=HEAP32[(($260)>>2)];
      var $262=((($261)+($258))|0);
      HEAP32[(($260)>>2)]=$262;
      var $263=(($buf+8)|0);
      var $264=HEAP32[(($263)>>2)];
      var $265=$2;
      var $266=(($265+40)|0);
      var $267=HEAP32[(($266)>>2)];
      var $268=((($267)+($264))|0);
      HEAP32[(($266)>>2)]=$268;
      var $269=(($buf+8)|0);
      var $270=HEAP32[(($269)>>2)];
      $written=$270;
      label = 92; break;
    case 42: 
      var $272=$2;
      var $273=(($272+36)|0);
      var $274=HEAP32[(($273)>>2)];
      var $275=$2;
      var $276=(($275+56)|0);
      var $277=HEAP32[(($276)>>2)];
      var $278=(($274+$277)|0);
      var $279=(($buf)|0);
      var $280=HEAP32[(($279)>>2)];
      var $281=$avail;
      assert($281 % 1 === 0);_memcpy($278, $280, $281);
      var $282=$avail;
      var $283=$2;
      var $284=(($283+56)|0);
      var $285=HEAP32[(($284)>>2)];
      var $286=((($285)+($282))|0);
      HEAP32[(($284)>>2)]=$286;
      var $287=$avail;
      var $288=$2;
      var $289=(($288+40)|0);
      var $290=HEAP32[(($289)>>2)];
      var $291=((($290)+($287))|0);
      HEAP32[(($289)>>2)]=$291;
      var $292=$avail;
      __set_BlockingIOError(((__str41)|0), $292);
      label = 93; break;
    case 43: 
      label = 44; break;
    case 44: 
      var $295=$res;
      var $296=(($295)|(0))!=0;
      if ($296) { label = 45; break; } else { label = 51; break; }
    case 45: 
      var $298=$res;
      $_py_tmp=$298;
      $res=0;
      label = 46; break;
    case 46: 
      var $300=$_py_tmp;
      var $301=(($300)|0);
      var $302=HEAP32[(($301)>>2)];
      var $303=((($302)-(1))|0);
      HEAP32[(($301)>>2)]=$303;
      var $304=(($303)|(0))!=0;
      if ($304) { label = 47; break; } else { label = 48; break; }
    case 47: 
      label = 49; break;
    case 48: 
      var $307=$_py_tmp;
      var $308=(($307+4)|0);
      var $309=HEAP32[(($308)>>2)];
      var $310=(($309+24)|0);
      var $311=HEAP32[(($310)>>2)];
      var $312=$_py_tmp;
      FUNCTION_TABLE[$311]($312);
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      var $317=$2;
      var $318=(($317+20)|0);
      var $319=HEAP32[(($318)>>2)];
      var $320=(($319)|(0))!=0;
      if ($320) { label = 53; break; } else { label = 54; break; }
    case 53: 
      var $322=$2;
      var $323=(($322+48)|0);
      var $324=HEAP32[(($323)>>2)];
      var $325=(($324)|(0))!=-1;
      if ($325) { label = 56; break; } else { label = 54; break; }
    case 54: 
      var $327=$2;
      var $328=(($327+24)|0);
      var $329=HEAP32[(($328)>>2)];
      var $330=(($329)|(0))!=0;
      if ($330) { label = 55; break; } else { label = 58; break; }
    case 55: 
      var $332=$2;
      var $333=(($332+56)|0);
      var $334=HEAP32[(($333)>>2)];
      var $335=(($334)|(0))!=-1;
      if ($335) { label = 56; break; } else { label = 58; break; }
    case 56: 
      var $337=$2;
      var $338=(($337+44)|0);
      var $339=HEAP32[(($338)>>2)];
      var $340=(($339)|(0)) >= 0;
      if ($340) { label = 57; break; } else { label = 58; break; }
    case 57: 
      var $342=$2;
      var $343=(($342+44)|0);
      var $344=HEAP32[(($343)>>2)];
      var $345=$2;
      var $346=(($345+40)|0);
      var $347=HEAP32[(($346)>>2)];
      var $348=((($344)-($347))|0);
      var $351 = $348;label = 59; break;
    case 58: 
      var $351 = 0;label = 59; break;
    case 59: 
      var $351;
      $offset=$351;
      var $352=$offset;
      var $353=(($352)|(0))!=0;
      if ($353) { label = 60; break; } else { label = 63; break; }
    case 60: 
      var $355=$2;
      var $356=$offset;
      var $357=(((-$356))|0);
      var $358=__buffered_raw_seek($355, $357, 1);
      var $359=(($358)|(0)) < 0;
      if ($359) { label = 61; break; } else { label = 62; break; }
    case 61: 
      label = 93; break;
    case 62: 
      var $362=$offset;
      var $363=$2;
      var $364=(($363+44)|0);
      var $365=HEAP32[(($364)>>2)];
      var $366=((($365)-($362))|0);
      HEAP32[(($364)>>2)]=$366;
      label = 63; break;
    case 63: 
      var $368=(($buf+8)|0);
      var $369=HEAP32[(($368)>>2)];
      $remaining=$369;
      $written=0;
      label = 64; break;
    case 64: 
      var $371=$remaining;
      var $372=$2;
      var $373=(($372+60)|0);
      var $374=HEAP32[(($373)>>2)];
      var $375=(($371)|(0)) > (($374)|(0));
      if ($375) { label = 65; break; } else { label = 81; break; }
    case 65: 
      var $377=$2;
      var $378=(($buf)|0);
      var $379=HEAP32[(($378)>>2)];
      var $380=$written;
      var $381=(($379+$380)|0);
      var $382=(($buf+8)|0);
      var $383=HEAP32[(($382)>>2)];
      var $384=$written;
      var $385=((($383)-($384))|0);
      var $386=__bufferedwriter_raw_write($377, $381, $385);
      $n=$386;
      var $387=$n;
      var $388=(($387)|(0))==-1;
      if ($388) { label = 66; break; } else { label = 67; break; }
    case 66: 
      label = 93; break;
    case 67: 
      var $391=$n;
      var $392=(($391)|(0))==-2;
      if ($392) { label = 68; break; } else { label = 77; break; }
    case 68: 
      var $394=$remaining;
      var $395=$2;
      var $396=(($395+60)|0);
      var $397=HEAP32[(($396)>>2)];
      var $398=(($394)|(0)) > (($397)|(0));
      if ($398) { label = 69; break; } else { label = 76; break; }
    case 69: 
      var $400=$2;
      var $401=(($400+36)|0);
      var $402=HEAP32[(($401)>>2)];
      var $403=(($buf)|0);
      var $404=HEAP32[(($403)>>2)];
      var $405=$written;
      var $406=(($404+$405)|0);
      var $407=$2;
      var $408=(($407+60)|0);
      var $409=HEAP32[(($408)>>2)];
      assert($409 % 1 === 0);_memcpy($402, $406, $409);
      var $410=$2;
      var $411=(($410+44)|0);
      HEAP32[(($411)>>2)]=0;
      label = 70; break;
    case 70: 
      var $413=$2;
      var $414=(($413+60)|0);
      var $415=HEAP32[(($414)>>2)];
      var $416=$2;
      var $417=(($416+40)|0);
      HEAP32[(($417)>>2)]=$415;
      var $418=$2;
      var $419=(($418+20)|0);
      var $420=HEAP32[(($419)>>2)];
      var $421=(($420)|(0))!=0;
      if ($421) { label = 71; break; } else { label = 74; break; }
    case 71: 
      var $423=$2;
      var $424=(($423+48)|0);
      var $425=HEAP32[(($424)>>2)];
      var $426=(($425)|(0))!=-1;
      if ($426) { label = 72; break; } else { label = 74; break; }
    case 72: 
      var $428=$2;
      var $429=(($428+48)|0);
      var $430=HEAP32[(($429)>>2)];
      var $431=$2;
      var $432=(($431+40)|0);
      var $433=HEAP32[(($432)>>2)];
      var $434=(($430)|(0)) < (($433)|(0));
      if ($434) { label = 73; break; } else { label = 74; break; }
    case 73: 
      var $436=$2;
      var $437=(($436+40)|0);
      var $438=HEAP32[(($437)>>2)];
      var $439=$2;
      var $440=(($439+48)|0);
      HEAP32[(($440)>>2)]=$438;
      label = 74; break;
    case 74: 
      label = 75; break;
    case 75: 
      var $443=$2;
      var $444=(($443+60)|0);
      var $445=HEAP32[(($444)>>2)];
      var $446=$2;
      var $447=(($446+56)|0);
      HEAP32[(($447)>>2)]=$445;
      var $448=$2;
      var $449=(($448+60)|0);
      var $450=HEAP32[(($449)>>2)];
      var $451=$written;
      var $452=((($451)+($450))|0);
      $written=$452;
      var $453=$written;
      __set_BlockingIOError(((__str41)|0), $453);
      label = 93; break;
    case 76: 
      _PyErr_Clear();
      label = 81; break;
    case 77: 
      label = 78; break;
    case 78: 
      var $457=$n;
      var $458=$written;
      var $459=((($458)+($457))|0);
      $written=$459;
      var $460=$n;
      var $461=$remaining;
      var $462=((($461)-($460))|0);
      $remaining=$462;
      var $463=_PyErr_CheckSignals();
      var $464=(($463)|(0)) < 0;
      if ($464) { label = 79; break; } else { label = 80; break; }
    case 79: 
      label = 93; break;
    case 80: 
      label = 64; break;
    case 81: 
      var $468=$2;
      var $469=(($468+20)|0);
      var $470=HEAP32[(($469)>>2)];
      var $471=(($470)|(0))!=0;
      if ($471) { label = 82; break; } else { label = 83; break; }
    case 82: 
      var $473=$2;
      __bufferedreader_reset_buf($473);
      label = 83; break;
    case 83: 
      var $475=$remaining;
      var $476=(($475)|(0)) > 0;
      if ($476) { label = 84; break; } else { label = 85; break; }
    case 84: 
      var $478=$2;
      var $479=(($478+36)|0);
      var $480=HEAP32[(($479)>>2)];
      var $481=(($buf)|0);
      var $482=HEAP32[(($481)>>2)];
      var $483=$written;
      var $484=(($482+$483)|0);
      var $485=$remaining;
      assert($485 % 1 === 0);_memcpy($480, $484, $485);
      var $486=$remaining;
      var $487=$written;
      var $488=((($487)+($486))|0);
      $written=$488;
      label = 85; break;
    case 85: 
      var $490=$2;
      var $491=(($490+52)|0);
      HEAP32[(($491)>>2)]=0;
      var $492=$remaining;
      var $493=$2;
      var $494=(($493+56)|0);
      HEAP32[(($494)>>2)]=$492;
      label = 86; break;
    case 86: 
      var $496=$remaining;
      var $497=$2;
      var $498=(($497+40)|0);
      HEAP32[(($498)>>2)]=$496;
      var $499=$2;
      var $500=(($499+20)|0);
      var $501=HEAP32[(($500)>>2)];
      var $502=(($501)|(0))!=0;
      if ($502) { label = 87; break; } else { label = 90; break; }
    case 87: 
      var $504=$2;
      var $505=(($504+48)|0);
      var $506=HEAP32[(($505)>>2)];
      var $507=(($506)|(0))!=-1;
      if ($507) { label = 88; break; } else { label = 90; break; }
    case 88: 
      var $509=$2;
      var $510=(($509+48)|0);
      var $511=HEAP32[(($510)>>2)];
      var $512=$2;
      var $513=(($512+40)|0);
      var $514=HEAP32[(($513)>>2)];
      var $515=(($511)|(0)) < (($514)|(0));
      if ($515) { label = 89; break; } else { label = 90; break; }
    case 89: 
      var $517=$2;
      var $518=(($517+40)|0);
      var $519=HEAP32[(($518)>>2)];
      var $520=$2;
      var $521=(($520+48)|0);
      HEAP32[(($521)>>2)]=$519;
      label = 90; break;
    case 90: 
      label = 91; break;
    case 91: 
      var $524=$2;
      var $525=(($524+44)|0);
      HEAP32[(($525)>>2)]=0;
      label = 92; break;
    case 92: 
      var $527=$written;
      var $528=_PyLong_FromSsize_t($527);
      $res=$528;
      label = 93; break;
    case 93: 
      _PyBuffer_Release($buf);
      var $530=$res;
      $1=$530;
      label = 94; break;
    case 94: 
      var $532=$1;
      STACKTOP = __stackBase__;
      return $532;
    default: assert(0, "bad label: " + label);
  }
}
function __bufferedwriter_flush_unlocked($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $written;
      var $n;
      var $rewind;
      $2=$self;
      $written=0;
      var $3=$2;
      var $4=(($3+24)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))!=0;
      if ($6) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $8=$2;
      var $9=(($8+56)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|(0))!=-1;
      if ($11) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $13=$2;
      var $14=(($13+52)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=$2;
      var $17=(($16+56)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($15)|(0))==(($18)|(0));
      if ($19) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 27; break;
    case 5: 
      var $22=$2;
      var $23=(($22+20)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24)|(0))!=0;
      if ($25) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $27=$2;
      var $28=(($27+48)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29)|(0))!=-1;
      if ($30) { label = 9; break; } else { label = 7; break; }
    case 7: 
      var $32=$2;
      var $33=(($32+24)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($34)|(0))!=0;
      if ($35) { label = 8; break; } else { label = 11; break; }
    case 8: 
      var $37=$2;
      var $38=(($37+56)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39)|(0))!=-1;
      if ($40) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $42=$2;
      var $43=(($42+44)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=(($44)|(0)) >= 0;
      if ($45) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $47=$2;
      var $48=(($47+44)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=$2;
      var $51=(($50+40)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=((($49)-($52))|0);
      var $56 = $53;label = 12; break;
    case 11: 
      var $56 = 0;label = 12; break;
    case 12: 
      var $56;
      var $57=$2;
      var $58=(($57+40)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=$2;
      var $61=(($60+52)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=((($59)-($62))|0);
      var $64=((($56)+($63))|0);
      $rewind=$64;
      var $65=$rewind;
      var $66=(($65)|(0))!=0;
      if ($66) { label = 13; break; } else { label = 16; break; }
    case 13: 
      var $68=$2;
      var $69=$rewind;
      var $70=(((-$69))|0);
      var $71=__buffered_raw_seek($68, $70, 1);
      $n=$71;
      var $72=$n;
      var $73=(($72)|(0)) < 0;
      if ($73) { label = 14; break; } else { label = 15; break; }
    case 14: 
      label = 28; break;
    case 15: 
      var $76=$rewind;
      var $77=$2;
      var $78=(($77+44)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=((($79)-($76))|0);
      HEAP32[(($78)>>2)]=$80;
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $83=$2;
      var $84=(($83+52)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=$2;
      var $87=(($86+56)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=(($85)|(0)) < (($88)|(0));
      if ($89) { label = 18; break; } else { label = 26; break; }
    case 18: 
      var $91=$2;
      var $92=$2;
      var $93=(($92+36)|0);
      var $94=HEAP32[(($93)>>2)];
      var $95=$2;
      var $96=(($95+52)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=(($94+$97)|0);
      var $99=$2;
      var $100=(($99+56)|0);
      var $101=HEAP32[(($100)>>2)];
      var $102=$2;
      var $103=(($102+52)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=((($101)-($104))|0);
      var $106=__bufferedwriter_raw_write($91, $98, $105);
      $n=$106;
      var $107=$n;
      var $108=(($107)|(0))==-1;
      if ($108) { label = 19; break; } else { label = 20; break; }
    case 19: 
      label = 28; break;
    case 20: 
      var $111=$n;
      var $112=(($111)|(0))==-2;
      if ($112) { label = 21; break; } else { label = 22; break; }
    case 21: 
      __set_BlockingIOError(((__str41)|0), 0);
      label = 28; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $116=$n;
      var $117=$2;
      var $118=(($117+52)|0);
      var $119=HEAP32[(($118)>>2)];
      var $120=((($119)+($116))|0);
      HEAP32[(($118)>>2)]=$120;
      var $121=$2;
      var $122=(($121+52)|0);
      var $123=HEAP32[(($122)>>2)];
      var $124=$2;
      var $125=(($124+44)|0);
      HEAP32[(($125)>>2)]=$123;
      var $126=$n;
      var $127=$written;
      var $128=((($127)+($126))|0);
      $written=$128;
      var $129=_PyErr_CheckSignals();
      var $130=(($129)|(0)) < 0;
      if ($130) { label = 24; break; } else { label = 25; break; }
    case 24: 
      label = 28; break;
    case 25: 
      label = 17; break;
    case 26: 
      var $134=$2;
      __bufferedwriter_reset_buf($134);
      label = 27; break;
    case 27: 
      var $136=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $137=((($136)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$137;
      $1=__Py_NoneStruct;
      label = 29; break;
    case 28: 
      $1=0;
      label = 29; break;
    case 29: 
      var $140=$1;
      return $140;
    default: assert(0, "bad label: " + label);
  }
}
function __buffered_check_blocking_error() {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $t=__stackBase__;
      var $v=(__stackBase__)+(4);
      var $tb=(__stackBase__)+(8);
      var $err;
      _PyErr_Fetch($t, $v, $tb);
      var $2=HEAP32[(($v)>>2)];
      var $3=(($2)|(0))==0;
      if ($3) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $5=HEAP32[(($v)>>2)];
      var $6=HEAP32[((_PyExc_BlockingIOError)>>2)];
      var $7=_PyErr_GivenExceptionMatches($5, $6);
      var $8=(($7)|(0))!=0;
      if ($8) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $10=HEAP32[(($t)>>2)];
      var $11=HEAP32[(($v)>>2)];
      var $12=HEAP32[(($tb)>>2)];
      _PyErr_Restore($10, $11, $12);
      $1=0;
      label = 5; break;
    case 4: 
      var $14=HEAP32[(($v)>>2)];
      var $15=$14;
      $err=$15;
      var $16=HEAP32[(($t)>>2)];
      var $17=HEAP32[(($v)>>2)];
      var $18=HEAP32[(($tb)>>2)];
      _PyErr_Restore($16, $17, $18);
      var $19=$err;
      var $20=(($19+32)|0);
      $1=$20;
      label = 5; break;
    case 5: 
      var $22=$1;
      STACKTOP = __stackBase__;
      return $22;
    default: assert(0, "bad label: " + label);
  }
}
function __set_BlockingIOError($msg, $written) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $err;
      $1=$msg;
      $2=$written;
      var $3=HEAP32[((_PyExc_BlockingIOError)>>2)];
      var $4=___errno_location();
      var $5=HEAP32[(($4)>>2)];
      var $6=$1;
      var $7=$2;
      var $8=__PyObject_CallFunction_SizeT($3, ((__str43)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$5,HEAP32[(((tempInt)+(4))>>2)]=$6,HEAP32[(((tempInt)+(8))>>2)]=$7,tempInt));
      $err=$8;
      var $9=$err;
      var $10=(($9)|(0))!=0;
      if ($10) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $12=HEAP32[((_PyExc_BlockingIOError)>>2)];
      var $13=$err;
      _PyErr_SetObject($12, $13);
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $16=$err;
      var $17=(($16)|(0))==0;
      if ($17) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 12; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $21=$err;
      var $22=(($21)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=((($23)-(1))|0);
      HEAP32[(($22)>>2)]=$24;
      var $25=(($24)|(0))!=0;
      if ($25) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 10; break;
    case 9: 
      var $28=$err;
      var $29=(($28+4)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=(($30+24)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=$err;
      FUNCTION_TABLE[$32]($33);
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function __buffered_raw_seek($self, $target, $whence) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $res;
      var $posobj;
      var $whenceobj;
      var $n;
      $2=$self;
      $3=$target;
      $4=$whence;
      var $5=$3;
      var $6=_PyLong_FromSsize_t($5);
      $posobj=$6;
      var $7=$posobj;
      var $8=(($7)|(0))==0;
      if ($8) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=-1;
      label = 32; break;
    case 3: 
      var $11=$4;
      var $12=_PyLong_FromLong($11);
      $whenceobj=$12;
      var $13=$whenceobj;
      var $14=(($13)|(0))==0;
      if ($14) { label = 4; break; } else { label = 10; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $17=$posobj;
      var $18=(($17)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=((($19)-(1))|0);
      HEAP32[(($18)>>2)]=$20;
      var $21=(($20)|(0))!=0;
      if ($21) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 8; break;
    case 7: 
      var $24=$posobj;
      var $25=(($24+4)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26+24)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=$posobj;
      FUNCTION_TABLE[$28]($29);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      $1=-1;
      label = 32; break;
    case 10: 
      var $33=$2;
      var $34=(($33+8)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=HEAP32[((__PyIO_str_seek)>>2)];
      var $37=$posobj;
      var $38=$whenceobj;
      var $39=_PyObject_CallMethodObjArgs($35, $36, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$37,HEAP32[(((tempInt)+(4))>>2)]=$38,HEAP32[(((tempInt)+(8))>>2)]=0,tempInt));
      $res=$39;
      label = 11; break;
    case 11: 
      var $41=$posobj;
      var $42=(($41)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=((($43)-(1))|0);
      HEAP32[(($42)>>2)]=$44;
      var $45=(($44)|(0))!=0;
      if ($45) { label = 12; break; } else { label = 13; break; }
    case 12: 
      label = 14; break;
    case 13: 
      var $48=$posobj;
      var $49=(($48+4)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=(($50+24)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=$posobj;
      FUNCTION_TABLE[$52]($53);
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $57=$whenceobj;
      var $58=(($57)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=((($59)-(1))|0);
      HEAP32[(($58)>>2)]=$60;
      var $61=(($60)|(0))!=0;
      if ($61) { label = 17; break; } else { label = 18; break; }
    case 17: 
      label = 19; break;
    case 18: 
      var $64=$whenceobj;
      var $65=(($64+4)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66+24)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=$whenceobj;
      FUNCTION_TABLE[$68]($69);
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $72=$res;
      var $73=(($72)|(0))==0;
      if ($73) { label = 21; break; } else { label = 22; break; }
    case 21: 
      $1=-1;
      label = 32; break;
    case 22: 
      var $76=$res;
      var $77=HEAP32[((_PyExc_ValueError)>>2)];
      var $78=_PyNumber_AsOff_t($76, $77);
      $n=$78;
      label = 23; break;
    case 23: 
      var $80=$res;
      var $81=(($80)|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=((($82)-(1))|0);
      HEAP32[(($81)>>2)]=$83;
      var $84=(($83)|(0))!=0;
      if ($84) { label = 24; break; } else { label = 25; break; }
    case 24: 
      label = 26; break;
    case 25: 
      var $87=$res;
      var $88=(($87+4)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=(($89+24)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=$res;
      FUNCTION_TABLE[$91]($92);
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $95=$n;
      var $96=(($95)|(0)) < 0;
      if ($96) { label = 28; break; } else { label = 31; break; }
    case 28: 
      var $98=_PyErr_Occurred();
      var $99=(($98)|(0))!=0;
      if ($99) { label = 30; break; } else { label = 29; break; }
    case 29: 
      var $101=HEAP32[((_PyExc_IOError)>>2)];
      var $102=$n;
      var $103=_PyErr_Format($101, ((__str13)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$102,tempInt));
      label = 30; break;
    case 30: 
      $1=-1;
      label = 32; break;
    case 31: 
      var $106=$n;
      var $107=$2;
      var $108=(($107+32)|0);
      HEAP32[(($108)>>2)]=$106;
      var $109=$n;
      $1=$109;
      label = 32; break;
    case 32: 
      var $111=$1;
      STACKTOP = __stackBase__;
      return $111;
    default: assert(0, "bad label: " + label);
  }
}
function __bufferedwriter_raw_write($self, $start, $len) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 52)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $buf=__stackBase__;
      var $memobj;
      var $res;
      var $n;
      var $errnum;
      $2=$self;
      $3=$start;
      $4=$len;
      var $5=$3;
      var $6=$4;
      var $7=_PyBuffer_FillInfo($buf, 0, $5, $6, 1, 8);
      var $8=(($7)|(0))==-1;
      if ($8) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=-1;
      label = 36; break;
    case 3: 
      var $11=_PyMemoryView_FromBuffer($buf);
      $memobj=$11;
      var $12=$memobj;
      var $13=(($12)|(0))==0;
      if ($13) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=-1;
      label = 36; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $17=___errno_location();
      HEAP32[(($17)>>2)]=0;
      var $18=$2;
      var $19=(($18+8)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=HEAP32[((__PyIO_str_write)>>2)];
      var $22=$memobj;
      var $23=_PyObject_CallMethodObjArgs($20, $21, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$22,HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
      $res=$23;
      var $24=___errno_location();
      var $25=HEAP32[(($24)>>2)];
      $errnum=$25;
      label = 7; break;
    case 7: 
      var $27=$res;
      var $28=(($27)|(0))==0;
      if ($28) { label = 8; break; } else { var $33 = 0;label = 9; break; }
    case 8: 
      var $30=__PyIO_trap_eintr();
      var $31=(($30)|(0))!=0;
      var $33 = $31;label = 9; break;
    case 9: 
      var $33;
      if ($33) { label = 6; break; } else { label = 10; break; }
    case 10: 
      label = 11; break;
    case 11: 
      var $36=$memobj;
      var $37=(($36)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=((($38)-(1))|0);
      HEAP32[(($37)>>2)]=$39;
      var $40=(($39)|(0))!=0;
      if ($40) { label = 12; break; } else { label = 13; break; }
    case 12: 
      label = 14; break;
    case 13: 
      var $43=$memobj;
      var $44=(($43+4)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=(($45+24)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=$memobj;
      FUNCTION_TABLE[$47]($48);
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $51=$res;
      var $52=(($51)|(0))==0;
      if ($52) { label = 16; break; } else { label = 17; break; }
    case 16: 
      $1=-1;
      label = 36; break;
    case 17: 
      var $55=$res;
      var $56=(($55)|(0))==((__Py_NoneStruct)|(0));
      if ($56) { label = 18; break; } else { label = 24; break; }
    case 18: 
      label = 19; break;
    case 19: 
      var $59=$res;
      var $60=(($59)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=((($61)-(1))|0);
      HEAP32[(($60)>>2)]=$62;
      var $63=(($62)|(0))!=0;
      if ($63) { label = 20; break; } else { label = 21; break; }
    case 20: 
      label = 22; break;
    case 21: 
      var $66=$res;
      var $67=(($66+4)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=(($68+24)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=$res;
      FUNCTION_TABLE[$70]($71);
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $74=$errnum;
      var $75=___errno_location();
      HEAP32[(($75)>>2)]=$74;
      $1=-2;
      label = 36; break;
    case 24: 
      var $77=$res;
      var $78=HEAP32[((_PyExc_ValueError)>>2)];
      var $79=_PyNumber_AsSsize_t($77, $78);
      $n=$79;
      label = 25; break;
    case 25: 
      var $81=$res;
      var $82=(($81)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=((($83)-(1))|0);
      HEAP32[(($82)>>2)]=$84;
      var $85=(($84)|(0))!=0;
      if ($85) { label = 26; break; } else { label = 27; break; }
    case 26: 
      label = 28; break;
    case 27: 
      var $88=$res;
      var $89=(($88+4)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=(($90+24)|0);
      var $92=HEAP32[(($91)>>2)];
      var $93=$res;
      FUNCTION_TABLE[$92]($93);
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $96=$n;
      var $97=(($96)|(0)) < 0;
      if ($97) { label = 31; break; } else { label = 30; break; }
    case 30: 
      var $99=$n;
      var $100=$4;
      var $101=(($99)|(0)) > (($100)|(0));
      if ($101) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $103=HEAP32[((_PyExc_IOError)>>2)];
      var $104=$n;
      var $105=$4;
      var $106=_PyErr_Format($103, ((__str42)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$104,HEAP32[(((tempInt)+(4))>>2)]=$105,tempInt));
      $1=-1;
      label = 36; break;
    case 32: 
      var $108=$n;
      var $109=(($108)|(0)) > 0;
      if ($109) { label = 33; break; } else { label = 35; break; }
    case 33: 
      var $111=$2;
      var $112=(($111+32)|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=(($113)|(0))!=-1;
      if ($114) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $116=$n;
      var $117=$2;
      var $118=(($117+32)|0);
      var $119=HEAP32[(($118)>>2)];
      var $120=((($119)+($116))|0);
      HEAP32[(($118)>>2)]=$120;
      label = 35; break;
    case 35: 
      var $122=$n;
      $1=$122;
      label = 36; break;
    case 36: 
      var $124=$1;
      STACKTOP = __stackBase__;
      return $124;
    default: assert(0, "bad label: " + label);
  }
}
function _buffered_flush_and_rewind_unlocked($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $res;
      var $n;
      $2=$self;
      var $3=$2;
      var $4=__bufferedwriter_flush_unlocked($3);
      $res=$4;
      var $5=$res;
      var $6=(($5)|(0))==0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 20; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $10=$res;
      var $11=(($10)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=((($12)-(1))|0);
      HEAP32[(($11)>>2)]=$13;
      var $14=(($13)|(0))!=0;
      if ($14) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 7; break;
    case 6: 
      var $17=$res;
      var $18=(($17+4)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19+24)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$res;
      FUNCTION_TABLE[$21]($22);
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $25=$2;
      var $26=(($25+20)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27)|(0))!=0;
      if ($28) { label = 9; break; } else { label = 19; break; }
    case 9: 
      var $30=$2;
      var $31=$2;
      var $32=(($31+20)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33)|(0))!=0;
      if ($34) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $36=$2;
      var $37=(($36+48)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38)|(0))!=-1;
      if ($39) { label = 13; break; } else { label = 11; break; }
    case 11: 
      var $41=$2;
      var $42=(($41+24)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($43)|(0))!=0;
      if ($44) { label = 12; break; } else { label = 15; break; }
    case 12: 
      var $46=$2;
      var $47=(($46+56)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=(($48)|(0))!=-1;
      if ($49) { label = 13; break; } else { label = 15; break; }
    case 13: 
      var $51=$2;
      var $52=(($51+44)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=(($53)|(0)) >= 0;
      if ($54) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $56=$2;
      var $57=(($56+44)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=$2;
      var $60=(($59+40)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=((($58)-($61))|0);
      var $65 = $62;label = 16; break;
    case 15: 
      var $65 = 0;label = 16; break;
    case 16: 
      var $65;
      var $66=(((-$65))|0);
      var $67=__buffered_raw_seek($30, $66, 1);
      $n=$67;
      var $68=$2;
      __bufferedreader_reset_buf($68);
      var $69=$n;
      var $70=(($69)|(0))==-1;
      if ($70) { label = 17; break; } else { label = 18; break; }
    case 17: 
      $1=0;
      label = 20; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $74=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $75=((($74)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$75;
      $1=__Py_NoneStruct;
      label = 20; break;
    case 20: 
      var $77=$1;
      return $77;
    default: assert(0, "bad label: " + label);
  }
}
function __bufferedreader_peek_unlocked($self, $n) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $have;
      var $r;
      $2=$self;
      $3=$n;
      var $4=$2;
      var $5=(($4+20)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0))!=0;
      if ($7) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $9=$2;
      var $10=(($9+20)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $14=$2;
      var $15=(($14+48)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16)|(0))!=-1;
      if ($17) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $19=$2;
      var $20=(($19+48)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$2;
      var $23=(($22+40)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=((($21)-($24))|0);
      var $28 = $25;label = 6; break;
    case 5: 
      var $28 = 0;label = 6; break;
    case 6: 
      var $28;
      $have=$28;
      var $29=$have;
      var $30=(($29)|(0)) > 0;
      if ($30) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $32=$2;
      var $33=(($32+36)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=$2;
      var $36=(($35+40)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($34+$37)|0);
      var $39=$have;
      var $40=_PyString_FromStringAndSize($38, $39);
      $1=$40;
      label = 13; break;
    case 8: 
      var $42=$2;
      __bufferedreader_reset_buf($42);
      var $43=$2;
      var $44=__bufferedreader_fill_buffer($43);
      $r=$44;
      var $45=$r;
      var $46=(($45)|(0))==-1;
      if ($46) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $1=0;
      label = 13; break;
    case 10: 
      var $49=$r;
      var $50=(($49)|(0))==-2;
      if ($50) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $r=0;
      label = 12; break;
    case 12: 
      var $53=$2;
      var $54=(($53+40)|0);
      HEAP32[(($54)>>2)]=0;
      var $55=$2;
      var $56=(($55+36)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=$r;
      var $59=_PyString_FromStringAndSize($57, $58);
      $1=$59;
      label = 13; break;
    case 13: 
      var $61=$1;
      return $61;
    default: assert(0, "bad label: " + label);
  }
}
function __bufferedreader_fill_buffer($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $start;
      var $len;
      var $n;
      $2=$self;
      var $3=$2;
      var $4=(($3+20)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))!=0;
      if ($6) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $8=$2;
      var $9=(($8+48)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|(0))!=-1;
      if ($11) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $13=$2;
      var $14=(($13+48)|0);
      var $15=HEAP32[(($14)>>2)];
      $start=$15;
      label = 5; break;
    case 4: 
      $start=0;
      label = 5; break;
    case 5: 
      var $18=$2;
      var $19=(($18+60)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=$start;
      var $22=((($20)-($21))|0);
      $len=$22;
      var $23=$2;
      var $24=$2;
      var $25=(($24+36)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$start;
      var $28=(($26+$27)|0);
      var $29=$len;
      var $30=__bufferedreader_raw_read($23, $28, $29);
      $n=$30;
      var $31=$n;
      var $32=(($31)|(0)) <= 0;
      if ($32) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $34=$n;
      $1=$34;
      label = 8; break;
    case 7: 
      var $36=$start;
      var $37=$n;
      var $38=((($36)+($37))|0);
      var $39=$2;
      var $40=(($39+48)|0);
      HEAP32[(($40)>>2)]=$38;
      var $41=$start;
      var $42=$n;
      var $43=((($41)+($42))|0);
      var $44=$2;
      var $45=(($44+44)|0);
      HEAP32[(($45)>>2)]=$43;
      var $46=$n;
      $1=$46;
      label = 8; break;
    case 8: 
      var $48=$1;
      return $48;
    default: assert(0, "bad label: " + label);
  }
}
function __bufferedreader_raw_read($self, $start, $len) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 52)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $buf=__stackBase__;
      var $memobj;
      var $res;
      var $n;
      $2=$self;
      $3=$start;
      $4=$len;
      var $5=$3;
      var $6=$4;
      var $7=_PyBuffer_FillInfo($buf, 0, $5, $6, 0, 9);
      var $8=(($7)|(0))==-1;
      if ($8) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=-1;
      label = 36; break;
    case 3: 
      var $11=_PyMemoryView_FromBuffer($buf);
      $memobj=$11;
      var $12=$memobj;
      var $13=(($12)|(0))==0;
      if ($13) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=-1;
      label = 36; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $17=$2;
      var $18=(($17+8)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=HEAP32[((__PyIO_str_readinto)>>2)];
      var $21=$memobj;
      var $22=_PyObject_CallMethodObjArgs($19, $20, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$21,HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
      $res=$22;
      label = 7; break;
    case 7: 
      var $24=$res;
      var $25=(($24)|(0))==0;
      if ($25) { label = 8; break; } else { var $30 = 0;label = 9; break; }
    case 8: 
      var $27=__PyIO_trap_eintr();
      var $28=(($27)|(0))!=0;
      var $30 = $28;label = 9; break;
    case 9: 
      var $30;
      if ($30) { label = 6; break; } else { label = 10; break; }
    case 10: 
      label = 11; break;
    case 11: 
      var $33=$memobj;
      var $34=(($33)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=((($35)-(1))|0);
      HEAP32[(($34)>>2)]=$36;
      var $37=(($36)|(0))!=0;
      if ($37) { label = 12; break; } else { label = 13; break; }
    case 12: 
      label = 14; break;
    case 13: 
      var $40=$memobj;
      var $41=(($40+4)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($42+24)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=$memobj;
      FUNCTION_TABLE[$44]($45);
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $48=$res;
      var $49=(($48)|(0))==0;
      if ($49) { label = 16; break; } else { label = 17; break; }
    case 16: 
      $1=-1;
      label = 36; break;
    case 17: 
      var $52=$res;
      var $53=(($52)|(0))==((__Py_NoneStruct)|(0));
      if ($53) { label = 18; break; } else { label = 24; break; }
    case 18: 
      label = 19; break;
    case 19: 
      var $56=$res;
      var $57=(($56)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=((($58)-(1))|0);
      HEAP32[(($57)>>2)]=$59;
      var $60=(($59)|(0))!=0;
      if ($60) { label = 20; break; } else { label = 21; break; }
    case 20: 
      label = 22; break;
    case 21: 
      var $63=$res;
      var $64=(($63+4)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=(($65+24)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=$res;
      FUNCTION_TABLE[$67]($68);
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      $1=-2;
      label = 36; break;
    case 24: 
      var $72=$res;
      var $73=HEAP32[((_PyExc_ValueError)>>2)];
      var $74=_PyNumber_AsSsize_t($72, $73);
      $n=$74;
      label = 25; break;
    case 25: 
      var $76=$res;
      var $77=(($76)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=((($78)-(1))|0);
      HEAP32[(($77)>>2)]=$79;
      var $80=(($79)|(0))!=0;
      if ($80) { label = 26; break; } else { label = 27; break; }
    case 26: 
      label = 28; break;
    case 27: 
      var $83=$res;
      var $84=(($83+4)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=(($85+24)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=$res;
      FUNCTION_TABLE[$87]($88);
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $91=$n;
      var $92=(($91)|(0)) < 0;
      if ($92) { label = 31; break; } else { label = 30; break; }
    case 30: 
      var $94=$n;
      var $95=$4;
      var $96=(($94)|(0)) > (($95)|(0));
      if ($96) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $98=HEAP32[((_PyExc_IOError)>>2)];
      var $99=$n;
      var $100=$4;
      var $101=_PyErr_Format($98, ((__str45)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$99,HEAP32[(((tempInt)+(4))>>2)]=$100,tempInt));
      $1=-1;
      label = 36; break;
    case 32: 
      var $103=$n;
      var $104=(($103)|(0)) > 0;
      if ($104) { label = 33; break; } else { label = 35; break; }
    case 33: 
      var $106=$2;
      var $107=(($106+32)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=(($108)|(0))!=-1;
      if ($109) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $111=$n;
      var $112=$2;
      var $113=(($112+32)|0);
      var $114=HEAP32[(($113)>>2)];
      var $115=((($114)+($111))|0);
      HEAP32[(($113)>>2)]=$115;
      label = 35; break;
    case 35: 
      var $117=$n;
      $1=$117;
      label = 36; break;
    case 36: 
      var $119=$1;
      STACKTOP = __stackBase__;
      return $119;
    default: assert(0, "bad label: " + label);
  }
}
function __buffered_readline($self, $limit) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $res;
      var $chunks;
      var $n;
      var $written;
      var $start;
      var $s;
      var $end;
      var $_py_tmp;
      var $_py_tmp1;
      var $r;
      var $_py_tmp2;
      var $_py_tmp3;
      var $_py_tmp4;
      var $_py_tmp5;
      $2=$self;
      $3=$limit;
      $res=0;
      $chunks=0;
      $written=0;
      var $4=$2;
      var $5=(($4+28)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0))!=0;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $9=$2;
      var $10=(($9+8)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=__PyFileIO_closed($11);
      var $13=(($12)|(0))!=0;
      if ($13) { label = 4; break; } else { label = 5; break; }
    case 3: 
      var $15=$2;
      var $16=_buffered_closed($15);
      var $17=(($16)|(0))!=0;
      if ($17) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $19=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($19, ((__str47)|0));
      $1=0;
      label = 135; break;
    case 5: 
      var $21=$2;
      var $22=(($21+20)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23)|(0))!=0;
      if ($24) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $26=$2;
      var $27=(($26+20)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28)|(0))!=0;
      if ($29) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $31=$2;
      var $32=(($31+48)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33)|(0))!=-1;
      if ($34) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $36=$2;
      var $37=(($36+48)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=$2;
      var $40=(($39+40)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=((($38)-($41))|0);
      var $45 = $42;label = 10; break;
    case 9: 
      var $45 = 0;label = 10; break;
    case 10: 
      var $45;
      $n=$45;
      var $46=$3;
      var $47=(($46)|(0)) >= 0;
      if ($47) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $49=$n;
      var $50=$3;
      var $51=(($49)|(0)) > (($50)|(0));
      if ($51) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $53=$3;
      $n=$53;
      label = 13; break;
    case 13: 
      var $55=$2;
      var $56=(($55+36)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=$2;
      var $59=(($58+40)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=(($57+$60)|0);
      $start=$61;
      var $62=$start;
      var $63=$n;
      var $64=_memchr($62, 10, $63);
      $s=$64;
      var $65=$s;
      var $66=(($65)|(0))!=0;
      if ($66) { label = 14; break; } else { label = 17; break; }
    case 14: 
      var $68=$start;
      var $69=$s;
      var $70=$start;
      var $71=$69;
      var $72=$70;
      var $73=((($71)-($72))|0);
      var $74=((($73)+(1))|0);
      var $75=_PyString_FromStringAndSize($68, $74);
      $res=$75;
      var $76=$res;
      var $77=(($76)|(0))!=0;
      if ($77) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $79=$s;
      var $80=$start;
      var $81=$79;
      var $82=$80;
      var $83=((($81)-($82))|0);
      var $84=((($83)+(1))|0);
      var $85=$2;
      var $86=(($85+40)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=((($87)+($84))|0);
      HEAP32[(($86)>>2)]=$88;
      label = 16; break;
    case 16: 
      label = 124; break;
    case 17: 
      var $91=$n;
      var $92=$3;
      var $93=(($91)|(0))==(($92)|(0));
      if ($93) { label = 18; break; } else { label = 21; break; }
    case 18: 
      var $95=$start;
      var $96=$n;
      var $97=_PyString_FromStringAndSize($95, $96);
      $res=$97;
      var $98=$res;
      var $99=(($98)|(0))!=0;
      if ($99) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $101=$n;
      var $102=$2;
      var $103=(($102+40)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=((($104)+($101))|0);
      HEAP32[(($103)>>2)]=$105;
      label = 20; break;
    case 20: 
      label = 124; break;
    case 21: 
      var $108=_PyList_New(0);
      $chunks=$108;
      var $109=$chunks;
      var $110=(($109)|(0))==0;
      if ($110) { label = 22; break; } else { label = 23; break; }
    case 22: 
      label = 123; break;
    case 23: 
      var $113=$n;
      var $114=(($113)|(0)) > 0;
      if ($114) { label = 24; break; } else { label = 49; break; }
    case 24: 
      var $116=$start;
      var $117=$n;
      var $118=_PyString_FromStringAndSize($116, $117);
      $res=$118;
      var $119=$res;
      var $120=(($119)|(0))==0;
      if ($120) { label = 25; break; } else { label = 26; break; }
    case 25: 
      label = 123; break;
    case 26: 
      var $123=$chunks;
      var $124=$res;
      var $125=_PyList_Append($123, $124);
      var $126=(($125)|(0)) < 0;
      if ($126) { label = 27; break; } else { label = 37; break; }
    case 27: 
      label = 28; break;
    case 28: 
      var $129=$res;
      var $130=(($129)|(0))!=0;
      if ($130) { label = 29; break; } else { label = 35; break; }
    case 29: 
      var $132=$res;
      $_py_tmp=$132;
      $res=0;
      label = 30; break;
    case 30: 
      var $134=$_py_tmp;
      var $135=(($134)|0);
      var $136=HEAP32[(($135)>>2)];
      var $137=((($136)-(1))|0);
      HEAP32[(($135)>>2)]=$137;
      var $138=(($137)|(0))!=0;
      if ($138) { label = 31; break; } else { label = 32; break; }
    case 31: 
      label = 33; break;
    case 32: 
      var $141=$_py_tmp;
      var $142=(($141+4)|0);
      var $143=HEAP32[(($142)>>2)];
      var $144=(($143+24)|0);
      var $145=HEAP32[(($144)>>2)];
      var $146=$_py_tmp;
      FUNCTION_TABLE[$145]($146);
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      label = 123; break;
    case 37: 
      label = 38; break;
    case 38: 
      var $153=$res;
      var $154=(($153)|(0))!=0;
      if ($154) { label = 39; break; } else { label = 45; break; }
    case 39: 
      var $156=$res;
      $_py_tmp1=$156;
      $res=0;
      label = 40; break;
    case 40: 
      var $158=$_py_tmp1;
      var $159=(($158)|0);
      var $160=HEAP32[(($159)>>2)];
      var $161=((($160)-(1))|0);
      HEAP32[(($159)>>2)]=$161;
      var $162=(($161)|(0))!=0;
      if ($162) { label = 41; break; } else { label = 42; break; }
    case 41: 
      label = 43; break;
    case 42: 
      var $165=$_py_tmp1;
      var $166=(($165+4)|0);
      var $167=HEAP32[(($166)>>2)];
      var $168=(($167+24)|0);
      var $169=HEAP32[(($168)>>2)];
      var $170=$_py_tmp1;
      FUNCTION_TABLE[$169]($170);
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      var $175=$n;
      var $176=$written;
      var $177=((($176)+($175))|0);
      $written=$177;
      var $178=$n;
      var $179=$2;
      var $180=(($179+40)|0);
      var $181=HEAP32[(($180)>>2)];
      var $182=((($181)+($178))|0);
      HEAP32[(($180)>>2)]=$182;
      var $183=$3;
      var $184=(($183)|(0)) >= 0;
      if ($184) { label = 47; break; } else { label = 48; break; }
    case 47: 
      var $186=$n;
      var $187=$3;
      var $188=((($187)-($186))|0);
      $3=$188;
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      var $191=$2;
      var $192=(($191+24)|0);
      var $193=HEAP32[(($192)>>2)];
      var $194=(($193)|(0))!=0;
      if ($194) { label = 50; break; } else { label = 58; break; }
    case 50: 
      var $196=$2;
      var $197=_buffered_flush_and_rewind_unlocked($196);
      $r=$197;
      var $198=$r;
      var $199=(($198)|(0))==0;
      if ($199) { label = 51; break; } else { label = 52; break; }
    case 51: 
      label = 123; break;
    case 52: 
      label = 53; break;
    case 53: 
      var $203=$r;
      var $204=(($203)|0);
      var $205=HEAP32[(($204)>>2)];
      var $206=((($205)-(1))|0);
      HEAP32[(($204)>>2)]=$206;
      var $207=(($206)|(0))!=0;
      if ($207) { label = 54; break; } else { label = 55; break; }
    case 54: 
      label = 56; break;
    case 55: 
      var $210=$r;
      var $211=(($210+4)|0);
      var $212=HEAP32[(($211)>>2)];
      var $213=(($212+24)|0);
      var $214=HEAP32[(($213)>>2)];
      var $215=$r;
      FUNCTION_TABLE[$214]($215);
      label = 56; break;
    case 56: 
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      label = 59; break;
    case 59: 
      var $220=$2;
      __bufferedreader_reset_buf($220);
      var $221=$2;
      var $222=__bufferedreader_fill_buffer($221);
      $n=$222;
      var $223=$n;
      var $224=(($223)|(0))==-1;
      if ($224) { label = 60; break; } else { label = 61; break; }
    case 60: 
      label = 123; break;
    case 61: 
      var $227=$n;
      var $228=(($227)|(0)) <= 0;
      if ($228) { label = 62; break; } else { label = 63; break; }
    case 62: 
      label = 100; break;
    case 63: 
      var $231=$3;
      var $232=(($231)|(0)) >= 0;
      if ($232) { label = 64; break; } else { label = 66; break; }
    case 64: 
      var $234=$n;
      var $235=$3;
      var $236=(($234)|(0)) > (($235)|(0));
      if ($236) { label = 65; break; } else { label = 66; break; }
    case 65: 
      var $238=$3;
      $n=$238;
      label = 66; break;
    case 66: 
      var $240=$2;
      var $241=(($240+36)|0);
      var $242=HEAP32[(($241)>>2)];
      $start=$242;
      var $243=$start;
      var $244=$n;
      var $245=(($243+$244)|0);
      $end=$245;
      var $246=$start;
      $s=$246;
      label = 67; break;
    case 67: 
      var $248=$s;
      var $249=$end;
      var $250=(($248)>>>(0)) < (($249)>>>(0));
      if ($250) { label = 68; break; } else { label = 73; break; }
    case 68: 
      var $252=$s;
      var $253=(($252+1)|0);
      $s=$253;
      var $254=HEAP8[($252)];
      var $255=(($254 << 24) >> 24);
      var $256=(($255)|(0))==10;
      if ($256) { label = 69; break; } else { label = 72; break; }
    case 69: 
      var $258=$start;
      var $259=$s;
      var $260=$start;
      var $261=$259;
      var $262=$260;
      var $263=((($261)-($262))|0);
      var $264=_PyString_FromStringAndSize($258, $263);
      $res=$264;
      var $265=$res;
      var $266=(($265)|(0))==0;
      if ($266) { label = 70; break; } else { label = 71; break; }
    case 70: 
      label = 123; break;
    case 71: 
      var $269=$s;
      var $270=$start;
      var $271=$269;
      var $272=$270;
      var $273=((($271)-($272))|0);
      var $274=$2;
      var $275=(($274+40)|0);
      HEAP32[(($275)>>2)]=$273;
      label = 101; break;
    case 72: 
      label = 67; break;
    case 73: 
      var $278=$start;
      var $279=$n;
      var $280=_PyString_FromStringAndSize($278, $279);
      $res=$280;
      var $281=$res;
      var $282=(($281)|(0))==0;
      if ($282) { label = 74; break; } else { label = 75; break; }
    case 74: 
      label = 123; break;
    case 75: 
      var $285=$n;
      var $286=$3;
      var $287=(($285)|(0))==(($286)|(0));
      if ($287) { label = 76; break; } else { label = 77; break; }
    case 76: 
      var $289=$n;
      var $290=$2;
      var $291=(($290+40)|0);
      HEAP32[(($291)>>2)]=$289;
      label = 100; break;
    case 77: 
      var $293=$chunks;
      var $294=$res;
      var $295=_PyList_Append($293, $294);
      var $296=(($295)|(0)) < 0;
      if ($296) { label = 78; break; } else { label = 88; break; }
    case 78: 
      label = 79; break;
    case 79: 
      var $299=$res;
      var $300=(($299)|(0))!=0;
      if ($300) { label = 80; break; } else { label = 86; break; }
    case 80: 
      var $302=$res;
      $_py_tmp2=$302;
      $res=0;
      label = 81; break;
    case 81: 
      var $304=$_py_tmp2;
      var $305=(($304)|0);
      var $306=HEAP32[(($305)>>2)];
      var $307=((($306)-(1))|0);
      HEAP32[(($305)>>2)]=$307;
      var $308=(($307)|(0))!=0;
      if ($308) { label = 82; break; } else { label = 83; break; }
    case 82: 
      label = 84; break;
    case 83: 
      var $311=$_py_tmp2;
      var $312=(($311+4)|0);
      var $313=HEAP32[(($312)>>2)];
      var $314=(($313+24)|0);
      var $315=HEAP32[(($314)>>2)];
      var $316=$_py_tmp2;
      FUNCTION_TABLE[$315]($316);
      label = 84; break;
    case 84: 
      label = 85; break;
    case 85: 
      label = 86; break;
    case 86: 
      label = 87; break;
    case 87: 
      label = 123; break;
    case 88: 
      label = 89; break;
    case 89: 
      var $323=$res;
      var $324=(($323)|(0))!=0;
      if ($324) { label = 90; break; } else { label = 96; break; }
    case 90: 
      var $326=$res;
      $_py_tmp3=$326;
      $res=0;
      label = 91; break;
    case 91: 
      var $328=$_py_tmp3;
      var $329=(($328)|0);
      var $330=HEAP32[(($329)>>2)];
      var $331=((($330)-(1))|0);
      HEAP32[(($329)>>2)]=$331;
      var $332=(($331)|(0))!=0;
      if ($332) { label = 92; break; } else { label = 93; break; }
    case 92: 
      label = 94; break;
    case 93: 
      var $335=$_py_tmp3;
      var $336=(($335+4)|0);
      var $337=HEAP32[(($336)>>2)];
      var $338=(($337+24)|0);
      var $339=HEAP32[(($338)>>2)];
      var $340=$_py_tmp3;
      FUNCTION_TABLE[$339]($340);
      label = 94; break;
    case 94: 
      label = 95; break;
    case 95: 
      label = 96; break;
    case 96: 
      label = 97; break;
    case 97: 
      var $345=$n;
      var $346=$written;
      var $347=((($346)+($345))|0);
      $written=$347;
      var $348=$3;
      var $349=(($348)|(0)) >= 0;
      if ($349) { label = 98; break; } else { label = 99; break; }
    case 98: 
      var $351=$n;
      var $352=$3;
      var $353=((($352)-($351))|0);
      $3=$353;
      label = 99; break;
    case 99: 
      label = 59; break;
    case 100: 
      label = 101; break;
    case 101: 
      var $357=$res;
      var $358=(($357)|(0))!=0;
      if ($358) { label = 102; break; } else { label = 113; break; }
    case 102: 
      var $360=$chunks;
      var $361=$res;
      var $362=_PyList_Append($360, $361);
      var $363=(($362)|(0)) < 0;
      if ($363) { label = 103; break; } else { label = 113; break; }
    case 103: 
      label = 104; break;
    case 104: 
      var $366=$res;
      var $367=(($366)|(0))!=0;
      if ($367) { label = 105; break; } else { label = 111; break; }
    case 105: 
      var $369=$res;
      $_py_tmp4=$369;
      $res=0;
      label = 106; break;
    case 106: 
      var $371=$_py_tmp4;
      var $372=(($371)|0);
      var $373=HEAP32[(($372)>>2)];
      var $374=((($373)-(1))|0);
      HEAP32[(($372)>>2)]=$374;
      var $375=(($374)|(0))!=0;
      if ($375) { label = 107; break; } else { label = 108; break; }
    case 107: 
      label = 109; break;
    case 108: 
      var $378=$_py_tmp4;
      var $379=(($378+4)|0);
      var $380=HEAP32[(($379)>>2)];
      var $381=(($380+24)|0);
      var $382=HEAP32[(($381)>>2)];
      var $383=$_py_tmp4;
      FUNCTION_TABLE[$382]($383);
      label = 109; break;
    case 109: 
      label = 110; break;
    case 110: 
      label = 111; break;
    case 111: 
      label = 112; break;
    case 112: 
      label = 123; break;
    case 113: 
      label = 114; break;
    case 114: 
      var $390=$res;
      var $391=(($390)|(0))!=0;
      if ($391) { label = 115; break; } else { label = 121; break; }
    case 115: 
      var $393=$res;
      $_py_tmp5=$393;
      $res=0;
      label = 116; break;
    case 116: 
      var $395=$_py_tmp5;
      var $396=(($395)|0);
      var $397=HEAP32[(($396)>>2)];
      var $398=((($397)-(1))|0);
      HEAP32[(($396)>>2)]=$398;
      var $399=(($398)|(0))!=0;
      if ($399) { label = 117; break; } else { label = 118; break; }
    case 117: 
      label = 119; break;
    case 118: 
      var $402=$_py_tmp5;
      var $403=(($402+4)|0);
      var $404=HEAP32[(($403)>>2)];
      var $405=(($404+24)|0);
      var $406=HEAP32[(($405)>>2)];
      var $407=$_py_tmp5;
      FUNCTION_TABLE[$406]($407);
      label = 119; break;
    case 119: 
      label = 120; break;
    case 120: 
      label = 121; break;
    case 121: 
      label = 122; break;
    case 122: 
      var $412=HEAP32[((__PyIO_empty_bytes)>>2)];
      var $413=$chunks;
      var $414=__PyString_Join($412, $413);
      $res=$414;
      label = 123; break;
    case 123: 
      label = 124; break;
    case 124: 
      label = 125; break;
    case 125: 
      var $418=$chunks;
      var $419=(($418)|(0))==0;
      if ($419) { label = 126; break; } else { label = 127; break; }
    case 126: 
      label = 133; break;
    case 127: 
      label = 128; break;
    case 128: 
      var $423=$chunks;
      var $424=(($423)|0);
      var $425=HEAP32[(($424)>>2)];
      var $426=((($425)-(1))|0);
      HEAP32[(($424)>>2)]=$426;
      var $427=(($426)|(0))!=0;
      if ($427) { label = 129; break; } else { label = 130; break; }
    case 129: 
      label = 131; break;
    case 130: 
      var $430=$chunks;
      var $431=(($430+4)|0);
      var $432=HEAP32[(($431)>>2)];
      var $433=(($432+24)|0);
      var $434=HEAP32[(($433)>>2)];
      var $435=$chunks;
      FUNCTION_TABLE[$434]($435);
      label = 131; break;
    case 131: 
      label = 132; break;
    case 132: 
      label = 133; break;
    case 133: 
      label = 134; break;
    case 134: 
      var $440=$res;
      $1=$440;
      label = 135; break;
    case 135: 
      var $442=$1;
      return $442;
    default: assert(0, "bad label: " + label);
  }
}
function _bufferediobase_readinto($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 52)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $buf=__stackBase__;
      var $len;
      var $data;
      $2=$self;
      $3=$args;
      var $4=$3;
      var $5=__PyArg_ParseTuple_SizeT($4, ((__str48)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$buf,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 19; break;
    case 3: 
      var $9=$2;
      var $10=(($buf+8)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=__PyObject_CallMethod_SizeT($9, ((__str31)|0), ((__str49)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$11,tempInt));
      $data=$12;
      var $13=$data;
      var $14=(($13)|(0))==0;
      if ($14) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 18; break;
    case 5: 
      var $17=$data;
      var $18=(($17+4)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19+84)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$21 & 134217728;
      var $23=(($22)|(0))!=0;
      if ($23) { label = 12; break; } else { label = 6; break; }
    case 6: 
      label = 7; break;
    case 7: 
      var $26=$data;
      var $27=(($26)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=((($28)-(1))|0);
      HEAP32[(($27)>>2)]=$29;
      var $30=(($29)|(0))!=0;
      if ($30) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 10; break;
    case 9: 
      var $33=$data;
      var $34=(($33+4)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35+24)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=$data;
      FUNCTION_TABLE[$37]($38);
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $41=HEAP32[((_PyExc_TypeError)>>2)];
      _PyErr_SetString($41, ((__str50)|0));
      label = 18; break;
    case 12: 
      var $43=$data;
      var $44=$43;
      var $45=(($44+8)|0);
      var $46=HEAP32[(($45)>>2)];
      $len=$46;
      var $47=(($buf)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=$data;
      var $50=$49;
      var $51=(($50+20)|0);
      var $52=$51;
      var $53=$len;
      assert($53 % 1 === 0);_memcpy($48, $52, $53);
      _PyBuffer_Release($buf);
      label = 13; break;
    case 13: 
      var $55=$data;
      var $56=(($55)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=((($57)-(1))|0);
      HEAP32[(($56)>>2)]=$58;
      var $59=(($58)|(0))!=0;
      if ($59) { label = 14; break; } else { label = 15; break; }
    case 14: 
      label = 16; break;
    case 15: 
      var $62=$data;
      var $63=(($62+4)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=(($64+24)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=$data;
      FUNCTION_TABLE[$66]($67);
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $70=$len;
      var $71=_PyLong_FromSsize_t($70);
      $1=$71;
      label = 19; break;
    case 18: 
      _PyBuffer_Release($buf);
      $1=0;
      label = 19; break;
    case 19: 
      var $74=$1;
      STACKTOP = __stackBase__;
      return $74;
    default: assert(0, "bad label: " + label);
  }
}
function __bufferedreader_read_all($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $current_size;
      var $res;
      var $data;
      var $chunks;
      var $_py_tmp;
      $2=$self;
      $data=0;
      var $3=_PyList_New(0);
      $chunks=$3;
      var $4=$chunks;
      var $5=(($4)|(0))==0;
      if ($5) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 98; break;
    case 3: 
      var $8=$2;
      var $9=(($8+20)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|(0))!=0;
      if ($11) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $13=$2;
      var $14=(($13+20)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15)|(0))!=0;
      if ($16) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $18=$2;
      var $19=(($18+48)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20)|(0))!=-1;
      if ($21) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $23=$2;
      var $24=(($23+48)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=$2;
      var $27=(($26+40)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=((($25)-($28))|0);
      var $32 = $29;label = 8; break;
    case 7: 
      var $32 = 0;label = 8; break;
    case 8: 
      var $32;
      $current_size=$32;
      var $33=$current_size;
      var $34=(($33)|(0))!=0;
      if ($34) { label = 9; break; } else { label = 17; break; }
    case 9: 
      var $36=$2;
      var $37=(($36+36)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=$2;
      var $40=(($39+40)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($38+$41)|0);
      var $43=$current_size;
      var $44=_PyString_FromStringAndSize($42, $43);
      $data=$44;
      var $45=$data;
      var $46=(($45)|(0))==0;
      if ($46) { label = 10; break; } else { label = 16; break; }
    case 10: 
      label = 11; break;
    case 11: 
      var $49=$chunks;
      var $50=(($49)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=((($51)-(1))|0);
      HEAP32[(($50)>>2)]=$52;
      var $53=(($52)|(0))!=0;
      if ($53) { label = 12; break; } else { label = 13; break; }
    case 12: 
      label = 14; break;
    case 13: 
      var $56=$chunks;
      var $57=(($56+4)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=(($58+24)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=$chunks;
      FUNCTION_TABLE[$60]($61);
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      $1=0;
      label = 98; break;
    case 16: 
      var $65=$current_size;
      var $66=$2;
      var $67=(($66+40)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=((($68)+($65))|0);
      HEAP32[(($67)>>2)]=$69;
      label = 17; break;
    case 17: 
      var $71=$2;
      var $72=(($71+24)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=(($73)|(0))!=0;
      if ($74) { label = 18; break; } else { label = 35; break; }
    case 18: 
      var $76=$2;
      var $77=_buffered_flush_and_rewind_unlocked($76);
      $res=$77;
      var $78=$res;
      var $79=(($78)|(0))==0;
      if ($79) { label = 19; break; } else { label = 25; break; }
    case 19: 
      label = 20; break;
    case 20: 
      var $82=$chunks;
      var $83=(($82)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=((($84)-(1))|0);
      HEAP32[(($83)>>2)]=$85;
      var $86=(($85)|(0))!=0;
      if ($86) { label = 21; break; } else { label = 22; break; }
    case 21: 
      label = 23; break;
    case 22: 
      var $89=$chunks;
      var $90=(($89+4)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=(($91+24)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=$chunks;
      FUNCTION_TABLE[$93]($94);
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      $1=0;
      label = 98; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $99=$res;
      var $100=(($99)|(0))!=0;
      if ($100) { label = 27; break; } else { label = 33; break; }
    case 27: 
      var $102=$res;
      $_py_tmp=$102;
      $res=0;
      label = 28; break;
    case 28: 
      var $104=$_py_tmp;
      var $105=(($104)|0);
      var $106=HEAP32[(($105)>>2)];
      var $107=((($106)-(1))|0);
      HEAP32[(($105)>>2)]=$107;
      var $108=(($107)|(0))!=0;
      if ($108) { label = 29; break; } else { label = 30; break; }
    case 29: 
      label = 31; break;
    case 30: 
      var $111=$_py_tmp;
      var $112=(($111+4)|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=(($113+24)|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=$_py_tmp;
      FUNCTION_TABLE[$115]($116);
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      var $122=$2;
      __bufferedreader_reset_buf($122);
      label = 36; break;
    case 36: 
      var $124=$data;
      var $125=(($124)|(0))!=0;
      if ($125) { label = 37; break; } else { label = 55; break; }
    case 37: 
      var $127=$chunks;
      var $128=$data;
      var $129=_PyList_Append($127, $128);
      var $130=(($129)|(0)) < 0;
      if ($130) { label = 38; break; } else { label = 49; break; }
    case 38: 
      label = 39; break;
    case 39: 
      var $133=$data;
      var $134=(($133)|0);
      var $135=HEAP32[(($134)>>2)];
      var $136=((($135)-(1))|0);
      HEAP32[(($134)>>2)]=$136;
      var $137=(($136)|(0))!=0;
      if ($137) { label = 40; break; } else { label = 41; break; }
    case 40: 
      label = 42; break;
    case 41: 
      var $140=$data;
      var $141=(($140+4)|0);
      var $142=HEAP32[(($141)>>2)];
      var $143=(($142+24)|0);
      var $144=HEAP32[(($143)>>2)];
      var $145=$data;
      FUNCTION_TABLE[$144]($145);
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      var $149=$chunks;
      var $150=(($149)|0);
      var $151=HEAP32[(($150)>>2)];
      var $152=((($151)-(1))|0);
      HEAP32[(($150)>>2)]=$152;
      var $153=(($152)|(0))!=0;
      if ($153) { label = 45; break; } else { label = 46; break; }
    case 45: 
      label = 47; break;
    case 46: 
      var $156=$chunks;
      var $157=(($156+4)|0);
      var $158=HEAP32[(($157)>>2)];
      var $159=(($158+24)|0);
      var $160=HEAP32[(($159)>>2)];
      var $161=$chunks;
      FUNCTION_TABLE[$160]($161);
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      $1=0;
      label = 98; break;
    case 49: 
      label = 50; break;
    case 50: 
      var $166=$data;
      var $167=(($166)|0);
      var $168=HEAP32[(($167)>>2)];
      var $169=((($168)-(1))|0);
      HEAP32[(($167)>>2)]=$169;
      var $170=(($169)|(0))!=0;
      if ($170) { label = 51; break; } else { label = 52; break; }
    case 51: 
      label = 53; break;
    case 52: 
      var $173=$data;
      var $174=(($173+4)|0);
      var $175=HEAP32[(($174)>>2)];
      var $176=(($175+24)|0);
      var $177=HEAP32[(($176)>>2)];
      var $178=$data;
      FUNCTION_TABLE[$177]($178);
      label = 53; break;
    case 53: 
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      var $182=$2;
      var $183=(($182+8)|0);
      var $184=HEAP32[(($183)>>2)];
      var $185=HEAP32[((__PyIO_str_read)>>2)];
      var $186=_PyObject_CallMethodObjArgs($184, $185, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $data=$186;
      var $187=$data;
      var $188=(($187)|(0))==0;
      if ($188) { label = 56; break; } else { label = 62; break; }
    case 56: 
      label = 57; break;
    case 57: 
      var $191=$chunks;
      var $192=(($191)|0);
      var $193=HEAP32[(($192)>>2)];
      var $194=((($193)-(1))|0);
      HEAP32[(($192)>>2)]=$194;
      var $195=(($194)|(0))!=0;
      if ($195) { label = 58; break; } else { label = 59; break; }
    case 58: 
      label = 60; break;
    case 59: 
      var $198=$chunks;
      var $199=(($198+4)|0);
      var $200=HEAP32[(($199)>>2)];
      var $201=(($200+24)|0);
      var $202=HEAP32[(($201)>>2)];
      var $203=$chunks;
      FUNCTION_TABLE[$202]($203);
      label = 60; break;
    case 60: 
      label = 61; break;
    case 61: 
      $1=0;
      label = 98; break;
    case 62: 
      var $207=$data;
      var $208=(($207)|(0))!=((__Py_NoneStruct)|(0));
      if ($208) { label = 63; break; } else { label = 75; break; }
    case 63: 
      var $210=$data;
      var $211=(($210+4)|0);
      var $212=HEAP32[(($211)>>2)];
      var $213=(($212+84)|0);
      var $214=HEAP32[(($213)>>2)];
      var $215=$214 & 134217728;
      var $216=(($215)|(0))!=0;
      if ($216) { label = 75; break; } else { label = 64; break; }
    case 64: 
      label = 65; break;
    case 65: 
      var $219=$data;
      var $220=(($219)|0);
      var $221=HEAP32[(($220)>>2)];
      var $222=((($221)-(1))|0);
      HEAP32[(($220)>>2)]=$222;
      var $223=(($222)|(0))!=0;
      if ($223) { label = 66; break; } else { label = 67; break; }
    case 66: 
      label = 68; break;
    case 67: 
      var $226=$data;
      var $227=(($226+4)|0);
      var $228=HEAP32[(($227)>>2)];
      var $229=(($228+24)|0);
      var $230=HEAP32[(($229)>>2)];
      var $231=$data;
      FUNCTION_TABLE[$230]($231);
      label = 68; break;
    case 68: 
      label = 69; break;
    case 69: 
      label = 70; break;
    case 70: 
      var $235=$chunks;
      var $236=(($235)|0);
      var $237=HEAP32[(($236)>>2)];
      var $238=((($237)-(1))|0);
      HEAP32[(($236)>>2)]=$238;
      var $239=(($238)|(0))!=0;
      if ($239) { label = 71; break; } else { label = 72; break; }
    case 71: 
      label = 73; break;
    case 72: 
      var $242=$chunks;
      var $243=(($242+4)|0);
      var $244=HEAP32[(($243)>>2)];
      var $245=(($244+24)|0);
      var $246=HEAP32[(($245)>>2)];
      var $247=$chunks;
      FUNCTION_TABLE[$246]($247);
      label = 73; break;
    case 73: 
      label = 74; break;
    case 74: 
      var $250=HEAP32[((_PyExc_TypeError)>>2)];
      _PyErr_SetString($250, ((__str50)|0));
      $1=0;
      label = 98; break;
    case 75: 
      var $252=$data;
      var $253=(($252)|(0))==((__Py_NoneStruct)|(0));
      if ($253) { label = 77; break; } else { label = 76; break; }
    case 76: 
      var $255=$data;
      var $256=$255;
      var $257=(($256+8)|0);
      var $258=HEAP32[(($257)>>2)];
      var $259=(($258)|(0))==0;
      if ($259) { label = 77; break; } else { label = 95; break; }
    case 77: 
      var $261=$current_size;
      var $262=(($261)|(0))==0;
      if ($262) { label = 78; break; } else { label = 84; break; }
    case 78: 
      label = 79; break;
    case 79: 
      var $265=$chunks;
      var $266=(($265)|0);
      var $267=HEAP32[(($266)>>2)];
      var $268=((($267)-(1))|0);
      HEAP32[(($266)>>2)]=$268;
      var $269=(($268)|(0))!=0;
      if ($269) { label = 80; break; } else { label = 81; break; }
    case 80: 
      label = 82; break;
    case 81: 
      var $272=$chunks;
      var $273=(($272+4)|0);
      var $274=HEAP32[(($273)>>2)];
      var $275=(($274+24)|0);
      var $276=HEAP32[(($275)>>2)];
      var $277=$chunks;
      FUNCTION_TABLE[$276]($277);
      label = 82; break;
    case 82: 
      label = 83; break;
    case 83: 
      var $280=$data;
      $1=$280;
      label = 98; break;
    case 84: 
      var $282=HEAP32[((__PyIO_empty_bytes)>>2)];
      var $283=$chunks;
      var $284=__PyString_Join($282, $283);
      $res=$284;
      label = 85; break;
    case 85: 
      var $286=$data;
      var $287=(($286)|0);
      var $288=HEAP32[(($287)>>2)];
      var $289=((($288)-(1))|0);
      HEAP32[(($287)>>2)]=$289;
      var $290=(($289)|(0))!=0;
      if ($290) { label = 86; break; } else { label = 87; break; }
    case 86: 
      label = 88; break;
    case 87: 
      var $293=$data;
      var $294=(($293+4)|0);
      var $295=HEAP32[(($294)>>2)];
      var $296=(($295+24)|0);
      var $297=HEAP32[(($296)>>2)];
      var $298=$data;
      FUNCTION_TABLE[$297]($298);
      label = 88; break;
    case 88: 
      label = 89; break;
    case 89: 
      label = 90; break;
    case 90: 
      var $302=$chunks;
      var $303=(($302)|0);
      var $304=HEAP32[(($303)>>2)];
      var $305=((($304)-(1))|0);
      HEAP32[(($303)>>2)]=$305;
      var $306=(($305)|(0))!=0;
      if ($306) { label = 91; break; } else { label = 92; break; }
    case 91: 
      label = 93; break;
    case 92: 
      var $309=$chunks;
      var $310=(($309+4)|0);
      var $311=HEAP32[(($310)>>2)];
      var $312=(($311+24)|0);
      var $313=HEAP32[(($312)>>2)];
      var $314=$chunks;
      FUNCTION_TABLE[$313]($314);
      label = 93; break;
    case 93: 
      label = 94; break;
    case 94: 
      var $317=$res;
      $1=$317;
      label = 98; break;
    case 95: 
      var $319=$data;
      var $320=$319;
      var $321=(($320+8)|0);
      var $322=HEAP32[(($321)>>2)];
      var $323=$current_size;
      var $324=((($323)+($322))|0);
      $current_size=$324;
      var $325=$2;
      var $326=(($325+32)|0);
      var $327=HEAP32[(($326)>>2)];
      var $328=(($327)|(0))!=-1;
      if ($328) { label = 96; break; } else { label = 97; break; }
    case 96: 
      var $330=$data;
      var $331=$330;
      var $332=(($331+8)|0);
      var $333=HEAP32[(($332)>>2)];
      var $334=$2;
      var $335=(($334+32)|0);
      var $336=HEAP32[(($335)>>2)];
      var $337=((($336)+($333))|0);
      HEAP32[(($335)>>2)]=$337;
      label = 97; break;
    case 97: 
      label = 36; break;
    case 98: 
      var $340=$1;
      STACKTOP = __stackBase__;
      return $340;
    default: assert(0, "bad label: " + label);
  }
}
function __bufferedreader_read_fast($self, $n) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $current_size;
      var $res;
      $2=$self;
      $3=$n;
      var $4=$2;
      var $5=(($4+20)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0))!=0;
      if ($7) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $9=$2;
      var $10=(($9+20)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $14=$2;
      var $15=(($14+48)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16)|(0))!=-1;
      if ($17) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $19=$2;
      var $20=(($19+48)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$2;
      var $23=(($22+40)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=((($21)-($24))|0);
      var $28 = $25;label = 6; break;
    case 5: 
      var $28 = 0;label = 6; break;
    case 6: 
      var $28;
      $current_size=$28;
      var $29=$3;
      var $30=$current_size;
      var $31=(($29)|(0)) <= (($30)|(0));
      if ($31) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $33=$2;
      var $34=(($33+36)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=$2;
      var $37=(($36+40)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($35+$38)|0);
      var $40=$3;
      var $41=_PyString_FromStringAndSize($39, $40);
      $res=$41;
      var $42=$res;
      var $43=(($42)|(0))!=0;
      if ($43) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $45=$3;
      var $46=$2;
      var $47=(($46+40)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=((($48)+($45))|0);
      HEAP32[(($47)>>2)]=$49;
      label = 9; break;
    case 9: 
      var $51=$res;
      $1=$51;
      label = 11; break;
    case 10: 
      var $53=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $54=((($53)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$54;
      $1=__Py_NoneStruct;
      label = 11; break;
    case 11: 
      var $56=$1;
      return $56;
    default: assert(0, "bad label: " + label);
  }
}
function _bufferedrwpair_closed_get($self, $context) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$self;
      $3=$context;
      var $4=$2;
      var $5=(($4+12)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0))==0;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $9=HEAP32[((_PyExc_RuntimeError)>>2)];
      _PyErr_SetString($9, ((__str64)|0));
      $1=0;
      label = 4; break;
    case 3: 
      var $11=$2;
      var $12=(($11+12)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=$13;
      var $15=HEAP32[((__PyIO_str_closed)>>2)];
      var $16=_PyObject_GetAttr($14, $15);
      $1=$16;
      label = 4; break;
    case 4: 
      var $18=$1;
      return $18;
    default: assert(0, "bad label: " + label);
  }
}
function _bufferedrwpair_read($self, $args) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$args;
  var $3=$1;
  var $4=(($3+8)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=$2;
  var $7=__forward_call($5, ((__str31)|0), $6);
  return $7;
}
function _bufferedrwpair_peek($self, $args) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$args;
  var $3=$1;
  var $4=(($3+8)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=$2;
  var $7=__forward_call($5, ((__str35)|0), $6);
  return $7;
}
function _bufferedrwpair_read1($self, $args) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$args;
  var $3=$1;
  var $4=(($3+8)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=$2;
  var $7=__forward_call($5, ((__str32)|0), $6);
  return $7;
}
function _bufferedrwpair_readinto($self, $args) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$args;
  var $3=$1;
  var $4=(($3+8)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=$2;
  var $7=__forward_call($5, ((__str33)|0), $6);
  return $7;
}
function _bufferedrwpair_write($self, $args) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$args;
  var $3=$1;
  var $4=(($3+12)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=$2;
  var $7=__forward_call($5, ((__str36)|0), $6);
  return $7;
}
function _bufferedrwpair_flush($self, $args) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$args;
  var $3=$1;
  var $4=(($3+12)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=$2;
  var $7=__forward_call($5, ((__str27)|0), $6);
  return $7;
}
function _bufferedrwpair_readable($self, $args) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$args;
  var $3=$1;
  var $4=(($3+8)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=$2;
  var $7=__forward_call($5, ((__str23)|0), $6);
  return $7;
}
function _bufferedrwpair_writable($self, $args) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$args;
  var $3=$1;
  var $4=(($3+12)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=$2;
  var $7=__forward_call($5, ((__str24)|0), $6);
  return $7;
}
function _bufferedrwpair_close($self, $args) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $ret;
      $2=$self;
      $3=$args;
      var $4=$2;
      var $5=(($4+12)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=$3;
      var $8=__forward_call($6, ((__str20)|0), $7);
      $ret=$8;
      var $9=$ret;
      var $10=(($9)|(0))==0;
      if ($10) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 9; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $14=$ret;
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=((($16)-(1))|0);
      HEAP32[(($15)>>2)]=$17;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 7; break;
    case 6: 
      var $21=$ret;
      var $22=(($21+4)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+24)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=$ret;
      FUNCTION_TABLE[$25]($26);
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $29=$2;
      var $30=(($29+8)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=$3;
      var $33=__forward_call($31, ((__str20)|0), $32);
      $1=$33;
      label = 9; break;
    case 9: 
      var $35=$1;
      return $35;
    default: assert(0, "bad label: " + label);
  }
}
function _bufferedrwpair_isatty($self, $args) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $ret;
      $2=$self;
      $3=$args;
      var $4=$2;
      var $5=(($4+12)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=$3;
      var $8=__forward_call($6, ((__str26)|0), $7);
      $ret=$8;
      var $9=$ret;
      var $10=(($9)|(0))!=((__Py_ZeroStruct)|(0));
      if ($10) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $12=$ret;
      $1=$12;
      label = 9; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $15=$ret;
      var $16=(($15)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=((($17)-(1))|0);
      HEAP32[(($16)>>2)]=$18;
      var $19=(($18)|(0))!=0;
      if ($19) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 7; break;
    case 6: 
      var $22=$ret;
      var $23=(($22+4)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24+24)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$ret;
      FUNCTION_TABLE[$26]($27);
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $30=$2;
      var $31=(($30+8)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=$3;
      var $34=__forward_call($32, ((__str26)|0), $33);
      $1=$34;
      label = 9; break;
    case 9: 
      var $36=$1;
      return $36;
    default: assert(0, "bad label: " + label);
  }
}
function __forward_call($self, $name, $args) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $func;
      var $ret;
      $2=$self;
      $3=$name;
      $4=$args;
      var $5=$2;
      var $6=$5;
      var $7=$3;
      var $8=_PyObject_GetAttrString($6, $7);
      $func=$8;
      var $9=$func;
      var $10=(($9)|(0))==0;
      if ($10) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $12=HEAP32[((_PyExc_AttributeError)>>2)];
      var $13=$3;
      _PyErr_SetString($12, $13);
      $1=0;
      label = 9; break;
    case 3: 
      var $15=$func;
      var $16=$4;
      var $17=_PyObject_CallObject($15, $16);
      $ret=$17;
      label = 4; break;
    case 4: 
      var $19=$func;
      var $20=(($19)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=((($21)-(1))|0);
      HEAP32[(($20)>>2)]=$22;
      var $23=(($22)|(0))!=0;
      if ($23) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 7; break;
    case 6: 
      var $26=$func;
      var $27=(($26+4)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28+24)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=$func;
      FUNCTION_TABLE[$30]($31);
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $34=$ret;
      $1=$34;
      label = 9; break;
    case 9: 
      var $36=$1;
      return $36;
    default: assert(0, "bad label: " + label);
  }
}
function _buffered_simple_flush($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$self;
      $3=$args;
      var $4=$2;
      var $5=(($4+12)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0)) <= 0;
      if ($7) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $9=$2;
      var $10=(($9+16)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($14, ((__str18)|0));
      label = 5; break;
    case 4: 
      var $16=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($16, ((__str19)|0));
      label = 5; break;
    case 5: 
      $1=0;
      label = 7; break;
    case 6: 
      var $19=$2;
      var $20=(($19+8)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=HEAP32[((__PyIO_str_flush)>>2)];
      var $23=_PyObject_CallMethodObjArgs($21, $22, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=$23;
      label = 7; break;
    case 7: 
      var $25=$1;
      STACKTOP = __stackBase__;
      return $25;
    default: assert(0, "bad label: " + label);
  }
}
function _bufferediobase_detach($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=_bufferediobase_unsupported(((__str21)|0));
  return $2;
}
function _bufferediobase_read($self, $args) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$args;
  var $3=_bufferediobase_unsupported(((__str31)|0));
  return $3;
}
function _bufferediobase_read1($self, $args) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$args;
  var $3=_bufferediobase_unsupported(((__str32)|0));
  return $3;
}
function _bufferediobase_write($self, $args) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$args;
  var $3=_bufferediobase_unsupported(((__str36)|0));
  return $3;
}
function _bufferediobase_unsupported($message) {
  var label = 0;
  var $1;
  $1=$message;
  var $2=HEAP32[((__PyIO_unsupported_operation)>>2)];
  var $3=$1;
  _PyErr_SetString($2, $3);
  return 0;
}
function __bufferedreader_read_generic($self, $n) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $res=__stackBase__;
      var $current_size;
      var $remaining;
      var $written;
      var $out;
      var $r;
      var $r1;
      var $r2;
      $2=$self;
      $3=$n;
      HEAP32[(($res)>>2)]=0;
      var $4=$2;
      var $5=(($4+20)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0))!=0;
      if ($7) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $9=$2;
      var $10=(($9+20)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $14=$2;
      var $15=(($14+48)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16)|(0))!=-1;
      if ($17) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $19=$2;
      var $20=(($19+48)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$2;
      var $23=(($22+40)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=((($21)-($24))|0);
      var $28 = $25;label = 6; break;
    case 5: 
      var $28 = 0;label = 6; break;
    case 6: 
      var $28;
      $current_size=$28;
      var $29=$3;
      var $30=$current_size;
      var $31=(($29)|(0)) <= (($30)|(0));
      if ($31) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $33=$2;
      var $34=$3;
      var $35=__bufferedreader_read_fast($33, $34);
      $1=$35;
      label = 86; break;
    case 8: 
      var $37=$3;
      var $38=_PyString_FromStringAndSize(0, $37);
      HEAP32[(($res)>>2)]=$38;
      var $39=HEAP32[(($res)>>2)];
      var $40=(($39)|(0))==0;
      if ($40) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 75; break;
    case 10: 
      var $43=HEAP32[(($res)>>2)];
      var $44=$43;
      var $45=(($44+20)|0);
      var $46=(($45)|0);
      $out=$46;
      var $47=$3;
      $remaining=$47;
      $written=0;
      var $48=$current_size;
      var $49=(($48)|(0)) > 0;
      if ($49) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $51=$out;
      var $52=$2;
      var $53=(($52+36)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=$2;
      var $56=(($55+40)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=(($54+$57)|0);
      var $59=$current_size;
      assert($59 % 1 === 0);_memcpy($51, $58, $59);
      var $60=$current_size;
      var $61=$remaining;
      var $62=((($61)-($60))|0);
      $remaining=$62;
      var $63=$current_size;
      var $64=$written;
      var $65=((($64)+($63))|0);
      $written=$65;
      var $66=$current_size;
      var $67=$2;
      var $68=(($67+40)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=((($69)+($66))|0);
      HEAP32[(($68)>>2)]=$70;
      label = 12; break;
    case 12: 
      var $72=$2;
      var $73=(($72+24)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=(($74)|(0))!=0;
      if ($75) { label = 13; break; } else { label = 21; break; }
    case 13: 
      var $77=$2;
      var $78=_buffered_flush_and_rewind_unlocked($77);
      $r=$78;
      var $79=$r;
      var $80=(($79)|(0))==0;
      if ($80) { label = 14; break; } else { label = 15; break; }
    case 14: 
      label = 75; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $84=$r;
      var $85=(($84)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=((($86)-(1))|0);
      HEAP32[(($85)>>2)]=$87;
      var $88=(($87)|(0))!=0;
      if ($88) { label = 17; break; } else { label = 18; break; }
    case 17: 
      label = 19; break;
    case 18: 
      var $91=$r;
      var $92=(($91+4)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=(($93+24)|0);
      var $95=HEAP32[(($94)>>2)];
      var $96=$r;
      FUNCTION_TABLE[$95]($96);
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $100=$2;
      __bufferedreader_reset_buf($100);
      label = 22; break;
    case 22: 
      var $102=$remaining;
      var $103=(($102)|(0)) > 0;
      if ($103) { label = 23; break; } else { label = 44; break; }
    case 23: 
      var $105=$2;
      var $106=(($105+64)|0);
      var $107=HEAP32[(($106)>>2)];
      var $108=(($107)|(0))!=0;
      if ($108) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $110=$remaining;
      var $111=$2;
      var $112=(($111+64)|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=$113 ^ -1;
      var $115=$110 & $114;
      var $127 = $115;label = 26; break;
    case 25: 
      var $117=$2;
      var $118=(($117+60)|0);
      var $119=HEAP32[(($118)>>2)];
      var $120=$remaining;
      var $121=$2;
      var $122=(($121+60)|0);
      var $123=HEAP32[(($122)>>2)];
      var $124=((((($120)|(0)))/((($123)|(0))))&-1);
      var $125=Math.imul($119,$124);
      var $127 = $125;label = 26; break;
    case 26: 
      var $127;
      $r1=$127;
      var $128=$r1;
      var $129=(($128)|(0))==0;
      if ($129) { label = 27; break; } else { label = 28; break; }
    case 27: 
      label = 44; break;
    case 28: 
      var $132=$2;
      var $133=$out;
      var $134=$written;
      var $135=(($133+$134)|0);
      var $136=$r1;
      var $137=__bufferedreader_raw_read($132, $135, $136);
      $r1=$137;
      var $138=$r1;
      var $139=(($138)|(0))==-1;
      if ($139) { label = 29; break; } else { label = 30; break; }
    case 29: 
      label = 75; break;
    case 30: 
      var $142=$r1;
      var $143=(($142)|(0))==0;
      if ($143) { label = 32; break; } else { label = 31; break; }
    case 31: 
      var $145=$r1;
      var $146=(($145)|(0))==-2;
      if ($146) { label = 32; break; } else { label = 43; break; }
    case 32: 
      var $148=$r1;
      var $149=(($148)|(0))==0;
      if ($149) { label = 34; break; } else { label = 33; break; }
    case 33: 
      var $151=$written;
      var $152=(($151)|(0)) > 0;
      if ($152) { label = 34; break; } else { label = 37; break; }
    case 34: 
      var $154=$written;
      var $155=__PyString_Resize($res, $154);
      var $156=(($155)|(0))!=0;
      if ($156) { label = 35; break; } else { label = 36; break; }
    case 35: 
      label = 75; break;
    case 36: 
      var $159=HEAP32[(($res)>>2)];
      $1=$159;
      label = 86; break;
    case 37: 
      label = 38; break;
    case 38: 
      var $162=HEAP32[(($res)>>2)];
      var $163=(($162)|0);
      var $164=HEAP32[(($163)>>2)];
      var $165=((($164)-(1))|0);
      HEAP32[(($163)>>2)]=$165;
      var $166=(($165)|(0))!=0;
      if ($166) { label = 39; break; } else { label = 40; break; }
    case 39: 
      label = 41; break;
    case 40: 
      var $169=HEAP32[(($res)>>2)];
      var $170=(($169+4)|0);
      var $171=HEAP32[(($170)>>2)];
      var $172=(($171+24)|0);
      var $173=HEAP32[(($172)>>2)];
      var $174=HEAP32[(($res)>>2)];
      FUNCTION_TABLE[$173]($174);
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      var $177=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $178=((($177)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$178;
      $1=__Py_NoneStruct;
      label = 86; break;
    case 43: 
      var $180=$r1;
      var $181=$remaining;
      var $182=((($181)-($180))|0);
      $remaining=$182;
      var $183=$r1;
      var $184=$written;
      var $185=((($184)+($183))|0);
      $written=$185;
      label = 22; break;
    case 44: 
      var $187=$remaining;
      var $188=$2;
      var $189=(($188+60)|0);
      var $190=HEAP32[(($189)>>2)];
      var $191=(($187)|(0)) <= (($190)|(0));
      if ($191) { label = 45; break; } else { label = 46; break; }
    case 45: 
      label = 47; break;
    case 46: 
      ___assert_func(((__str1)|0), 1496, ((___func____bufferedreader_read_generic)|0), ((__str56)|0));
      throw "Reached an unreachable!";
      label = 47; break;
    case 47: 
      var $196=$2;
      var $197=(($196+40)|0);
      HEAP32[(($197)>>2)]=0;
      var $198=$2;
      var $199=(($198+44)|0);
      HEAP32[(($199)>>2)]=0;
      var $200=$2;
      var $201=(($200+48)|0);
      HEAP32[(($201)>>2)]=0;
      label = 48; break;
    case 48: 
      var $203=$remaining;
      var $204=(($203)|(0)) > 0;
      if ($204) { label = 49; break; } else { var $214 = 0;label = 50; break; }
    case 49: 
      var $206=$2;
      var $207=(($206+48)|0);
      var $208=HEAP32[(($207)>>2)];
      var $209=$2;
      var $210=(($209+60)|0);
      var $211=HEAP32[(($210)>>2)];
      var $212=(($208)|(0)) < (($211)|(0));
      var $214 = $212;label = 50; break;
    case 50: 
      var $214;
      if ($214) { label = 51; break; } else { label = 74; break; }
    case 51: 
      var $216=$2;
      var $217=__bufferedreader_fill_buffer($216);
      $r2=$217;
      var $218=$r2;
      var $219=(($218)|(0))==-1;
      if ($219) { label = 52; break; } else { label = 53; break; }
    case 52: 
      label = 75; break;
    case 53: 
      var $222=$r2;
      var $223=(($222)|(0))==0;
      if ($223) { label = 55; break; } else { label = 54; break; }
    case 54: 
      var $225=$r2;
      var $226=(($225)|(0))==-2;
      if ($226) { label = 55; break; } else { label = 66; break; }
    case 55: 
      var $228=$r2;
      var $229=(($228)|(0))==0;
      if ($229) { label = 57; break; } else { label = 56; break; }
    case 56: 
      var $231=$written;
      var $232=(($231)|(0)) > 0;
      if ($232) { label = 57; break; } else { label = 60; break; }
    case 57: 
      var $234=$written;
      var $235=__PyString_Resize($res, $234);
      var $236=(($235)|(0))!=0;
      if ($236) { label = 58; break; } else { label = 59; break; }
    case 58: 
      label = 75; break;
    case 59: 
      var $239=HEAP32[(($res)>>2)];
      $1=$239;
      label = 86; break;
    case 60: 
      label = 61; break;
    case 61: 
      var $242=HEAP32[(($res)>>2)];
      var $243=(($242)|0);
      var $244=HEAP32[(($243)>>2)];
      var $245=((($244)-(1))|0);
      HEAP32[(($243)>>2)]=$245;
      var $246=(($245)|(0))!=0;
      if ($246) { label = 62; break; } else { label = 63; break; }
    case 62: 
      label = 64; break;
    case 63: 
      var $249=HEAP32[(($res)>>2)];
      var $250=(($249+4)|0);
      var $251=HEAP32[(($250)>>2)];
      var $252=(($251+24)|0);
      var $253=HEAP32[(($252)>>2)];
      var $254=HEAP32[(($res)>>2)];
      FUNCTION_TABLE[$253]($254);
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      var $257=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $258=((($257)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$258;
      $1=__Py_NoneStruct;
      label = 86; break;
    case 66: 
      var $260=$remaining;
      var $261=$r2;
      var $262=(($260)|(0)) > (($261)|(0));
      if ($262) { label = 67; break; } else { label = 68; break; }
    case 67: 
      var $264=$out;
      var $265=$written;
      var $266=(($264+$265)|0);
      var $267=$2;
      var $268=(($267+36)|0);
      var $269=HEAP32[(($268)>>2)];
      var $270=$2;
      var $271=(($270+40)|0);
      var $272=HEAP32[(($271)>>2)];
      var $273=(($269+$272)|0);
      var $274=$r2;
      assert($274 % 1 === 0);_memcpy($266, $273, $274);
      var $275=$r2;
      var $276=$written;
      var $277=((($276)+($275))|0);
      $written=$277;
      var $278=$r2;
      var $279=$2;
      var $280=(($279+40)|0);
      var $281=HEAP32[(($280)>>2)];
      var $282=((($281)+($278))|0);
      HEAP32[(($280)>>2)]=$282;
      var $283=$r2;
      var $284=$remaining;
      var $285=((($284)-($283))|0);
      $remaining=$285;
      label = 71; break;
    case 68: 
      var $287=$remaining;
      var $288=(($287)|(0)) > 0;
      if ($288) { label = 69; break; } else { label = 70; break; }
    case 69: 
      var $290=$out;
      var $291=$written;
      var $292=(($290+$291)|0);
      var $293=$2;
      var $294=(($293+36)|0);
      var $295=HEAP32[(($294)>>2)];
      var $296=$2;
      var $297=(($296+40)|0);
      var $298=HEAP32[(($297)>>2)];
      var $299=(($295+$298)|0);
      var $300=$remaining;
      assert($300 % 1 === 0);_memcpy($292, $299, $300);
      var $301=$remaining;
      var $302=$written;
      var $303=((($302)+($301))|0);
      $written=$303;
      var $304=$remaining;
      var $305=$2;
      var $306=(($305+40)|0);
      var $307=HEAP32[(($306)>>2)];
      var $308=((($307)+($304))|0);
      HEAP32[(($306)>>2)]=$308;
      $remaining=0;
      label = 70; break;
    case 70: 
      label = 71; break;
    case 71: 
      var $311=$remaining;
      var $312=(($311)|(0))==0;
      if ($312) { label = 72; break; } else { label = 73; break; }
    case 72: 
      label = 74; break;
    case 73: 
      label = 48; break;
    case 74: 
      var $316=HEAP32[(($res)>>2)];
      $1=$316;
      label = 86; break;
    case 75: 
      label = 76; break;
    case 76: 
      var $319=HEAP32[(($res)>>2)];
      var $320=(($319)|(0))==0;
      if ($320) { label = 77; break; } else { label = 78; break; }
    case 77: 
      label = 84; break;
    case 78: 
      label = 79; break;
    case 79: 
      var $324=HEAP32[(($res)>>2)];
      var $325=(($324)|0);
      var $326=HEAP32[(($325)>>2)];
      var $327=((($326)-(1))|0);
      HEAP32[(($325)>>2)]=$327;
      var $328=(($327)|(0))!=0;
      if ($328) { label = 80; break; } else { label = 81; break; }
    case 80: 
      label = 82; break;
    case 81: 
      var $331=HEAP32[(($res)>>2)];
      var $332=(($331+4)|0);
      var $333=HEAP32[(($332)>>2)];
      var $334=(($333+24)|0);
      var $335=HEAP32[(($334)>>2)];
      var $336=HEAP32[(($res)>>2)];
      FUNCTION_TABLE[$335]($336);
      label = 82; break;
    case 82: 
      label = 83; break;
    case 83: 
      label = 84; break;
    case 84: 
      label = 85; break;
    case 85: 
      $1=0;
      label = 86; break;
    case 86: 
      var $342=$1;
      STACKTOP = __stackBase__;
      return $342;
    default: assert(0, "bad label: " + label);
  }
}
function _bytesio_get_closed($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $2=$self;
      var $3=$2;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))==0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=HEAP32[((((__Py_TrueStruct)|0))>>2)];
      var $9=((($8)+(1))|0);
      HEAP32[((((__Py_TrueStruct)|0))>>2)]=$9;
      $1=__Py_TrueStruct;
      label = 4; break;
    case 3: 
      var $11=HEAP32[((((__Py_ZeroStruct)|0))>>2)];
      var $12=((($11)+(1))|0);
      HEAP32[((((__Py_ZeroStruct)|0))>>2)]=$12;
      $1=__Py_ZeroStruct;
      label = 4; break;
    case 4: 
      var $14=$1;
      return $14;
    default: assert(0, "bad label: " + label);
  }
}
function _bytesio_traverse($self, $visit, $arg) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $vret;
      $2=$self;
      $3=$visit;
      $4=$arg;
      label = 2; break;
    case 2: 
      var $6=$2;
      var $7=(($6+24)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $11=$3;
      var $12=$2;
      var $13=(($12+24)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$4;
      var $16=FUNCTION_TABLE[$11]($14, $15);
      $vret=$16;
      var $17=$vret;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $20=$vret;
      $1=$20;
      label = 8; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      $1=0;
      label = 8; break;
    case 8: 
      var $25=$1;
      return $25;
    default: assert(0, "bad label: " + label);
  }
}
function _bytesio_clear($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $_py_tmp;
      $1=$self;
      label = 2; break;
    case 2: 
      var $3=$1;
      var $4=(($3+24)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 9; break; }
    case 3: 
      var $8=$1;
      var $9=(($8+24)|0);
      var $10=HEAP32[(($9)>>2)];
      $_py_tmp=$10;
      var $11=$1;
      var $12=(($11+24)|0);
      HEAP32[(($12)>>2)]=0;
      label = 4; break;
    case 4: 
      var $14=$_py_tmp;
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=((($16)-(1))|0);
      HEAP32[(($15)>>2)]=$17;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 7; break;
    case 6: 
      var $21=$_py_tmp;
      var $22=(($21+4)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+24)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=$_py_tmp;
      FUNCTION_TABLE[$25]($26);
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      return 0;
    default: assert(0, "bad label: " + label);
  }
}
function _bytesio_iternext($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $next=__stackBase__;
      var $n;
      $2=$self;
      var $3=$2;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))==0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($8, ((__str576)|0));
      $1=0;
      label = 7; break;
    case 3: 
      var $10=$2;
      var $11=_get_line($10, $next);
      $n=$11;
      var $12=HEAP32[(($next)>>2)];
      var $13=(($12)|(0))!=0;
      if ($13) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $15=$n;
      var $16=(($15)|(0))==0;
      if ($16) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $1=0;
      label = 7; break;
    case 6: 
      var $19=HEAP32[(($next)>>2)];
      var $20=$n;
      var $21=_PyString_FromStringAndSize($19, $20);
      $1=$21;
      label = 7; break;
    case 7: 
      var $23=$1;
      STACKTOP = __stackBase__;
      return $23;
    default: assert(0, "bad label: " + label);
  }
}
function _bytesio_init($self, $args, $kwds) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $kwlist=__stackBase__;
      var $initvalue=(__stackBase__)+(8);
      var $res;
      $2=$self;
      $3=$args;
      $4=$kwds;
      var $5=$kwlist;
      assert(8 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[((_bytesio_init_kwlist)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[(((_bytesio_init_kwlist)+(4))>>2)];
      HEAP32[(($initvalue)>>2)]=0;
      var $6=$3;
      var $7=$4;
      var $8=(($kwlist)|0);
      var $9=_PyArg_ParseTupleAndKeywords($6, $7, ((__str475)|0), $8, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$initvalue,tempInt));
      var $10=(($9)|(0))!=0;
      if ($10) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=-1;
      label = 14; break;
    case 3: 
      var $13=$2;
      var $14=(($13+16)|0);
      HEAP32[(($14)>>2)]=0;
      var $15=$2;
      var $16=(($15+12)|0);
      HEAP32[(($16)>>2)]=0;
      var $17=HEAP32[(($initvalue)>>2)];
      var $18=(($17)|(0))!=0;
      if ($18) { label = 4; break; } else { label = 13; break; }
    case 4: 
      var $20=HEAP32[(($initvalue)>>2)];
      var $21=(($20)|(0))!=((__Py_NoneStruct)|(0));
      if ($21) { label = 5; break; } else { label = 13; break; }
    case 5: 
      var $23=$2;
      var $24=HEAP32[(($initvalue)>>2)];
      var $25=_bytesio_write($23, $24);
      $res=$25;
      var $26=$res;
      var $27=(($26)|(0))==0;
      if ($27) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $1=-1;
      label = 14; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $31=$res;
      var $32=(($31)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=((($33)-(1))|0);
      HEAP32[(($32)>>2)]=$34;
      var $35=(($34)|(0))!=0;
      if ($35) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 11; break;
    case 10: 
      var $38=$res;
      var $39=(($38+4)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40+24)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=$res;
      FUNCTION_TABLE[$42]($43);
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $46=$2;
      var $47=(($46+12)|0);
      HEAP32[(($47)>>2)]=0;
      label = 13; break;
    case 13: 
      $1=0;
      label = 14; break;
    case 14: 
      var $50=$1;
      STACKTOP = __stackBase__;
      return $50;
    default: assert(0, "bad label: " + label);
  }
}
function _bytesio_write($self, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 52)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $n;
      var $buf=__stackBase__;
      var $result;
      $2=$self;
      $3=$obj;
      $n=0;
      $result=0;
      var $4=$2;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0))==0;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $9=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($9, ((__str576)|0));
      $1=0;
      label = 10; break;
    case 3: 
      var $11=$3;
      var $12=_PyObject_GetBuffer($11, $buf, 8);
      var $13=(($12)|(0)) < 0;
      if ($13) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=0;
      label = 10; break;
    case 5: 
      var $16=(($buf+8)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17)|(0))!=0;
      if ($18) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $20=$2;
      var $21=(($buf)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($buf+8)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=_write_bytes($20, $22, $24);
      $n=$25;
      label = 7; break;
    case 7: 
      var $27=$n;
      var $28=(($27)|(0)) >= 0;
      if ($28) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $30=$n;
      var $31=_PyLong_FromSsize_t($30);
      $result=$31;
      label = 9; break;
    case 9: 
      _PyBuffer_Release($buf);
      var $33=$result;
      $1=$33;
      label = 10; break;
    case 10: 
      var $35=$1;
      STACKTOP = __stackBase__;
      return $35;
    default: assert(0, "bad label: " + label);
  }
}
function _return_not_closed($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $2=$self;
      var $3=$2;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))==0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($8, ((__str576)|0));
      $1=0;
      label = 4; break;
    case 3: 
      var $10=HEAP32[((((__Py_TrueStruct)|0))>>2)];
      var $11=((($10)+(1))|0);
      HEAP32[((((__Py_TrueStruct)|0))>>2)]=$11;
      $1=__Py_TrueStruct;
      label = 4; break;
    case 4: 
      var $13=$1;
      return $13;
    default: assert(0, "bad label: " + label);
  }
}
function _bytesio_close($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2+8)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=(($4)|(0))!=0;
      if ($5) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $7=$1;
      var $8=(($7+8)|0);
      var $9=HEAP32[(($8)>>2)];
      _PyMem_Free($9);
      var $10=$1;
      var $11=(($10+8)|0);
      HEAP32[(($11)>>2)]=0;
      label = 3; break;
    case 3: 
      var $13=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $14=((($13)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$14;
      return __Py_NoneStruct;
    default: assert(0, "bad label: " + label);
  }
}
function _bytesio_flush($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $2=$self;
      var $3=$2;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))==0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($8, ((__str576)|0));
      $1=0;
      label = 4; break;
    case 3: 
      var $10=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $11=((($10)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$11;
      $1=__Py_NoneStruct;
      label = 4; break;
    case 4: 
      var $13=$1;
      return $13;
    default: assert(0, "bad label: " + label);
  }
}
function _bytesio_dealloc($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $g;
      var $_py_tmp;
      $1=$self;
      label = 2; break;
    case 2: 
      var $3=$1;
      var $4=$3;
      var $5=((($4)-(12))|0);
      $g=$5;
      var $6=$g;
      var $7=$6;
      var $8=(($7+8)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9)|(0))!=-2;
      if ($10) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 5; break;
    case 4: 
      ___assert_func(((__str172)|0), 748, ((___func___bytesio_dealloc)|0), ((__str51122)|0));
      throw "Reached an unreachable!";
      label = 5; break;
    case 5: 
      var $15=$g;
      var $16=$15;
      var $17=(($16+8)|0);
      HEAP32[(($17)>>2)]=-2;
      var $18=$g;
      var $19=$18;
      var $20=(($19)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$g;
      var $23=$22;
      var $24=(($23+4)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=$25;
      var $27=(($26)|0);
      HEAP32[(($27)>>2)]=$21;
      var $28=$g;
      var $29=$28;
      var $30=(($29+4)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=$g;
      var $33=$32;
      var $34=(($33)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=$35;
      var $37=(($36+4)|0);
      HEAP32[(($37)>>2)]=$31;
      var $38=$g;
      var $39=$38;
      var $40=(($39)|0);
      HEAP32[(($40)>>2)]=0;
      label = 6; break;
    case 6: 
      var $42=$1;
      var $43=(($42+8)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=(($44)|(0))!=0;
      if ($45) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $47=$1;
      var $48=(($47+8)|0);
      var $49=HEAP32[(($48)>>2)];
      _PyMem_Free($49);
      var $50=$1;
      var $51=(($50+8)|0);
      HEAP32[(($51)>>2)]=0;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $54=$1;
      var $55=(($54+24)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=(($56)|(0))!=0;
      if ($57) { label = 10; break; } else { label = 16; break; }
    case 10: 
      var $59=$1;
      var $60=(($59+24)|0);
      var $61=HEAP32[(($60)>>2)];
      $_py_tmp=$61;
      var $62=$1;
      var $63=(($62+24)|0);
      HEAP32[(($63)>>2)]=0;
      label = 11; break;
    case 11: 
      var $65=$_py_tmp;
      var $66=(($65)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=((($67)-(1))|0);
      HEAP32[(($66)>>2)]=$68;
      var $69=(($68)|(0))!=0;
      if ($69) { label = 12; break; } else { label = 13; break; }
    case 12: 
      label = 14; break;
    case 13: 
      var $72=$_py_tmp;
      var $73=(($72+4)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=(($74+24)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=$_py_tmp;
      FUNCTION_TABLE[$76]($77);
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $82=$1;
      var $83=(($82+28)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=(($84)|(0))!=0;
      if ($85) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $87=$1;
      var $88=$87;
      _PyObject_ClearWeakRefs($88);
      label = 19; break;
    case 19: 
      var $90=$1;
      var $91=$90;
      var $92=(($91+4)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=(($93+160)|0);
      var $95=HEAP32[(($94)>>2)];
      var $96=$1;
      var $97=$96;
      FUNCTION_TABLE[$95]($97);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _bytesio_new($type, $args, $kwds) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $self;
      $2=$type;
      $3=$args;
      $4=$kwds;
      var $5=$2;
      var $6=(($5)|(0))!=0;
      if ($6) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $8=$2;
      var $9=(($8+152)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|(0))!=0;
      if ($11) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 5; break;
    case 4: 
      ___assert_func(((__str172)|0), 764, ((___func___bytesio_new)|0), ((__str273)|0));
      throw "Reached an unreachable!";
      label = 5; break;
    case 5: 
      var $16=$2;
      var $17=(($16+152)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=$2;
      var $20=FUNCTION_TABLE[$18]($19, 0);
      var $21=$20;
      $self=$21;
      var $22=$self;
      var $23=(($22)|(0))==0;
      if ($23) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $1=0;
      label = 15; break;
    case 7: 
      var $26=_PyMem_Malloc(0);
      var $27=$self;
      var $28=(($27+8)|0);
      HEAP32[(($28)>>2)]=$26;
      var $29=$self;
      var $30=(($29+8)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31)|(0))==0;
      if ($32) { label = 8; break; } else { label = 14; break; }
    case 8: 
      label = 9; break;
    case 9: 
      var $35=$self;
      var $36=$35;
      var $37=(($36)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=((($38)-(1))|0);
      HEAP32[(($37)>>2)]=$39;
      var $40=(($39)|(0))!=0;
      if ($40) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 12; break;
    case 11: 
      var $43=$self;
      var $44=$43;
      var $45=(($44+4)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46+24)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=$self;
      var $50=$49;
      FUNCTION_TABLE[$48]($50);
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $53=_PyErr_NoMemory();
      $1=$53;
      label = 15; break;
    case 14: 
      var $55=$self;
      var $56=$55;
      $1=$56;
      label = 15; break;
    case 15: 
      var $58=$1;
      return $58;
    default: assert(0, "bad label: " + label);
  }
}
function _write_bytes($self, $bytes, $len) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $2=$self;
      $3=$bytes;
      $4=$len;
      var $5=$2;
      var $6=(($5+8)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|(0))!=0;
      if ($8) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      ___assert_func(((__str172)|0), 113, ((___func___write_bytes)|0), ((__str677)|0));
      throw "Reached an unreachable!";
      label = 4; break;
    case 4: 
      var $13=$2;
      var $14=(($13+12)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15)|(0)) >= 0;
      if ($16) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 7; break;
    case 6: 
      ___assert_func(((__str172)|0), 114, ((___func___write_bytes)|0), ((__str778)|0));
      throw "Reached an unreachable!";
      label = 7; break;
    case 7: 
      var $21=$4;
      var $22=(($21)|(0)) >= 0;
      if ($22) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 10; break;
    case 9: 
      ___assert_func(((__str172)|0), 115, ((___func___write_bytes)|0), ((__str879)|0));
      throw "Reached an unreachable!";
      label = 10; break;
    case 10: 
      var $27=$2;
      var $28=(($27+12)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=$4;
      var $31=((($29)+($30))|0);
      var $32=$2;
      var $33=(($32+20)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($31)>>>(0)) > (($34)>>>(0));
      if ($35) { label = 11; break; } else { label = 14; break; }
    case 11: 
      var $37=$2;
      var $38=$2;
      var $39=(($38+12)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=$4;
      var $42=((($40)+($41))|0);
      var $43=_resize_buffer($37, $42);
      var $44=(($43)|(0)) < 0;
      if ($44) { label = 12; break; } else { label = 13; break; }
    case 12: 
      $1=-1;
      label = 19; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $48=$2;
      var $49=(($48+12)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=$2;
      var $52=(($51+16)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=(($50)|(0)) > (($53)|(0));
      if ($54) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $56=$2;
      var $57=(($56+8)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=$2;
      var $60=(($59+16)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=(($58+$61)|0);
      var $63=$2;
      var $64=(($63+12)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=$2;
      var $67=(($66+16)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=((($65)-($68))|0);
      var $70=$69;
      _memset($62, 0, $70);
      label = 16; break;
    case 16: 
      var $72=$2;
      var $73=(($72+8)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=$2;
      var $76=(($75+12)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=(($74+$77)|0);
      var $79=$3;
      var $80=$4;
      assert($80 % 1 === 0);_memcpy($78, $79, $80);
      var $81=$4;
      var $82=$2;
      var $83=(($82+12)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=((($84)+($81))|0);
      HEAP32[(($83)>>2)]=$85;
      var $86=$2;
      var $87=(($86+16)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=$2;
      var $90=(($89+12)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=(($88)|(0)) < (($91)|(0));
      if ($92) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $94=$2;
      var $95=(($94+12)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=$2;
      var $98=(($97+16)|0);
      HEAP32[(($98)>>2)]=$96;
      label = 18; break;
    case 18: 
      var $100=$4;
      $1=$100;
      label = 19; break;
    case 19: 
      var $102=$1;
      return $102;
    default: assert(0, "bad label: " + label);
  }
}
function _resize_buffer($self, $size) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $alloc;
      var $new_buf;
      $2=$self;
      $3=$size;
      var $4=$2;
      var $5=(($4+20)|0);
      var $6=HEAP32[(($5)>>2)];
      $alloc=$6;
      $new_buf=0;
      var $7=$2;
      var $8=(($7+8)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9)|(0))!=0;
      if ($10) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      ___assert_func(((__str172)|0), 66, ((___func___resize_buffer)|0), ((__str677)|0));
      throw "Reached an unreachable!";
      label = 4; break;
    case 4: 
      var $15=$3;
      var $16=(($15)>>>(0)) > 2147483647;
      if ($16) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 20; break;
    case 6: 
      var $19=$3;
      var $20=$alloc;
      var $21=Math.floor(((($20)>>>(0)))/(2));
      var $22=(($19)>>>(0)) < (($21)>>>(0));
      if ($22) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $24=$3;
      var $25=((($24)+(1))|0);
      $alloc=$25;
      label = 15; break;
    case 8: 
      var $27=$3;
      var $28=$alloc;
      var $29=(($27)>>>(0)) < (($28)>>>(0));
      if ($29) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $1=0;
      label = 21; break;
    case 10: 
      var $32=$3;
      var $33=(($32)>>>(0));
      var $34=$alloc;
      var $35=(($34)>>>(0));
      var $36=($35)*(1.125);
      var $37=$33 <= $36;
      if ($37) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $39=$3;
      var $40=$3;
      var $41=$40 >>> 3;
      var $42=((($39)+($41))|0);
      var $43=$3;
      var $44=(($43)>>>(0)) < 9;
      var $45=$44 ? 3 : 6;
      var $46=((($42)+($45))|0);
      $alloc=$46;
      label = 13; break;
    case 12: 
      var $48=$3;
      var $49=((($48)+(1))|0);
      $alloc=$49;
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $53=$alloc;
      var $54=(($53)>>>(0)) > 4294967295;
      if ($54) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 20; break;
    case 17: 
      var $57=$2;
      var $58=(($57+8)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=$alloc;
      var $61=$60;
      var $62=_PyMem_Realloc($59, $61);
      $new_buf=$62;
      var $63=$new_buf;
      var $64=(($63)|(0))==0;
      if ($64) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $66=_PyErr_NoMemory();
      $1=-1;
      label = 21; break;
    case 19: 
      var $68=$alloc;
      var $69=$2;
      var $70=(($69+20)|0);
      HEAP32[(($70)>>2)]=$68;
      var $71=$new_buf;
      var $72=$2;
      var $73=(($72+8)|0);
      HEAP32[(($73)>>2)]=$71;
      $1=0;
      label = 21; break;
    case 20: 
      var $75=HEAP32[((_PyExc_OverflowError)>>2)];
      _PyErr_SetString($75, ((__str980)|0));
      $1=-1;
      label = 21; break;
    case 21: 
      var $77=$1;
      return $77;
    default: assert(0, "bad label: " + label);
  }
}
function _bytesio_isatty($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $2=$self;
      var $3=$2;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))==0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($8, ((__str576)|0));
      $1=0;
      label = 4; break;
    case 3: 
      var $10=HEAP32[((((__Py_ZeroStruct)|0))>>2)];
      var $11=((($10)+(1))|0);
      HEAP32[((((__Py_ZeroStruct)|0))>>2)]=$11;
      $1=__Py_ZeroStruct;
      label = 4; break;
    case 4: 
      var $13=$1;
      return $13;
    default: assert(0, "bad label: " + label);
  }
}
function _bytesio_tell($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $2=$self;
      var $3=$2;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))==0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($8, ((__str576)|0));
      $1=0;
      label = 4; break;
    case 3: 
      var $10=$2;
      var $11=(($10+12)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=_PyLong_FromSsize_t($12);
      $1=$13;
      label = 4; break;
    case 4: 
      var $15=$1;
      return $15;
    default: assert(0, "bad label: " + label);
  }
}
function _bytesio_writelines($self, $v) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $it;
      var $item;
      var $ret;
      $2=$self;
      $3=$v;
      var $4=$2;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0))==0;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $9=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($9, ((__str576)|0));
      $1=0;
      label = 33; break;
    case 3: 
      var $11=$3;
      var $12=_PyObject_GetIter($11);
      $it=$12;
      var $13=$it;
      var $14=(($13)|(0))==0;
      if ($14) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=0;
      label = 33; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $18=$it;
      var $19=_PyIter_Next($18);
      $item=$19;
      var $20=(($19)|(0))!=0;
      if ($20) { label = 7; break; } else { label = 25; break; }
    case 7: 
      var $22=$2;
      var $23=$item;
      var $24=_bytesio_write($22, $23);
      $ret=$24;
      label = 8; break;
    case 8: 
      var $26=$item;
      var $27=(($26)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=((($28)-(1))|0);
      HEAP32[(($27)>>2)]=$29;
      var $30=(($29)|(0))!=0;
      if ($30) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 11; break;
    case 10: 
      var $33=$item;
      var $34=(($33+4)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35+24)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=$item;
      FUNCTION_TABLE[$37]($38);
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $41=$ret;
      var $42=(($41)|(0))==0;
      if ($42) { label = 13; break; } else { label = 19; break; }
    case 13: 
      label = 14; break;
    case 14: 
      var $45=$it;
      var $46=(($45)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=((($47)-(1))|0);
      HEAP32[(($46)>>2)]=$48;
      var $49=(($48)|(0))!=0;
      if ($49) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 17; break;
    case 16: 
      var $52=$it;
      var $53=(($52+4)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54+24)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=$it;
      FUNCTION_TABLE[$56]($57);
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      $1=0;
      label = 33; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $62=$ret;
      var $63=(($62)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=((($64)-(1))|0);
      HEAP32[(($63)>>2)]=$65;
      var $66=(($65)|(0))!=0;
      if ($66) { label = 21; break; } else { label = 22; break; }
    case 21: 
      label = 23; break;
    case 22: 
      var $69=$ret;
      var $70=(($69+4)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=(($71+24)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=$ret;
      FUNCTION_TABLE[$73]($74);
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      label = 6; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $79=$it;
      var $80=(($79)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=((($81)-(1))|0);
      HEAP32[(($80)>>2)]=$82;
      var $83=(($82)|(0))!=0;
      if ($83) { label = 27; break; } else { label = 28; break; }
    case 27: 
      label = 29; break;
    case 28: 
      var $86=$it;
      var $87=(($86+4)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=(($88+24)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=$it;
      FUNCTION_TABLE[$90]($91);
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      var $94=_PyErr_Occurred();
      var $95=(($94)|(0))!=0;
      if ($95) { label = 31; break; } else { label = 32; break; }
    case 31: 
      $1=0;
      label = 33; break;
    case 32: 
      var $98=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $99=((($98)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$99;
      $1=__Py_NoneStruct;
      label = 33; break;
    case 33: 
      var $101=$1;
      return $101;
    default: assert(0, "bad label: " + label);
  }
}
function _bytesio_read1($self, $n) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $arg;
      var $res;
      $2=$self;
      $3=$n;
      var $4=$3;
      var $5=_PyTuple_Pack(1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$4,tempInt));
      $arg=$5;
      var $6=$arg;
      var $7=(($6)|(0))==0;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 9; break;
    case 3: 
      var $10=$2;
      var $11=$arg;
      var $12=_bytesio_read($10, $11);
      $res=$12;
      label = 4; break;
    case 4: 
      var $14=$arg;
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=((($16)-(1))|0);
      HEAP32[(($15)>>2)]=$17;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 7; break;
    case 6: 
      var $21=$arg;
      var $22=(($21+4)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+24)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=$arg;
      FUNCTION_TABLE[$25]($26);
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $29=$res;
      $1=$29;
      label = 9; break;
    case 9: 
      var $31=$1;
      STACKTOP = __stackBase__;
      return $31;
    default: assert(0, "bad label: " + label);
  }
}
function _bytesio_readline($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $size;
      var $n;
      var $output=__stackBase__;
      var $arg=(__stackBase__)+(4);
      $2=$self;
      $3=$args;
      HEAP32[(($arg)>>2)]=__Py_NoneStruct;
      var $4=$2;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0))==0;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $9=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($9, ((__str576)|0));
      $1=0;
      label = 18; break;
    case 3: 
      var $11=$3;
      var $12=_PyArg_ParseTuple($11, ((__str48119)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$arg,tempInt));
      var $13=(($12)|(0))!=0;
      if ($13) { label = 5; break; } else { label = 4; break; }
    case 4: 
      $1=0;
      label = 18; break;
    case 5: 
      var $16=HEAP32[(($arg)>>2)];
      var $17=_PyNumber_Check($16);
      var $18=(($17)|(0))!=0;
      if ($18) { label = 6; break; } else { label = 10; break; }
    case 6: 
      var $20=HEAP32[(($arg)>>2)];
      var $21=HEAP32[((_PyExc_OverflowError)>>2)];
      var $22=_PyNumber_AsSsize_t($20, $21);
      $size=$22;
      var $23=$size;
      var $24=(($23)|(0))==-1;
      if ($24) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $26=_PyErr_Occurred();
      var $27=(($26)|(0))!=0;
      if ($27) { label = 8; break; } else { label = 9; break; }
    case 8: 
      $1=0;
      label = 18; break;
    case 9: 
      label = 14; break;
    case 10: 
      var $31=HEAP32[(($arg)>>2)];
      var $32=(($31)|(0))==((__Py_NoneStruct)|(0));
      if ($32) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $size=-1;
      label = 13; break;
    case 12: 
      var $35=HEAP32[((_PyExc_TypeError)>>2)];
      var $36=HEAP32[(($arg)>>2)];
      var $37=(($36+4)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38+12)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=_PyErr_Format($35, ((__str39110)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$40,tempInt));
      $1=0;
      label = 18; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $44=$2;
      var $45=_get_line($44, $output);
      $n=$45;
      var $46=$size;
      var $47=(($46)|(0)) >= 0;
      if ($47) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $49=$size;
      var $50=$n;
      var $51=(($49)|(0)) < (($50)|(0));
      if ($51) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $53=$n;
      var $54=$size;
      var $55=((($53)-($54))|0);
      $size=$55;
      var $56=$size;
      var $57=$n;
      var $58=((($57)-($56))|0);
      $n=$58;
      var $59=$size;
      var $60=$2;
      var $61=(($60+12)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=((($62)-($59))|0);
      HEAP32[(($61)>>2)]=$63;
      label = 17; break;
    case 17: 
      var $65=HEAP32[(($output)>>2)];
      var $66=$n;
      var $67=_PyString_FromStringAndSize($65, $66);
      $1=$67;
      label = 18; break;
    case 18: 
      var $69=$1;
      STACKTOP = __stackBase__;
      return $69;
    default: assert(0, "bad label: " + label);
  }
}
function _bytesio_readlines($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $maxsize;
      var $size;
      var $n;
      var $result;
      var $line;
      var $output=__stackBase__;
      var $arg=(__stackBase__)+(4);
      $2=$self;
      $3=$args;
      HEAP32[(($arg)>>2)]=__Py_NoneStruct;
      var $4=$2;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0))==0;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $9=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($9, ((__str576)|0));
      $1=0;
      label = 43; break;
    case 3: 
      var $11=$3;
      var $12=_PyArg_ParseTuple($11, ((__str46117)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$arg,tempInt));
      var $13=(($12)|(0))!=0;
      if ($13) { label = 5; break; } else { label = 4; break; }
    case 4: 
      $1=0;
      label = 43; break;
    case 5: 
      var $16=HEAP32[(($arg)>>2)];
      var $17=_PyNumber_Check($16);
      var $18=(($17)|(0))!=0;
      if ($18) { label = 6; break; } else { label = 10; break; }
    case 6: 
      var $20=HEAP32[(($arg)>>2)];
      var $21=HEAP32[((_PyExc_OverflowError)>>2)];
      var $22=_PyNumber_AsSsize_t($20, $21);
      $maxsize=$22;
      var $23=$maxsize;
      var $24=(($23)|(0))==-1;
      if ($24) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $26=_PyErr_Occurred();
      var $27=(($26)|(0))!=0;
      if ($27) { label = 8; break; } else { label = 9; break; }
    case 8: 
      $1=0;
      label = 43; break;
    case 9: 
      label = 14; break;
    case 10: 
      var $31=HEAP32[(($arg)>>2)];
      var $32=(($31)|(0))==((__Py_NoneStruct)|(0));
      if ($32) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $maxsize=-1;
      label = 13; break;
    case 12: 
      var $35=HEAP32[((_PyExc_TypeError)>>2)];
      var $36=HEAP32[(($arg)>>2)];
      var $37=(($36+4)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38+12)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=_PyErr_Format($35, ((__str39110)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$40,tempInt));
      $1=0;
      label = 43; break;
    case 13: 
      label = 14; break;
    case 14: 
      $size=0;
      var $44=_PyList_New(0);
      $result=$44;
      var $45=$result;
      var $46=(($45)|(0))!=0;
      if ($46) { label = 16; break; } else { label = 15; break; }
    case 15: 
      $1=0;
      label = 43; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $50=$2;
      var $51=_get_line($50, $output);
      $n=$51;
      var $52=(($51)|(0))!=0;
      if ($52) { label = 18; break; } else { label = 36; break; }
    case 18: 
      var $54=HEAP32[(($output)>>2)];
      var $55=$n;
      var $56=_PyString_FromStringAndSize($54, $55);
      $line=$56;
      var $57=$line;
      var $58=(($57)|(0))!=0;
      if ($58) { label = 20; break; } else { label = 19; break; }
    case 19: 
      label = 37; break;
    case 20: 
      var $61=$result;
      var $62=$line;
      var $63=_PyList_Append($61, $62);
      var $64=(($63)|(0))==-1;
      if ($64) { label = 21; break; } else { label = 27; break; }
    case 21: 
      label = 22; break;
    case 22: 
      var $67=$line;
      var $68=(($67)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=((($69)-(1))|0);
      HEAP32[(($68)>>2)]=$70;
      var $71=(($70)|(0))!=0;
      if ($71) { label = 23; break; } else { label = 24; break; }
    case 23: 
      label = 25; break;
    case 24: 
      var $74=$line;
      var $75=(($74+4)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=(($76+24)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=$line;
      FUNCTION_TABLE[$78]($79);
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 37; break;
    case 27: 
      label = 28; break;
    case 28: 
      var $84=$line;
      var $85=(($84)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=((($86)-(1))|0);
      HEAP32[(($85)>>2)]=$87;
      var $88=(($87)|(0))!=0;
      if ($88) { label = 29; break; } else { label = 30; break; }
    case 29: 
      label = 31; break;
    case 30: 
      var $91=$line;
      var $92=(($91+4)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=(($93+24)|0);
      var $95=HEAP32[(($94)>>2)];
      var $96=$line;
      FUNCTION_TABLE[$95]($96);
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      var $99=$n;
      var $100=$size;
      var $101=((($100)+($99))|0);
      $size=$101;
      var $102=$maxsize;
      var $103=(($102)|(0)) > 0;
      if ($103) { label = 33; break; } else { label = 35; break; }
    case 33: 
      var $105=$size;
      var $106=$maxsize;
      var $107=(($105)|(0)) >= (($106)|(0));
      if ($107) { label = 34; break; } else { label = 35; break; }
    case 34: 
      label = 36; break;
    case 35: 
      label = 17; break;
    case 36: 
      var $111=$result;
      $1=$111;
      label = 43; break;
    case 37: 
      label = 38; break;
    case 38: 
      var $114=$result;
      var $115=(($114)|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=((($116)-(1))|0);
      HEAP32[(($115)>>2)]=$117;
      var $118=(($117)|(0))!=0;
      if ($118) { label = 39; break; } else { label = 40; break; }
    case 39: 
      label = 41; break;
    case 40: 
      var $121=$result;
      var $122=(($121+4)|0);
      var $123=HEAP32[(($122)>>2)];
      var $124=(($123+24)|0);
      var $125=HEAP32[(($124)>>2)];
      var $126=$result;
      FUNCTION_TABLE[$125]($126);
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      $1=0;
      label = 43; break;
    case 43: 
      var $130=$1;
      STACKTOP = __stackBase__;
      return $130;
    default: assert(0, "bad label: " + label);
  }
}
function _bytesio_getvalue($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $2=$self;
      var $3=$2;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))==0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($8, ((__str576)|0));
      $1=0;
      label = 4; break;
    case 3: 
      var $10=$2;
      var $11=(($10+8)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=$2;
      var $14=(($13+16)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=_PyString_FromStringAndSize($12, $15);
      $1=$16;
      label = 4; break;
    case 4: 
      var $18=$1;
      return $18;
    default: assert(0, "bad label: " + label);
  }
}
function _bytesio_readinto($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 52)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $buf=__stackBase__;
      var $len;
      var $n;
      $2=$self;
      $3=$args;
      var $4=$2;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0))==0;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $9=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($9, ((__str576)|0));
      $1=0;
      label = 16; break;
    case 3: 
      var $11=$3;
      var $12=_PyArg_ParseTuple($11, ((__str49120)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$buf,tempInt));
      var $13=(($12)|(0))!=0;
      if ($13) { label = 5; break; } else { label = 4; break; }
    case 4: 
      $1=0;
      label = 16; break;
    case 5: 
      var $16=(($buf+8)|0);
      var $17=HEAP32[(($16)>>2)];
      $len=$17;
      var $18=$2;
      var $19=(($18+16)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=$2;
      var $22=(($21+12)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=((($20)-($23))|0);
      $n=$24;
      var $25=$len;
      var $26=$n;
      var $27=(($25)|(0)) > (($26)|(0));
      if ($27) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $29=$n;
      $len=$29;
      var $30=$len;
      var $31=(($30)|(0)) < 0;
      if ($31) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $len=0;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $35=(($buf)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=$2;
      var $38=(($37+8)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=$2;
      var $41=(($40+12)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($39+$42)|0);
      var $44=$len;
      assert($44 % 1 === 0);_memcpy($36, $43, $44);
      var $45=$2;
      var $46=(($45+12)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=$len;
      var $49=((($47)+($48))|0);
      var $50=(($49)|(0)) < 2147483647;
      if ($50) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 12; break;
    case 11: 
      ___assert_func(((__str172)|0), 421, ((___func___bytesio_readinto)|0), ((__str50121)|0));
      throw "Reached an unreachable!";
      label = 12; break;
    case 12: 
      var $55=$len;
      var $56=(($55)|(0)) >= 0;
      if ($56) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 15; break;
    case 14: 
      ___assert_func(((__str172)|0), 422, ((___func___bytesio_readinto)|0), ((__str879)|0));
      throw "Reached an unreachable!";
      label = 15; break;
    case 15: 
      var $61=$len;
      var $62=$2;
      var $63=(($62+12)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=((($64)+($61))|0);
      HEAP32[(($63)>>2)]=$65;
      _PyBuffer_Release($buf);
      var $66=$len;
      var $67=_PyLong_FromSsize_t($66);
      $1=$67;
      label = 16; break;
    case 16: 
      var $69=$1;
      STACKTOP = __stackBase__;
      return $69;
    default: assert(0, "bad label: " + label);
  }
}
function _bytesio_read($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $size;
      var $n;
      var $output;
      var $arg=__stackBase__;
      $2=$self;
      $3=$args;
      HEAP32[(($arg)>>2)]=__Py_NoneStruct;
      var $4=$2;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0))==0;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $9=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($9, ((__str576)|0));
      $1=0;
      label = 23; break;
    case 3: 
      var $11=$3;
      var $12=_PyArg_ParseTuple($11, ((__str45116)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$arg,tempInt));
      var $13=(($12)|(0))!=0;
      if ($13) { label = 5; break; } else { label = 4; break; }
    case 4: 
      $1=0;
      label = 23; break;
    case 5: 
      var $16=HEAP32[(($arg)>>2)];
      var $17=_PyNumber_Check($16);
      var $18=(($17)|(0))!=0;
      if ($18) { label = 6; break; } else { label = 10; break; }
    case 6: 
      var $20=HEAP32[(($arg)>>2)];
      var $21=HEAP32[((_PyExc_OverflowError)>>2)];
      var $22=_PyNumber_AsSsize_t($20, $21);
      $size=$22;
      var $23=$size;
      var $24=(($23)|(0))==-1;
      if ($24) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $26=_PyErr_Occurred();
      var $27=(($26)|(0))!=0;
      if ($27) { label = 8; break; } else { label = 9; break; }
    case 8: 
      $1=0;
      label = 23; break;
    case 9: 
      label = 14; break;
    case 10: 
      var $31=HEAP32[(($arg)>>2)];
      var $32=(($31)|(0))==((__Py_NoneStruct)|(0));
      if ($32) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $size=-1;
      label = 13; break;
    case 12: 
      var $35=HEAP32[((_PyExc_TypeError)>>2)];
      var $36=HEAP32[(($arg)>>2)];
      var $37=(($36+4)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38+12)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=_PyErr_Format($35, ((__str39110)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$40,tempInt));
      $1=0;
      label = 23; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $44=$2;
      var $45=(($44+16)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=$2;
      var $48=(($47+12)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=((($46)-($49))|0);
      $n=$50;
      var $51=$size;
      var $52=(($51)|(0)) < 0;
      if ($52) { label = 16; break; } else { label = 15; break; }
    case 15: 
      var $54=$size;
      var $55=$n;
      var $56=(($54)|(0)) > (($55)|(0));
      if ($56) { label = 16; break; } else { label = 19; break; }
    case 16: 
      var $58=$n;
      $size=$58;
      var $59=$size;
      var $60=(($59)|(0)) < 0;
      if ($60) { label = 17; break; } else { label = 18; break; }
    case 17: 
      $size=0;
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $64=$2;
      var $65=(($64+8)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66)|(0))!=0;
      if ($67) { label = 20; break; } else { label = 21; break; }
    case 20: 
      label = 22; break;
    case 21: 
      ___assert_func(((__str172)|0), 262, ((___func___bytesio_read)|0), ((__str677)|0));
      throw "Reached an unreachable!";
      label = 22; break;
    case 22: 
      var $72=$2;
      var $73=(($72+8)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=$2;
      var $76=(($75+12)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=(($74+$77)|0);
      $output=$78;
      var $79=$size;
      var $80=$2;
      var $81=(($80+12)|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=((($82)+($79))|0);
      HEAP32[(($81)>>2)]=$83;
      var $84=$output;
      var $85=$size;
      var $86=_PyString_FromStringAndSize($84, $85);
      $1=$86;
      label = 23; break;
    case 23: 
      var $88=$1;
      STACKTOP = __stackBase__;
      return $88;
    default: assert(0, "bad label: " + label);
  }
}
function __PyFileIO_closed($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=$1;
  var $3=$2;
  var $4=(($3+8)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5)|(0)) < 0;
  var $7=(($6)&(1));
  return $7;
}
function _bytesio_seek($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $posobj=__stackBase__;
      var $pos;
      var $mode=(__stackBase__)+(4);
      $2=$self;
      $3=$args;
      HEAP32[(($mode)>>2)]=0;
      var $4=$2;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0))==0;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $9=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($9, ((__str576)|0));
      $1=0;
      label = 26; break;
    case 3: 
      var $11=$3;
      var $12=_PyArg_ParseTuple($11, ((__str41112)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$posobj,HEAP32[(((tempInt)+(4))>>2)]=$mode,tempInt));
      var $13=(($12)|(0))!=0;
      if ($13) { label = 5; break; } else { label = 4; break; }
    case 4: 
      $1=0;
      label = 26; break;
    case 5: 
      var $16=HEAP32[(($posobj)>>2)];
      var $17=HEAP32[((_PyExc_OverflowError)>>2)];
      var $18=_PyNumber_AsSsize_t($16, $17);
      $pos=$18;
      var $19=$pos;
      var $20=(($19)|(0))==-1;
      if ($20) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $22=_PyErr_Occurred();
      var $23=(($22)|(0))!=0;
      if ($23) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $1=0;
      label = 26; break;
    case 8: 
      var $26=$pos;
      var $27=(($26)|(0)) < 0;
      if ($27) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $29=HEAP32[(($mode)>>2)];
      var $30=(($29)|(0))==0;
      if ($30) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $32=HEAP32[((_PyExc_ValueError)>>2)];
      var $33=$pos;
      var $34=_PyErr_Format($32, ((__str42113)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$33,tempInt));
      $1=0;
      label = 26; break;
    case 11: 
      var $36=HEAP32[(($mode)>>2)];
      var $37=(($36)|(0))==1;
      if ($37) { label = 12; break; } else { label = 15; break; }
    case 12: 
      var $39=$pos;
      var $40=$2;
      var $41=(($40+12)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(((2147483647)-($42))|0);
      var $44=(($39)|(0)) > (($43)|(0));
      if ($44) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $46=HEAP32[((_PyExc_OverflowError)>>2)];
      _PyErr_SetString($46, ((__str43114)|0));
      $1=0;
      label = 26; break;
    case 14: 
      var $48=$2;
      var $49=(($48+12)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=$pos;
      var $52=((($51)+($50))|0);
      $pos=$52;
      label = 23; break;
    case 15: 
      var $54=HEAP32[(($mode)>>2)];
      var $55=(($54)|(0))==2;
      if ($55) { label = 16; break; } else { label = 19; break; }
    case 16: 
      var $57=$pos;
      var $58=$2;
      var $59=(($58+16)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=(((2147483647)-($60))|0);
      var $62=(($57)|(0)) > (($61)|(0));
      if ($62) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $64=HEAP32[((_PyExc_OverflowError)>>2)];
      _PyErr_SetString($64, ((__str43114)|0));
      $1=0;
      label = 26; break;
    case 18: 
      var $66=$2;
      var $67=(($66+16)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=$pos;
      var $70=((($69)+($68))|0);
      $pos=$70;
      label = 22; break;
    case 19: 
      var $72=HEAP32[(($mode)>>2)];
      var $73=(($72)|(0))!=0;
      if ($73) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $75=HEAP32[((_PyExc_ValueError)>>2)];
      var $76=HEAP32[(($mode)>>2)];
      var $77=_PyErr_Format($75, ((__str44115)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$76,tempInt));
      $1=0;
      label = 26; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $81=$pos;
      var $82=(($81)|(0)) < 0;
      if ($82) { label = 24; break; } else { label = 25; break; }
    case 24: 
      $pos=0;
      label = 25; break;
    case 25: 
      var $85=$pos;
      var $86=$2;
      var $87=(($86+12)|0);
      HEAP32[(($87)>>2)]=$85;
      var $88=$2;
      var $89=(($88+12)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=_PyLong_FromSsize_t($90);
      $1=$91;
      label = 26; break;
    case 26: 
      var $93=$1;
      STACKTOP = __stackBase__;
      return $93;
    default: assert(0, "bad label: " + label);
  }
}
function _bytesio_truncate($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $size;
      var $arg=__stackBase__;
      $2=$self;
      $3=$args;
      HEAP32[(($arg)>>2)]=__Py_NoneStruct;
      var $4=$2;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0))==0;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $9=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($9, ((__str576)|0));
      $1=0;
      label = 21; break;
    case 3: 
      var $11=$3;
      var $12=_PyArg_ParseTuple($11, ((__str38109)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$arg,tempInt));
      var $13=(($12)|(0))!=0;
      if ($13) { label = 5; break; } else { label = 4; break; }
    case 4: 
      $1=0;
      label = 21; break;
    case 5: 
      var $16=HEAP32[(($arg)>>2)];
      var $17=_PyNumber_Check($16);
      var $18=(($17)|(0))!=0;
      if ($18) { label = 6; break; } else { label = 10; break; }
    case 6: 
      var $20=HEAP32[(($arg)>>2)];
      var $21=HEAP32[((_PyExc_OverflowError)>>2)];
      var $22=_PyNumber_AsSsize_t($20, $21);
      $size=$22;
      var $23=$size;
      var $24=(($23)|(0))==-1;
      if ($24) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $26=_PyErr_Occurred();
      var $27=(($26)|(0))!=0;
      if ($27) { label = 8; break; } else { label = 9; break; }
    case 8: 
      $1=0;
      label = 21; break;
    case 9: 
      label = 14; break;
    case 10: 
      var $31=HEAP32[(($arg)>>2)];
      var $32=(($31)|(0))==((__Py_NoneStruct)|(0));
      if ($32) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $34=$2;
      var $35=(($34+12)|0);
      var $36=HEAP32[(($35)>>2)];
      $size=$36;
      label = 13; break;
    case 12: 
      var $38=HEAP32[((_PyExc_TypeError)>>2)];
      var $39=HEAP32[(($arg)>>2)];
      var $40=(($39+4)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($41+12)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=_PyErr_Format($38, ((__str39110)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$43,tempInt));
      $1=0;
      label = 21; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $47=$size;
      var $48=(($47)|(0)) < 0;
      if ($48) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $50=HEAP32[((_PyExc_ValueError)>>2)];
      var $51=$size;
      var $52=_PyErr_Format($50, ((__str40111)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$51,tempInt));
      $1=0;
      label = 21; break;
    case 16: 
      var $54=$size;
      var $55=$2;
      var $56=(($55+16)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=(($54)|(0)) < (($57)|(0));
      if ($58) { label = 17; break; } else { label = 20; break; }
    case 17: 
      var $60=$size;
      var $61=$2;
      var $62=(($61+16)|0);
      HEAP32[(($62)>>2)]=$60;
      var $63=$2;
      var $64=$size;
      var $65=_resize_buffer($63, $64);
      var $66=(($65)|(0)) < 0;
      if ($66) { label = 18; break; } else { label = 19; break; }
    case 18: 
      $1=0;
      label = 21; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $70=$size;
      var $71=_PyLong_FromSsize_t($70);
      $1=$71;
      label = 21; break;
    case 21: 
      var $73=$1;
      STACKTOP = __stackBase__;
      return $73;
    default: assert(0, "bad label: " + label);
  }
}
function _bytesio_getstate($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $initvalue;
      var $dict;
      var $state;
      $2=$self;
      var $3=$2;
      var $4=_bytesio_getvalue($3);
      $initvalue=$4;
      var $5=$initvalue;
      var $6=(($5)|(0))==0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 14; break;
    case 3: 
      var $9=$2;
      var $10=(($9+24)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))==0;
      if ($12) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $14=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $15=((($14)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$15;
      $dict=__Py_NoneStruct;
      label = 8; break;
    case 5: 
      var $17=$2;
      var $18=(($17+24)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=_PyDict_Copy($19);
      $dict=$20;
      var $21=$dict;
      var $22=(($21)|(0))==0;
      if ($22) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $1=0;
      label = 14; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $26=$initvalue;
      var $27=$2;
      var $28=(($27+12)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=$dict;
      var $31=_Py_BuildValue(((__str37108)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$26,HEAP32[(((tempInt)+(4))>>2)]=$29,HEAP32[(((tempInt)+(8))>>2)]=$30,tempInt));
      $state=$31;
      label = 9; break;
    case 9: 
      var $33=$initvalue;
      var $34=(($33)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=((($35)-(1))|0);
      HEAP32[(($34)>>2)]=$36;
      var $37=(($36)|(0))!=0;
      if ($37) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 12; break;
    case 11: 
      var $40=$initvalue;
      var $41=(($40+4)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($42+24)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=$initvalue;
      FUNCTION_TABLE[$44]($45);
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $48=$state;
      $1=$48;
      label = 14; break;
    case 14: 
      var $50=$1;
      STACKTOP = __stackBase__;
      return $50;
    default: assert(0, "bad label: " + label);
  }
}
function _bytesio_sizeof($self, $unused) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $res;
      $1=$self;
      $2=$unused;
      $res=32;
      var $3=$1;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))!=0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=$1;
      var $9=(($8+20)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=$res;
      var $12=((($11)+($10))|0);
      $res=$12;
      label = 3; break;
    case 3: 
      var $14=$res;
      var $15=_PyLong_FromSsize_t($14);
      return $15;
    default: assert(0, "bad label: " + label);
  }
}
function _bytesio_setstate($self, $state) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $result;
      var $position_obj;
      var $dict;
      var $pos;
      $2=$self;
      $3=$state;
      var $4=$3;
      var $5=(($4)|(0))!=0;
      if ($5) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      ___assert_func(((__str172)|0), 678, ((___func___bytesio_setstate)|0), ((__str32103)|0));
      throw "Reached an unreachable!";
      label = 4; break;
    case 4: 
      var $10=$3;
      var $11=(($10+4)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12+84)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$14 & 67108864;
      var $16=(($15)|(0))!=0;
      if ($16) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $18=$3;
      var $19=$18;
      var $20=(($19+8)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21)|(0)) < 3;
      if ($22) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $24=HEAP32[((_PyExc_TypeError)>>2)];
      var $25=$2;
      var $26=$25;
      var $27=(($26+4)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28+12)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=$3;
      var $32=(($31+4)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33+12)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=_PyErr_Format($24, ((__str33104)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$30,HEAP32[(((tempInt)+(4))>>2)]=$35,tempInt));
      $1=0;
      label = 33; break;
    case 7: 
      var $38=$2;
      var $39=(($38+16)|0);
      HEAP32[(($39)>>2)]=0;
      var $40=$2;
      var $41=(($40+12)|0);
      HEAP32[(($41)>>2)]=0;
      var $42=$2;
      var $43=$3;
      var $44=$43;
      var $45=(($44+12)|0);
      var $46=(($45)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=_bytesio_write($42, $47);
      $result=$48;
      var $49=$result;
      var $50=(($49)|(0))==0;
      if ($50) { label = 8; break; } else { label = 9; break; }
    case 8: 
      $1=0;
      label = 33; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $54=$result;
      var $55=(($54)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=((($56)-(1))|0);
      HEAP32[(($55)>>2)]=$57;
      var $58=(($57)|(0))!=0;
      if ($58) { label = 11; break; } else { label = 12; break; }
    case 11: 
      label = 13; break;
    case 12: 
      var $61=$result;
      var $62=(($61+4)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=(($63+24)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=$result;
      FUNCTION_TABLE[$65]($66);
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $69=$3;
      var $70=$69;
      var $71=(($70+12)|0);
      var $72=(($71+4)|0);
      var $73=HEAP32[(($72)>>2)];
      $position_obj=$73;
      var $74=$position_obj;
      var $75=(($74+4)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=(($76+48)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=(($78)|(0))!=0;
      if ($79) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $81=$position_obj;
      var $82=(($81+4)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=(($83+84)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=$85 & 131072;
      var $87=(($86)|(0))!=0;
      if ($87) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $89=$position_obj;
      var $90=(($89+4)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=(($91+48)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=(($93+152)|0);
      var $95=HEAP32[(($94)>>2)];
      var $96=(($95)|(0))!=0;
      if ($96) { label = 18; break; } else { label = 17; break; }
    case 17: 
      var $98=HEAP32[((_PyExc_TypeError)>>2)];
      var $99=$position_obj;
      var $100=(($99+4)|0);
      var $101=HEAP32[(($100)>>2)];
      var $102=(($101+12)|0);
      var $103=HEAP32[(($102)>>2)];
      var $104=_PyErr_Format($98, ((__str34105)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$103,tempInt));
      $1=0;
      label = 33; break;
    case 18: 
      var $106=$position_obj;
      var $107=HEAP32[((_PyExc_OverflowError)>>2)];
      var $108=_PyNumber_AsSsize_t($106, $107);
      $pos=$108;
      var $109=$pos;
      var $110=(($109)|(0))==-1;
      if ($110) { label = 19; break; } else { label = 21; break; }
    case 19: 
      var $112=_PyErr_Occurred();
      var $113=(($112)|(0))!=0;
      if ($113) { label = 20; break; } else { label = 21; break; }
    case 20: 
      $1=0;
      label = 33; break;
    case 21: 
      var $116=$pos;
      var $117=(($116)|(0)) < 0;
      if ($117) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $119=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($119, ((__str35106)|0));
      $1=0;
      label = 33; break;
    case 23: 
      var $121=$pos;
      var $122=$2;
      var $123=(($122+12)|0);
      HEAP32[(($123)>>2)]=$121;
      var $124=$3;
      var $125=$124;
      var $126=(($125+12)|0);
      var $127=(($126+8)|0);
      var $128=HEAP32[(($127)>>2)];
      $dict=$128;
      var $129=$dict;
      var $130=(($129)|(0))!=((__Py_NoneStruct)|(0));
      if ($130) { label = 24; break; } else { label = 32; break; }
    case 24: 
      var $132=$dict;
      var $133=(($132+4)|0);
      var $134=HEAP32[(($133)>>2)];
      var $135=(($134+84)|0);
      var $136=HEAP32[(($135)>>2)];
      var $137=$136 & 536870912;
      var $138=(($137)|(0))!=0;
      if ($138) { label = 26; break; } else { label = 25; break; }
    case 25: 
      var $140=HEAP32[((_PyExc_TypeError)>>2)];
      var $141=$dict;
      var $142=(($141+4)|0);
      var $143=HEAP32[(($142)>>2)];
      var $144=(($143+12)|0);
      var $145=HEAP32[(($144)>>2)];
      var $146=_PyErr_Format($140, ((__str36107)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$145,tempInt));
      $1=0;
      label = 33; break;
    case 26: 
      var $148=$2;
      var $149=(($148+24)|0);
      var $150=HEAP32[(($149)>>2)];
      var $151=(($150)|(0))!=0;
      if ($151) { label = 27; break; } else { label = 30; break; }
    case 27: 
      var $153=$2;
      var $154=(($153+24)|0);
      var $155=HEAP32[(($154)>>2)];
      var $156=$dict;
      var $157=_PyDict_Update($155, $156);
      var $158=(($157)|(0)) < 0;
      if ($158) { label = 28; break; } else { label = 29; break; }
    case 28: 
      $1=0;
      label = 33; break;
    case 29: 
      label = 31; break;
    case 30: 
      var $162=$dict;
      var $163=(($162)|0);
      var $164=HEAP32[(($163)>>2)];
      var $165=((($164)+(1))|0);
      HEAP32[(($163)>>2)]=$165;
      var $166=$dict;
      var $167=$2;
      var $168=(($167+24)|0);
      HEAP32[(($168)>>2)]=$166;
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      var $171=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $172=((($171)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$172;
      $1=__Py_NoneStruct;
      label = 33; break;
    case 33: 
      var $174=$1;
      STACKTOP = __stackBase__;
      return $174;
    default: assert(0, "bad label: " + label);
  }
}
function _get_line($self, $output) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $n;
      var $str_end;
      var $len;
      $1=$self;
      $2=$output;
      var $3=$1;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))!=0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      ___assert_func(((__str172)|0), 32, ((___func___get_line)|0), ((__str677)|0));
      throw "Reached an unreachable!";
      label = 4; break;
    case 4: 
      var $11=$1;
      var $12=(($11+8)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=$1;
      var $15=(($14+16)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($13+$16)|0);
      $str_end=$17;
      var $18=$1;
      var $19=(($18+8)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=$1;
      var $22=(($21+12)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($20+$23)|0);
      $n=$24;
      label = 5; break;
    case 5: 
      var $26=$n;
      var $27=$str_end;
      var $28=(($26)>>>(0)) < (($27)>>>(0));
      if ($28) { label = 6; break; } else { var $35 = 0;label = 7; break; }
    case 6: 
      var $30=$n;
      var $31=HEAP8[($30)];
      var $32=(($31 << 24) >> 24);
      var $33=(($32)|(0))!=10;
      var $35 = $33;label = 7; break;
    case 7: 
      var $35;
      if ($35) { label = 8; break; } else { label = 10; break; }
    case 8: 
      label = 9; break;
    case 9: 
      var $38=$n;
      var $39=(($38+1)|0);
      $n=$39;
      label = 5; break;
    case 10: 
      var $41=$n;
      var $42=$str_end;
      var $43=(($41)>>>(0)) < (($42)>>>(0));
      if ($43) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $45=$n;
      var $46=(($45+1)|0);
      $n=$46;
      label = 12; break;
    case 12: 
      var $48=$n;
      var $49=$1;
      var $50=(($49+8)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=$1;
      var $53=(($52+12)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($51+$54)|0);
      var $56=$48;
      var $57=$55;
      var $58=((($56)-($57))|0);
      $len=$58;
      var $59=$1;
      var $60=(($59+8)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=$1;
      var $63=(($62+12)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=(($61+$64)|0);
      var $66=$2;
      HEAP32[(($66)>>2)]=$65;
      var $67=$len;
      var $68=(($67)|(0)) >= 0;
      if ($68) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 15; break;
    case 14: 
      ___assert_func(((__str172)|0), 48, ((___func___get_line)|0), ((__str879)|0));
      throw "Reached an unreachable!";
      label = 15; break;
    case 15: 
      var $73=$1;
      var $74=(($73+12)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=$len;
      var $77=(((2147483647)-($76))|0);
      var $78=(($75)|(0)) < (($77)|(0));
      if ($78) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 18; break;
    case 17: 
      ___assert_func(((__str172)|0), 49, ((___func___get_line)|0), ((__str47118)|0));
      throw "Reached an unreachable!";
      label = 18; break;
    case 18: 
      var $83=$len;
      var $84=$1;
      var $85=(($84+12)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=((($86)+($83))|0);
      HEAP32[(($85)>>2)]=$87;
      var $88=$len;
      return $88;
    default: assert(0, "bad label: " + label);
  }
}
function _fileio_dealloc($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $g;
      var $_py_tmp;
      $1=$self;
      var $2=$1;
      var $3=$2;
      var $4=__PyIOBase_finalize($3);
      var $5=(($4)|(0)) < 0;
      if ($5) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 20; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $9=$1;
      var $10=$9;
      var $11=((($10)-(12))|0);
      $g=$11;
      var $12=$g;
      var $13=$12;
      var $14=(($13+8)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15)|(0))!=-2;
      if ($16) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 7; break;
    case 6: 
      ___assert_func(((__str1126)|0), 401, ((___func___fileio_dealloc)|0), ((__str52188)|0));
      throw "Reached an unreachable!";
      label = 7; break;
    case 7: 
      var $21=$g;
      var $22=$21;
      var $23=(($22+8)|0);
      HEAP32[(($23)>>2)]=-2;
      var $24=$g;
      var $25=$24;
      var $26=(($25)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$g;
      var $29=$28;
      var $30=(($29+4)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=$31;
      var $33=(($32)|0);
      HEAP32[(($33)>>2)]=$27;
      var $34=$g;
      var $35=$34;
      var $36=(($35+4)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=$g;
      var $39=$38;
      var $40=(($39)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=$41;
      var $43=(($42+4)|0);
      HEAP32[(($43)>>2)]=$37;
      var $44=$g;
      var $45=$44;
      var $46=(($45)|0);
      HEAP32[(($46)>>2)]=0;
      label = 8; break;
    case 8: 
      var $48=$1;
      var $49=(($48+16)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=(($50)|(0))!=0;
      if ($51) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $53=$1;
      var $54=$53;
      _PyObject_ClearWeakRefs($54);
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $57=$1;
      var $58=(($57+20)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=(($59)|(0))!=0;
      if ($60) { label = 12; break; } else { label = 18; break; }
    case 12: 
      var $62=$1;
      var $63=(($62+20)|0);
      var $64=HEAP32[(($63)>>2)];
      $_py_tmp=$64;
      var $65=$1;
      var $66=(($65+20)|0);
      HEAP32[(($66)>>2)]=0;
      label = 13; break;
    case 13: 
      var $68=$_py_tmp;
      var $69=(($68)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=((($70)-(1))|0);
      HEAP32[(($69)>>2)]=$71;
      var $72=(($71)|(0))!=0;
      if ($72) { label = 14; break; } else { label = 15; break; }
    case 14: 
      label = 16; break;
    case 15: 
      var $75=$_py_tmp;
      var $76=(($75+4)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=(($77+24)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=$_py_tmp;
      FUNCTION_TABLE[$79]($80);
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $85=$1;
      var $86=$85;
      var $87=(($86+4)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=(($88+160)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=$1;
      var $92=$91;
      var $93=$92;
      FUNCTION_TABLE[$90]($93);
      label = 20; break;
    case 20: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _fileio_repr($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $nameobj;
      var $res;
      var $repr;
      $2=$self;
      var $3=$2;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0)) < 0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=_PyString_FromFormat(((__str49185)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=$8;
      label = 22; break;
    case 3: 
      var $10=$2;
      var $11=$10;
      var $12=_PyObject_GetAttrString($11, ((__str15140)|0));
      $nameobj=$12;
      var $13=$nameobj;
      var $14=(($13)|(0))==0;
      if ($14) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $16=HEAP32[((_PyExc_AttributeError)>>2)];
      var $17=_PyErr_ExceptionMatches($16);
      var $18=(($17)|(0))!=0;
      if ($18) { label = 5; break; } else { label = 6; break; }
    case 5: 
      _PyErr_Clear();
      label = 7; break;
    case 6: 
      $1=0;
      label = 22; break;
    case 7: 
      var $22=$2;
      var $23=(($22+8)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=$2;
      var $26=_mode_string($25);
      var $27=_PyString_FromFormat(((__str50186)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$24,HEAP32[(((tempInt)+(4))>>2)]=$26,tempInt));
      $res=$27;
      label = 21; break;
    case 8: 
      var $29=$nameobj;
      var $30=_PyObject_Repr($29);
      $repr=$30;
      label = 9; break;
    case 9: 
      var $32=$nameobj;
      var $33=(($32)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=((($34)-(1))|0);
      HEAP32[(($33)>>2)]=$35;
      var $36=(($35)|(0))!=0;
      if ($36) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 12; break;
    case 11: 
      var $39=$nameobj;
      var $40=(($39+4)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($41+24)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=$nameobj;
      FUNCTION_TABLE[$43]($44);
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $47=$repr;
      var $48=(($47)|(0))==0;
      if ($48) { label = 14; break; } else { label = 15; break; }
    case 14: 
      $1=0;
      label = 22; break;
    case 15: 
      var $51=$repr;
      var $52=$51;
      var $53=(($52+20)|0);
      var $54=(($53)|0);
      var $55=$2;
      var $56=_mode_string($55);
      var $57=_PyString_FromFormat(((__str51187)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$54,HEAP32[(((tempInt)+(4))>>2)]=$56,tempInt));
      $res=$57;
      label = 16; break;
    case 16: 
      var $59=$repr;
      var $60=(($59)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=((($61)-(1))|0);
      HEAP32[(($60)>>2)]=$62;
      var $63=(($62)|(0))!=0;
      if ($63) { label = 17; break; } else { label = 18; break; }
    case 17: 
      label = 19; break;
    case 18: 
      var $66=$repr;
      var $67=(($66+4)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=(($68+24)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=$repr;
      FUNCTION_TABLE[$70]($71);
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $75=$res;
      $1=$75;
      label = 22; break;
    case 22: 
      var $77=$1;
      STACKTOP = __stackBase__;
      return $77;
    default: assert(0, "bad label: " + label);
  }
}
function _fileio_traverse($self, $visit, $arg) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $vret;
      $2=$self;
      $3=$visit;
      $4=$arg;
      label = 2; break;
    case 2: 
      var $6=$2;
      var $7=(($6+20)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $11=$3;
      var $12=$2;
      var $13=(($12+20)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$4;
      var $16=FUNCTION_TABLE[$11]($14, $15);
      $vret=$16;
      var $17=$vret;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $20=$vret;
      $1=$20;
      label = 8; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      $1=0;
      label = 8; break;
    case 8: 
      var $25=$1;
      return $25;
    default: assert(0, "bad label: " + label);
  }
}
function _fileio_clear($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $_py_tmp;
      $1=$self;
      label = 2; break;
    case 2: 
      var $3=$1;
      var $4=(($3+20)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 9; break; }
    case 3: 
      var $8=$1;
      var $9=(($8+20)|0);
      var $10=HEAP32[(($9)>>2)];
      $_py_tmp=$10;
      var $11=$1;
      var $12=(($11+20)|0);
      HEAP32[(($12)>>2)]=0;
      label = 4; break;
    case 4: 
      var $14=$_py_tmp;
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=((($16)-(1))|0);
      HEAP32[(($15)>>2)]=$17;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 7; break;
    case 6: 
      var $21=$_py_tmp;
      var $22=(($21+4)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+24)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=$_py_tmp;
      FUNCTION_TABLE[$25]($26);
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      return 0;
    default: assert(0, "bad label: " + label);
  }
}
function _fileio_init($oself, $args, $kwds) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 20)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $self;
      var $name=__stackBase__;
      var $nameobj=(__stackBase__)+(4);
      var $stringobj;
      var $mode=(__stackBase__)+(8);
      var $s;
      var $ret;
      var $rwa;
      var $plus;
      var $append;
      var $flags;
      var $fd;
      var $closefd=(__stackBase__)+(12);
      var $fd_is_own;
      var $namelen=(__stackBase__)+(16);
      var $u;
      var $pos;
      var $_py_tmp;
      $2=$oself;
      $3=$args;
      $4=$kwds;
      var $5=$2;
      var $6=$5;
      $self=$6;
      HEAP32[(($name)>>2)]=0;
      $stringobj=0;
      HEAP32[(($mode)>>2)]=((__str6131)|0);
      $ret=0;
      $rwa=0;
      $plus=0;
      $append=0;
      $flags=0;
      $fd=-1;
      HEAP32[(($closefd)>>2)]=1;
      $fd_is_own=0;
      var $7=$2;
      var $8=(($7+4)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9)|(0))==((_PyFileIO_Type)|(0));
      if ($10) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $12=$2;
      var $13=(($12+4)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=_PyType_IsSubtype($14, _PyFileIO_Type);
      var $16=(($15)|(0))!=0;
      if ($16) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 5; break;
    case 4: 
      ___assert_func(((__str1126)|0), 193, ((___func___fileio_init)|0), ((__str7132)|0));
      throw "Reached an unreachable!";
      label = 5; break;
    case 5: 
      var $21=$self;
      var $22=(($21+8)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23)|(0)) >= 0;
      if ($24) { label = 6; break; } else { label = 12; break; }
    case 6: 
      var $26=$self;
      var $27=$26;
      var $28=(($27+12)|0);
      var $29=$28;
      var $30=HEAP32[(($29)>>2)];
      var $31=$30 >>> 4;
      var $32=$31 & 1;
      var $33=(($32)|(0))!=0;
      if ($33) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $35=$self;
      var $36=_internal_close($35);
      var $37=(($36)|(0)) < 0;
      if ($37) { label = 8; break; } else { label = 9; break; }
    case 8: 
      $1=-1;
      label = 107; break;
    case 9: 
      label = 11; break;
    case 10: 
      var $41=$self;
      var $42=(($41+8)|0);
      HEAP32[(($42)>>2)]=-1;
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $45=$3;
      var $46=$4;
      var $47=__PyArg_ParseTupleAndKeywords_SizeT($45, $46, ((__str8133)|0), ((_fileio_init_kwlist)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$nameobj,HEAP32[(((tempInt)+(4))>>2)]=$mode,HEAP32[(((tempInt)+(8))>>2)]=$closefd,tempInt));
      var $48=(($47)|(0))!=0;
      if ($48) { label = 14; break; } else { label = 13; break; }
    case 13: 
      $1=-1;
      label = 107; break;
    case 14: 
      var $51=HEAP32[(($nameobj)>>2)];
      var $52=(($51+4)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=(($53)|(0))==((_PyFloat_Type)|(0));
      if ($54) { label = 16; break; } else { label = 15; break; }
    case 15: 
      var $56=HEAP32[(($nameobj)>>2)];
      var $57=(($56+4)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=_PyType_IsSubtype($58, _PyFloat_Type);
      var $60=(($59)|(0))!=0;
      if ($60) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $62=HEAP32[((_PyExc_TypeError)>>2)];
      _PyErr_SetString($62, ((__str9134)|0));
      $1=-1;
      label = 107; break;
    case 17: 
      var $64=HEAP32[(($nameobj)>>2)];
      var $65=__PyLong_AsInt($64);
      $fd=$65;
      var $66=$fd;
      var $67=(($66)|(0)) < 0;
      if ($67) { label = 18; break; } else { label = 21; break; }
    case 18: 
      var $69=_PyErr_Occurred();
      var $70=(($69)|(0))!=0;
      if ($70) { label = 20; break; } else { label = 19; break; }
    case 19: 
      var $72=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($72, ((__str10135)|0));
      $1=-1;
      label = 107; break;
    case 20: 
      _PyErr_Clear();
      label = 21; break;
    case 21: 
      var $75=$fd;
      var $76=(($75)|(0)) < 0;
      if ($76) { label = 22; break; } else { label = 41; break; }
    case 22: 
      var $78=HEAP32[(($nameobj)>>2)];
      var $79=(($78+4)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=(($80+84)|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=$82 & 134217728;
      var $84=(($83)|(0))!=0;
      if ($84) { label = 25; break; } else { label = 23; break; }
    case 23: 
      var $86=HEAP32[(($nameobj)>>2)];
      var $87=(($86+4)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=(($88)|(0))==((_PyByteArray_Type)|(0));
      if ($89) { label = 25; break; } else { label = 24; break; }
    case 24: 
      var $91=HEAP32[(($nameobj)>>2)];
      var $92=(($91+4)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=_PyType_IsSubtype($93, _PyByteArray_Type);
      var $95=(($94)|(0))!=0;
      if ($95) { label = 25; break; } else { label = 28; break; }
    case 25: 
      var $97=HEAP32[(($nameobj)>>2)];
      var $98=_PyObject_AsCharBuffer($97, $name, $namelen);
      var $99=(($98)|(0)) < 0;
      if ($99) { label = 26; break; } else { label = 27; break; }
    case 26: 
      $1=-1;
      label = 107; break;
    case 27: 
      label = 40; break;
    case 28: 
      var $103=HEAP32[(($nameobj)>>2)];
      var $104=_PyUnicodeUCS2_FromObject($103);
      $u=$104;
      var $105=$u;
      var $106=(($105)|(0))==0;
      if ($106) { label = 29; break; } else { label = 30; break; }
    case 29: 
      $1=-1;
      label = 107; break;
    case 30: 
      var $109=$u;
      var $110=HEAP32[((_Py_FileSystemDefaultEncoding)>>2)];
      var $111=_PyUnicodeUCS2_AsEncodedString($109, $110, 0);
      $stringobj=$111;
      label = 31; break;
    case 31: 
      var $113=$u;
      var $114=(($113)|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=((($115)-(1))|0);
      HEAP32[(($114)>>2)]=$116;
      var $117=(($116)|(0))!=0;
      if ($117) { label = 32; break; } else { label = 33; break; }
    case 32: 
      label = 34; break;
    case 33: 
      var $120=$u;
      var $121=(($120+4)|0);
      var $122=HEAP32[(($121)>>2)];
      var $123=(($122+24)|0);
      var $124=HEAP32[(($123)>>2)];
      var $125=$u;
      FUNCTION_TABLE[$124]($125);
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      var $128=$stringobj;
      var $129=(($128)|(0))==0;
      if ($129) { label = 36; break; } else { label = 37; break; }
    case 36: 
      $1=-1;
      label = 107; break;
    case 37: 
      var $132=$stringobj;
      var $133=(($132+4)|0);
      var $134=HEAP32[(($133)>>2)];
      var $135=(($134+84)|0);
      var $136=HEAP32[(($135)>>2)];
      var $137=$136 & 134217728;
      var $138=(($137)|(0))!=0;
      if ($138) { label = 39; break; } else { label = 38; break; }
    case 38: 
      var $140=HEAP32[((_PyExc_TypeError)>>2)];
      _PyErr_SetString($140, ((__str11136)|0));
      label = 94; break;
    case 39: 
      var $142=$stringobj;
      var $143=$142;
      var $144=(($143+20)|0);
      var $145=(($144)|0);
      HEAP32[(($name)>>2)]=$145;
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      var $148=HEAP32[(($mode)>>2)];
      $s=$148;
      label = 42; break;
    case 42: 
      var $150=$s;
      var $151=HEAP8[($150)];
      var $152=(($151 << 24) >> 24)!=0;
      if ($152) { label = 43; break; } else { label = 60; break; }
    case 43: 
      var $154=$s;
      var $155=(($154+1)|0);
      $s=$155;
      var $156=HEAP8[($154)];
      var $157=(($156 << 24) >> 24);
      if ((($157)|(0))==114) {
        label = 44; break;
      }
      else if ((($157)|(0))==119) {
        label = 48; break;
      }
      else if ((($157)|(0))==97) {
        label = 51; break;
      }
      else if ((($157)|(0))==98) {
        label = 54; break;
      }
      else if ((($157)|(0))==43) {
        label = 55; break;
      }
      else {
      label = 58; break;
      }
    case 44: 
      var $159=$rwa;
      var $160=(($159)|(0))!=0;
      if ($160) { label = 45; break; } else { label = 47; break; }
    case 45: 
      label = 46; break;
    case 46: 
      var $163=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($163, ((__str12137)|0));
      label = 94; break;
    case 47: 
      $rwa=1;
      var $165=$self;
      var $166=$165;
      var $167=(($166+12)|0);
      var $168=$167;
      var $169=HEAP32[(($168)>>2)];
      var $170=$169 & -2;
      var $171=$170 | 1;
      HEAP32[(($168)>>2)]=$171;
      label = 59; break;
    case 48: 
      var $173=$rwa;
      var $174=(($173)|(0))!=0;
      if ($174) { label = 49; break; } else { label = 50; break; }
    case 49: 
      label = 46; break;
    case 50: 
      $rwa=1;
      var $177=$self;
      var $178=$177;
      var $179=(($178+12)|0);
      var $180=$179;
      var $181=HEAP32[(($180)>>2)];
      var $182=$181 & -3;
      var $183=$182 | 2;
      HEAP32[(($180)>>2)]=$183;
      var $184=$flags;
      var $185=$184 | 1536;
      $flags=$185;
      label = 59; break;
    case 51: 
      var $187=$rwa;
      var $188=(($187)|(0))!=0;
      if ($188) { label = 52; break; } else { label = 53; break; }
    case 52: 
      label = 46; break;
    case 53: 
      $rwa=1;
      var $191=$self;
      var $192=$191;
      var $193=(($192+12)|0);
      var $194=$193;
      var $195=HEAP32[(($194)>>2)];
      var $196=$195 & -3;
      var $197=$196 | 2;
      HEAP32[(($194)>>2)]=$197;
      var $198=$flags;
      var $199=$198 | 512;
      $flags=$199;
      $append=1;
      label = 59; break;
    case 54: 
      label = 59; break;
    case 55: 
      var $202=$plus;
      var $203=(($202)|(0))!=0;
      if ($203) { label = 56; break; } else { label = 57; break; }
    case 56: 
      label = 46; break;
    case 57: 
      var $206=$self;
      var $207=$206;
      var $208=(($207+12)|0);
      var $209=$208;
      var $210=HEAP32[(($209)>>2)];
      var $211=$210 & -3;
      var $212=$211 | 2;
      HEAP32[(($209)>>2)]=$212;
      var $213=$self;
      var $214=$213;
      var $215=(($214+12)|0);
      var $216=$215;
      var $217=HEAP32[(($216)>>2)];
      var $218=$217 & -2;
      var $219=$218 | 1;
      HEAP32[(($216)>>2)]=$219;
      $plus=1;
      label = 59; break;
    case 58: 
      var $221=HEAP32[((_PyExc_ValueError)>>2)];
      var $222=HEAP32[(($mode)>>2)];
      var $223=_PyErr_Format($221, ((__str13138)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$222,tempInt));
      label = 94; break;
    case 59: 
      label = 42; break;
    case 60: 
      var $226=$rwa;
      var $227=(($226)|(0))!=0;
      if ($227) { label = 62; break; } else { label = 61; break; }
    case 61: 
      label = 46; break;
    case 62: 
      var $230=$self;
      var $231=$230;
      var $232=(($231+12)|0);
      var $233=$232;
      var $234=HEAP32[(($233)>>2)];
      var $235=$234 & 1;
      var $236=(($235)|(0))!=0;
      if ($236) { label = 63; break; } else { label = 65; break; }
    case 63: 
      var $238=$self;
      var $239=$238;
      var $240=(($239+12)|0);
      var $241=$240;
      var $242=HEAP32[(($241)>>2)];
      var $243=$242 >>> 1;
      var $244=$243 & 1;
      var $245=(($244)|(0))!=0;
      if ($245) { label = 64; break; } else { label = 65; break; }
    case 64: 
      var $247=$flags;
      var $248=$247 | 2;
      $flags=$248;
      label = 69; break;
    case 65: 
      var $250=$self;
      var $251=$250;
      var $252=(($251+12)|0);
      var $253=$252;
      var $254=HEAP32[(($253)>>2)];
      var $255=$254 & 1;
      var $256=(($255)|(0))!=0;
      if ($256) { label = 66; break; } else { label = 67; break; }
    case 66: 
      var $258=$flags;
      $flags=$258;
      label = 68; break;
    case 67: 
      var $260=$flags;
      var $261=$260 | 1;
      $flags=$261;
      label = 68; break;
    case 68: 
      label = 69; break;
    case 69: 
      var $264=$append;
      var $265=(($264)|(0))!=0;
      if ($265) { label = 70; break; } else { label = 71; break; }
    case 70: 
      var $267=$flags;
      var $268=$267 | 8;
      $flags=$268;
      label = 71; break;
    case 71: 
      var $270=$fd;
      var $271=(($270)|(0)) >= 0;
      if ($271) { label = 72; break; } else { label = 75; break; }
    case 72: 
      var $273=$fd;
      var $274=_check_fd($273);
      var $275=(($274)|(0))!=0;
      if ($275) { label = 73; break; } else { label = 74; break; }
    case 73: 
      label = 94; break;
    case 74: 
      var $278=$fd;
      var $279=$self;
      var $280=(($279+8)|0);
      HEAP32[(($280)>>2)]=$278;
      var $281=HEAP32[(($closefd)>>2)];
      var $282=$self;
      var $283=$281 & 1;
      var $284=$282;
      var $285=(($284+12)|0);
      var $286=$285;
      var $287=$283 & 1;
      var $288=$287 << 4;
      var $289=HEAP32[(($286)>>2)];
      var $290=$289 & -17;
      var $291=$290 | $288;
      HEAP32[(($286)>>2)]=$291;
      label = 80; break;
    case 75: 
      var $293=$self;
      var $294=$293;
      var $295=(($294+12)|0);
      var $296=$295;
      var $297=HEAP32[(($296)>>2)];
      var $298=$297 & -17;
      var $299=$298 | 16;
      HEAP32[(($296)>>2)]=$299;
      var $300=HEAP32[(($closefd)>>2)];
      var $301=(($300)|(0))!=0;
      if ($301) { label = 77; break; } else { label = 76; break; }
    case 76: 
      var $303=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($303, ((__str14139)|0));
      label = 94; break;
    case 77: 
      var $305=___errno_location();
      HEAP32[(($305)>>2)]=0;
      var $306=HEAP32[(($name)>>2)];
      var $307=$flags;
      var $308=_open($306, $307, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=438,tempInt));
      var $309=$self;
      var $310=(($309+8)|0);
      HEAP32[(($310)>>2)]=$308;
      $fd_is_own=1;
      var $311=$self;
      var $312=(($311+8)|0);
      var $313=HEAP32[(($312)>>2)];
      var $314=(($313)|(0)) < 0;
      if ($314) { label = 78; break; } else { label = 79; break; }
    case 78: 
      var $316=HEAP32[((_PyExc_IOError)>>2)];
      var $317=HEAP32[(($name)>>2)];
      var $318=_PyErr_SetFromErrnoWithFilename($316, $317);
      label = 94; break;
    case 79: 
      label = 80; break;
    case 80: 
      var $321=$self;
      var $322=HEAP32[(($nameobj)>>2)];
      var $323=_dircheck($321, $322);
      var $324=(($323)|(0)) < 0;
      if ($324) { label = 81; break; } else { label = 82; break; }
    case 81: 
      label = 94; break;
    case 82: 
      var $327=$self;
      var $328=$327;
      var $329=HEAP32[(($nameobj)>>2)];
      var $330=_PyObject_SetAttrString($328, ((__str15140)|0), $329);
      var $331=(($330)|(0)) < 0;
      if ($331) { label = 83; break; } else { label = 84; break; }
    case 83: 
      label = 94; break;
    case 84: 
      var $334=$append;
      var $335=(($334)|(0))!=0;
      if ($335) { label = 85; break; } else { label = 93; break; }
    case 85: 
      var $337=$self;
      var $338=(($337+8)|0);
      var $339=HEAP32[(($338)>>2)];
      var $340=_portable_lseek($339, 0, 2);
      $pos=$340;
      var $341=$pos;
      var $342=(($341)|(0))==0;
      if ($342) { label = 86; break; } else { label = 87; break; }
    case 86: 
      label = 94; break;
    case 87: 
      label = 88; break;
    case 88: 
      var $346=$pos;
      var $347=(($346)|0);
      var $348=HEAP32[(($347)>>2)];
      var $349=((($348)-(1))|0);
      HEAP32[(($347)>>2)]=$349;
      var $350=(($349)|(0))!=0;
      if ($350) { label = 89; break; } else { label = 90; break; }
    case 89: 
      label = 91; break;
    case 90: 
      var $353=$pos;
      var $354=(($353+4)|0);
      var $355=HEAP32[(($354)>>2)];
      var $356=(($355+24)|0);
      var $357=HEAP32[(($356)>>2)];
      var $358=$pos;
      FUNCTION_TABLE[$357]($358);
      label = 91; break;
    case 91: 
      label = 92; break;
    case 92: 
      label = 93; break;
    case 93: 
      label = 97; break;
    case 94: 
      var $363=$fd_is_own;
      var $364=(($363)|(0))!=0;
      if ($364) { label = 96; break; } else { label = 95; break; }
    case 95: 
      var $366=$self;
      var $367=(($366+8)|0);
      HEAP32[(($367)>>2)]=-1;
      label = 96; break;
    case 96: 
      $ret=-1;
      label = 97; break;
    case 97: 
      label = 98; break;
    case 98: 
      var $371=$stringobj;
      var $372=(($371)|(0))!=0;
      if ($372) { label = 99; break; } else { label = 105; break; }
    case 99: 
      var $374=$stringobj;
      $_py_tmp=$374;
      $stringobj=0;
      label = 100; break;
    case 100: 
      var $376=$_py_tmp;
      var $377=(($376)|0);
      var $378=HEAP32[(($377)>>2)];
      var $379=((($378)-(1))|0);
      HEAP32[(($377)>>2)]=$379;
      var $380=(($379)|(0))!=0;
      if ($380) { label = 101; break; } else { label = 102; break; }
    case 101: 
      label = 103; break;
    case 102: 
      var $383=$_py_tmp;
      var $384=(($383+4)|0);
      var $385=HEAP32[(($384)>>2)];
      var $386=(($385+24)|0);
      var $387=HEAP32[(($386)>>2)];
      var $388=$_py_tmp;
      FUNCTION_TABLE[$387]($388);
      label = 103; break;
    case 103: 
      label = 104; break;
    case 104: 
      label = 105; break;
    case 105: 
      label = 106; break;
    case 106: 
      var $393=$ret;
      $1=$393;
      label = 107; break;
    case 107: 
      var $395=$1;
      STACKTOP = __stackBase__;
      return $395;
    default: assert(0, "bad label: " + label);
  }
}
function _mode_string($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $2=$self;
      var $3=$2;
      var $4=$3;
      var $5=(($4+12)|0);
      var $6=$5;
      var $7=HEAP32[(($6)>>2)];
      var $8=$7 & 1;
      var $9=(($8)|(0))!=0;
      if ($9) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $11=$2;
      var $12=$11;
      var $13=(($12+12)|0);
      var $14=$13;
      var $15=HEAP32[(($14)>>2)];
      var $16=$15 >>> 1;
      var $17=$16 & 1;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=((__str22147)|0);
      label = 6; break;
    case 4: 
      $1=((__str23148)|0);
      label = 6; break;
    case 5: 
      $1=((__str24149)|0);
      label = 6; break;
    case 6: 
      var $23=$1;
      return $23;
    default: assert(0, "bad label: " + label);
  }
}
function _internal_close($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $err;
      var $save_errno;
      var $fd;
      $2=$self;
      $err=0;
      $save_errno=0;
      var $3=$2;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0)) >= 0;
      if ($6) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $8=$2;
      var $9=(($8+8)|0);
      var $10=HEAP32[(($9)>>2)];
      $fd=$10;
      var $11=$2;
      var $12=(($11+8)|0);
      HEAP32[(($12)>>2)]=-1;
      var $13=$fd;
      var $14=_close($13);
      $err=$14;
      var $15=$err;
      var $16=(($15)|(0)) < 0;
      if ($16) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $18=___errno_location();
      var $19=HEAP32[(($18)>>2)];
      $save_errno=$19;
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $22=$err;
      var $23=(($22)|(0)) < 0;
      if ($23) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $25=$save_errno;
      var $26=___errno_location();
      HEAP32[(($26)>>2)]=$25;
      var $27=HEAP32[((_PyExc_IOError)>>2)];
      var $28=_PyErr_SetFromErrno($27);
      $1=-1;
      label = 8; break;
    case 7: 
      $1=0;
      label = 8; break;
    case 8: 
      var $31=$1;
      return $31;
    default: assert(0, "bad label: " + label);
  }
}
function _check_fd($fd) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $buf=__stackBase__;
      var $exc;
      var $msg;
      $2=$fd;
      var $3=$2;
      var $4=_fstat($3, $buf);
      var $5=(($4)|(0)) < 0;
      if ($5) { label = 2; break; } else { label = 14; break; }
    case 2: 
      var $7=___errno_location();
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))==9;
      if ($9) { label = 3; break; } else { label = 14; break; }
    case 3: 
      var $11=_strerror(9);
      $msg=$11;
      var $12=HEAP32[((_PyExc_OSError)>>2)];
      var $13=$msg;
      var $14=__PyObject_CallFunction_SizeT($12, ((__str17142)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=9,HEAP32[(((tempInt)+(4))>>2)]=$13,tempInt));
      $exc=$14;
      var $15=HEAP32[((_PyExc_OSError)>>2)];
      var $16=$exc;
      _PyErr_SetObject($15, $16);
      label = 4; break;
    case 4: 
      var $18=$exc;
      var $19=(($18)|(0))==0;
      if ($19) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 12; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $23=$exc;
      var $24=(($23)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=((($25)-(1))|0);
      HEAP32[(($24)>>2)]=$26;
      var $27=(($26)|(0))!=0;
      if ($27) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 10; break;
    case 9: 
      var $30=$exc;
      var $31=(($30+4)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32+24)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=$exc;
      FUNCTION_TABLE[$34]($35);
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      $1=-1;
      label = 15; break;
    case 14: 
      $1=0;
      label = 15; break;
    case 15: 
      var $42=$1;
      STACKTOP = __stackBase__;
      return $42;
    default: assert(0, "bad label: " + label);
  }
}
function _dircheck($self, $nameobj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $buf=__stackBase__;
      $2=$self;
      $3=$nameobj;
      var $4=$2;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0)) < 0;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 7; break;
    case 3: 
      var $10=$2;
      var $11=(($10+8)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=_fstat($12, $buf);
      var $14=(($13)|(0))==0;
      if ($14) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $16=(($buf+8)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=$17 & 61440;
      var $19=(($18)|(0))==16384;
      if ($19) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $21=___errno_location();
      HEAP32[(($21)>>2)]=21;
      var $22=HEAP32[((_PyExc_IOError)>>2)];
      var $23=$3;
      var $24=_PyErr_SetFromErrnoWithFilenameObject($22, $23);
      $1=-1;
      label = 7; break;
    case 6: 
      $1=0;
      label = 7; break;
    case 7: 
      var $27=$1;
      STACKTOP = __stackBase__;
      return $27;
    default: assert(0, "bad label: " + label);
  }
}
function _portable_lseek($fd, $posobj, $whence) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $pos;
      var $res;
      $2=$fd;
      $3=$posobj;
      $4=$whence;
      var $5=$4;
      label = 2; break;
    case 2: 
      var $7=$3;
      var $8=(($7)|(0))==0;
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $pos=0;
      label = 10; break;
    case 4: 
      var $11=$3;
      var $12=(($11+4)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13)|(0))==((_PyFloat_Type)|(0));
      if ($14) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $16=$3;
      var $17=(($16+4)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=_PyType_IsSubtype($18, _PyFloat_Type);
      var $20=(($19)|(0))!=0;
      if ($20) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $22=HEAP32[((_PyExc_TypeError)>>2)];
      _PyErr_SetString($22, ((__str16141)|0));
      $1=0;
      label = 13; break;
    case 7: 
      var $24=$3;
      var $25=_PyLong_AsLong($24);
      $pos=$25;
      var $26=_PyErr_Occurred();
      var $27=(($26)|(0))!=0;
      if ($27) { label = 8; break; } else { label = 9; break; }
    case 8: 
      $1=0;
      label = 13; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $31=$2;
      var $32=$pos;
      var $33=$4;
      var $34=_lseek($31, $32, $33);
      $res=$34;
      var $35=$res;
      var $36=(($35)|(0)) < 0;
      if ($36) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $38=HEAP32[((_PyExc_IOError)>>2)];
      var $39=_PyErr_SetFromErrno($38);
      $1=$39;
      label = 13; break;
    case 12: 
      var $41=$res;
      var $42=_PyLong_FromLong($41);
      $1=$42;
      label = 13; break;
    case 13: 
      var $44=$1;
      return $44;
    default: assert(0, "bad label: " + label);
  }
}
function _get_closed($self, $closure) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$closure;
  var $3=$1;
  var $4=(($3+8)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5)|(0)) < 0;
  var $7=(($6)&(1));
  var $8=_PyBool_FromLong($7);
  return $8;
}
function _get_closefd($self, $closure) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$closure;
  var $3=$1;
  var $4=$3;
  var $5=(($4+12)|0);
  var $6=$5;
  var $7=HEAP32[(($6)>>2)];
  var $8=$7 >>> 4;
  var $9=$8 & 1;
  var $10=_PyBool_FromLong($9);
  return $10;
}
function _get_mode($self, $closure) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$closure;
  var $3=$1;
  var $4=_mode_string($3);
  var $5=_PyUnicodeUCS2_FromString($4);
  return $5;
}
function _fileio_read($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $ptr;
      var $n;
      var $size=__stackBase__;
      var $bytes=(__stackBase__)+(4);
      $2=$self;
      $3=$args;
      HEAP32[(($size)>>2)]=-1;
      var $4=$2;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0)) < 0;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $9=_err_closed();
      $1=$9;
      label = 30; break;
    case 3: 
      var $11=$2;
      var $12=$11;
      var $13=(($12+12)|0);
      var $14=$13;
      var $15=HEAP32[(($14)>>2)];
      var $16=$15 & 1;
      var $17=(($16)|(0))!=0;
      if ($17) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $19=_err_mode(((__str45181)|0));
      $1=$19;
      label = 30; break;
    case 5: 
      var $21=$3;
      var $22=__PyArg_ParseTuple_SizeT($21, ((__str48184)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=((FUNCTION_TABLE_OFFSET + 242)),HEAP32[(((tempInt)+(4))>>2)]=$size,tempInt));
      var $23=(($22)|(0))!=0;
      if ($23) { label = 7; break; } else { label = 6; break; }
    case 6: 
      $1=0;
      label = 30; break;
    case 7: 
      var $26=HEAP32[(($size)>>2)];
      var $27=(($26)|(0)) < 0;
      if ($27) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $29=$2;
      var $30=_fileio_readall($29);
      $1=$30;
      label = 30; break;
    case 9: 
      var $32=HEAP32[(($size)>>2)];
      var $33=_PyString_FromStringAndSize(0, $32);
      HEAP32[(($bytes)>>2)]=$33;
      var $34=HEAP32[(($bytes)>>2)];
      var $35=(($34)|(0))==0;
      if ($35) { label = 10; break; } else { label = 11; break; }
    case 10: 
      $1=0;
      label = 30; break;
    case 11: 
      var $38=HEAP32[(($bytes)>>2)];
      var $39=$38;
      var $40=(($39+20)|0);
      var $41=(($40)|0);
      $ptr=$41;
      var $42=___errno_location();
      HEAP32[(($42)>>2)]=0;
      var $43=$2;
      var $44=(($43+8)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=$ptr;
      var $47=HEAP32[(($size)>>2)];
      var $48=_read($45, $46, $47);
      $n=$48;
      var $49=$n;
      var $50=(($49)|(0)) < 0;
      if ($50) { label = 12; break; } else { label = 20; break; }
    case 12: 
      label = 13; break;
    case 13: 
      var $53=HEAP32[(($bytes)>>2)];
      var $54=(($53)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=((($55)-(1))|0);
      HEAP32[(($54)>>2)]=$56;
      var $57=(($56)|(0))!=0;
      if ($57) { label = 14; break; } else { label = 15; break; }
    case 14: 
      label = 16; break;
    case 15: 
      var $60=HEAP32[(($bytes)>>2)];
      var $61=(($60+4)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=(($62+24)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=HEAP32[(($bytes)>>2)];
      FUNCTION_TABLE[$64]($65);
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $68=___errno_location();
      var $69=HEAP32[(($68)>>2)];
      var $70=(($69)|(0))==11;
      if ($70) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $72=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $73=((($72)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$73;
      $1=__Py_NoneStruct;
      label = 30; break;
    case 19: 
      var $75=HEAP32[((_PyExc_IOError)>>2)];
      var $76=_PyErr_SetFromErrno($75);
      $1=0;
      label = 30; break;
    case 20: 
      var $78=$n;
      var $79=HEAP32[(($size)>>2)];
      var $80=(($78)|(0))!=(($79)|(0));
      if ($80) { label = 21; break; } else { label = 29; break; }
    case 21: 
      var $82=$n;
      var $83=__PyString_Resize($bytes, $82);
      var $84=(($83)|(0)) < 0;
      if ($84) { label = 22; break; } else { label = 28; break; }
    case 22: 
      label = 23; break;
    case 23: 
      var $87=HEAP32[(($bytes)>>2)];
      var $88=(($87)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=((($89)-(1))|0);
      HEAP32[(($88)>>2)]=$90;
      var $91=(($90)|(0))!=0;
      if ($91) { label = 24; break; } else { label = 25; break; }
    case 24: 
      label = 26; break;
    case 25: 
      var $94=HEAP32[(($bytes)>>2)];
      var $95=(($94+4)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=(($96+24)|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=HEAP32[(($bytes)>>2)];
      FUNCTION_TABLE[$98]($99);
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      $1=0;
      label = 30; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $104=HEAP32[(($bytes)>>2)];
      $1=$104;
      label = 30; break;
    case 30: 
      var $106=$1;
      STACKTOP = __stackBase__;
      return $106;
    default: assert(0, "bad label: " + label);
  }
}
function _fileio_readall($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $result=__stackBase__;
      var $total;
      var $n;
      var $newsize;
      $2=$self;
      $total=0;
      var $3=$2;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0)) < 0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=_err_closed();
      $1=$8;
      label = 63; break;
    case 3: 
      var $10=_PyString_FromStringAndSize(0, 8192);
      HEAP32[(($result)>>2)]=$10;
      var $11=HEAP32[(($result)>>2)];
      var $12=(($11)|(0))==0;
      if ($12) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=0;
      label = 63; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $16=$2;
      var $17=$total;
      var $18=_new_buffersize($16, $17);
      $newsize=$18;
      var $19=$newsize;
      var $20=(($19)>>>(0)) > 2147483647;
      if ($20) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $22=$newsize;
      var $23=(($22)>>>(0)) <= 0;
      if ($23) { label = 8; break; } else { label = 14; break; }
    case 8: 
      var $25=HEAP32[((_PyExc_OverflowError)>>2)];
      _PyErr_SetString($25, ((__str47183)|0));
      label = 9; break;
    case 9: 
      var $27=HEAP32[(($result)>>2)];
      var $28=(($27)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=((($29)-(1))|0);
      HEAP32[(($28)>>2)]=$30;
      var $31=(($30)|(0))!=0;
      if ($31) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 12; break;
    case 11: 
      var $34=HEAP32[(($result)>>2)];
      var $35=(($34+4)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36+24)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=HEAP32[(($result)>>2)];
      FUNCTION_TABLE[$38]($39);
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      $1=0;
      label = 63; break;
    case 14: 
      var $43=HEAP32[(($result)>>2)];
      var $44=$43;
      var $45=(($44+8)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=$newsize;
      var $48=(($46)|(0)) < (($47)|(0));
      if ($48) { label = 15; break; } else { label = 25; break; }
    case 15: 
      var $50=$newsize;
      var $51=__PyString_Resize($result, $50);
      var $52=(($51)|(0)) < 0;
      if ($52) { label = 16; break; } else { label = 24; break; }
    case 16: 
      var $54=$total;
      var $55=(($54)|(0))==0;
      if ($55) { label = 17; break; } else { label = 23; break; }
    case 17: 
      label = 18; break;
    case 18: 
      var $58=HEAP32[(($result)>>2)];
      var $59=(($58)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=((($60)-(1))|0);
      HEAP32[(($59)>>2)]=$61;
      var $62=(($61)|(0))!=0;
      if ($62) { label = 19; break; } else { label = 20; break; }
    case 19: 
      label = 21; break;
    case 20: 
      var $65=HEAP32[(($result)>>2)];
      var $66=(($65+4)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=(($67+24)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=HEAP32[(($result)>>2)];
      FUNCTION_TABLE[$69]($70);
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      $1=0;
      label = 63; break;
    case 23: 
      _PyErr_Clear();
      label = 53; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $76=___errno_location();
      HEAP32[(($76)>>2)]=0;
      var $77=$newsize;
      var $78=$total;
      var $79=((($77)-($78))|0);
      $n=$79;
      var $80=$2;
      var $81=(($80+8)|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=HEAP32[(($result)>>2)];
      var $84=$83;
      var $85=(($84+20)|0);
      var $86=(($85)|0);
      var $87=$total;
      var $88=(($86+$87)|0);
      var $89=$n;
      var $90=_read($82, $88, $89);
      $n=$90;
      var $91=$n;
      var $92=(($91)|(0))==0;
      if ($92) { label = 26; break; } else { label = 27; break; }
    case 26: 
      label = 53; break;
    case 27: 
      var $95=$n;
      var $96=(($95)|(0)) < 0;
      if ($96) { label = 28; break; } else { label = 52; break; }
    case 28: 
      var $98=___errno_location();
      var $99=HEAP32[(($98)>>2)];
      var $100=(($99)|(0))==4;
      if ($100) { label = 29; break; } else { label = 37; break; }
    case 29: 
      var $102=_PyErr_CheckSignals();
      var $103=(($102)|(0))!=0;
      if ($103) { label = 30; break; } else { label = 36; break; }
    case 30: 
      label = 31; break;
    case 31: 
      var $106=HEAP32[(($result)>>2)];
      var $107=(($106)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=((($108)-(1))|0);
      HEAP32[(($107)>>2)]=$109;
      var $110=(($109)|(0))!=0;
      if ($110) { label = 32; break; } else { label = 33; break; }
    case 32: 
      label = 34; break;
    case 33: 
      var $113=HEAP32[(($result)>>2)];
      var $114=(($113+4)|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=(($115+24)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=HEAP32[(($result)>>2)];
      FUNCTION_TABLE[$117]($118);
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      $1=0;
      label = 63; break;
    case 36: 
      label = 6; break;
    case 37: 
      var $123=$total;
      var $124=(($123)|(0)) > 0;
      if ($124) { label = 38; break; } else { label = 39; break; }
    case 38: 
      label = 53; break;
    case 39: 
      var $127=___errno_location();
      var $128=HEAP32[(($127)>>2)];
      var $129=(($128)|(0))==11;
      if ($129) { label = 40; break; } else { label = 46; break; }
    case 40: 
      label = 41; break;
    case 41: 
      var $132=HEAP32[(($result)>>2)];
      var $133=(($132)|0);
      var $134=HEAP32[(($133)>>2)];
      var $135=((($134)-(1))|0);
      HEAP32[(($133)>>2)]=$135;
      var $136=(($135)|(0))!=0;
      if ($136) { label = 42; break; } else { label = 43; break; }
    case 42: 
      label = 44; break;
    case 43: 
      var $139=HEAP32[(($result)>>2)];
      var $140=(($139+4)|0);
      var $141=HEAP32[(($140)>>2)];
      var $142=(($141+24)|0);
      var $143=HEAP32[(($142)>>2)];
      var $144=HEAP32[(($result)>>2)];
      FUNCTION_TABLE[$143]($144);
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      var $147=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $148=((($147)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$148;
      $1=__Py_NoneStruct;
      label = 63; break;
    case 46: 
      label = 47; break;
    case 47: 
      var $151=HEAP32[(($result)>>2)];
      var $152=(($151)|0);
      var $153=HEAP32[(($152)>>2)];
      var $154=((($153)-(1))|0);
      HEAP32[(($152)>>2)]=$154;
      var $155=(($154)|(0))!=0;
      if ($155) { label = 48; break; } else { label = 49; break; }
    case 48: 
      label = 50; break;
    case 49: 
      var $158=HEAP32[(($result)>>2)];
      var $159=(($158+4)|0);
      var $160=HEAP32[(($159)>>2)];
      var $161=(($160+24)|0);
      var $162=HEAP32[(($161)>>2)];
      var $163=HEAP32[(($result)>>2)];
      FUNCTION_TABLE[$162]($163);
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      var $166=HEAP32[((_PyExc_IOError)>>2)];
      var $167=_PyErr_SetFromErrno($166);
      $1=0;
      label = 63; break;
    case 52: 
      var $169=$n;
      var $170=$total;
      var $171=((($170)+($169))|0);
      $total=$171;
      label = 6; break;
    case 53: 
      var $173=HEAP32[(($result)>>2)];
      var $174=$173;
      var $175=(($174+8)|0);
      var $176=HEAP32[(($175)>>2)];
      var $177=$total;
      var $178=(($176)|(0)) > (($177)|(0));
      if ($178) { label = 54; break; } else { label = 62; break; }
    case 54: 
      var $180=$total;
      var $181=__PyString_Resize($result, $180);
      var $182=(($181)|(0)) < 0;
      if ($182) { label = 55; break; } else { label = 61; break; }
    case 55: 
      label = 56; break;
    case 56: 
      var $185=HEAP32[(($result)>>2)];
      var $186=(($185)|0);
      var $187=HEAP32[(($186)>>2)];
      var $188=((($187)-(1))|0);
      HEAP32[(($186)>>2)]=$188;
      var $189=(($188)|(0))!=0;
      if ($189) { label = 57; break; } else { label = 58; break; }
    case 57: 
      label = 59; break;
    case 58: 
      var $192=HEAP32[(($result)>>2)];
      var $193=(($192+4)|0);
      var $194=HEAP32[(($193)>>2)];
      var $195=(($194+24)|0);
      var $196=HEAP32[(($195)>>2)];
      var $197=HEAP32[(($result)>>2)];
      FUNCTION_TABLE[$196]($197);
      label = 59; break;
    case 59: 
      label = 60; break;
    case 60: 
      $1=0;
      label = 63; break;
    case 61: 
      label = 62; break;
    case 62: 
      var $202=HEAP32[(($result)>>2)];
      $1=$202;
      label = 63; break;
    case 63: 
      var $204=$1;
      STACKTOP = __stackBase__;
      return $204;
    default: assert(0, "bad label: " + label);
  }
}
function _fileio_new($type, $args, $kwds) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $self;
      $1=$type;
      $2=$args;
      $3=$kwds;
      var $4=$1;
      var $5=(($4)|(0))!=0;
      if ($5) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $7=$1;
      var $8=(($7+152)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9)|(0))!=0;
      if ($10) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 5; break;
    case 4: 
      ___assert_func(((__str1126)|0), 120, ((___func___fileio_new)|0), ((__str2127)|0));
      throw "Reached an unreachable!";
      label = 5; break;
    case 5: 
      var $15=$1;
      var $16=(($15+152)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=$1;
      var $19=FUNCTION_TABLE[$17]($18, 0);
      var $20=$19;
      $self=$20;
      var $21=$self;
      var $22=(($21)|(0))!=0;
      if ($22) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $24=$self;
      var $25=(($24+8)|0);
      HEAP32[(($25)>>2)]=-1;
      var $26=$self;
      var $27=$26;
      var $28=(($27+12)|0);
      var $29=$28;
      var $30=HEAP32[(($29)>>2)];
      var $31=$30 & -2;
      HEAP32[(($29)>>2)]=$31;
      var $32=$self;
      var $33=$32;
      var $34=(($33+12)|0);
      var $35=$34;
      var $36=HEAP32[(($35)>>2)];
      var $37=$36 & -3;
      HEAP32[(($35)>>2)]=$37;
      var $38=$self;
      var $39=$38;
      var $40=(($39+12)|0);
      var $41=$40;
      var $42=HEAP32[(($41)>>2)];
      var $43=$42 & -13;
      var $44=$43 | 12;
      HEAP32[(($41)>>2)]=$44;
      var $45=$self;
      var $46=$45;
      var $47=(($46+12)|0);
      var $48=$47;
      var $49=HEAP32[(($48)>>2)];
      var $50=$49 & -17;
      var $51=$50 | 16;
      HEAP32[(($48)>>2)]=$51;
      var $52=$self;
      var $53=(($52+16)|0);
      HEAP32[(($53)>>2)]=0;
      label = 7; break;
    case 7: 
      var $55=$self;
      var $56=$55;
      return $56;
    default: assert(0, "bad label: " + label);
  }
}
function _fileio_readinto($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 52)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $pbuf=__stackBase__;
      var $n;
      var $len;
      $2=$self;
      $3=$args;
      var $4=$2;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0)) < 0;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $9=_err_closed();
      $1=$9;
      label = 12; break;
    case 3: 
      var $11=$2;
      var $12=$11;
      var $13=(($12+12)|0);
      var $14=$13;
      var $15=HEAP32[(($14)>>2)];
      var $16=$15 & 1;
      var $17=(($16)|(0))!=0;
      if ($17) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $19=_err_mode(((__str45181)|0));
      $1=$19;
      label = 12; break;
    case 5: 
      var $21=$3;
      var $22=__PyArg_ParseTuple_SizeT($21, ((__str46182)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$pbuf,tempInt));
      var $23=(($22)|(0))!=0;
      if ($23) { label = 7; break; } else { label = 6; break; }
    case 6: 
      $1=0;
      label = 12; break;
    case 7: 
      var $26=(($pbuf+8)|0);
      var $27=HEAP32[(($26)>>2)];
      $len=$27;
      var $28=___errno_location();
      HEAP32[(($28)>>2)]=0;
      var $29=$2;
      var $30=(($29+8)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($pbuf)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=$len;
      var $35=_read($31, $33, $34);
      $n=$35;
      _PyBuffer_Release($pbuf);
      var $36=$n;
      var $37=(($36)|(0)) < 0;
      if ($37) { label = 8; break; } else { label = 11; break; }
    case 8: 
      var $39=___errno_location();
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40)|(0))==11;
      if ($41) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $43=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $44=((($43)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$44;
      $1=__Py_NoneStruct;
      label = 12; break;
    case 10: 
      var $46=HEAP32[((_PyExc_IOError)>>2)];
      var $47=_PyErr_SetFromErrno($46);
      $1=0;
      label = 12; break;
    case 11: 
      var $49=$n;
      var $50=_PyLong_FromSsize_t($49);
      $1=$50;
      label = 12; break;
    case 12: 
      var $52=$1;
      STACKTOP = __stackBase__;
      return $52;
    default: assert(0, "bad label: " + label);
  }
}
function _fileio_write($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 52)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $pbuf=__stackBase__;
      var $n;
      var $len;
      $2=$self;
      $3=$args;
      var $4=$2;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0)) < 0;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $9=_err_closed();
      $1=$9;
      label = 12; break;
    case 3: 
      var $11=$2;
      var $12=$11;
      var $13=(($12+12)|0);
      var $14=$13;
      var $15=HEAP32[(($14)>>2)];
      var $16=$15 >>> 1;
      var $17=$16 & 1;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $20=_err_mode(((__str40176)|0));
      $1=$20;
      label = 12; break;
    case 5: 
      var $22=$3;
      var $23=__PyArg_ParseTuple_SizeT($22, ((__str44180)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$pbuf,tempInt));
      var $24=(($23)|(0))!=0;
      if ($24) { label = 7; break; } else { label = 6; break; }
    case 6: 
      $1=0;
      label = 12; break;
    case 7: 
      var $27=___errno_location();
      HEAP32[(($27)>>2)]=0;
      var $28=(($pbuf+8)|0);
      var $29=HEAP32[(($28)>>2)];
      $len=$29;
      var $30=$2;
      var $31=(($30+8)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($pbuf)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=$len;
      var $36=_write($32, $34, $35);
      $n=$36;
      _PyBuffer_Release($pbuf);
      var $37=$n;
      var $38=(($37)|(0)) < 0;
      if ($38) { label = 8; break; } else { label = 11; break; }
    case 8: 
      var $40=___errno_location();
      var $41=HEAP32[(($40)>>2)];
      var $42=(($41)|(0))==11;
      if ($42) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $44=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $45=((($44)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$45;
      $1=__Py_NoneStruct;
      label = 12; break;
    case 10: 
      var $47=HEAP32[((_PyExc_IOError)>>2)];
      var $48=_PyErr_SetFromErrno($47);
      $1=0;
      label = 12; break;
    case 11: 
      var $50=$n;
      var $51=_PyLong_FromSsize_t($50);
      $1=$51;
      label = 12; break;
    case 12: 
      var $53=$1;
      STACKTOP = __stackBase__;
      return $53;
    default: assert(0, "bad label: " + label);
  }
}
function _fileio_seek($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $posobj=__stackBase__;
      var $whence=(__stackBase__)+(4);
      $2=$self;
      $3=$args;
      HEAP32[(($whence)>>2)]=0;
      var $4=$2;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0)) < 0;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $9=_err_closed();
      $1=$9;
      label = 6; break;
    case 3: 
      var $11=$3;
      var $12=__PyArg_ParseTuple_SizeT($11, ((__str43179)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$posobj,HEAP32[(((tempInt)+(4))>>2)]=$whence,tempInt));
      var $13=(($12)|(0))!=0;
      if ($13) { label = 5; break; } else { label = 4; break; }
    case 4: 
      $1=0;
      label = 6; break;
    case 5: 
      var $16=$2;
      var $17=(($16+8)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=HEAP32[(($posobj)>>2)];
      var $20=HEAP32[(($whence)>>2)];
      var $21=_portable_lseek($18, $19, $20);
      $1=$21;
      label = 6; break;
    case 6: 
      var $23=$1;
      STACKTOP = __stackBase__;
      return $23;
    default: assert(0, "bad label: " + label);
  }
}
function _fileio_tell($self, $args) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$self;
      $3=$args;
      var $4=$2;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0)) < 0;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $9=_err_closed();
      $1=$9;
      label = 4; break;
    case 3: 
      var $11=$2;
      var $12=(($11+8)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=_portable_lseek($13, 0, 1);
      $1=$14;
      label = 4; break;
    case 4: 
      var $16=$1;
      return $16;
    default: assert(0, "bad label: " + label);
  }
}
function _fileio_truncate($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $posobj=__stackBase__;
      var $pos;
      var $ret;
      var $fd;
      $2=$self;
      $3=$args;
      HEAP32[(($posobj)>>2)]=0;
      var $4=$2;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      $fd=$6;
      var $7=$fd;
      var $8=(($7)|(0)) < 0;
      if ($8) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $10=_err_closed();
      $1=$10;
      label = 28; break;
    case 3: 
      var $12=$2;
      var $13=$12;
      var $14=(($13+12)|0);
      var $15=$14;
      var $16=HEAP32[(($15)>>2)];
      var $17=$16 >>> 1;
      var $18=$17 & 1;
      var $19=(($18)|(0))!=0;
      if ($19) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $21=_err_mode(((__str40176)|0));
      $1=$21;
      label = 28; break;
    case 5: 
      var $23=$3;
      var $24=__PyArg_ParseTuple_SizeT($23, ((__str41177)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$posobj,tempInt));
      var $25=(($24)|(0))!=0;
      if ($25) { label = 7; break; } else { label = 6; break; }
    case 6: 
      $1=0;
      label = 28; break;
    case 7: 
      var $28=HEAP32[(($posobj)>>2)];
      var $29=(($28)|(0))==((__Py_NoneStruct)|(0));
      if ($29) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $31=HEAP32[(($posobj)>>2)];
      var $32=(($31)|(0))==0;
      if ($32) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $34=$fd;
      var $35=_portable_lseek($34, 0, 1);
      HEAP32[(($posobj)>>2)]=$35;
      var $36=HEAP32[(($posobj)>>2)];
      var $37=(($36)|(0))==0;
      if ($37) { label = 10; break; } else { label = 11; break; }
    case 10: 
      $1=0;
      label = 28; break;
    case 11: 
      label = 13; break;
    case 12: 
      var $41=HEAP32[(($posobj)>>2)];
      var $42=(($41)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=((($43)+(1))|0);
      HEAP32[(($42)>>2)]=$44;
      label = 13; break;
    case 13: 
      var $46=HEAP32[(($posobj)>>2)];
      var $47=_PyLong_AsLong($46);
      $pos=$47;
      var $48=_PyErr_Occurred();
      var $49=(($48)|(0))!=0;
      if ($49) { label = 14; break; } else { label = 20; break; }
    case 14: 
      label = 15; break;
    case 15: 
      var $52=HEAP32[(($posobj)>>2)];
      var $53=(($52)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=((($54)-(1))|0);
      HEAP32[(($53)>>2)]=$55;
      var $56=(($55)|(0))!=0;
      if ($56) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 18; break;
    case 17: 
      var $59=HEAP32[(($posobj)>>2)];
      var $60=(($59+4)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=(($61+24)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=HEAP32[(($posobj)>>2)];
      FUNCTION_TABLE[$63]($64);
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      $1=0;
      label = 28; break;
    case 20: 
      var $68=___errno_location();
      HEAP32[(($68)>>2)]=0;
      var $69=$fd;
      var $70=$pos;
      var $71=_ftruncate($69, $70);
      $ret=$71;
      var $72=$ret;
      var $73=(($72)|(0))!=0;
      if ($73) { label = 21; break; } else { label = 27; break; }
    case 21: 
      label = 22; break;
    case 22: 
      var $76=HEAP32[(($posobj)>>2)];
      var $77=(($76)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=((($78)-(1))|0);
      HEAP32[(($77)>>2)]=$79;
      var $80=(($79)|(0))!=0;
      if ($80) { label = 23; break; } else { label = 24; break; }
    case 23: 
      label = 25; break;
    case 24: 
      var $83=HEAP32[(($posobj)>>2)];
      var $84=(($83+4)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=(($85+24)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=HEAP32[(($posobj)>>2)];
      FUNCTION_TABLE[$87]($88);
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $91=HEAP32[((_PyExc_IOError)>>2)];
      var $92=_PyErr_SetFromErrno($91);
      $1=0;
      label = 28; break;
    case 27: 
      var $94=HEAP32[(($posobj)>>2)];
      $1=$94;
      label = 28; break;
    case 28: 
      var $96=$1;
      STACKTOP = __stackBase__;
      return $96;
    default: assert(0, "bad label: " + label);
  }
}
function _fileio_close($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $2=$self;
      var $3=$2;
      var $4=$3;
      var $5=(($4+12)|0);
      var $6=$5;
      var $7=HEAP32[(($6)>>2)];
      var $8=$7 >>> 4;
      var $9=$8 & 1;
      var $10=(($9)|(0))!=0;
      if ($10) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $12=$2;
      var $13=(($12+8)|0);
      HEAP32[(($13)>>2)]=-1;
      var $14=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $15=((($14)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$15;
      $1=__Py_NoneStruct;
      label = 6; break;
    case 3: 
      var $17=$2;
      var $18=_internal_close($17);
      var $19=___errno_location();
      HEAP32[(($19)>>2)]=$18;
      var $20=___errno_location();
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21)|(0)) < 0;
      if ($22) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=0;
      label = 6; break;
    case 5: 
      var $25=$2;
      var $26=__PyObject_CallMethod_SizeT(_PyRawIOBase_Type, ((__str32163)|0), ((__str39175)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$25,tempInt));
      $1=$26;
      label = 6; break;
    case 6: 
      var $28=$1;
      STACKTOP = __stackBase__;
      return $28;
    default: assert(0, "bad label: " + label);
  }
}
function _fileio_seekable($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $pos;
      $2=$self;
      var $3=$2;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0)) < 0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=_err_closed();
      $1=$8;
      label = 14; break;
    case 3: 
      var $10=$2;
      var $11=$10;
      var $12=(($11+12)|0);
      var $13=$12;
      var $14=HEAP32[(($13)>>2)];
      var $15=$14 >>> 2;
      var $16=$15 & 3;
      var $17=$16 << 30;
      var $18=$17 >> 30;
      var $19=(($18)|(0)) < 0;
      if ($19) { label = 4; break; } else { label = 13; break; }
    case 4: 
      var $21=$2;
      var $22=(($21+8)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=_portable_lseek($23, 0, 1);
      $pos=$24;
      var $25=$pos;
      var $26=(($25)|(0))==0;
      if ($26) { label = 5; break; } else { label = 6; break; }
    case 5: 
      _PyErr_Clear();
      var $28=$2;
      var $29=$28;
      var $30=(($29+12)|0);
      var $31=$30;
      var $32=HEAP32[(($31)>>2)];
      var $33=$32 & -13;
      HEAP32[(($31)>>2)]=$33;
      label = 12; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $36=$pos;
      var $37=(($36)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=((($38)-(1))|0);
      HEAP32[(($37)>>2)]=$39;
      var $40=(($39)|(0))!=0;
      if ($40) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 10; break;
    case 9: 
      var $43=$pos;
      var $44=(($43+4)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=(($45+24)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=$pos;
      FUNCTION_TABLE[$47]($48);
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $51=$2;
      var $52=$51;
      var $53=(($52+12)|0);
      var $54=$53;
      var $55=HEAP32[(($54)>>2)];
      var $56=$55 & -13;
      var $57=$56 | 4;
      HEAP32[(($54)>>2)]=$57;
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $60=$2;
      var $61=$60;
      var $62=(($61+12)|0);
      var $63=$62;
      var $64=HEAP32[(($63)>>2)];
      var $65=$64 >>> 2;
      var $66=$65 & 3;
      var $67=$66 << 30;
      var $68=$67 >> 30;
      var $69=_PyBool_FromLong($68);
      $1=$69;
      label = 14; break;
    case 14: 
      var $71=$1;
      return $71;
    default: assert(0, "bad label: " + label);
  }
}
function _fileio_readable($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $2=$self;
      var $3=$2;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0)) < 0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=_err_closed();
      $1=$8;
      label = 4; break;
    case 3: 
      var $10=$2;
      var $11=$10;
      var $12=(($11+12)|0);
      var $13=$12;
      var $14=HEAP32[(($13)>>2)];
      var $15=$14 & 1;
      var $16=_PyBool_FromLong($15);
      $1=$16;
      label = 4; break;
    case 4: 
      var $18=$1;
      return $18;
    default: assert(0, "bad label: " + label);
  }
}
function _fileio_writable($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $2=$self;
      var $3=$2;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0)) < 0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=_err_closed();
      $1=$8;
      label = 4; break;
    case 3: 
      var $10=$2;
      var $11=$10;
      var $12=(($11+12)|0);
      var $13=$12;
      var $14=HEAP32[(($13)>>2)];
      var $15=$14 >>> 1;
      var $16=$15 & 1;
      var $17=_PyBool_FromLong($16);
      $1=$17;
      label = 4; break;
    case 4: 
      var $19=$1;
      return $19;
    default: assert(0, "bad label: " + label);
  }
}
function _fileio_fileno($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $2=$self;
      var $3=$2;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0)) < 0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=_err_closed();
      $1=$8;
      label = 4; break;
    case 3: 
      var $10=$2;
      var $11=(($10+8)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=_PyInt_FromLong($12);
      $1=$13;
      label = 4; break;
    case 4: 
      var $15=$1;
      return $15;
    default: assert(0, "bad label: " + label);
  }
}
function _fileio_isatty($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $res;
      $2=$self;
      var $3=$2;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0)) < 0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=_err_closed();
      $1=$8;
      label = 4; break;
    case 3: 
      var $10=$2;
      var $11=(($10+8)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=_isatty($12);
      $res=$13;
      var $14=$res;
      var $15=_PyBool_FromLong($14);
      $1=$15;
      label = 4; break;
    case 4: 
      var $17=$1;
      return $17;
    default: assert(0, "bad label: " + label);
  }
}
function _err_closed() {
  var label = 0;
  var $1=HEAP32[((_PyExc_ValueError)>>2)];
  _PyErr_SetString($1, ((__str38174)|0));
  return 0;
}
function _err_mode($action) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  $1=$action;
  var $2=HEAP32[((_PyExc_ValueError)>>2)];
  var $3=$1;
  var $4=_PyErr_Format($2, ((__str42178)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$3,tempInt));
  STACKTOP = __stackBase__;
  return 0;
}
function _new_buffersize($self, $currentsize) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $pos;
      var $end;
      var $st=__stackBase__;
      $2=$self;
      $3=$currentsize;
      var $4=$2;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=_fstat($6, $st);
      var $8=(($7)|(0))==0;
      if ($8) { label = 2; break; } else { label = 7; break; }
    case 2: 
      var $10=(($st+28)|0);
      var $11=HEAP32[(($10)>>2)];
      $end=$11;
      var $12=$2;
      var $13=(($12+8)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=_lseek($14, 0, 1);
      $pos=$15;
      var $16=$end;
      var $17=(($16)|(0)) >= 8192;
      if ($17) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $19=$end;
      var $20=$pos;
      var $21=(($19)|(0)) >= (($20)|(0));
      if ($21) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $23=$pos;
      var $24=(($23)|(0)) >= 0;
      if ($24) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $26=$3;
      var $27=$end;
      var $28=((($26)+($27))|0);
      var $29=$pos;
      var $30=((($28)-($29))|0);
      var $31=((($30)+(1))|0);
      $1=$31;
      label = 8; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $34=$3;
      var $35=$3;
      var $36=$35 >>> 3;
      var $37=((($34)+($36))|0);
      var $38=((($37)+(6))|0);
      $1=$38;
      label = 8; break;
    case 8: 
      var $40=$1;
      STACKTOP = __stackBase__;
      return $40;
    default: assert(0, "bad label: " + label);
  }
}
function __PyIOBase_check_closed($self, $args) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$self;
      $3=$args;
      var $4=$2;
      var $5=_iobase_closed($4);
      var $6=(($5)|(0))!=0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($8, ((__str191)|0));
      $1=0;
      label = 6; break;
    case 3: 
      var $10=$3;
      var $11=(($10)|(0))==((__Py_TrueStruct)|(0));
      if ($11) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=__Py_NoneStruct;
      label = 6; break;
    case 5: 
      var $14=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $15=((($14)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$15;
      $1=__Py_NoneStruct;
      label = 6; break;
    case 6: 
      var $17=$1;
      return $17;
    default: assert(0, "bad label: " + label);
  }
}
function _iobase_closed($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $res;
      var $closed;
      $2=$self;
      var $3=$2;
      var $4=HEAP32[((__PyIO_str_closed)>>2)];
      var $5=_PyObject_GetAttr($3, $4);
      $res=$5;
      var $6=$res;
      var $7=(($6)|(0))==0;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 9; break;
    case 3: 
      var $10=$res;
      var $11=_PyObject_IsTrue($10);
      $closed=$11;
      label = 4; break;
    case 4: 
      var $13=$res;
      var $14=(($13)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=((($15)-(1))|0);
      HEAP32[(($14)>>2)]=$16;
      var $17=(($16)|(0))!=0;
      if ($17) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 7; break;
    case 6: 
      var $20=$res;
      var $21=(($20+4)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22+24)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=$res;
      FUNCTION_TABLE[$24]($25);
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $28=$closed;
      $1=$28;
      label = 9; break;
    case 9: 
      var $30=$1;
      return $30;
    default: assert(0, "bad label: " + label);
  }
}
function __PyIOBase_finalize($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $res;
      var $tp=__stackBase__;
      var $v=(__stackBase__)+(4);
      var $tb=(__stackBase__)+(8);
      var $closed;
      var $is_zombie;
      var $refcnt;
      $2=$self;
      $closed=1;
      var $3=$2;
      var $4=(($3)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))==0;
      var $7=(($6)&(1));
      $is_zombie=$7;
      var $8=$is_zombie;
      var $9=(($8)|(0))!=0;
      if ($9) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $11=$2;
      var $12=(($11)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=((($13)+(1))|0);
      HEAP32[(($12)>>2)]=$14;
      label = 3; break;
    case 3: 
      _PyErr_Fetch($tp, $v, $tb);
      var $16=$2;
      var $17=HEAP32[((__PyIO_str_closed)>>2)];
      var $18=_PyObject_GetAttr($16, $17);
      $res=$18;
      var $19=$res;
      var $20=(($19)|(0))==0;
      if ($20) { label = 4; break; } else { label = 5; break; }
    case 4: 
      _PyErr_Clear();
      label = 13; break;
    case 5: 
      var $23=$res;
      var $24=_PyObject_IsTrue($23);
      $closed=$24;
      label = 6; break;
    case 6: 
      var $26=$res;
      var $27=(($26)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=((($28)-(1))|0);
      HEAP32[(($27)>>2)]=$29;
      var $30=(($29)|(0))!=0;
      if ($30) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 9; break;
    case 8: 
      var $33=$res;
      var $34=(($33+4)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35+24)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=$res;
      FUNCTION_TABLE[$37]($38);
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $41=$closed;
      var $42=(($41)|(0))==-1;
      if ($42) { label = 11; break; } else { label = 12; break; }
    case 11: 
      _PyErr_Clear();
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $46=$closed;
      var $47=(($46)|(0))==0;
      if ($47) { label = 14; break; } else { label = 23; break; }
    case 14: 
      var $49=$2;
      var $50=HEAP32[((__PyIO_str_close)>>2)];
      var $51=_PyObject_CallMethodObjArgs($49, $50, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $res=$51;
      var $52=$res;
      var $53=(($52)|(0))==0;
      if ($53) { label = 15; break; } else { label = 16; break; }
    case 15: 
      _PyErr_Clear();
      label = 22; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $57=$res;
      var $58=(($57)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=((($59)-(1))|0);
      HEAP32[(($58)>>2)]=$60;
      var $61=(($60)|(0))!=0;
      if ($61) { label = 18; break; } else { label = 19; break; }
    case 18: 
      label = 20; break;
    case 19: 
      var $64=$res;
      var $65=(($64+4)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66+24)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=$res;
      FUNCTION_TABLE[$68]($69);
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $74=HEAP32[(($tp)>>2)];
      var $75=HEAP32[(($v)>>2)];
      var $76=HEAP32[(($tb)>>2)];
      _PyErr_Restore($74, $75, $76);
      var $77=$is_zombie;
      var $78=(($77)|(0))!=0;
      if ($78) { label = 24; break; } else { label = 27; break; }
    case 24: 
      var $80=$2;
      var $81=(($80)|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=((($82)-(1))|0);
      HEAP32[(($81)>>2)]=$83;
      var $84=(($83)|(0))!=0;
      if ($84) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $86=$2;
      var $87=(($86)|0);
      var $88=HEAP32[(($87)>>2)];
      $refcnt=$88;
      var $89=$2;
      var $90=(($89)|0);
      HEAP32[(($90)>>2)]=1;
      var $91=$refcnt;
      var $92=$2;
      var $93=(($92)|0);
      HEAP32[(($93)>>2)]=$91;
      $1=-1;
      label = 28; break;
    case 26: 
      label = 27; break;
    case 27: 
      $1=0;
      label = 28; break;
    case 28: 
      var $97=$1;
      STACKTOP = __stackBase__;
      return $97;
    default: assert(0, "bad label: " + label);
  }
}
function __PyIOBase_check_seekable($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $res;
      var $_py_tmp;
      $2=$self;
      $3=$args;
      var $4=$2;
      var $5=HEAP32[((__PyIO_str_seekable)>>2)];
      var $6=_PyObject_CallMethodObjArgs($4, $5, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $res=$6;
      var $7=$res;
      var $8=(($7)|(0))==0;
      if ($8) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 22; break;
    case 3: 
      var $11=$res;
      var $12=(($11)|(0))!=((__Py_TrueStruct)|(0));
      if ($12) { label = 4; break; } else { label = 14; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $15=$res;
      var $16=(($15)|(0))!=0;
      if ($16) { label = 6; break; } else { label = 12; break; }
    case 6: 
      var $18=$res;
      $_py_tmp=$18;
      $res=0;
      label = 7; break;
    case 7: 
      var $20=$_py_tmp;
      var $21=(($20)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=((($22)-(1))|0);
      HEAP32[(($21)>>2)]=$23;
      var $24=(($23)|(0))!=0;
      if ($24) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 10; break;
    case 9: 
      var $27=$_py_tmp;
      var $28=(($27+4)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29+24)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=$_py_tmp;
      FUNCTION_TABLE[$31]($32);
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $37=HEAP32[((_PyExc_IOError)>>2)];
      _PyErr_SetString($37, ((__str1192)|0));
      $1=0;
      label = 22; break;
    case 14: 
      var $39=$3;
      var $40=(($39)|(0))==((__Py_TrueStruct)|(0));
      if ($40) { label = 15; break; } else { label = 21; break; }
    case 15: 
      label = 16; break;
    case 16: 
      var $43=$res;
      var $44=(($43)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=((($45)-(1))|0);
      HEAP32[(($44)>>2)]=$46;
      var $47=(($46)|(0))!=0;
      if ($47) { label = 17; break; } else { label = 18; break; }
    case 17: 
      label = 19; break;
    case 18: 
      var $50=$res;
      var $51=(($50+4)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=(($52+24)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=$res;
      FUNCTION_TABLE[$54]($55);
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $59=$res;
      $1=$59;
      label = 22; break;
    case 22: 
      var $61=$1;
      STACKTOP = __stackBase__;
      return $61;
    default: assert(0, "bad label: " + label);
  }
}
function __PyIOBase_check_readable($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $res;
      var $_py_tmp;
      $2=$self;
      $3=$args;
      var $4=$2;
      var $5=HEAP32[((__PyIO_str_readable)>>2)];
      var $6=_PyObject_CallMethodObjArgs($4, $5, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $res=$6;
      var $7=$res;
      var $8=(($7)|(0))==0;
      if ($8) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 22; break;
    case 3: 
      var $11=$res;
      var $12=(($11)|(0))!=((__Py_TrueStruct)|(0));
      if ($12) { label = 4; break; } else { label = 14; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $15=$res;
      var $16=(($15)|(0))!=0;
      if ($16) { label = 6; break; } else { label = 12; break; }
    case 6: 
      var $18=$res;
      $_py_tmp=$18;
      $res=0;
      label = 7; break;
    case 7: 
      var $20=$_py_tmp;
      var $21=(($20)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=((($22)-(1))|0);
      HEAP32[(($21)>>2)]=$23;
      var $24=(($23)|(0))!=0;
      if ($24) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 10; break;
    case 9: 
      var $27=$_py_tmp;
      var $28=(($27+4)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29+24)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=$_py_tmp;
      FUNCTION_TABLE[$31]($32);
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $37=HEAP32[((_PyExc_IOError)>>2)];
      _PyErr_SetString($37, ((__str2193)|0));
      $1=0;
      label = 22; break;
    case 14: 
      var $39=$3;
      var $40=(($39)|(0))==((__Py_TrueStruct)|(0));
      if ($40) { label = 15; break; } else { label = 21; break; }
    case 15: 
      label = 16; break;
    case 16: 
      var $43=$res;
      var $44=(($43)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=((($45)-(1))|0);
      HEAP32[(($44)>>2)]=$46;
      var $47=(($46)|(0))!=0;
      if ($47) { label = 17; break; } else { label = 18; break; }
    case 17: 
      label = 19; break;
    case 18: 
      var $50=$res;
      var $51=(($50+4)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=(($52+24)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=$res;
      FUNCTION_TABLE[$54]($55);
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $59=$res;
      $1=$59;
      label = 22; break;
    case 22: 
      var $61=$1;
      STACKTOP = __stackBase__;
      return $61;
    default: assert(0, "bad label: " + label);
  }
}
function __PyIOBase_check_writable($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $res;
      var $_py_tmp;
      $2=$self;
      $3=$args;
      var $4=$2;
      var $5=HEAP32[((__PyIO_str_writable)>>2)];
      var $6=_PyObject_CallMethodObjArgs($4, $5, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $res=$6;
      var $7=$res;
      var $8=(($7)|(0))==0;
      if ($8) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 22; break;
    case 3: 
      var $11=$res;
      var $12=(($11)|(0))!=((__Py_TrueStruct)|(0));
      if ($12) { label = 4; break; } else { label = 14; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $15=$res;
      var $16=(($15)|(0))!=0;
      if ($16) { label = 6; break; } else { label = 12; break; }
    case 6: 
      var $18=$res;
      $_py_tmp=$18;
      $res=0;
      label = 7; break;
    case 7: 
      var $20=$_py_tmp;
      var $21=(($20)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=((($22)-(1))|0);
      HEAP32[(($21)>>2)]=$23;
      var $24=(($23)|(0))!=0;
      if ($24) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 10; break;
    case 9: 
      var $27=$_py_tmp;
      var $28=(($27+4)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29+24)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=$_py_tmp;
      FUNCTION_TABLE[$31]($32);
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $37=HEAP32[((_PyExc_IOError)>>2)];
      _PyErr_SetString($37, ((__str3194)|0));
      $1=0;
      label = 22; break;
    case 14: 
      var $39=$3;
      var $40=(($39)|(0))==((__Py_TrueStruct)|(0));
      if ($40) { label = 15; break; } else { label = 21; break; }
    case 15: 
      label = 16; break;
    case 16: 
      var $43=$res;
      var $44=(($43)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=((($45)-(1))|0);
      HEAP32[(($44)>>2)]=$46;
      var $47=(($46)|(0))!=0;
      if ($47) { label = 17; break; } else { label = 18; break; }
    case 17: 
      label = 19; break;
    case 18: 
      var $50=$res;
      var $51=(($50+4)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=(($52+24)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=$res;
      FUNCTION_TABLE[$54]($55);
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $59=$res;
      $1=$59;
      label = 22; break;
    case 22: 
      var $61=$1;
      STACKTOP = __stackBase__;
      return $61;
    default: assert(0, "bad label: " + label);
  }
}
function _iobase_traverse($self, $visit, $arg) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $vret;
      $2=$self;
      $3=$visit;
      $4=$arg;
      label = 2; break;
    case 2: 
      var $6=$2;
      var $7=(($6+8)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $11=$3;
      var $12=$2;
      var $13=(($12+8)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$4;
      var $16=FUNCTION_TABLE[$11]($14, $15);
      $vret=$16;
      var $17=$vret;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $20=$vret;
      $1=$20;
      label = 8; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      $1=0;
      label = 8; break;
    case 8: 
      var $25=$1;
      return $25;
    default: assert(0, "bad label: " + label);
  }
}
function _iobase_clear($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $_py_tmp;
      $2=$self;
      var $3=$2;
      var $4=$3;
      var $5=__PyIOBase_finalize($4);
      var $6=(($5)|(0)) < 0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=-1;
      label = 13; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $10=$2;
      var $11=(($10+8)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12)|(0))!=0;
      if ($13) { label = 5; break; } else { label = 11; break; }
    case 5: 
      var $15=$2;
      var $16=(($15+8)|0);
      var $17=HEAP32[(($16)>>2)];
      $_py_tmp=$17;
      var $18=$2;
      var $19=(($18+8)|0);
      HEAP32[(($19)>>2)]=0;
      label = 6; break;
    case 6: 
      var $21=$_py_tmp;
      var $22=(($21)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=((($23)-(1))|0);
      HEAP32[(($22)>>2)]=$24;
      var $25=(($24)|(0))!=0;
      if ($25) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 9; break;
    case 8: 
      var $28=$_py_tmp;
      var $29=(($28+4)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=(($30+24)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=$_py_tmp;
      FUNCTION_TABLE[$32]($33);
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      $1=0;
      label = 13; break;
    case 13: 
      var $39=$1;
      return $39;
    default: assert(0, "bad label: " + label);
  }
}
function _iobase_iter($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $2=$self;
      var $3=$2;
      var $4=__PyIOBase_check_closed($3, __Py_TrueStruct);
      var $5=(($4)|(0))==0;
      if ($5) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 4; break;
    case 3: 
      var $8=$2;
      var $9=(($8)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=((($10)+(1))|0);
      HEAP32[(($9)>>2)]=$11;
      var $12=$2;
      $1=$12;
      label = 4; break;
    case 4: 
      var $14=$1;
      return $14;
    default: assert(0, "bad label: " + label);
  }
}
function _iobase_iternext($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $line;
      $2=$self;
      var $3=$2;
      var $4=HEAP32[((__PyIO_str_readline)>>2)];
      var $5=_PyObject_CallMethodObjArgs($3, $4, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $line=$5;
      var $6=$line;
      var $7=(($6)|(0))==0;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 11; break;
    case 3: 
      var $10=$line;
      var $11=_PyObject_Size($10);
      var $12=(($11)|(0))==0;
      if ($12) { label = 4; break; } else { label = 10; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $15=$line;
      var $16=(($15)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=((($17)-(1))|0);
      HEAP32[(($16)>>2)]=$18;
      var $19=(($18)|(0))!=0;
      if ($19) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 8; break;
    case 7: 
      var $22=$line;
      var $23=(($22+4)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24+24)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$line;
      FUNCTION_TABLE[$26]($27);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      $1=0;
      label = 11; break;
    case 10: 
      var $31=$line;
      $1=$31;
      label = 11; break;
    case 11: 
      var $33=$1;
      STACKTOP = __stackBase__;
      return $33;
    default: assert(0, "bad label: " + label);
  }
}
function _iobase_dealloc($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $g;
      var $_py_tmp;
      $1=$self;
      var $2=$1;
      var $3=$2;
      var $4=__PyIOBase_finalize($3);
      var $5=(($4)|(0)) < 0;
      if ($5) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $7=$1;
      var $8=$7;
      var $9=(($8+4)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10+84)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=$12 & 512;
      var $14=(($13)|(0))!=0;
      if ($14) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $16=$1;
      var $17=$16;
      var $18=(($17+4)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=$19;
      var $21=(($20)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=((($22)+(1))|0);
      HEAP32[(($21)>>2)]=$23;
      label = 4; break;
    case 4: 
      label = 22; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $27=$1;
      var $28=$27;
      var $29=((($28)-(12))|0);
      $g=$29;
      var $30=$g;
      var $31=$30;
      var $32=(($31+8)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33)|(0))!=-2;
      if ($34) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 9; break;
    case 8: 
      ___assert_func(((__str41236)|0), 291, ((___func___iobase_dealloc)|0), ((__str44239)|0));
      throw "Reached an unreachable!";
      label = 9; break;
    case 9: 
      var $39=$g;
      var $40=$39;
      var $41=(($40+8)|0);
      HEAP32[(($41)>>2)]=-2;
      var $42=$g;
      var $43=$42;
      var $44=(($43)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=$g;
      var $47=$46;
      var $48=(($47+4)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=$49;
      var $51=(($50)|0);
      HEAP32[(($51)>>2)]=$45;
      var $52=$g;
      var $53=$52;
      var $54=(($53+4)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=$g;
      var $57=$56;
      var $58=(($57)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=$59;
      var $61=(($60+4)|0);
      HEAP32[(($61)>>2)]=$55;
      var $62=$g;
      var $63=$62;
      var $64=(($63)|0);
      HEAP32[(($64)>>2)]=0;
      label = 10; break;
    case 10: 
      var $66=$1;
      var $67=(($66+12)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=(($68)|(0))!=0;
      if ($69) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $71=$1;
      var $72=$71;
      _PyObject_ClearWeakRefs($72);
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $75=$1;
      var $76=(($75+8)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=(($77)|(0))!=0;
      if ($78) { label = 14; break; } else { label = 20; break; }
    case 14: 
      var $80=$1;
      var $81=(($80+8)|0);
      var $82=HEAP32[(($81)>>2)];
      $_py_tmp=$82;
      var $83=$1;
      var $84=(($83+8)|0);
      HEAP32[(($84)>>2)]=0;
      label = 15; break;
    case 15: 
      var $86=$_py_tmp;
      var $87=(($86)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=((($88)-(1))|0);
      HEAP32[(($87)>>2)]=$89;
      var $90=(($89)|(0))!=0;
      if ($90) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 18; break;
    case 17: 
      var $93=$_py_tmp;
      var $94=(($93+4)|0);
      var $95=HEAP32[(($94)>>2)];
      var $96=(($95+24)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=$_py_tmp;
      FUNCTION_TABLE[$97]($98);
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $103=$1;
      var $104=$103;
      var $105=(($104+4)|0);
      var $106=HEAP32[(($105)>>2)];
      var $107=(($106+160)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=$1;
      var $110=$109;
      var $111=$110;
      FUNCTION_TABLE[$108]($111);
      label = 22; break;
    case 22: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _iobase_seekable($self, $args) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$args;
  var $3=HEAP32[((((__Py_ZeroStruct)|0))>>2)];
  var $4=((($3)+(1))|0);
  HEAP32[((((__Py_ZeroStruct)|0))>>2)]=$4;
  return __Py_ZeroStruct;
}
function _iobase_readable($self, $args) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$args;
  var $3=HEAP32[((((__Py_ZeroStruct)|0))>>2)];
  var $4=((($3)+(1))|0);
  HEAP32[((((__Py_ZeroStruct)|0))>>2)]=$4;
  return __Py_ZeroStruct;
}
function _iobase_writable($self, $args) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$args;
  var $3=HEAP32[((((__Py_ZeroStruct)|0))>>2)];
  var $4=((($3)+(1))|0);
  HEAP32[((((__Py_ZeroStruct)|0))>>2)]=$4;
  return __Py_ZeroStruct;
}
function _rawiobase_read($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $n=__stackBase__;
      var $b;
      var $res;
      $2=$self;
      $3=$args;
      HEAP32[(($n)>>2)]=-1;
      var $4=$3;
      var $5=__PyArg_ParseTuple_SizeT($4, ((__str10205)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$n,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 34; break;
    case 3: 
      var $9=HEAP32[(($n)>>2)];
      var $10=(($9)|(0)) < 0;
      if ($10) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $12=$2;
      var $13=__PyObject_CallMethod_SizeT($12, ((__str7202)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=$13;
      label = 34; break;
    case 5: 
      var $15=HEAP32[(($n)>>2)];
      var $16=_PyByteArray_FromStringAndSize(0, $15);
      $b=$16;
      var $17=$b;
      var $18=(($17)|(0))==0;
      if ($18) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $1=0;
      label = 34; break;
    case 7: 
      var $21=$2;
      var $22=HEAP32[((__PyIO_str_readinto)>>2)];
      var $23=$b;
      var $24=_PyObject_CallMethodObjArgs($21, $22, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$23,HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
      $res=$24;
      var $25=$res;
      var $26=(($25)|(0))==0;
      if ($26) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $28=$res;
      var $29=(($28)|(0))==((__Py_NoneStruct)|(0));
      if ($29) { label = 9; break; } else { label = 15; break; }
    case 9: 
      label = 10; break;
    case 10: 
      var $32=$b;
      var $33=(($32)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=((($34)-(1))|0);
      HEAP32[(($33)>>2)]=$35;
      var $36=(($35)|(0))!=0;
      if ($36) { label = 11; break; } else { label = 12; break; }
    case 11: 
      label = 13; break;
    case 12: 
      var $39=$b;
      var $40=(($39+4)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($41+24)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=$b;
      FUNCTION_TABLE[$43]($44);
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $47=$res;
      $1=$47;
      label = 34; break;
    case 15: 
      var $49=$res;
      var $50=HEAP32[((_PyExc_ValueError)>>2)];
      var $51=_PyNumber_AsSsize_t($49, $50);
      HEAP32[(($n)>>2)]=$51;
      label = 16; break;
    case 16: 
      var $53=$res;
      var $54=(($53)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=((($55)-(1))|0);
      HEAP32[(($54)>>2)]=$56;
      var $57=(($56)|(0))!=0;
      if ($57) { label = 17; break; } else { label = 18; break; }
    case 17: 
      label = 19; break;
    case 18: 
      var $60=$res;
      var $61=(($60+4)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=(($62+24)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=$res;
      FUNCTION_TABLE[$64]($65);
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $68=HEAP32[(($n)>>2)];
      var $69=(($68)|(0))==-1;
      if ($69) { label = 21; break; } else { label = 28; break; }
    case 21: 
      var $71=_PyErr_Occurred();
      var $72=(($71)|(0))!=0;
      if ($72) { label = 22; break; } else { label = 28; break; }
    case 22: 
      label = 23; break;
    case 23: 
      var $75=$b;
      var $76=(($75)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=((($77)-(1))|0);
      HEAP32[(($76)>>2)]=$78;
      var $79=(($78)|(0))!=0;
      if ($79) { label = 24; break; } else { label = 25; break; }
    case 24: 
      label = 26; break;
    case 25: 
      var $82=$b;
      var $83=(($82+4)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=(($84+24)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=$b;
      FUNCTION_TABLE[$86]($87);
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      $1=0;
      label = 34; break;
    case 28: 
      var $91=$b;
      var $92=_PyByteArray_AsString($91);
      var $93=HEAP32[(($n)>>2)];
      var $94=_PyString_FromStringAndSize($92, $93);
      $res=$94;
      label = 29; break;
    case 29: 
      var $96=$b;
      var $97=(($96)|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=((($98)-(1))|0);
      HEAP32[(($97)>>2)]=$99;
      var $100=(($99)|(0))!=0;
      if ($100) { label = 30; break; } else { label = 31; break; }
    case 30: 
      label = 32; break;
    case 31: 
      var $103=$b;
      var $104=(($103+4)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=(($105+24)|0);
      var $107=HEAP32[(($106)>>2)];
      var $108=$b;
      FUNCTION_TABLE[$107]($108);
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      var $111=$res;
      $1=$111;
      label = 34; break;
    case 34: 
      var $113=$1;
      STACKTOP = __stackBase__;
      return $113;
    default: assert(0, "bad label: " + label);
  }
}
function _rawiobase_readall($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $r;
      var $chunks;
      var $result;
      var $data;
      $2=$self;
      $3=$args;
      var $4=_PyList_New(0);
      $chunks=$4;
      var $5=$chunks;
      var $6=(($5)|(0))==0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 65; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $10=$2;
      var $11=__PyObject_CallMethod_SizeT($10, ((__str6201)|0), ((__str8203)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=8192,tempInt));
      $data=$11;
      var $12=$data;
      var $13=(($12)|(0))!=0;
      if ($13) { label = 13; break; } else { label = 5; break; }
    case 5: 
      var $15=__PyIO_trap_eintr();
      var $16=(($15)|(0))!=0;
      if ($16) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 4; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $20=$chunks;
      var $21=(($20)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=((($22)-(1))|0);
      HEAP32[(($21)>>2)]=$23;
      var $24=(($23)|(0))!=0;
      if ($24) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 11; break;
    case 10: 
      var $27=$chunks;
      var $28=(($27+4)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29+24)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=$chunks;
      FUNCTION_TABLE[$31]($32);
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      $1=0;
      label = 65; break;
    case 13: 
      var $36=$data;
      var $37=(($36)|(0))==((__Py_NoneStruct)|(0));
      if ($37) { label = 14; break; } else { label = 27; break; }
    case 14: 
      var $39=$chunks;
      var $40=$39;
      var $41=(($40+8)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($42)|(0))==0;
      if ($43) { label = 15; break; } else { label = 21; break; }
    case 15: 
      label = 16; break;
    case 16: 
      var $46=$chunks;
      var $47=(($46)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=((($48)-(1))|0);
      HEAP32[(($47)>>2)]=$49;
      var $50=(($49)|(0))!=0;
      if ($50) { label = 17; break; } else { label = 18; break; }
    case 17: 
      label = 19; break;
    case 18: 
      var $53=$chunks;
      var $54=(($53+4)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=(($55+24)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=$chunks;
      FUNCTION_TABLE[$57]($58);
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $61=$data;
      $1=$61;
      label = 65; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $64=$data;
      var $65=(($64)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=((($66)-(1))|0);
      HEAP32[(($65)>>2)]=$67;
      var $68=(($67)|(0))!=0;
      if ($68) { label = 23; break; } else { label = 24; break; }
    case 23: 
      label = 25; break;
    case 24: 
      var $71=$data;
      var $72=(($71+4)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=(($73+24)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=$data;
      FUNCTION_TABLE[$75]($76);
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 59; break;
    case 27: 
      var $80=$data;
      var $81=(($80+4)|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=(($82+84)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=$84 & 134217728;
      var $86=(($85)|(0))!=0;
      if ($86) { label = 39; break; } else { label = 28; break; }
    case 28: 
      label = 29; break;
    case 29: 
      var $89=$chunks;
      var $90=(($89)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=((($91)-(1))|0);
      HEAP32[(($90)>>2)]=$92;
      var $93=(($92)|(0))!=0;
      if ($93) { label = 30; break; } else { label = 31; break; }
    case 30: 
      label = 32; break;
    case 31: 
      var $96=$chunks;
      var $97=(($96+4)|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=(($98+24)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=$chunks;
      FUNCTION_TABLE[$100]($101);
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      var $105=$data;
      var $106=(($105)|0);
      var $107=HEAP32[(($106)>>2)];
      var $108=((($107)-(1))|0);
      HEAP32[(($106)>>2)]=$108;
      var $109=(($108)|(0))!=0;
      if ($109) { label = 35; break; } else { label = 36; break; }
    case 35: 
      label = 37; break;
    case 36: 
      var $112=$data;
      var $113=(($112+4)|0);
      var $114=HEAP32[(($113)>>2)];
      var $115=(($114+24)|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=$data;
      FUNCTION_TABLE[$116]($117);
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      var $120=HEAP32[((_PyExc_TypeError)>>2)];
      _PyErr_SetString($120, ((__str9204)|0));
      $1=0;
      label = 65; break;
    case 39: 
      var $122=$data;
      var $123=$122;
      var $124=(($123+8)|0);
      var $125=HEAP32[(($124)>>2)];
      var $126=(($125)|(0))==0;
      if ($126) { label = 40; break; } else { label = 46; break; }
    case 40: 
      label = 41; break;
    case 41: 
      var $129=$data;
      var $130=(($129)|0);
      var $131=HEAP32[(($130)>>2)];
      var $132=((($131)-(1))|0);
      HEAP32[(($130)>>2)]=$132;
      var $133=(($132)|(0))!=0;
      if ($133) { label = 42; break; } else { label = 43; break; }
    case 42: 
      label = 44; break;
    case 43: 
      var $136=$data;
      var $137=(($136+4)|0);
      var $138=HEAP32[(($137)>>2)];
      var $139=(($138+24)|0);
      var $140=HEAP32[(($139)>>2)];
      var $141=$data;
      FUNCTION_TABLE[$140]($141);
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      label = 59; break;
    case 46: 
      var $145=$chunks;
      var $146=$data;
      var $147=_PyList_Append($145, $146);
      $r=$147;
      label = 47; break;
    case 47: 
      var $149=$data;
      var $150=(($149)|0);
      var $151=HEAP32[(($150)>>2)];
      var $152=((($151)-(1))|0);
      HEAP32[(($150)>>2)]=$152;
      var $153=(($152)|(0))!=0;
      if ($153) { label = 48; break; } else { label = 49; break; }
    case 48: 
      label = 50; break;
    case 49: 
      var $156=$data;
      var $157=(($156+4)|0);
      var $158=HEAP32[(($157)>>2)];
      var $159=(($158+24)|0);
      var $160=HEAP32[(($159)>>2)];
      var $161=$data;
      FUNCTION_TABLE[$160]($161);
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      var $164=$r;
      var $165=(($164)|(0)) < 0;
      if ($165) { label = 52; break; } else { label = 58; break; }
    case 52: 
      label = 53; break;
    case 53: 
      var $168=$chunks;
      var $169=(($168)|0);
      var $170=HEAP32[(($169)>>2)];
      var $171=((($170)-(1))|0);
      HEAP32[(($169)>>2)]=$171;
      var $172=(($171)|(0))!=0;
      if ($172) { label = 54; break; } else { label = 55; break; }
    case 54: 
      label = 56; break;
    case 55: 
      var $175=$chunks;
      var $176=(($175+4)|0);
      var $177=HEAP32[(($176)>>2)];
      var $178=(($177+24)|0);
      var $179=HEAP32[(($178)>>2)];
      var $180=$chunks;
      FUNCTION_TABLE[$179]($180);
      label = 56; break;
    case 56: 
      label = 57; break;
    case 57: 
      $1=0;
      label = 65; break;
    case 58: 
      label = 4; break;
    case 59: 
      var $185=HEAP32[((__PyIO_empty_bytes)>>2)];
      var $186=$chunks;
      var $187=__PyString_Join($185, $186);
      $result=$187;
      label = 60; break;
    case 60: 
      var $189=$chunks;
      var $190=(($189)|0);
      var $191=HEAP32[(($190)>>2)];
      var $192=((($191)-(1))|0);
      HEAP32[(($190)>>2)]=$192;
      var $193=(($192)|(0))!=0;
      if ($193) { label = 61; break; } else { label = 62; break; }
    case 61: 
      label = 63; break;
    case 62: 
      var $196=$chunks;
      var $197=(($196+4)|0);
      var $198=HEAP32[(($197)>>2)];
      var $199=(($198+24)|0);
      var $200=HEAP32[(($199)>>2)];
      var $201=$chunks;
      FUNCTION_TABLE[$200]($201);
      label = 63; break;
    case 63: 
      label = 64; break;
    case 64: 
      var $204=$result;
      $1=$204;
      label = 65; break;
    case 65: 
      var $206=$1;
      STACKTOP = __stackBase__;
      return $206;
    default: assert(0, "bad label: " + label);
  }
}
function _iobase_closed_get($self, $context) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$context;
  var $3=$1;
  var $4=_PyObject_HasAttrString($3, ((__str12207)|0));
  var $5=_PyBool_FromLong($4);
  return $5;
}
function _iobase_seek($self, $args) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$args;
  var $3=_iobase_unsupported(((__str13208)|0));
  return $3;
}
function _iobase_tell($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  $1=$self;
  $2=$args;
  var $3=$1;
  var $4=__PyObject_CallMethod_SizeT($3, ((__str13208)|0), ((__str43238)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,HEAP32[(((tempInt)+(4))>>2)]=1,tempInt));
  STACKTOP = __stackBase__;
  return $4;
}
function _iobase_truncate($self, $args) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$args;
  var $3=_iobase_unsupported(((__str15210)|0));
  return $3;
}
function _iobase_flush($self, $args) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$self;
      $3=$args;
      var $4=$2;
      var $5=_PyObject_HasAttrString($4, ((__str12207)|0));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($8, ((__str191)|0));
      $1=0;
      label = 4; break;
    case 3: 
      var $10=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $11=((($10)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$11;
      $1=__Py_NoneStruct;
      label = 4; break;
    case 4: 
      var $13=$1;
      return $13;
    default: assert(0, "bad label: " + label);
  }
}
function _iobase_close($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $res;
      $2=$self;
      $3=$args;
      var $4=$2;
      var $5=_PyObject_HasAttrString($4, ((__str12207)|0));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $9=((($8)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$9;
      $1=__Py_NoneStruct;
      label = 16; break;
    case 3: 
      var $11=$2;
      var $12=HEAP32[((__PyIO_str_flush)>>2)];
      var $13=_PyObject_CallMethodObjArgs($11, $12, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $res=$13;
      var $14=$2;
      var $15=_PyObject_SetAttrString($14, ((__str12207)|0), __Py_TrueStruct);
      var $16=$res;
      var $17=(($16)|(0))==0;
      if ($17) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=0;
      label = 16; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $21=$res;
      var $22=(($21)|(0))==0;
      if ($22) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 14; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $26=$res;
      var $27=(($26)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=((($28)-(1))|0);
      HEAP32[(($27)>>2)]=$29;
      var $30=(($29)|(0))!=0;
      if ($30) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 12; break;
    case 11: 
      var $33=$res;
      var $34=(($33+4)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35+24)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=$res;
      FUNCTION_TABLE[$37]($38);
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $43=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $44=((($43)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$44;
      $1=__Py_NoneStruct;
      label = 16; break;
    case 16: 
      var $46=$1;
      STACKTOP = __stackBase__;
      return $46;
    default: assert(0, "bad label: " + label);
  }
}
function _iobase_fileno($self, $args) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$args;
  var $3=_iobase_unsupported(((__str25220)|0));
  return $3;
}
function _iobase_isatty($self, $args) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$self;
      $3=$args;
      var $4=$2;
      var $5=__PyIOBase_check_closed($4, __Py_TrueStruct);
      var $6=(($5)|(0))==0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 4; break;
    case 3: 
      var $9=HEAP32[((((__Py_ZeroStruct)|0))>>2)];
      var $10=((($9)+(1))|0);
      HEAP32[((((__Py_ZeroStruct)|0))>>2)]=$10;
      $1=__Py_ZeroStruct;
      label = 4; break;
    case 4: 
      var $12=$1;
      return $12;
    default: assert(0, "bad label: " + label);
  }
}
function _iobase_enter($self, $args) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$self;
      $3=$args;
      var $4=$2;
      var $5=__PyIOBase_check_closed($4, __Py_TrueStruct);
      var $6=(($5)|(0))==0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 4; break;
    case 3: 
      var $9=$2;
      var $10=(($9)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=((($11)+(1))|0);
      HEAP32[(($10)>>2)]=$12;
      var $13=$2;
      $1=$13;
      label = 4; break;
    case 4: 
      var $15=$1;
      return $15;
    default: assert(0, "bad label: " + label);
  }
}
function _iobase_exit($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  $1=$self;
  $2=$args;
  var $3=$1;
  var $4=HEAP32[((__PyIO_str_close)>>2)];
  var $5=_PyObject_CallMethodObjArgs($3, $4, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
  STACKTOP = __stackBase__;
  return $5;
}
function _iobase_readline($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $limit=__stackBase__;
      var $has_peek;
      var $buffer;
      var $result;
      var $old_size;
      var $nreadahead;
      var $b;
      var $readahead;
      var $n;
      var $buf;
      $2=$self;
      $3=$args;
      HEAP32[(($limit)>>2)]=-1;
      $has_peek=0;
      $old_size=-1;
      var $4=$3;
      var $5=__PyArg_ParseTuple_SizeT($4, ((__str36231)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=((FUNCTION_TABLE_OFFSET + 242)),HEAP32[(((tempInt)+(4))>>2)]=$limit,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 120; break;
    case 3: 
      var $9=$2;
      var $10=_PyObject_HasAttrString($9, ((__str37232)|0));
      var $11=(($10)|(0))!=0;
      if ($11) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $has_peek=1;
      label = 5; break;
    case 5: 
      var $14=_PyByteArray_FromStringAndSize(0, 0);
      $buffer=$14;
      var $15=$buffer;
      var $16=(($15)|(0))==0;
      if ($16) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $1=0;
      label = 120; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $20=HEAP32[(($limit)>>2)];
      var $21=(($20)|(0)) < 0;
      if ($21) { var $30 = 1;label = 10; break; } else { label = 9; break; }
    case 9: 
      var $23=$buffer;
      var $24=$23;
      var $25=(($24+8)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=HEAP32[(($limit)>>2)];
      var $28=(($26)|(0)) < (($27)|(0));
      var $30 = $28;label = 10; break;
    case 10: 
      var $30;
      if ($30) { label = 11; break; } else { label = 97; break; }
    case 11: 
      $nreadahead=1;
      var $32=$has_peek;
      var $33=(($32)|(0))!=0;
      if ($33) { label = 12; break; } else { label = 49; break; }
    case 12: 
      var $35=$2;
      var $36=__PyObject_CallMethod_SizeT($35, ((__str37232)|0), ((__str8203)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=1,tempInt));
      $readahead=$36;
      var $37=$readahead;
      var $38=(($37)|(0))==0;
      if ($38) { label = 13; break; } else { label = 16; break; }
    case 13: 
      var $40=__PyIO_trap_eintr();
      var $41=(($40)|(0))!=0;
      if ($41) { label = 14; break; } else { label = 15; break; }
    case 14: 
      label = 8; break;
    case 15: 
      label = 114; break;
    case 16: 
      var $45=$readahead;
      var $46=(($45+4)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=(($47+84)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=$49 & 134217728;
      var $51=(($50)|(0))!=0;
      if ($51) { label = 23; break; } else { label = 17; break; }
    case 17: 
      var $53=HEAP32[((_PyExc_IOError)>>2)];
      var $54=$readahead;
      var $55=(($54+4)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=(($56+12)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=_PyErr_Format($53, ((__str38233)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$58,tempInt));
      label = 18; break;
    case 18: 
      var $61=$readahead;
      var $62=(($61)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=((($63)-(1))|0);
      HEAP32[(($62)>>2)]=$64;
      var $65=(($64)|(0))!=0;
      if ($65) { label = 19; break; } else { label = 20; break; }
    case 19: 
      label = 21; break;
    case 20: 
      var $68=$readahead;
      var $69=(($68+4)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=(($70+24)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=$readahead;
      FUNCTION_TABLE[$72]($73);
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 114; break;
    case 23: 
      var $77=$readahead;
      var $78=$77;
      var $79=(($78+8)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=(($80)|(0)) > 0;
      if ($81) { label = 24; break; } else { label = 43; break; }
    case 24: 
      $n=0;
      var $83=$readahead;
      var $84=$83;
      var $85=(($84+20)|0);
      var $86=(($85)|0);
      $buf=$86;
      var $87=HEAP32[(($limit)>>2)];
      var $88=(($87)|(0)) >= 0;
      if ($88) { label = 25; break; } else { label = 34; break; }
    case 25: 
      label = 26; break;
    case 26: 
      var $91=$n;
      var $92=$readahead;
      var $93=$92;
      var $94=(($93+8)|0);
      var $95=HEAP32[(($94)>>2)];
      var $96=(($91)|(0)) >= (($95)|(0));
      if ($96) { label = 28; break; } else { label = 27; break; }
    case 27: 
      var $98=$n;
      var $99=HEAP32[(($limit)>>2)];
      var $100=(($98)|(0)) >= (($99)|(0));
      if ($100) { label = 28; break; } else { label = 29; break; }
    case 28: 
      label = 33; break;
    case 29: 
      var $103=$n;
      var $104=((($103)+(1))|0);
      $n=$104;
      var $105=$buf;
      var $106=(($105+$103)|0);
      var $107=HEAP8[($106)];
      var $108=(($107 << 24) >> 24);
      var $109=(($108)|(0))==10;
      if ($109) { label = 30; break; } else { label = 31; break; }
    case 30: 
      label = 33; break;
    case 31: 
      label = 32; break;
    case 32: 
      if (1) { label = 26; break; } else { label = 33; break; }
    case 33: 
      label = 42; break;
    case 34: 
      label = 35; break;
    case 35: 
      var $116=$n;
      var $117=$readahead;
      var $118=$117;
      var $119=(($118+8)|0);
      var $120=HEAP32[(($119)>>2)];
      var $121=(($116)|(0)) >= (($120)|(0));
      if ($121) { label = 36; break; } else { label = 37; break; }
    case 36: 
      label = 41; break;
    case 37: 
      var $124=$n;
      var $125=((($124)+(1))|0);
      $n=$125;
      var $126=$buf;
      var $127=(($126+$124)|0);
      var $128=HEAP8[($127)];
      var $129=(($128 << 24) >> 24);
      var $130=(($129)|(0))==10;
      if ($130) { label = 38; break; } else { label = 39; break; }
    case 38: 
      label = 41; break;
    case 39: 
      label = 40; break;
    case 40: 
      if (1) { label = 35; break; } else { label = 41; break; }
    case 41: 
      label = 42; break;
    case 42: 
      var $136=$n;
      $nreadahead=$136;
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      var $139=$readahead;
      var $140=(($139)|0);
      var $141=HEAP32[(($140)>>2)];
      var $142=((($141)-(1))|0);
      HEAP32[(($140)>>2)]=$142;
      var $143=(($142)|(0))!=0;
      if ($143) { label = 45; break; } else { label = 46; break; }
    case 45: 
      label = 47; break;
    case 46: 
      var $146=$readahead;
      var $147=(($146+4)|0);
      var $148=HEAP32[(($147)>>2)];
      var $149=(($148+24)|0);
      var $150=HEAP32[(($149)>>2)];
      var $151=$readahead;
      FUNCTION_TABLE[$150]($151);
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      var $155=$2;
      var $156=$nreadahead;
      var $157=__PyObject_CallMethod_SizeT($155, ((__str6201)|0), ((__str39234)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$156,tempInt));
      $b=$157;
      var $158=$b;
      var $159=(($158)|(0))==0;
      if ($159) { label = 50; break; } else { label = 53; break; }
    case 50: 
      var $161=__PyIO_trap_eintr();
      var $162=(($161)|(0))!=0;
      if ($162) { label = 51; break; } else { label = 52; break; }
    case 51: 
      label = 8; break;
    case 52: 
      label = 114; break;
    case 53: 
      var $166=$b;
      var $167=(($166+4)|0);
      var $168=HEAP32[(($167)>>2)];
      var $169=(($168+84)|0);
      var $170=HEAP32[(($169)>>2)];
      var $171=$170 & 134217728;
      var $172=(($171)|(0))!=0;
      if ($172) { label = 60; break; } else { label = 54; break; }
    case 54: 
      var $174=HEAP32[((_PyExc_IOError)>>2)];
      var $175=$b;
      var $176=(($175+4)|0);
      var $177=HEAP32[(($176)>>2)];
      var $178=(($177+12)|0);
      var $179=HEAP32[(($178)>>2)];
      var $180=_PyErr_Format($174, ((__str40235)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$179,tempInt));
      label = 55; break;
    case 55: 
      var $182=$b;
      var $183=(($182)|0);
      var $184=HEAP32[(($183)>>2)];
      var $185=((($184)-(1))|0);
      HEAP32[(($183)>>2)]=$185;
      var $186=(($185)|(0))!=0;
      if ($186) { label = 56; break; } else { label = 57; break; }
    case 56: 
      label = 58; break;
    case 57: 
      var $189=$b;
      var $190=(($189+4)|0);
      var $191=HEAP32[(($190)>>2)];
      var $192=(($191+24)|0);
      var $193=HEAP32[(($192)>>2)];
      var $194=$b;
      FUNCTION_TABLE[$193]($194);
      label = 58; break;
    case 58: 
      label = 59; break;
    case 59: 
      label = 114; break;
    case 60: 
      var $198=$b;
      var $199=$198;
      var $200=(($199+8)|0);
      var $201=HEAP32[(($200)>>2)];
      var $202=(($201)|(0))==0;
      if ($202) { label = 61; break; } else { label = 67; break; }
    case 61: 
      label = 62; break;
    case 62: 
      var $205=$b;
      var $206=(($205)|0);
      var $207=HEAP32[(($206)>>2)];
      var $208=((($207)-(1))|0);
      HEAP32[(($206)>>2)]=$208;
      var $209=(($208)|(0))!=0;
      if ($209) { label = 63; break; } else { label = 64; break; }
    case 63: 
      label = 65; break;
    case 64: 
      var $212=$b;
      var $213=(($212+4)|0);
      var $214=HEAP32[(($213)>>2)];
      var $215=(($214+24)|0);
      var $216=HEAP32[(($215)>>2)];
      var $217=$b;
      FUNCTION_TABLE[$216]($217);
      label = 65; break;
    case 65: 
      label = 66; break;
    case 66: 
      label = 97; break;
    case 67: 
      var $221=$buffer;
      var $222=(($221+4)|0);
      var $223=HEAP32[(($222)>>2)];
      var $224=(($223)|(0))==((_PyByteArray_Type)|(0));
      if ($224) { label = 69; break; } else { label = 68; break; }
    case 68: 
      var $226=$buffer;
      var $227=(($226+4)|0);
      var $228=HEAP32[(($227)>>2)];
      var $229=_PyType_IsSubtype($228, _PyByteArray_Type);
      var $230=(($229)|(0))!=0;
      if ($230) { label = 69; break; } else { label = 70; break; }
    case 69: 
      label = 71; break;
    case 70: 
      ___assert_func(((__str41236)|0), 531, ((___func___iobase_readline)|0), ((__str42237)|0));
      throw "Reached an unreachable!";
      label = 71; break;
    case 71: 
      var $235=$buffer;
      var $236=$235;
      var $237=(($236+8)|0);
      var $238=HEAP32[(($237)>>2)];
      $old_size=$238;
      var $239=$buffer;
      var $240=$old_size;
      var $241=$b;
      var $242=$241;
      var $243=(($242+8)|0);
      var $244=HEAP32[(($243)>>2)];
      var $245=((($240)+($244))|0);
      var $246=_PyByteArray_Resize($239, $245);
      var $247=$buffer;
      var $248=(($247+4)|0);
      var $249=HEAP32[(($248)>>2)];
      var $250=(($249)|(0))==((_PyByteArray_Type)|(0));
      if ($250) { label = 73; break; } else { label = 72; break; }
    case 72: 
      var $252=$buffer;
      var $253=(($252+4)|0);
      var $254=HEAP32[(($253)>>2)];
      var $255=_PyType_IsSubtype($254, _PyByteArray_Type);
      var $256=(($255)|(0))!=0;
      if ($256) { label = 73; break; } else { label = 74; break; }
    case 73: 
      label = 75; break;
    case 74: 
      ___assert_func(((__str41236)|0), 533, ((___func___iobase_readline)|0), ((__str42237)|0));
      throw "Reached an unreachable!";
      label = 75; break;
    case 75: 
      var $261=$buffer;
      var $262=$261;
      var $263=(($262+8)|0);
      var $264=HEAP32[(($263)>>2)];
      var $265=(($264)|(0))!=0;
      if ($265) { label = 76; break; } else { label = 77; break; }
    case 76: 
      var $267=$buffer;
      var $268=$267;
      var $269=(($268+20)|0);
      var $270=HEAP32[(($269)>>2)];
      var $273 = $270;label = 78; break;
    case 77: 
      var $273 = ((__PyByteArray_empty_string)|0);label = 78; break;
    case 78: 
      var $273;
      var $274=$old_size;
      var $275=(($273+$274)|0);
      var $276=$b;
      var $277=$276;
      var $278=(($277+20)|0);
      var $279=$278;
      var $280=$b;
      var $281=$280;
      var $282=(($281+8)|0);
      var $283=HEAP32[(($282)>>2)];
      assert($283 % 1 === 0);_memcpy($275, $279, $283);
      label = 79; break;
    case 79: 
      var $285=$b;
      var $286=(($285)|0);
      var $287=HEAP32[(($286)>>2)];
      var $288=((($287)-(1))|0);
      HEAP32[(($286)>>2)]=$288;
      var $289=(($288)|(0))!=0;
      if ($289) { label = 80; break; } else { label = 81; break; }
    case 80: 
      label = 82; break;
    case 81: 
      var $292=$b;
      var $293=(($292+4)|0);
      var $294=HEAP32[(($293)>>2)];
      var $295=(($294+24)|0);
      var $296=HEAP32[(($295)>>2)];
      var $297=$b;
      FUNCTION_TABLE[$296]($297);
      label = 82; break;
    case 82: 
      label = 83; break;
    case 83: 
      var $300=$buffer;
      var $301=(($300+4)|0);
      var $302=HEAP32[(($301)>>2)];
      var $303=(($302)|(0))==((_PyByteArray_Type)|(0));
      if ($303) { label = 85; break; } else { label = 84; break; }
    case 84: 
      var $305=$buffer;
      var $306=(($305+4)|0);
      var $307=HEAP32[(($306)>>2)];
      var $308=_PyType_IsSubtype($307, _PyByteArray_Type);
      var $309=(($308)|(0))!=0;
      if ($309) { label = 85; break; } else { label = 86; break; }
    case 85: 
      label = 87; break;
    case 86: 
      ___assert_func(((__str41236)|0), 538, ((___func___iobase_readline)|0), ((__str42237)|0));
      throw "Reached an unreachable!";
      label = 87; break;
    case 87: 
      var $314=$buffer;
      var $315=$314;
      var $316=(($315+8)|0);
      var $317=HEAP32[(($316)>>2)];
      var $318=((($317)-(1))|0);
      var $319=$buffer;
      var $320=(($319+4)|0);
      var $321=HEAP32[(($320)>>2)];
      var $322=(($321)|(0))==((_PyByteArray_Type)|(0));
      if ($322) { label = 89; break; } else { label = 88; break; }
    case 88: 
      var $324=$buffer;
      var $325=(($324+4)|0);
      var $326=HEAP32[(($325)>>2)];
      var $327=_PyType_IsSubtype($326, _PyByteArray_Type);
      var $328=(($327)|(0))!=0;
      if ($328) { label = 89; break; } else { label = 90; break; }
    case 89: 
      label = 91; break;
    case 90: 
      ___assert_func(((__str41236)|0), 538, ((___func___iobase_readline)|0), ((__str42237)|0));
      throw "Reached an unreachable!";
      label = 91; break;
    case 91: 
      var $333=$buffer;
      var $334=$333;
      var $335=(($334+8)|0);
      var $336=HEAP32[(($335)>>2)];
      var $337=(($336)|(0))!=0;
      if ($337) { label = 92; break; } else { label = 93; break; }
    case 92: 
      var $339=$buffer;
      var $340=$339;
      var $341=(($340+20)|0);
      var $342=HEAP32[(($341)>>2)];
      var $345 = $342;label = 94; break;
    case 93: 
      var $345 = ((__PyByteArray_empty_string)|0);label = 94; break;
    case 94: 
      var $345;
      var $346=(($345+$318)|0);
      var $347=HEAP8[($346)];
      var $348=(($347 << 24) >> 24);
      var $349=(($348)|(0))==10;
      if ($349) { label = 95; break; } else { label = 96; break; }
    case 95: 
      label = 97; break;
    case 96: 
      label = 8; break;
    case 97: 
      var $353=$buffer;
      var $354=(($353+4)|0);
      var $355=HEAP32[(($354)>>2)];
      var $356=(($355)|(0))==((_PyByteArray_Type)|(0));
      if ($356) { label = 99; break; } else { label = 98; break; }
    case 98: 
      var $358=$buffer;
      var $359=(($358+4)|0);
      var $360=HEAP32[(($359)>>2)];
      var $361=_PyType_IsSubtype($360, _PyByteArray_Type);
      var $362=(($361)|(0))!=0;
      if ($362) { label = 99; break; } else { label = 100; break; }
    case 99: 
      label = 101; break;
    case 100: 
      ___assert_func(((__str41236)|0), 542, ((___func___iobase_readline)|0), ((__str42237)|0));
      throw "Reached an unreachable!";
      label = 101; break;
    case 101: 
      var $367=$buffer;
      var $368=$367;
      var $369=(($368+8)|0);
      var $370=HEAP32[(($369)>>2)];
      var $371=(($370)|(0))!=0;
      if ($371) { label = 102; break; } else { label = 103; break; }
    case 102: 
      var $373=$buffer;
      var $374=$373;
      var $375=(($374+20)|0);
      var $376=HEAP32[(($375)>>2)];
      var $379 = $376;label = 104; break;
    case 103: 
      var $379 = ((__PyByteArray_empty_string)|0);label = 104; break;
    case 104: 
      var $379;
      var $380=$buffer;
      var $381=(($380+4)|0);
      var $382=HEAP32[(($381)>>2)];
      var $383=(($382)|(0))==((_PyByteArray_Type)|(0));
      if ($383) { label = 106; break; } else { label = 105; break; }
    case 105: 
      var $385=$buffer;
      var $386=(($385+4)|0);
      var $387=HEAP32[(($386)>>2)];
      var $388=_PyType_IsSubtype($387, _PyByteArray_Type);
      var $389=(($388)|(0))!=0;
      if ($389) { label = 106; break; } else { label = 107; break; }
    case 106: 
      label = 108; break;
    case 107: 
      ___assert_func(((__str41236)|0), 543, ((___func___iobase_readline)|0), ((__str42237)|0));
      throw "Reached an unreachable!";
      label = 108; break;
    case 108: 
      var $394=$buffer;
      var $395=$394;
      var $396=(($395+8)|0);
      var $397=HEAP32[(($396)>>2)];
      var $398=_PyString_FromStringAndSize($379, $397);
      $result=$398;
      label = 109; break;
    case 109: 
      var $400=$buffer;
      var $401=(($400)|0);
      var $402=HEAP32[(($401)>>2)];
      var $403=((($402)-(1))|0);
      HEAP32[(($401)>>2)]=$403;
      var $404=(($403)|(0))!=0;
      if ($404) { label = 110; break; } else { label = 111; break; }
    case 110: 
      label = 112; break;
    case 111: 
      var $407=$buffer;
      var $408=(($407+4)|0);
      var $409=HEAP32[(($408)>>2)];
      var $410=(($409+24)|0);
      var $411=HEAP32[(($410)>>2)];
      var $412=$buffer;
      FUNCTION_TABLE[$411]($412);
      label = 112; break;
    case 112: 
      label = 113; break;
    case 113: 
      var $415=$result;
      $1=$415;
      label = 120; break;
    case 114: 
      label = 115; break;
    case 115: 
      var $418=$buffer;
      var $419=(($418)|0);
      var $420=HEAP32[(($419)>>2)];
      var $421=((($420)-(1))|0);
      HEAP32[(($419)>>2)]=$421;
      var $422=(($421)|(0))!=0;
      if ($422) { label = 116; break; } else { label = 117; break; }
    case 116: 
      label = 118; break;
    case 117: 
      var $425=$buffer;
      var $426=(($425+4)|0);
      var $427=HEAP32[(($426)>>2)];
      var $428=(($427+24)|0);
      var $429=HEAP32[(($428)>>2)];
      var $430=$buffer;
      FUNCTION_TABLE[$429]($430);
      label = 118; break;
    case 118: 
      label = 119; break;
    case 119: 
      $1=0;
      label = 120; break;
    case 120: 
      var $434=$1;
      STACKTOP = __stackBase__;
      return $434;
    default: assert(0, "bad label: " + label);
  }
}
function _iobase_readlines($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $hint=__stackBase__;
      var $length;
      var $result;
      var $ret;
      var $line;
      $2=$self;
      $3=$args;
      HEAP32[(($hint)>>2)]=-1;
      $length=0;
      var $4=$3;
      var $5=__PyArg_ParseTuple_SizeT($4, ((__str33228)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=((FUNCTION_TABLE_OFFSET + 242)),HEAP32[(((tempInt)+(4))>>2)]=$hint,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 50; break;
    case 3: 
      var $9=_PyList_New(0);
      $result=$9;
      var $10=$result;
      var $11=(($10)|(0))==0;
      if ($11) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=0;
      label = 50; break;
    case 5: 
      var $14=HEAP32[(($hint)>>2)];
      var $15=(($14)|(0)) <= 0;
      if ($15) { label = 6; break; } else { label = 19; break; }
    case 6: 
      var $17=$result;
      var $18=$2;
      var $19=__PyObject_CallMethod_SizeT($17, ((__str34229)|0), ((__str35230)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$18,tempInt));
      $ret=$19;
      var $20=$ret;
      var $21=(($20)|(0))==0;
      if ($21) { label = 7; break; } else { label = 13; break; }
    case 7: 
      label = 8; break;
    case 8: 
      var $24=$result;
      var $25=(($24)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=((($26)-(1))|0);
      HEAP32[(($25)>>2)]=$27;
      var $28=(($27)|(0))!=0;
      if ($28) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 11; break;
    case 10: 
      var $31=$result;
      var $32=(($31+4)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33+24)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=$result;
      FUNCTION_TABLE[$35]($36);
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      $1=0;
      label = 50; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $41=$ret;
      var $42=(($41)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=((($43)-(1))|0);
      HEAP32[(($42)>>2)]=$44;
      var $45=(($44)|(0))!=0;
      if ($45) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 17; break;
    case 16: 
      var $48=$ret;
      var $49=(($48+4)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=(($50+24)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=$ret;
      FUNCTION_TABLE[$52]($53);
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $56=$result;
      $1=$56;
      label = 50; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $59=$2;
      var $60=_PyIter_Next($59);
      $line=$60;
      var $61=$line;
      var $62=(($61)|(0))==0;
      if ($62) { label = 21; break; } else { label = 29; break; }
    case 21: 
      var $64=_PyErr_Occurred();
      var $65=(($64)|(0))!=0;
      if ($65) { label = 22; break; } else { label = 28; break; }
    case 22: 
      label = 23; break;
    case 23: 
      var $68=$result;
      var $69=(($68)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=((($70)-(1))|0);
      HEAP32[(($69)>>2)]=$71;
      var $72=(($71)|(0))!=0;
      if ($72) { label = 24; break; } else { label = 25; break; }
    case 24: 
      label = 26; break;
    case 25: 
      var $75=$result;
      var $76=(($75+4)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=(($77+24)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=$result;
      FUNCTION_TABLE[$79]($80);
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      $1=0;
      label = 50; break;
    case 28: 
      label = 49; break;
    case 29: 
      var $85=$result;
      var $86=$line;
      var $87=_PyList_Append($85, $86);
      var $88=(($87)|(0)) < 0;
      if ($88) { label = 30; break; } else { label = 41; break; }
    case 30: 
      label = 31; break;
    case 31: 
      var $91=$line;
      var $92=(($91)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=((($93)-(1))|0);
      HEAP32[(($92)>>2)]=$94;
      var $95=(($94)|(0))!=0;
      if ($95) { label = 32; break; } else { label = 33; break; }
    case 32: 
      label = 34; break;
    case 33: 
      var $98=$line;
      var $99=(($98+4)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=(($100+24)|0);
      var $102=HEAP32[(($101)>>2)];
      var $103=$line;
      FUNCTION_TABLE[$102]($103);
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $107=$result;
      var $108=(($107)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=((($109)-(1))|0);
      HEAP32[(($108)>>2)]=$110;
      var $111=(($110)|(0))!=0;
      if ($111) { label = 37; break; } else { label = 38; break; }
    case 37: 
      label = 39; break;
    case 38: 
      var $114=$result;
      var $115=(($114+4)|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=(($116+24)|0);
      var $118=HEAP32[(($117)>>2)];
      var $119=$result;
      FUNCTION_TABLE[$118]($119);
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      $1=0;
      label = 50; break;
    case 41: 
      var $123=$line;
      var $124=_PyObject_Size($123);
      var $125=$length;
      var $126=((($125)+($124))|0);
      $length=$126;
      label = 42; break;
    case 42: 
      var $128=$line;
      var $129=(($128)|0);
      var $130=HEAP32[(($129)>>2)];
      var $131=((($130)-(1))|0);
      HEAP32[(($129)>>2)]=$131;
      var $132=(($131)|(0))!=0;
      if ($132) { label = 43; break; } else { label = 44; break; }
    case 43: 
      label = 45; break;
    case 44: 
      var $135=$line;
      var $136=(($135+4)|0);
      var $137=HEAP32[(($136)>>2)];
      var $138=(($137+24)|0);
      var $139=HEAP32[(($138)>>2)];
      var $140=$line;
      FUNCTION_TABLE[$139]($140);
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      var $143=$length;
      var $144=HEAP32[(($hint)>>2)];
      var $145=(($143)|(0)) > (($144)|(0));
      if ($145) { label = 47; break; } else { label = 48; break; }
    case 47: 
      label = 49; break;
    case 48: 
      label = 20; break;
    case 49: 
      var $149=$result;
      $1=$149;
      label = 50; break;
    case 50: 
      var $151=$1;
      STACKTOP = __stackBase__;
      return $151;
    default: assert(0, "bad label: " + label);
  }
}
function _iobase_writelines($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $lines=__stackBase__;
      var $iter;
      var $res;
      var $line;
      $2=$self;
      $3=$args;
      var $4=$3;
      var $5=__PyArg_ParseTuple_SizeT($4, ((__str32227)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$lines,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 46; break;
    case 3: 
      var $9=$2;
      var $10=__PyIOBase_check_closed($9, __Py_TrueStruct);
      var $11=(($10)|(0))==0;
      if ($11) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=0;
      label = 46; break;
    case 5: 
      var $14=HEAP32[(($lines)>>2)];
      var $15=_PyObject_GetIter($14);
      $iter=$15;
      var $16=$iter;
      var $17=(($16)|(0))==0;
      if ($17) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $1=0;
      label = 46; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $21=$iter;
      var $22=_PyIter_Next($21);
      $line=$22;
      var $23=$line;
      var $24=(($23)|(0))==0;
      if ($24) { label = 9; break; } else { label = 17; break; }
    case 9: 
      var $26=_PyErr_Occurred();
      var $27=(($26)|(0))!=0;
      if ($27) { label = 10; break; } else { label = 16; break; }
    case 10: 
      label = 11; break;
    case 11: 
      var $30=$iter;
      var $31=(($30)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=((($32)-(1))|0);
      HEAP32[(($31)>>2)]=$33;
      var $34=(($33)|(0))!=0;
      if ($34) { label = 12; break; } else { label = 13; break; }
    case 12: 
      label = 14; break;
    case 13: 
      var $37=$iter;
      var $38=(($37+4)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39+24)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=$iter;
      FUNCTION_TABLE[$41]($42);
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      $1=0;
      label = 46; break;
    case 16: 
      label = 40; break;
    case 17: 
      $res=0;
      label = 18; break;
    case 18: 
      var $48=$2;
      var $49=HEAP32[((__PyIO_str_write)>>2)];
      var $50=$line;
      var $51=_PyObject_CallMethodObjArgs($48, $49, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$50,HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
      $res=$51;
      label = 19; break;
    case 19: 
      var $53=$res;
      var $54=(($53)|(0))==0;
      if ($54) { label = 20; break; } else { var $59 = 0;label = 21; break; }
    case 20: 
      var $56=__PyIO_trap_eintr();
      var $57=(($56)|(0))!=0;
      var $59 = $57;label = 21; break;
    case 21: 
      var $59;
      if ($59) { label = 18; break; } else { label = 22; break; }
    case 22: 
      label = 23; break;
    case 23: 
      var $62=$line;
      var $63=(($62)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=((($64)-(1))|0);
      HEAP32[(($63)>>2)]=$65;
      var $66=(($65)|(0))!=0;
      if ($66) { label = 24; break; } else { label = 25; break; }
    case 24: 
      label = 26; break;
    case 25: 
      var $69=$line;
      var $70=(($69+4)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=(($71+24)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=$line;
      FUNCTION_TABLE[$73]($74);
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $77=$res;
      var $78=(($77)|(0))==0;
      if ($78) { label = 28; break; } else { label = 34; break; }
    case 28: 
      label = 29; break;
    case 29: 
      var $81=$iter;
      var $82=(($81)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=((($83)-(1))|0);
      HEAP32[(($82)>>2)]=$84;
      var $85=(($84)|(0))!=0;
      if ($85) { label = 30; break; } else { label = 31; break; }
    case 30: 
      label = 32; break;
    case 31: 
      var $88=$iter;
      var $89=(($88+4)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=(($90+24)|0);
      var $92=HEAP32[(($91)>>2)];
      var $93=$iter;
      FUNCTION_TABLE[$92]($93);
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      $1=0;
      label = 46; break;
    case 34: 
      label = 35; break;
    case 35: 
      var $98=$res;
      var $99=(($98)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=((($100)-(1))|0);
      HEAP32[(($99)>>2)]=$101;
      var $102=(($101)|(0))!=0;
      if ($102) { label = 36; break; } else { label = 37; break; }
    case 36: 
      label = 38; break;
    case 37: 
      var $105=$res;
      var $106=(($105+4)|0);
      var $107=HEAP32[(($106)>>2)];
      var $108=(($107+24)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=$res;
      FUNCTION_TABLE[$109]($110);
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      label = 8; break;
    case 40: 
      label = 41; break;
    case 41: 
      var $115=$iter;
      var $116=(($115)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=((($117)-(1))|0);
      HEAP32[(($116)>>2)]=$118;
      var $119=(($118)|(0))!=0;
      if ($119) { label = 42; break; } else { label = 43; break; }
    case 42: 
      label = 44; break;
    case 43: 
      var $122=$iter;
      var $123=(($122+4)|0);
      var $124=HEAP32[(($123)>>2)];
      var $125=(($124+24)|0);
      var $126=HEAP32[(($125)>>2)];
      var $127=$iter;
      FUNCTION_TABLE[$126]($127);
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      var $130=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $131=((($130)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$131;
      $1=__Py_NoneStruct;
      label = 46; break;
    case 46: 
      var $133=$1;
      STACKTOP = __stackBase__;
      return $133;
    default: assert(0, "bad label: " + label);
  }
}
function _iobase_unsupported($message) {
  var label = 0;
  var $1;
  $1=$message;
  var $2=HEAP32[((__PyIO_unsupported_operation)>>2)];
  var $3=$1;
  _PyErr_SetString($2, $3);
  return 0;
}
function __PyIO_ConvertSsize_t($obj, $result) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $limit;
      $2=$obj;
      $3=$result;
      var $4=$2;
      var $5=(($4)|(0))==((__Py_NoneStruct)|(0));
      if ($5) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $limit=-1;
      label = 10; break;
    case 3: 
      var $8=$2;
      var $9=_PyNumber_Check($8);
      var $10=(($9)|(0))!=0;
      if ($10) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $12=$2;
      var $13=HEAP32[((_PyExc_OverflowError)>>2)];
      var $14=_PyNumber_AsSsize_t($12, $13);
      $limit=$14;
      var $15=$limit;
      var $16=(($15)|(0))==-1;
      if ($16) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $18=_PyErr_Occurred();
      var $19=(($18)|(0))!=0;
      if ($19) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $1=0;
      label = 11; break;
    case 7: 
      label = 9; break;
    case 8: 
      var $23=HEAP32[((_PyExc_TypeError)>>2)];
      var $24=$2;
      var $25=(($24+4)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26+12)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=_PyErr_Format($23, ((__str3253)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$28,tempInt));
      $1=0;
      label = 11; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $32=$limit;
      var $33=$3;
      var $34=$33;
      HEAP32[(($34)>>2)]=$32;
      $1=1;
      label = 11; break;
    case 11: 
      var $36=$1;
      STACKTOP = __stackBase__;
      return $36;
    default: assert(0, "bad label: " + label);
  }
}
function _PyNumber_AsOff_t($item, $err) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $result;
      var $runerr;
      var $value;
      $2=$item;
      $3=$err;
      var $4=$2;
      var $5=_PyNumber_Index($4);
      $value=$5;
      var $6=$value;
      var $7=(($6)|(0))==0;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=-1;
      label = 26; break;
    case 3: 
      var $10=$value;
      var $11=(($10+4)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12+84)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$14 & 8388608;
      var $16=(($15)|(0))!=0;
      if ($16) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $18=$value;
      var $19=$18;
      var $20=(($19+8)|0);
      var $21=HEAP32[(($20)>>2)];
      $result=$21;
      label = 20; break;
    case 5: 
      var $23=$value;
      var $24=_PyLong_AsSsize_t($23);
      $result=$24;
      var $25=$result;
      var $26=(($25)|(0))!=-1;
      if ($26) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $28=_PyErr_Occurred();
      $runerr=$28;
      var $29=(($28)|(0))!=0;
      if ($29) { label = 8; break; } else { label = 7; break; }
    case 7: 
      label = 20; break;
    case 8: 
      var $32=$runerr;
      var $33=HEAP32[((_PyExc_OverflowError)>>2)];
      var $34=_PyErr_GivenExceptionMatches($32, $33);
      var $35=(($34)|(0))!=0;
      if ($35) { label = 10; break; } else { label = 9; break; }
    case 9: 
      label = 20; break;
    case 10: 
      _PyErr_Clear();
      var $38=$3;
      var $39=(($38)|(0))!=0;
      if ($39) { label = 18; break; } else { label = 11; break; }
    case 11: 
      var $41=$value;
      var $42=(($41+4)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($43+84)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=$45 & 16777216;
      var $47=(($46)|(0))!=0;
      if ($47) { label = 12; break; } else { label = 13; break; }
    case 12: 
      label = 14; break;
    case 13: 
      ___assert_func(((__str250)|0), 565, ((___func___PyNumber_AsOff_t)|0), ((__str1251)|0));
      throw "Reached an unreachable!";
      label = 14; break;
    case 14: 
      var $52=$value;
      var $53=__PyLong_Sign($52);
      var $54=(($53)|(0)) < 0;
      if ($54) { label = 15; break; } else { label = 16; break; }
    case 15: 
      $result=-2147483648;
      label = 17; break;
    case 16: 
      $result=2147483647;
      label = 17; break;
    case 17: 
      label = 19; break;
    case 18: 
      var $59=$3;
      var $60=$2;
      var $61=(($60+4)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=(($62+12)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=_PyErr_Format($59, ((__str2252)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$64,tempInt));
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $69=$value;
      var $70=(($69)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=((($71)-(1))|0);
      HEAP32[(($70)>>2)]=$72;
      var $73=(($72)|(0))!=0;
      if ($73) { label = 22; break; } else { label = 23; break; }
    case 22: 
      label = 24; break;
    case 23: 
      var $76=$value;
      var $77=(($76+4)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=(($78+24)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=$value;
      FUNCTION_TABLE[$80]($81);
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $84=$result;
      $1=$84;
      label = 26; break;
    case 26: 
      var $86=$1;
      STACKTOP = __stackBase__;
      return $86;
    default: assert(0, "bad label: " + label);
  }
}
function _init_io() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $m;
      var $_py_tmp;
      var $_py_tmp1;
      var $1=_Py_InitModule4(((__str4256)|0), ((_module_methods)|0), ((_module_doc)|0), 0, 1013);
      $m=$1;
      var $2=$m;
      var $3=(($2)|(0))==0;
      if ($3) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 213; break;
    case 3: 
      var $6=_PyImport_ImportModule(((__str5257)|0));
      HEAP32[((__PyIO_os_module)>>2)]=$6;
      var $7=HEAP32[((__PyIO_os_module)>>2)];
      var $8=(($7)|(0))==0;
      if ($8) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 190; break;
    case 5: 
      var $11=$m;
      var $12=_PyModule_AddIntConstant($11, ((__str6258)|0), 8192);
      var $13=(($12)|(0)) < 0;
      if ($13) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 190; break;
    case 7: 
      var $16=HEAP32[((_PyExc_ValueError)>>2)];
      var $17=HEAP32[((_PyExc_IOError)>>2)];
      var $18=__PyObject_CallFunction_SizeT(_PyType_Type, ((__str7259)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=((__str8260)|0),HEAP32[(((tempInt)+(4))>>2)]=$16,HEAP32[(((tempInt)+(8))>>2)]=$17,tempInt));
      HEAP32[((__PyIO_unsupported_operation)>>2)]=$18;
      var $19=HEAP32[((__PyIO_unsupported_operation)>>2)];
      var $20=(($19)|(0))==0;
      if ($20) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 190; break;
    case 9: 
      var $23=HEAP32[((__PyIO_unsupported_operation)>>2)];
      var $24=(($23)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=((($25)+(1))|0);
      HEAP32[(($24)>>2)]=$26;
      var $27=$m;
      var $28=HEAP32[((__PyIO_unsupported_operation)>>2)];
      var $29=_PyModule_AddObject($27, ((__str8260)|0), $28);
      var $30=(($29)|(0)) < 0;
      if ($30) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 190; break;
    case 11: 
      var $33=HEAP32[((_PyExc_IOError)>>2)];
      var $34=$33;
      HEAP32[((((__PyExc_BlockingIOError+128)|0))>>2)]=$34;
      var $35=_PyType_Ready(__PyExc_BlockingIOError);
      var $36=(($35)|(0)) < 0;
      if ($36) { label = 12; break; } else { label = 13; break; }
    case 12: 
      label = 190; break;
    case 13: 
      var $39=HEAP32[((((__PyExc_BlockingIOError)|0))>>2)];
      var $40=((($39)+(1))|0);
      HEAP32[((((__PyExc_BlockingIOError)|0))>>2)]=$40;
      var $41=$m;
      var $42=_PyModule_AddObject($41, ((__str9261)|0), __PyExc_BlockingIOError);
      var $43=(($42)|(0)) < 0;
      if ($43) { label = 14; break; } else { label = 20; break; }
    case 14: 
      label = 15; break;
    case 15: 
      var $46=HEAP32[((((__PyExc_BlockingIOError)|0))>>2)];
      var $47=((($46)-(1))|0);
      HEAP32[((((__PyExc_BlockingIOError)|0))>>2)]=$47;
      var $48=(($47)|(0))!=0;
      if ($48) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 18; break;
    case 17: 
      var $51=HEAP32[((((__PyExc_BlockingIOError+4)|0))>>2)];
      var $52=(($51+24)|0);
      var $53=HEAP32[(($52)>>2)];
      FUNCTION_TABLE[$53](__PyExc_BlockingIOError);
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 190; break;
    case 20: 
      var $57=_PyType_Ready(_PyIOBase_Type);
      var $58=(($57)|(0)) < 0;
      if ($58) { label = 21; break; } else { label = 22; break; }
    case 21: 
      label = 190; break;
    case 22: 
      var $61=HEAP32[((((_PyIOBase_Type)|0))>>2)];
      var $62=((($61)+(1))|0);
      HEAP32[((((_PyIOBase_Type)|0))>>2)]=$62;
      var $63=$m;
      var $64=_PyModule_AddObject($63, ((__str10262)|0), _PyIOBase_Type);
      var $65=(($64)|(0)) < 0;
      if ($65) { label = 23; break; } else { label = 29; break; }
    case 23: 
      label = 24; break;
    case 24: 
      var $68=HEAP32[((((_PyIOBase_Type)|0))>>2)];
      var $69=((($68)-(1))|0);
      HEAP32[((((_PyIOBase_Type)|0))>>2)]=$69;
      var $70=(($69)|(0))!=0;
      if ($70) { label = 25; break; } else { label = 26; break; }
    case 25: 
      label = 27; break;
    case 26: 
      var $73=HEAP32[((((_PyIOBase_Type+4)|0))>>2)];
      var $74=(($73+24)|0);
      var $75=HEAP32[(($74)>>2)];
      FUNCTION_TABLE[$75](_PyIOBase_Type);
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      label = 190; break;
    case 29: 
      var $79=_PyType_Ready(_PyRawIOBase_Type);
      var $80=(($79)|(0)) < 0;
      if ($80) { label = 30; break; } else { label = 31; break; }
    case 30: 
      label = 190; break;
    case 31: 
      var $83=HEAP32[((((_PyRawIOBase_Type)|0))>>2)];
      var $84=((($83)+(1))|0);
      HEAP32[((((_PyRawIOBase_Type)|0))>>2)]=$84;
      var $85=$m;
      var $86=_PyModule_AddObject($85, ((__str11263)|0), _PyRawIOBase_Type);
      var $87=(($86)|(0)) < 0;
      if ($87) { label = 32; break; } else { label = 38; break; }
    case 32: 
      label = 33; break;
    case 33: 
      var $90=HEAP32[((((_PyRawIOBase_Type)|0))>>2)];
      var $91=((($90)-(1))|0);
      HEAP32[((((_PyRawIOBase_Type)|0))>>2)]=$91;
      var $92=(($91)|(0))!=0;
      if ($92) { label = 34; break; } else { label = 35; break; }
    case 34: 
      label = 36; break;
    case 35: 
      var $95=HEAP32[((((_PyRawIOBase_Type+4)|0))>>2)];
      var $96=(($95+24)|0);
      var $97=HEAP32[(($96)>>2)];
      FUNCTION_TABLE[$97](_PyRawIOBase_Type);
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 190; break;
    case 38: 
      var $101=_PyType_Ready(_PyBufferedIOBase_Type);
      var $102=(($101)|(0)) < 0;
      if ($102) { label = 39; break; } else { label = 40; break; }
    case 39: 
      label = 190; break;
    case 40: 
      var $105=HEAP32[((((_PyBufferedIOBase_Type)|0))>>2)];
      var $106=((($105)+(1))|0);
      HEAP32[((((_PyBufferedIOBase_Type)|0))>>2)]=$106;
      var $107=$m;
      var $108=_PyModule_AddObject($107, ((__str12264)|0), _PyBufferedIOBase_Type);
      var $109=(($108)|(0)) < 0;
      if ($109) { label = 41; break; } else { label = 47; break; }
    case 41: 
      label = 42; break;
    case 42: 
      var $112=HEAP32[((((_PyBufferedIOBase_Type)|0))>>2)];
      var $113=((($112)-(1))|0);
      HEAP32[((((_PyBufferedIOBase_Type)|0))>>2)]=$113;
      var $114=(($113)|(0))!=0;
      if ($114) { label = 43; break; } else { label = 44; break; }
    case 43: 
      label = 45; break;
    case 44: 
      var $117=HEAP32[((((_PyBufferedIOBase_Type+4)|0))>>2)];
      var $118=(($117+24)|0);
      var $119=HEAP32[(($118)>>2)];
      FUNCTION_TABLE[$119](_PyBufferedIOBase_Type);
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      label = 190; break;
    case 47: 
      var $123=_PyType_Ready(_PyTextIOBase_Type);
      var $124=(($123)|(0)) < 0;
      if ($124) { label = 48; break; } else { label = 49; break; }
    case 48: 
      label = 190; break;
    case 49: 
      var $127=HEAP32[((((_PyTextIOBase_Type)|0))>>2)];
      var $128=((($127)+(1))|0);
      HEAP32[((((_PyTextIOBase_Type)|0))>>2)]=$128;
      var $129=$m;
      var $130=_PyModule_AddObject($129, ((__str13265)|0), _PyTextIOBase_Type);
      var $131=(($130)|(0)) < 0;
      if ($131) { label = 50; break; } else { label = 56; break; }
    case 50: 
      label = 51; break;
    case 51: 
      var $134=HEAP32[((((_PyTextIOBase_Type)|0))>>2)];
      var $135=((($134)-(1))|0);
      HEAP32[((((_PyTextIOBase_Type)|0))>>2)]=$135;
      var $136=(($135)|(0))!=0;
      if ($136) { label = 52; break; } else { label = 53; break; }
    case 52: 
      label = 54; break;
    case 53: 
      var $139=HEAP32[((((_PyTextIOBase_Type+4)|0))>>2)];
      var $140=(($139+24)|0);
      var $141=HEAP32[(($140)>>2)];
      FUNCTION_TABLE[$141](_PyTextIOBase_Type);
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      label = 190; break;
    case 56: 
      HEAP32[((((_PyFileIO_Type+128)|0))>>2)]=_PyRawIOBase_Type;
      var $145=_PyType_Ready(_PyFileIO_Type);
      var $146=(($145)|(0)) < 0;
      if ($146) { label = 57; break; } else { label = 58; break; }
    case 57: 
      label = 190; break;
    case 58: 
      var $149=HEAP32[((((_PyFileIO_Type)|0))>>2)];
      var $150=((($149)+(1))|0);
      HEAP32[((((_PyFileIO_Type)|0))>>2)]=$150;
      var $151=$m;
      var $152=_PyModule_AddObject($151, ((__str14266)|0), _PyFileIO_Type);
      var $153=(($152)|(0)) < 0;
      if ($153) { label = 59; break; } else { label = 65; break; }
    case 59: 
      label = 60; break;
    case 60: 
      var $156=HEAP32[((((_PyFileIO_Type)|0))>>2)];
      var $157=((($156)-(1))|0);
      HEAP32[((((_PyFileIO_Type)|0))>>2)]=$157;
      var $158=(($157)|(0))!=0;
      if ($158) { label = 61; break; } else { label = 62; break; }
    case 61: 
      label = 63; break;
    case 62: 
      var $161=HEAP32[((((_PyFileIO_Type+4)|0))>>2)];
      var $162=(($161+24)|0);
      var $163=HEAP32[(($162)>>2)];
      FUNCTION_TABLE[$163](_PyFileIO_Type);
      label = 63; break;
    case 63: 
      label = 64; break;
    case 64: 
      label = 190; break;
    case 65: 
      HEAP32[((((_PyBytesIO_Type+128)|0))>>2)]=_PyBufferedIOBase_Type;
      var $167=_PyType_Ready(_PyBytesIO_Type);
      var $168=(($167)|(0)) < 0;
      if ($168) { label = 66; break; } else { label = 67; break; }
    case 66: 
      label = 190; break;
    case 67: 
      var $171=HEAP32[((((_PyBytesIO_Type)|0))>>2)];
      var $172=((($171)+(1))|0);
      HEAP32[((((_PyBytesIO_Type)|0))>>2)]=$172;
      var $173=$m;
      var $174=_PyModule_AddObject($173, ((__str15267)|0), _PyBytesIO_Type);
      var $175=(($174)|(0)) < 0;
      if ($175) { label = 68; break; } else { label = 74; break; }
    case 68: 
      label = 69; break;
    case 69: 
      var $178=HEAP32[((((_PyBytesIO_Type)|0))>>2)];
      var $179=((($178)-(1))|0);
      HEAP32[((((_PyBytesIO_Type)|0))>>2)]=$179;
      var $180=(($179)|(0))!=0;
      if ($180) { label = 70; break; } else { label = 71; break; }
    case 70: 
      label = 72; break;
    case 71: 
      var $183=HEAP32[((((_PyBytesIO_Type+4)|0))>>2)];
      var $184=(($183+24)|0);
      var $185=HEAP32[(($184)>>2)];
      FUNCTION_TABLE[$185](_PyBytesIO_Type);
      label = 72; break;
    case 72: 
      label = 73; break;
    case 73: 
      label = 190; break;
    case 74: 
      HEAP32[((((_PyStringIO_Type+128)|0))>>2)]=_PyTextIOBase_Type;
      var $189=_PyType_Ready(_PyStringIO_Type);
      var $190=(($189)|(0)) < 0;
      if ($190) { label = 75; break; } else { label = 76; break; }
    case 75: 
      label = 190; break;
    case 76: 
      var $193=HEAP32[((((_PyStringIO_Type)|0))>>2)];
      var $194=((($193)+(1))|0);
      HEAP32[((((_PyStringIO_Type)|0))>>2)]=$194;
      var $195=$m;
      var $196=_PyModule_AddObject($195, ((__str16268)|0), _PyStringIO_Type);
      var $197=(($196)|(0)) < 0;
      if ($197) { label = 77; break; } else { label = 83; break; }
    case 77: 
      label = 78; break;
    case 78: 
      var $200=HEAP32[((((_PyStringIO_Type)|0))>>2)];
      var $201=((($200)-(1))|0);
      HEAP32[((((_PyStringIO_Type)|0))>>2)]=$201;
      var $202=(($201)|(0))!=0;
      if ($202) { label = 79; break; } else { label = 80; break; }
    case 79: 
      label = 81; break;
    case 80: 
      var $205=HEAP32[((((_PyStringIO_Type+4)|0))>>2)];
      var $206=(($205+24)|0);
      var $207=HEAP32[(($206)>>2)];
      FUNCTION_TABLE[$207](_PyStringIO_Type);
      label = 81; break;
    case 81: 
      label = 82; break;
    case 82: 
      label = 190; break;
    case 83: 
      HEAP32[((((_PyBufferedReader_Type+128)|0))>>2)]=_PyBufferedIOBase_Type;
      var $211=_PyType_Ready(_PyBufferedReader_Type);
      var $212=(($211)|(0)) < 0;
      if ($212) { label = 84; break; } else { label = 85; break; }
    case 84: 
      label = 190; break;
    case 85: 
      var $215=HEAP32[((((_PyBufferedReader_Type)|0))>>2)];
      var $216=((($215)+(1))|0);
      HEAP32[((((_PyBufferedReader_Type)|0))>>2)]=$216;
      var $217=$m;
      var $218=_PyModule_AddObject($217, ((__str17269)|0), _PyBufferedReader_Type);
      var $219=(($218)|(0)) < 0;
      if ($219) { label = 86; break; } else { label = 92; break; }
    case 86: 
      label = 87; break;
    case 87: 
      var $222=HEAP32[((((_PyBufferedReader_Type)|0))>>2)];
      var $223=((($222)-(1))|0);
      HEAP32[((((_PyBufferedReader_Type)|0))>>2)]=$223;
      var $224=(($223)|(0))!=0;
      if ($224) { label = 88; break; } else { label = 89; break; }
    case 88: 
      label = 90; break;
    case 89: 
      var $227=HEAP32[((((_PyBufferedReader_Type+4)|0))>>2)];
      var $228=(($227+24)|0);
      var $229=HEAP32[(($228)>>2)];
      FUNCTION_TABLE[$229](_PyBufferedReader_Type);
      label = 90; break;
    case 90: 
      label = 91; break;
    case 91: 
      label = 190; break;
    case 92: 
      HEAP32[((((_PyBufferedWriter_Type+128)|0))>>2)]=_PyBufferedIOBase_Type;
      var $233=_PyType_Ready(_PyBufferedWriter_Type);
      var $234=(($233)|(0)) < 0;
      if ($234) { label = 93; break; } else { label = 94; break; }
    case 93: 
      label = 190; break;
    case 94: 
      var $237=HEAP32[((((_PyBufferedWriter_Type)|0))>>2)];
      var $238=((($237)+(1))|0);
      HEAP32[((((_PyBufferedWriter_Type)|0))>>2)]=$238;
      var $239=$m;
      var $240=_PyModule_AddObject($239, ((__str18270)|0), _PyBufferedWriter_Type);
      var $241=(($240)|(0)) < 0;
      if ($241) { label = 95; break; } else { label = 101; break; }
    case 95: 
      label = 96; break;
    case 96: 
      var $244=HEAP32[((((_PyBufferedWriter_Type)|0))>>2)];
      var $245=((($244)-(1))|0);
      HEAP32[((((_PyBufferedWriter_Type)|0))>>2)]=$245;
      var $246=(($245)|(0))!=0;
      if ($246) { label = 97; break; } else { label = 98; break; }
    case 97: 
      label = 99; break;
    case 98: 
      var $249=HEAP32[((((_PyBufferedWriter_Type+4)|0))>>2)];
      var $250=(($249+24)|0);
      var $251=HEAP32[(($250)>>2)];
      FUNCTION_TABLE[$251](_PyBufferedWriter_Type);
      label = 99; break;
    case 99: 
      label = 100; break;
    case 100: 
      label = 190; break;
    case 101: 
      HEAP32[((((_PyBufferedRWPair_Type+128)|0))>>2)]=_PyBufferedIOBase_Type;
      var $255=_PyType_Ready(_PyBufferedRWPair_Type);
      var $256=(($255)|(0)) < 0;
      if ($256) { label = 102; break; } else { label = 103; break; }
    case 102: 
      label = 190; break;
    case 103: 
      var $259=HEAP32[((((_PyBufferedRWPair_Type)|0))>>2)];
      var $260=((($259)+(1))|0);
      HEAP32[((((_PyBufferedRWPair_Type)|0))>>2)]=$260;
      var $261=$m;
      var $262=_PyModule_AddObject($261, ((__str19271)|0), _PyBufferedRWPair_Type);
      var $263=(($262)|(0)) < 0;
      if ($263) { label = 104; break; } else { label = 110; break; }
    case 104: 
      label = 105; break;
    case 105: 
      var $266=HEAP32[((((_PyBufferedRWPair_Type)|0))>>2)];
      var $267=((($266)-(1))|0);
      HEAP32[((((_PyBufferedRWPair_Type)|0))>>2)]=$267;
      var $268=(($267)|(0))!=0;
      if ($268) { label = 106; break; } else { label = 107; break; }
    case 106: 
      label = 108; break;
    case 107: 
      var $271=HEAP32[((((_PyBufferedRWPair_Type+4)|0))>>2)];
      var $272=(($271+24)|0);
      var $273=HEAP32[(($272)>>2)];
      FUNCTION_TABLE[$273](_PyBufferedRWPair_Type);
      label = 108; break;
    case 108: 
      label = 109; break;
    case 109: 
      label = 190; break;
    case 110: 
      HEAP32[((((_PyBufferedRandom_Type+128)|0))>>2)]=_PyBufferedIOBase_Type;
      var $277=_PyType_Ready(_PyBufferedRandom_Type);
      var $278=(($277)|(0)) < 0;
      if ($278) { label = 111; break; } else { label = 112; break; }
    case 111: 
      label = 190; break;
    case 112: 
      var $281=HEAP32[((((_PyBufferedRandom_Type)|0))>>2)];
      var $282=((($281)+(1))|0);
      HEAP32[((((_PyBufferedRandom_Type)|0))>>2)]=$282;
      var $283=$m;
      var $284=_PyModule_AddObject($283, ((__str20272)|0), _PyBufferedRandom_Type);
      var $285=(($284)|(0)) < 0;
      if ($285) { label = 113; break; } else { label = 119; break; }
    case 113: 
      label = 114; break;
    case 114: 
      var $288=HEAP32[((((_PyBufferedRandom_Type)|0))>>2)];
      var $289=((($288)-(1))|0);
      HEAP32[((((_PyBufferedRandom_Type)|0))>>2)]=$289;
      var $290=(($289)|(0))!=0;
      if ($290) { label = 115; break; } else { label = 116; break; }
    case 115: 
      label = 117; break;
    case 116: 
      var $293=HEAP32[((((_PyBufferedRandom_Type+4)|0))>>2)];
      var $294=(($293+24)|0);
      var $295=HEAP32[(($294)>>2)];
      FUNCTION_TABLE[$295](_PyBufferedRandom_Type);
      label = 117; break;
    case 117: 
      label = 118; break;
    case 118: 
      label = 190; break;
    case 119: 
      HEAP32[((((_PyTextIOWrapper_Type+128)|0))>>2)]=_PyTextIOBase_Type;
      var $299=_PyType_Ready(_PyTextIOWrapper_Type);
      var $300=(($299)|(0)) < 0;
      if ($300) { label = 120; break; } else { label = 121; break; }
    case 120: 
      label = 190; break;
    case 121: 
      var $303=HEAP32[((((_PyTextIOWrapper_Type)|0))>>2)];
      var $304=((($303)+(1))|0);
      HEAP32[((((_PyTextIOWrapper_Type)|0))>>2)]=$304;
      var $305=$m;
      var $306=_PyModule_AddObject($305, ((__str21273)|0), _PyTextIOWrapper_Type);
      var $307=(($306)|(0)) < 0;
      if ($307) { label = 122; break; } else { label = 128; break; }
    case 122: 
      label = 123; break;
    case 123: 
      var $310=HEAP32[((((_PyTextIOWrapper_Type)|0))>>2)];
      var $311=((($310)-(1))|0);
      HEAP32[((((_PyTextIOWrapper_Type)|0))>>2)]=$311;
      var $312=(($311)|(0))!=0;
      if ($312) { label = 124; break; } else { label = 125; break; }
    case 124: 
      label = 126; break;
    case 125: 
      var $315=HEAP32[((((_PyTextIOWrapper_Type+4)|0))>>2)];
      var $316=(($315+24)|0);
      var $317=HEAP32[(($316)>>2)];
      FUNCTION_TABLE[$317](_PyTextIOWrapper_Type);
      label = 126; break;
    case 126: 
      label = 127; break;
    case 127: 
      label = 190; break;
    case 128: 
      var $321=_PyType_Ready(_PyIncrementalNewlineDecoder_Type);
      var $322=(($321)|(0)) < 0;
      if ($322) { label = 129; break; } else { label = 130; break; }
    case 129: 
      label = 190; break;
    case 130: 
      var $325=HEAP32[((((_PyIncrementalNewlineDecoder_Type)|0))>>2)];
      var $326=((($325)+(1))|0);
      HEAP32[((((_PyIncrementalNewlineDecoder_Type)|0))>>2)]=$326;
      var $327=$m;
      var $328=_PyModule_AddObject($327, ((__str22274)|0), _PyIncrementalNewlineDecoder_Type);
      var $329=(($328)|(0)) < 0;
      if ($329) { label = 131; break; } else { label = 137; break; }
    case 131: 
      label = 132; break;
    case 132: 
      var $332=HEAP32[((((_PyIncrementalNewlineDecoder_Type)|0))>>2)];
      var $333=((($332)-(1))|0);
      HEAP32[((((_PyIncrementalNewlineDecoder_Type)|0))>>2)]=$333;
      var $334=(($333)|(0))!=0;
      if ($334) { label = 133; break; } else { label = 134; break; }
    case 133: 
      label = 135; break;
    case 134: 
      var $337=HEAP32[((((_PyIncrementalNewlineDecoder_Type+4)|0))>>2)];
      var $338=(($337+24)|0);
      var $339=HEAP32[(($338)>>2)];
      FUNCTION_TABLE[$339](_PyIncrementalNewlineDecoder_Type);
      label = 135; break;
    case 135: 
      label = 136; break;
    case 136: 
      label = 190; break;
    case 137: 
      var $343=_PyString_InternFromString(((__str23275)|0));
      HEAP32[((__PyIO_str_close)>>2)]=$343;
      var $344=(($343)|(0))!=0;
      if ($344) { label = 139; break; } else { label = 138; break; }
    case 138: 
      label = 190; break;
    case 139: 
      var $347=_PyString_InternFromString(((__str24278)|0));
      HEAP32[((__PyIO_str_closed)>>2)]=$347;
      var $348=(($347)|(0))!=0;
      if ($348) { label = 141; break; } else { label = 140; break; }
    case 140: 
      label = 190; break;
    case 141: 
      var $351=_PyString_InternFromString(((__str25281)|0));
      HEAP32[((__PyIO_str_decode)>>2)]=$351;
      var $352=(($351)|(0))!=0;
      if ($352) { label = 143; break; } else { label = 142; break; }
    case 142: 
      label = 190; break;
    case 143: 
      var $355=_PyString_InternFromString(((__str26282)|0));
      HEAP32[((__PyIO_str_encode)>>2)]=$355;
      var $356=(($355)|(0))!=0;
      if ($356) { label = 145; break; } else { label = 144; break; }
    case 144: 
      label = 190; break;
    case 145: 
      var $359=_PyString_InternFromString(((__str27283)|0));
      HEAP32[((__PyIO_str_fileno)>>2)]=$359;
      var $360=(($359)|(0))!=0;
      if ($360) { label = 147; break; } else { label = 146; break; }
    case 146: 
      label = 190; break;
    case 147: 
      var $363=_PyString_InternFromString(((__str28286)|0));
      HEAP32[((__PyIO_str_flush)>>2)]=$363;
      var $364=(($363)|(0))!=0;
      if ($364) { label = 149; break; } else { label = 148; break; }
    case 148: 
      label = 190; break;
    case 149: 
      var $367=_PyString_InternFromString(((__str29289)|0));
      HEAP32[((__PyIO_str_getstate)>>2)]=$367;
      var $368=(($367)|(0))!=0;
      if ($368) { label = 151; break; } else { label = 150; break; }
    case 150: 
      label = 190; break;
    case 151: 
      var $371=_PyString_InternFromString(((__str30290)|0));
      HEAP32[((__PyIO_str_isatty)>>2)]=$371;
      var $372=(($371)|(0))!=0;
      if ($372) { label = 153; break; } else { label = 152; break; }
    case 152: 
      label = 190; break;
    case 153: 
      var $375=_PyString_InternFromString(((__str31293)|0));
      HEAP32[((__PyIO_str_newlines)>>2)]=$375;
      var $376=(($375)|(0))!=0;
      if ($376) { label = 155; break; } else { label = 154; break; }
    case 154: 
      label = 190; break;
    case 155: 
      var $379=_PyString_InternFromString(((__str32294)|0));
      HEAP32[((__PyIO_str_nl)>>2)]=$379;
      var $380=(($379)|(0))!=0;
      if ($380) { label = 157; break; } else { label = 156; break; }
    case 156: 
      label = 190; break;
    case 157: 
      var $383=_PyString_InternFromString(((__str33295)|0));
      HEAP32[((__PyIO_str_read)>>2)]=$383;
      var $384=(($383)|(0))!=0;
      if ($384) { label = 159; break; } else { label = 158; break; }
    case 158: 
      label = 190; break;
    case 159: 
      var $387=_PyString_InternFromString(((__str34298)|0));
      HEAP32[((__PyIO_str_read1)>>2)]=$387;
      var $388=(($387)|(0))!=0;
      if ($388) { label = 161; break; } else { label = 160; break; }
    case 160: 
      label = 190; break;
    case 161: 
      var $391=_PyString_InternFromString(((__str35299)|0));
      HEAP32[((__PyIO_str_readable)>>2)]=$391;
      var $392=(($391)|(0))!=0;
      if ($392) { label = 163; break; } else { label = 162; break; }
    case 162: 
      label = 190; break;
    case 163: 
      var $395=_PyString_InternFromString(((__str36302)|0));
      HEAP32[((__PyIO_str_readinto)>>2)]=$395;
      var $396=(($395)|(0))!=0;
      if ($396) { label = 165; break; } else { label = 164; break; }
    case 164: 
      label = 190; break;
    case 165: 
      var $399=_PyString_InternFromString(((__str37305)|0));
      HEAP32[((__PyIO_str_readline)>>2)]=$399;
      var $400=(($399)|(0))!=0;
      if ($400) { label = 167; break; } else { label = 166; break; }
    case 166: 
      label = 190; break;
    case 167: 
      var $403=_PyString_InternFromString(((__str38308)|0));
      HEAP32[((__PyIO_str_reset)>>2)]=$403;
      var $404=(($403)|(0))!=0;
      if ($404) { label = 169; break; } else { label = 168; break; }
    case 168: 
      label = 190; break;
    case 169: 
      var $407=_PyString_InternFromString(((__str39309)|0));
      HEAP32[((__PyIO_str_seek)>>2)]=$407;
      var $408=(($407)|(0))!=0;
      if ($408) { label = 171; break; } else { label = 170; break; }
    case 170: 
      label = 190; break;
    case 171: 
      var $411=_PyString_InternFromString(((__str40312)|0));
      HEAP32[((__PyIO_str_seekable)>>2)]=$411;
      var $412=(($411)|(0))!=0;
      if ($412) { label = 173; break; } else { label = 172; break; }
    case 172: 
      label = 190; break;
    case 173: 
      var $415=_PyString_InternFromString(((__str41315)|0));
      HEAP32[((__PyIO_str_setstate)>>2)]=$415;
      var $416=(($415)|(0))!=0;
      if ($416) { label = 175; break; } else { label = 174; break; }
    case 174: 
      label = 190; break;
    case 175: 
      var $419=_PyString_InternFromString(((__str42316)|0));
      HEAP32[((__PyIO_str_tell)>>2)]=$419;
      var $420=(($419)|(0))!=0;
      if ($420) { label = 177; break; } else { label = 176; break; }
    case 176: 
      label = 190; break;
    case 177: 
      var $423=_PyString_InternFromString(((__str43319)|0));
      HEAP32[((__PyIO_str_truncate)>>2)]=$423;
      var $424=(($423)|(0))!=0;
      if ($424) { label = 179; break; } else { label = 178; break; }
    case 178: 
      label = 190; break;
    case 179: 
      var $427=_PyString_InternFromString(((__str44322)|0));
      HEAP32[((__PyIO_str_write)>>2)]=$427;
      var $428=(($427)|(0))!=0;
      if ($428) { label = 181; break; } else { label = 180; break; }
    case 180: 
      label = 190; break;
    case 181: 
      var $431=_PyString_InternFromString(((__str45325)|0));
      HEAP32[((__PyIO_str_writable)>>2)]=$431;
      var $432=(($431)|(0))!=0;
      if ($432) { label = 183; break; } else { label = 182; break; }
    case 182: 
      label = 190; break;
    case 183: 
      var $435=_PyUnicodeUCS2_FromStringAndSize(0, 0);
      HEAP32[((__PyIO_empty_str)>>2)]=$435;
      var $436=(($435)|(0))!=0;
      if ($436) { label = 185; break; } else { label = 184; break; }
    case 184: 
      label = 190; break;
    case 185: 
      var $439=_PyString_FromStringAndSize(0, 0);
      HEAP32[((__PyIO_empty_bytes)>>2)]=$439;
      var $440=(($439)|(0))!=0;
      if ($440) { label = 187; break; } else { label = 186; break; }
    case 186: 
      label = 190; break;
    case 187: 
      var $443=_PyLong_FromLong(0);
      HEAP32[((__PyIO_zero)>>2)]=$443;
      var $444=(($443)|(0))!=0;
      if ($444) { label = 189; break; } else { label = 188; break; }
    case 188: 
      label = 190; break;
    case 189: 
      label = 213; break;
    case 190: 
      label = 191; break;
    case 191: 
      var $449=HEAP32[((__PyIO_os_module)>>2)];
      var $450=(($449)|(0))!=0;
      if ($450) { label = 192; break; } else { label = 198; break; }
    case 192: 
      var $452=HEAP32[((__PyIO_os_module)>>2)];
      $_py_tmp=$452;
      HEAP32[((__PyIO_os_module)>>2)]=0;
      label = 193; break;
    case 193: 
      var $454=$_py_tmp;
      var $455=(($454)|0);
      var $456=HEAP32[(($455)>>2)];
      var $457=((($456)-(1))|0);
      HEAP32[(($455)>>2)]=$457;
      var $458=(($457)|(0))!=0;
      if ($458) { label = 194; break; } else { label = 195; break; }
    case 194: 
      label = 196; break;
    case 195: 
      var $461=$_py_tmp;
      var $462=(($461+4)|0);
      var $463=HEAP32[(($462)>>2)];
      var $464=(($463+24)|0);
      var $465=HEAP32[(($464)>>2)];
      var $466=$_py_tmp;
      FUNCTION_TABLE[$465]($466);
      label = 196; break;
    case 196: 
      label = 197; break;
    case 197: 
      label = 198; break;
    case 198: 
      label = 199; break;
    case 199: 
      label = 200; break;
    case 200: 
      var $472=HEAP32[((__PyIO_unsupported_operation)>>2)];
      var $473=(($472)|(0))!=0;
      if ($473) { label = 201; break; } else { label = 207; break; }
    case 201: 
      var $475=HEAP32[((__PyIO_unsupported_operation)>>2)];
      $_py_tmp1=$475;
      HEAP32[((__PyIO_unsupported_operation)>>2)]=0;
      label = 202; break;
    case 202: 
      var $477=$_py_tmp1;
      var $478=(($477)|0);
      var $479=HEAP32[(($478)>>2)];
      var $480=((($479)-(1))|0);
      HEAP32[(($478)>>2)]=$480;
      var $481=(($480)|(0))!=0;
      if ($481) { label = 203; break; } else { label = 204; break; }
    case 203: 
      label = 205; break;
    case 204: 
      var $484=$_py_tmp1;
      var $485=(($484+4)|0);
      var $486=HEAP32[(($485)>>2)];
      var $487=(($486+24)|0);
      var $488=HEAP32[(($487)>>2)];
      var $489=$_py_tmp1;
      FUNCTION_TABLE[$488]($489);
      label = 205; break;
    case 205: 
      label = 206; break;
    case 206: 
      label = 207; break;
    case 207: 
      label = 208; break;
    case 208: 
      label = 209; break;
    case 209: 
      var $495=$m;
      var $496=(($495)|0);
      var $497=HEAP32[(($496)>>2)];
      var $498=((($497)-(1))|0);
      HEAP32[(($496)>>2)]=$498;
      var $499=(($498)|(0))!=0;
      if ($499) { label = 210; break; } else { label = 211; break; }
    case 210: 
      label = 212; break;
    case 211: 
      var $502=$m;
      var $503=(($502+4)|0);
      var $504=HEAP32[(($503)>>2)];
      var $505=(($504+24)|0);
      var $506=HEAP32[(($505)>>2)];
      var $507=$m;
      FUNCTION_TABLE[$506]($507);
      label = 212; break;
    case 212: 
      label = 213; break;
    case 213: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_init_io"] = _init_io;
function _io_open($self, $args, $kwds) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 140)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $kwlist=__stackBase__;
      var $file=(__stackBase__)+(32);
      var $mode=(__stackBase__)+(36);
      var $buffering=(__stackBase__)+(40);
      var $closefd=(__stackBase__)+(44);
      var $encoding=(__stackBase__)+(48);
      var $errors=(__stackBase__)+(52);
      var $newline=(__stackBase__)+(56);
      var $i;
      var $reading;
      var $writing;
      var $appending;
      var $updating;
      var $text;
      var $binary;
      var $universal;
      var $rawmode=(__stackBase__)+(60);
      var $m;
      var $line_buffering;
      var $isatty;
      var $raw;
      var $modeobj;
      var $buffer;
      var $wrapper;
      var $repr;
      var $c;
      var $res;
      var $st=(__stackBase__)+(68);
      var $fileno;
      var $res1;
      var $Buffered_class;
      var $_py_tmp;
      var $_py_tmp2;
      $2=$self;
      $3=$args;
      $4=$kwds;
      var $5=$kwlist;
      assert(32 % 1 === 0);_memcpy($5, _io_open_kwlist, 32);
      HEAP32[(($mode)>>2)]=((__str54338)|0);
      HEAP32[(($buffering)>>2)]=-1;
      HEAP32[(($closefd)>>2)]=1;
      HEAP32[(($encoding)>>2)]=0;
      HEAP32[(($errors)>>2)]=0;
      HEAP32[(($newline)>>2)]=0;
      $reading=0;
      $writing=0;
      $appending=0;
      $updating=0;
      $text=0;
      $binary=0;
      $universal=0;
      $modeobj=0;
      $buffer=0;
      $wrapper=0;
      var $6=$3;
      var $7=$4;
      var $8=(($kwlist)|0);
      var $9=__PyArg_ParseTupleAndKeywords_SizeT($6, $7, ((__str55339)|0), $8, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 28)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$file,HEAP32[(((tempInt)+(4))>>2)]=$mode,HEAP32[(((tempInt)+(8))>>2)]=$buffering,HEAP32[(((tempInt)+(12))>>2)]=$encoding,HEAP32[(((tempInt)+(16))>>2)]=$errors,HEAP32[(((tempInt)+(20))>>2)]=$newline,HEAP32[(((tempInt)+(24))>>2)]=$closefd,tempInt));
      var $10=(($9)|(0))!=0;
      if ($10) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 190; break;
    case 3: 
      var $13=HEAP32[(($file)>>2)];
      var $14=(($13+4)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15+84)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=$17 & 268435456;
      var $19=(($18)|(0))!=0;
      if ($19) { label = 14; break; } else { label = 4; break; }
    case 4: 
      var $21=HEAP32[(($file)>>2)];
      var $22=(($21+4)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+84)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=$25 & 134217728;
      var $27=(($26)|(0))!=0;
      if ($27) { label = 14; break; } else { label = 5; break; }
    case 5: 
      var $29=HEAP32[(($file)>>2)];
      var $30=_PyNumber_Check($29);
      var $31=(($30)|(0))!=0;
      if ($31) { label = 14; break; } else { label = 6; break; }
    case 6: 
      var $33=HEAP32[(($file)>>2)];
      var $34=_PyObject_Repr($33);
      $repr=$34;
      var $35=$repr;
      var $36=(($35)|(0))!=0;
      if ($36) { label = 7; break; } else { label = 13; break; }
    case 7: 
      var $38=HEAP32[((_PyExc_TypeError)>>2)];
      var $39=$repr;
      var $40=$39;
      var $41=(($40+20)|0);
      var $42=(($41)|0);
      var $43=_PyErr_Format($38, ((__str56340)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$42,tempInt));
      label = 8; break;
    case 8: 
      var $45=$repr;
      var $46=(($45)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=((($47)-(1))|0);
      HEAP32[(($46)>>2)]=$48;
      var $49=(($48)|(0))!=0;
      if ($49) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 11; break;
    case 10: 
      var $52=$repr;
      var $53=(($52+4)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54+24)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=$repr;
      FUNCTION_TABLE[$56]($57);
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      $1=0;
      label = 190; break;
    case 14: 
      $i=0;
      label = 15; break;
    case 15: 
      var $63=$i;
      var $64=HEAP32[(($mode)>>2)];
      var $65=_strlen($64);
      var $66=(($63)>>>(0)) < (($65)>>>(0));
      if ($66) { label = 16; break; } else { label = 30; break; }
    case 16: 
      var $68=$i;
      var $69=HEAP32[(($mode)>>2)];
      var $70=(($69+$68)|0);
      var $71=HEAP8[($70)];
      $c=$71;
      var $72=$c;
      var $73=(($72 << 24) >> 24);
      if ((($73)|(0))==114) {
        label = 17; break;
      }
      else if ((($73)|(0))==119) {
        label = 18; break;
      }
      else if ((($73)|(0))==97) {
        label = 19; break;
      }
      else if ((($73)|(0))==43) {
        label = 20; break;
      }
      else if ((($73)|(0))==116) {
        label = 21; break;
      }
      else if ((($73)|(0))==98) {
        label = 22; break;
      }
      else if ((($73)|(0))==85) {
        label = 23; break;
      }
      else {
      label = 24; break;
      }
    case 17: 
      $reading=1;
      label = 25; break;
    case 18: 
      $writing=1;
      label = 25; break;
    case 19: 
      $appending=1;
      label = 25; break;
    case 20: 
      $updating=1;
      label = 25; break;
    case 21: 
      $text=1;
      label = 25; break;
    case 22: 
      $binary=1;
      label = 25; break;
    case 23: 
      $universal=1;
      $reading=1;
      label = 25; break;
    case 24: 
      label = 27; break;
    case 25: 
      var $83=HEAP32[(($mode)>>2)];
      var $84=$i;
      var $85=(($83+$84)|0);
      var $86=(($85+1)|0);
      var $87=$c;
      var $88=(($87 << 24) >> 24);
      var $89=_strchr($86, $88);
      var $90=(($89)|(0))!=0;
      if ($90) { label = 26; break; } else { label = 28; break; }
    case 26: 
      label = 27; break;
    case 27: 
      var $93=HEAP32[((_PyExc_ValueError)>>2)];
      var $94=HEAP32[(($mode)>>2)];
      var $95=_PyErr_Format($93, ((__str57341)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$94,tempInt));
      $1=0;
      label = 190; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $98=$i;
      var $99=((($98)+(1))|0);
      $i=$99;
      label = 15; break;
    case 30: 
      var $101=(($rawmode)|0);
      $m=$101;
      var $102=$reading;
      var $103=(($102)|(0))!=0;
      if ($103) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $105=$m;
      var $106=(($105+1)|0);
      $m=$106;
      HEAP8[($105)]=114;
      label = 32; break;
    case 32: 
      var $108=$writing;
      var $109=(($108)|(0))!=0;
      if ($109) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $111=$m;
      var $112=(($111+1)|0);
      $m=$112;
      HEAP8[($111)]=119;
      label = 34; break;
    case 34: 
      var $114=$appending;
      var $115=(($114)|(0))!=0;
      if ($115) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $117=$m;
      var $118=(($117+1)|0);
      $m=$118;
      HEAP8[($117)]=97;
      label = 36; break;
    case 36: 
      var $120=$updating;
      var $121=(($120)|(0))!=0;
      if ($121) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $123=$m;
      var $124=(($123+1)|0);
      $m=$124;
      HEAP8[($123)]=43;
      label = 38; break;
    case 38: 
      var $126=$m;
      HEAP8[($126)]=0;
      var $127=$universal;
      var $128=(($127)|(0))!=0;
      if ($128) { label = 39; break; } else { label = 43; break; }
    case 39: 
      var $130=$writing;
      var $131=(($130)|(0))!=0;
      if ($131) { label = 41; break; } else { label = 40; break; }
    case 40: 
      var $133=$appending;
      var $134=(($133)|(0))!=0;
      if ($134) { label = 41; break; } else { label = 42; break; }
    case 41: 
      var $136=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($136, ((__str58342)|0));
      $1=0;
      label = 190; break;
    case 42: 
      $reading=1;
      label = 43; break;
    case 43: 
      var $139=$text;
      var $140=(($139)|(0))!=0;
      if ($140) { label = 44; break; } else { label = 46; break; }
    case 44: 
      var $142=$binary;
      var $143=(($142)|(0))!=0;
      if ($143) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $145=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($145, ((__str59343)|0));
      $1=0;
      label = 190; break;
    case 46: 
      var $147=$reading;
      var $148=$writing;
      var $149=((($147)+($148))|0);
      var $150=$appending;
      var $151=((($149)+($150))|0);
      var $152=(($151)|(0)) > 1;
      if ($152) { label = 47; break; } else { label = 48; break; }
    case 47: 
      var $154=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($154, ((__str60344)|0));
      $1=0;
      label = 190; break;
    case 48: 
      var $156=$binary;
      var $157=(($156)|(0))!=0;
      if ($157) { label = 49; break; } else { label = 51; break; }
    case 49: 
      var $159=HEAP32[(($encoding)>>2)];
      var $160=(($159)|(0))!=0;
      if ($160) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $162=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($162, ((__str61345)|0));
      $1=0;
      label = 190; break;
    case 51: 
      var $164=$binary;
      var $165=(($164)|(0))!=0;
      if ($165) { label = 52; break; } else { label = 54; break; }
    case 52: 
      var $167=HEAP32[(($errors)>>2)];
      var $168=(($167)|(0))!=0;
      if ($168) { label = 53; break; } else { label = 54; break; }
    case 53: 
      var $170=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($170, ((__str62346)|0));
      $1=0;
      label = 190; break;
    case 54: 
      var $172=$binary;
      var $173=(($172)|(0))!=0;
      if ($173) { label = 55; break; } else { label = 57; break; }
    case 55: 
      var $175=HEAP32[(($newline)>>2)];
      var $176=(($175)|(0))!=0;
      if ($176) { label = 56; break; } else { label = 57; break; }
    case 56: 
      var $178=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($178, ((__str63347)|0));
      $1=0;
      label = 190; break;
    case 57: 
      var $180=HEAP32[(($file)>>2)];
      var $181=(($rawmode)|0);
      var $182=HEAP32[(($closefd)>>2)];
      var $183=__PyObject_CallFunction_SizeT(_PyFileIO_Type, ((__str64348)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$180,HEAP32[(((tempInt)+(4))>>2)]=$181,HEAP32[(((tempInt)+(8))>>2)]=$182,tempInt));
      $raw=$183;
      var $184=$raw;
      var $185=(($184)|(0))==0;
      if ($185) { label = 58; break; } else { label = 59; break; }
    case 58: 
      $1=0;
      label = 190; break;
    case 59: 
      var $188=HEAP32[(($mode)>>2)];
      var $189=_PyUnicodeUCS2_FromString($188);
      $modeobj=$189;
      var $190=$modeobj;
      var $191=(($190)|(0))==0;
      if ($191) { label = 60; break; } else { label = 61; break; }
    case 60: 
      label = 149; break;
    case 61: 
      var $194=$raw;
      var $195=__PyObject_CallMethod_SizeT($194, ((__str30290)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $res=$195;
      var $196=$res;
      var $197=(($196)|(0))==0;
      if ($197) { label = 62; break; } else { label = 63; break; }
    case 62: 
      label = 149; break;
    case 63: 
      var $200=$res;
      var $201=_PyLong_AsLong($200);
      $isatty=$201;
      label = 64; break;
    case 64: 
      var $203=$res;
      var $204=(($203)|0);
      var $205=HEAP32[(($204)>>2)];
      var $206=((($205)-(1))|0);
      HEAP32[(($204)>>2)]=$206;
      var $207=(($206)|(0))!=0;
      if ($207) { label = 65; break; } else { label = 66; break; }
    case 65: 
      label = 67; break;
    case 66: 
      var $210=$res;
      var $211=(($210+4)|0);
      var $212=HEAP32[(($211)>>2)];
      var $213=(($212+24)|0);
      var $214=HEAP32[(($213)>>2)];
      var $215=$res;
      FUNCTION_TABLE[$214]($215);
      label = 67; break;
    case 67: 
      label = 68; break;
    case 68: 
      var $218=$isatty;
      var $219=(($218)|(0))==-1;
      if ($219) { label = 69; break; } else { label = 71; break; }
    case 69: 
      var $221=_PyErr_Occurred();
      var $222=(($221)|(0))!=0;
      if ($222) { label = 70; break; } else { label = 71; break; }
    case 70: 
      label = 149; break;
    case 71: 
      var $225=HEAP32[(($buffering)>>2)];
      var $226=(($225)|(0))==1;
      if ($226) { label = 74; break; } else { label = 72; break; }
    case 72: 
      var $228=HEAP32[(($buffering)>>2)];
      var $229=(($228)|(0)) < 0;
      if ($229) { label = 73; break; } else { label = 75; break; }
    case 73: 
      var $231=$isatty;
      var $232=(($231)|(0))!=0;
      if ($232) { label = 74; break; } else { label = 75; break; }
    case 74: 
      HEAP32[(($buffering)>>2)]=-1;
      $line_buffering=1;
      label = 76; break;
    case 75: 
      $line_buffering=0;
      label = 76; break;
    case 76: 
      var $236=HEAP32[(($buffering)>>2)];
      var $237=(($236)|(0)) < 0;
      if ($237) { label = 77; break; } else { label = 91; break; }
    case 77: 
      HEAP32[(($buffering)>>2)]=8192;
      var $239=$raw;
      var $240=__PyObject_CallMethod_SizeT($239, ((__str27283)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $res1=$240;
      var $241=$res1;
      var $242=(($241)|(0))==0;
      if ($242) { label = 78; break; } else { label = 79; break; }
    case 78: 
      label = 149; break;
    case 79: 
      var $245=$res1;
      var $246=__PyInt_AsInt($245);
      $fileno=$246;
      label = 80; break;
    case 80: 
      var $248=$res1;
      var $249=(($248)|0);
      var $250=HEAP32[(($249)>>2)];
      var $251=((($250)-(1))|0);
      HEAP32[(($249)>>2)]=$251;
      var $252=(($251)|(0))!=0;
      if ($252) { label = 81; break; } else { label = 82; break; }
    case 81: 
      label = 83; break;
    case 82: 
      var $255=$res1;
      var $256=(($255+4)|0);
      var $257=HEAP32[(($256)>>2)];
      var $258=(($257+24)|0);
      var $259=HEAP32[(($258)>>2)];
      var $260=$res1;
      FUNCTION_TABLE[$259]($260);
      label = 83; break;
    case 83: 
      label = 84; break;
    case 84: 
      var $263=$fileno;
      var $264=(($263)|(0))==-1;
      if ($264) { label = 85; break; } else { label = 87; break; }
    case 85: 
      var $266=_PyErr_Occurred();
      var $267=(($266)|(0))!=0;
      if ($267) { label = 86; break; } else { label = 87; break; }
    case 86: 
      label = 149; break;
    case 87: 
      var $270=$fileno;
      var $271=_fstat($270, $st);
      var $272=(($271)|(0)) >= 0;
      if ($272) { label = 88; break; } else { label = 90; break; }
    case 88: 
      var $274=(($st+56)|0);
      var $275=HEAP32[(($274)>>2)];
      var $276=(($275)|(0)) > 1;
      if ($276) { label = 89; break; } else { label = 90; break; }
    case 89: 
      var $278=(($st+56)|0);
      var $279=HEAP32[(($278)>>2)];
      HEAP32[(($buffering)>>2)]=$279;
      label = 90; break;
    case 90: 
      label = 91; break;
    case 91: 
      var $282=HEAP32[(($buffering)>>2)];
      var $283=(($282)|(0)) < 0;
      if ($283) { label = 92; break; } else { label = 93; break; }
    case 92: 
      var $285=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($285, ((__str65349)|0));
      label = 149; break;
    case 93: 
      var $287=HEAP32[(($buffering)>>2)];
      var $288=(($287)|(0))==0;
      if ($288) { label = 94; break; } else { label = 102; break; }
    case 94: 
      var $290=$binary;
      var $291=(($290)|(0))!=0;
      if ($291) { label = 96; break; } else { label = 95; break; }
    case 95: 
      var $293=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($293, ((__str66350)|0));
      label = 149; break;
    case 96: 
      label = 97; break;
    case 97: 
      var $296=$modeobj;
      var $297=(($296)|0);
      var $298=HEAP32[(($297)>>2)];
      var $299=((($298)-(1))|0);
      HEAP32[(($297)>>2)]=$299;
      var $300=(($299)|(0))!=0;
      if ($300) { label = 98; break; } else { label = 99; break; }
    case 98: 
      label = 100; break;
    case 99: 
      var $303=$modeobj;
      var $304=(($303+4)|0);
      var $305=HEAP32[(($304)>>2)];
      var $306=(($305+24)|0);
      var $307=HEAP32[(($306)>>2)];
      var $308=$modeobj;
      FUNCTION_TABLE[$307]($308);
      label = 100; break;
    case 100: 
      label = 101; break;
    case 101: 
      var $311=$raw;
      $1=$311;
      label = 190; break;
    case 102: 
      var $313=$updating;
      var $314=(($313)|(0))!=0;
      if ($314) { label = 103; break; } else { label = 104; break; }
    case 103: 
      $Buffered_class=_PyBufferedRandom_Type;
      label = 112; break;
    case 104: 
      var $317=$writing;
      var $318=(($317)|(0))!=0;
      if ($318) { label = 106; break; } else { label = 105; break; }
    case 105: 
      var $320=$appending;
      var $321=(($320)|(0))!=0;
      if ($321) { label = 106; break; } else { label = 107; break; }
    case 106: 
      $Buffered_class=_PyBufferedWriter_Type;
      label = 111; break;
    case 107: 
      var $324=$reading;
      var $325=(($324)|(0))!=0;
      if ($325) { label = 108; break; } else { label = 109; break; }
    case 108: 
      $Buffered_class=_PyBufferedReader_Type;
      label = 110; break;
    case 109: 
      var $328=HEAP32[((_PyExc_ValueError)>>2)];
      var $329=HEAP32[(($mode)>>2)];
      var $330=_PyErr_Format($328, ((__str67351)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$329,tempInt));
      label = 149; break;
    case 110: 
      label = 111; break;
    case 111: 
      label = 112; break;
    case 112: 
      var $334=$Buffered_class;
      var $335=$raw;
      var $336=HEAP32[(($buffering)>>2)];
      var $337=__PyObject_CallFunction_SizeT($334, ((__str68352)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$335,HEAP32[(((tempInt)+(4))>>2)]=$336,tempInt));
      $buffer=$337;
      label = 113; break;
    case 113: 
      var $339=$raw;
      var $340=(($339)|(0))!=0;
      if ($340) { label = 114; break; } else { label = 120; break; }
    case 114: 
      var $342=$raw;
      $_py_tmp=$342;
      $raw=0;
      label = 115; break;
    case 115: 
      var $344=$_py_tmp;
      var $345=(($344)|0);
      var $346=HEAP32[(($345)>>2)];
      var $347=((($346)-(1))|0);
      HEAP32[(($345)>>2)]=$347;
      var $348=(($347)|(0))!=0;
      if ($348) { label = 116; break; } else { label = 117; break; }
    case 116: 
      label = 118; break;
    case 117: 
      var $351=$_py_tmp;
      var $352=(($351+4)|0);
      var $353=HEAP32[(($352)>>2)];
      var $354=(($353+24)|0);
      var $355=HEAP32[(($354)>>2)];
      var $356=$_py_tmp;
      FUNCTION_TABLE[$355]($356);
      label = 118; break;
    case 118: 
      label = 119; break;
    case 119: 
      label = 120; break;
    case 120: 
      label = 121; break;
    case 121: 
      var $361=$buffer;
      var $362=(($361)|(0))==0;
      if ($362) { label = 122; break; } else { label = 123; break; }
    case 122: 
      label = 149; break;
    case 123: 
      var $365=$binary;
      var $366=(($365)|(0))!=0;
      if ($366) { label = 124; break; } else { label = 130; break; }
    case 124: 
      label = 125; break;
    case 125: 
      var $369=$modeobj;
      var $370=(($369)|0);
      var $371=HEAP32[(($370)>>2)];
      var $372=((($371)-(1))|0);
      HEAP32[(($370)>>2)]=$372;
      var $373=(($372)|(0))!=0;
      if ($373) { label = 126; break; } else { label = 127; break; }
    case 126: 
      label = 128; break;
    case 127: 
      var $376=$modeobj;
      var $377=(($376+4)|0);
      var $378=HEAP32[(($377)>>2)];
      var $379=(($378+24)|0);
      var $380=HEAP32[(($379)>>2)];
      var $381=$modeobj;
      FUNCTION_TABLE[$380]($381);
      label = 128; break;
    case 128: 
      label = 129; break;
    case 129: 
      var $384=$buffer;
      $1=$384;
      label = 190; break;
    case 130: 
      var $386=$buffer;
      var $387=HEAP32[(($encoding)>>2)];
      var $388=HEAP32[(($errors)>>2)];
      var $389=HEAP32[(($newline)>>2)];
      var $390=$line_buffering;
      var $391=__PyObject_CallFunction_SizeT(_PyTextIOWrapper_Type, ((__str69353)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$386,HEAP32[(((tempInt)+(4))>>2)]=$387,HEAP32[(((tempInt)+(8))>>2)]=$388,HEAP32[(((tempInt)+(12))>>2)]=$389,HEAP32[(((tempInt)+(16))>>2)]=$390,tempInt));
      $wrapper=$391;
      label = 131; break;
    case 131: 
      var $393=$buffer;
      var $394=(($393)|(0))!=0;
      if ($394) { label = 132; break; } else { label = 138; break; }
    case 132: 
      var $396=$buffer;
      $_py_tmp2=$396;
      $buffer=0;
      label = 133; break;
    case 133: 
      var $398=$_py_tmp2;
      var $399=(($398)|0);
      var $400=HEAP32[(($399)>>2)];
      var $401=((($400)-(1))|0);
      HEAP32[(($399)>>2)]=$401;
      var $402=(($401)|(0))!=0;
      if ($402) { label = 134; break; } else { label = 135; break; }
    case 134: 
      label = 136; break;
    case 135: 
      var $405=$_py_tmp2;
      var $406=(($405+4)|0);
      var $407=HEAP32[(($406)>>2)];
      var $408=(($407+24)|0);
      var $409=HEAP32[(($408)>>2)];
      var $410=$_py_tmp2;
      FUNCTION_TABLE[$409]($410);
      label = 136; break;
    case 136: 
      label = 137; break;
    case 137: 
      label = 138; break;
    case 138: 
      label = 139; break;
    case 139: 
      var $415=$wrapper;
      var $416=(($415)|(0))==0;
      if ($416) { label = 140; break; } else { label = 141; break; }
    case 140: 
      label = 149; break;
    case 141: 
      var $419=$wrapper;
      var $420=$modeobj;
      var $421=_PyObject_SetAttrString($419, ((__str48332)|0), $420);
      var $422=(($421)|(0)) < 0;
      if ($422) { label = 142; break; } else { label = 143; break; }
    case 142: 
      label = 149; break;
    case 143: 
      label = 144; break;
    case 144: 
      var $426=$modeobj;
      var $427=(($426)|0);
      var $428=HEAP32[(($427)>>2)];
      var $429=((($428)-(1))|0);
      HEAP32[(($427)>>2)]=$429;
      var $430=(($429)|(0))!=0;
      if ($430) { label = 145; break; } else { label = 146; break; }
    case 145: 
      label = 147; break;
    case 146: 
      var $433=$modeobj;
      var $434=(($433+4)|0);
      var $435=HEAP32[(($434)>>2)];
      var $436=(($435+24)|0);
      var $437=HEAP32[(($436)>>2)];
      var $438=$modeobj;
      FUNCTION_TABLE[$437]($438);
      label = 147; break;
    case 147: 
      label = 148; break;
    case 148: 
      var $441=$wrapper;
      $1=$441;
      label = 190; break;
    case 149: 
      label = 150; break;
    case 150: 
      var $444=$raw;
      var $445=(($444)|(0))==0;
      if ($445) { label = 151; break; } else { label = 152; break; }
    case 151: 
      label = 158; break;
    case 152: 
      label = 153; break;
    case 153: 
      var $449=$raw;
      var $450=(($449)|0);
      var $451=HEAP32[(($450)>>2)];
      var $452=((($451)-(1))|0);
      HEAP32[(($450)>>2)]=$452;
      var $453=(($452)|(0))!=0;
      if ($453) { label = 154; break; } else { label = 155; break; }
    case 154: 
      label = 156; break;
    case 155: 
      var $456=$raw;
      var $457=(($456+4)|0);
      var $458=HEAP32[(($457)>>2)];
      var $459=(($458+24)|0);
      var $460=HEAP32[(($459)>>2)];
      var $461=$raw;
      FUNCTION_TABLE[$460]($461);
      label = 156; break;
    case 156: 
      label = 157; break;
    case 157: 
      label = 158; break;
    case 158: 
      label = 159; break;
    case 159: 
      label = 160; break;
    case 160: 
      var $467=$modeobj;
      var $468=(($467)|(0))==0;
      if ($468) { label = 161; break; } else { label = 162; break; }
    case 161: 
      label = 168; break;
    case 162: 
      label = 163; break;
    case 163: 
      var $472=$modeobj;
      var $473=(($472)|0);
      var $474=HEAP32[(($473)>>2)];
      var $475=((($474)-(1))|0);
      HEAP32[(($473)>>2)]=$475;
      var $476=(($475)|(0))!=0;
      if ($476) { label = 164; break; } else { label = 165; break; }
    case 164: 
      label = 166; break;
    case 165: 
      var $479=$modeobj;
      var $480=(($479+4)|0);
      var $481=HEAP32[(($480)>>2)];
      var $482=(($481+24)|0);
      var $483=HEAP32[(($482)>>2)];
      var $484=$modeobj;
      FUNCTION_TABLE[$483]($484);
      label = 166; break;
    case 166: 
      label = 167; break;
    case 167: 
      label = 168; break;
    case 168: 
      label = 169; break;
    case 169: 
      label = 170; break;
    case 170: 
      var $490=$buffer;
      var $491=(($490)|(0))==0;
      if ($491) { label = 171; break; } else { label = 172; break; }
    case 171: 
      label = 178; break;
    case 172: 
      label = 173; break;
    case 173: 
      var $495=$buffer;
      var $496=(($495)|0);
      var $497=HEAP32[(($496)>>2)];
      var $498=((($497)-(1))|0);
      HEAP32[(($496)>>2)]=$498;
      var $499=(($498)|(0))!=0;
      if ($499) { label = 174; break; } else { label = 175; break; }
    case 174: 
      label = 176; break;
    case 175: 
      var $502=$buffer;
      var $503=(($502+4)|0);
      var $504=HEAP32[(($503)>>2)];
      var $505=(($504+24)|0);
      var $506=HEAP32[(($505)>>2)];
      var $507=$buffer;
      FUNCTION_TABLE[$506]($507);
      label = 176; break;
    case 176: 
      label = 177; break;
    case 177: 
      label = 178; break;
    case 178: 
      label = 179; break;
    case 179: 
      label = 180; break;
    case 180: 
      var $513=$wrapper;
      var $514=(($513)|(0))==0;
      if ($514) { label = 181; break; } else { label = 182; break; }
    case 181: 
      label = 188; break;
    case 182: 
      label = 183; break;
    case 183: 
      var $518=$wrapper;
      var $519=(($518)|0);
      var $520=HEAP32[(($519)>>2)];
      var $521=((($520)-(1))|0);
      HEAP32[(($519)>>2)]=$521;
      var $522=(($521)|(0))!=0;
      if ($522) { label = 184; break; } else { label = 185; break; }
    case 184: 
      label = 186; break;
    case 185: 
      var $525=$wrapper;
      var $526=(($525+4)|0);
      var $527=HEAP32[(($526)>>2)];
      var $528=(($527+24)|0);
      var $529=HEAP32[(($528)>>2)];
      var $530=$wrapper;
      FUNCTION_TABLE[$529]($530);
      label = 186; break;
    case 186: 
      label = 187; break;
    case 187: 
      label = 188; break;
    case 188: 
      label = 189; break;
    case 189: 
      $1=0;
      label = 190; break;
    case 190: 
      var $536=$1;
      STACKTOP = __stackBase__;
      return $536;
    default: assert(0, "bad label: " + label);
  }
}
function _stringio_traverse($self, $visit, $arg) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $vret;
      $2=$self;
      $3=$visit;
      $4=$arg;
      label = 2; break;
    case 2: 
      var $6=$2;
      var $7=(($6+40)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $11=$3;
      var $12=$2;
      var $13=(($12+40)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$4;
      var $16=FUNCTION_TABLE[$11]($14, $15);
      $vret=$16;
      var $17=$vret;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $20=$vret;
      $1=$20;
      label = 8; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      $1=0;
      label = 8; break;
    case 8: 
      var $25=$1;
      return $25;
    default: assert(0, "bad label: " + label);
  }
}
function _stringio_clear($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $_py_tmp;
      $1=$self;
      label = 2; break;
    case 2: 
      var $3=$1;
      var $4=(($3+40)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 9; break; }
    case 3: 
      var $8=$1;
      var $9=(($8+40)|0);
      var $10=HEAP32[(($9)>>2)];
      $_py_tmp=$10;
      var $11=$1;
      var $12=(($11+40)|0);
      HEAP32[(($12)>>2)]=0;
      label = 4; break;
    case 4: 
      var $14=$_py_tmp;
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=((($16)-(1))|0);
      HEAP32[(($15)>>2)]=$17;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 7; break;
    case 6: 
      var $21=$_py_tmp;
      var $22=(($21+4)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+24)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=$_py_tmp;
      FUNCTION_TABLE[$25]($26);
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      return 0;
    default: assert(0, "bad label: " + label);
  }
}
function _stringio_iternext($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $line;
      $2=$self;
      var $3=$2;
      var $4=(($3+24)|0);
      var $5=HEAP8[($4)];
      var $6=(($5 << 24) >> 24);
      var $7=(($6)|(0)) <= 0;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $9=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($9, ((__str19382)|0));
      $1=0;
      label = 26; break;
    case 3: 
      var $11=$2;
      var $12=(($11+25)|0);
      var $13=HEAP8[($12)];
      var $14=(($13 << 24) >> 24)!=0;
      if ($14) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $16=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($16, ((__str20383)|0));
      $1=0;
      label = 26; break;
    case 5: 
      var $18=$2;
      var $19=$18;
      var $20=(($19+4)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21)|(0))==((_PyStringIO_Type)|(0));
      if ($22) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $24=$2;
      var $25=__stringio_readline($24, -1);
      $line=$25;
      label = 16; break;
    case 7: 
      var $27=$2;
      var $28=$27;
      var $29=HEAP32[((__PyIO_str_readline)>>2)];
      var $30=_PyObject_CallMethodObjArgs($28, $29, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $line=$30;
      var $31=$line;
      var $32=(($31)|(0))!=0;
      if ($32) { label = 8; break; } else { label = 15; break; }
    case 8: 
      var $34=$line;
      var $35=(($34+4)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36+84)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=$38 & 268435456;
      var $40=(($39)|(0))!=0;
      if ($40) { label = 15; break; } else { label = 9; break; }
    case 9: 
      var $42=HEAP32[((_PyExc_IOError)>>2)];
      var $43=$line;
      var $44=(($43+4)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=(($45+12)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=_PyErr_Format($42, ((__str51414)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$47,tempInt));
      label = 10; break;
    case 10: 
      var $50=$line;
      var $51=(($50)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=((($52)-(1))|0);
      HEAP32[(($51)>>2)]=$53;
      var $54=(($53)|(0))!=0;
      if ($54) { label = 11; break; } else { label = 12; break; }
    case 11: 
      label = 13; break;
    case 12: 
      var $57=$line;
      var $58=(($57+4)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=(($59+24)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=$line;
      FUNCTION_TABLE[$61]($62);
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      $1=0;
      label = 26; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $67=$line;
      var $68=(($67)|(0))==0;
      if ($68) { label = 17; break; } else { label = 18; break; }
    case 17: 
      $1=0;
      label = 26; break;
    case 18: 
      var $71=$line;
      var $72=$71;
      var $73=(($72+8)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=(($74)|(0))==0;
      if ($75) { label = 19; break; } else { label = 25; break; }
    case 19: 
      label = 20; break;
    case 20: 
      var $78=$line;
      var $79=(($78)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=((($80)-(1))|0);
      HEAP32[(($79)>>2)]=$81;
      var $82=(($81)|(0))!=0;
      if ($82) { label = 21; break; } else { label = 22; break; }
    case 21: 
      label = 23; break;
    case 22: 
      var $85=$line;
      var $86=(($85+4)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=(($87+24)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=$line;
      FUNCTION_TABLE[$89]($90);
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      $1=0;
      label = 26; break;
    case 25: 
      var $94=$line;
      $1=$94;
      label = 26; break;
    case 26: 
      var $96=$1;
      STACKTOP = __stackBase__;
      return $96;
    default: assert(0, "bad label: " + label);
  }
}
function _blockingioerror_init($self, $args, $kwds) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $myerrno=__stackBase__;
      var $strerror=(__stackBase__)+(4);
      var $baseargs;
      var $written=(__stackBase__)+(8);
      $2=$self;
      $3=$args;
      $4=$kwds;
      HEAP32[(($myerrno)>>2)]=0;
      HEAP32[(($strerror)>>2)]=0;
      $baseargs=0;
      HEAP32[(($written)>>2)]=0;
      var $5=$3;
      var $6=(($5+4)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7+84)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=$9 & 67108864;
      var $11=(($10)|(0))!=0;
      if ($11) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      ___assert_func(((__str250)|0), 104, ((___func___blockingioerror_init)|0), ((__str71355)|0));
      throw "Reached an unreachable!";
      label = 4; break;
    case 4: 
      var $16=$2;
      var $17=(($16+32)|0);
      HEAP32[(($17)>>2)]=0;
      var $18=$3;
      var $19=__PyArg_ParseTuple_SizeT($18, ((__str72)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$myerrno,HEAP32[(((tempInt)+(4))>>2)]=$strerror,HEAP32[(((tempInt)+(8))>>2)]=$written,tempInt));
      var $20=(($19)|(0))!=0;
      if ($20) { label = 6; break; } else { label = 5; break; }
    case 5: 
      $1=-1;
      label = 21; break;
    case 6: 
      var $23=HEAP32[(($myerrno)>>2)];
      var $24=HEAP32[(($strerror)>>2)];
      var $25=_PyTuple_Pack(2, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$23,HEAP32[(((tempInt)+(4))>>2)]=$24,tempInt));
      $baseargs=$25;
      var $26=$baseargs;
      var $27=(($26)|(0))==0;
      if ($27) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $1=-1;
      label = 21; break;
    case 8: 
      var $30=HEAP32[((_PyExc_IOError)>>2)];
      var $31=$30;
      var $32=(($31+148)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=$2;
      var $35=$34;
      var $36=$baseargs;
      var $37=$4;
      var $38=FUNCTION_TABLE[$33]($35, $36, $37);
      var $39=(($38)|(0))==-1;
      if ($39) { label = 9; break; } else { label = 15; break; }
    case 9: 
      label = 10; break;
    case 10: 
      var $42=$baseargs;
      var $43=(($42)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=((($44)-(1))|0);
      HEAP32[(($43)>>2)]=$45;
      var $46=(($45)|(0))!=0;
      if ($46) { label = 11; break; } else { label = 12; break; }
    case 11: 
      label = 13; break;
    case 12: 
      var $49=$baseargs;
      var $50=(($49+4)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=(($51+24)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=$baseargs;
      FUNCTION_TABLE[$53]($54);
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      $1=-1;
      label = 21; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $59=$baseargs;
      var $60=(($59)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=((($61)-(1))|0);
      HEAP32[(($60)>>2)]=$62;
      var $63=(($62)|(0))!=0;
      if ($63) { label = 17; break; } else { label = 18; break; }
    case 17: 
      label = 19; break;
    case 18: 
      var $66=$baseargs;
      var $67=(($66+4)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=(($68+24)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=$baseargs;
      FUNCTION_TABLE[$70]($71);
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $74=HEAP32[(($written)>>2)];
      var $75=$2;
      var $76=(($75+32)|0);
      HEAP32[(($76)>>2)]=$74;
      $1=0;
      label = 21; break;
    case 21: 
      var $78=$1;
      STACKTOP = __stackBase__;
      return $78;
    default: assert(0, "bad label: " + label);
  }
}
function _stringio_dealloc($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $g;
      var $_py_tmp;
      var $_py_tmp1;
      var $_py_tmp2;
      var $_py_tmp3;
      $1=$self;
      label = 2; break;
    case 2: 
      var $3=$1;
      var $4=$3;
      var $5=((($4)-(12))|0);
      $g=$5;
      var $6=$g;
      var $7=$6;
      var $8=(($7+8)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9)|(0))!=-2;
      if ($10) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 5; break;
    case 4: 
      ___assert_func(((__str1363)|0), 516, ((___func___stringio_dealloc)|0), ((__str52415)|0));
      throw "Reached an unreachable!";
      label = 5; break;
    case 5: 
      var $15=$g;
      var $16=$15;
      var $17=(($16+8)|0);
      HEAP32[(($17)>>2)]=-2;
      var $18=$g;
      var $19=$18;
      var $20=(($19)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$g;
      var $23=$22;
      var $24=(($23+4)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=$25;
      var $27=(($26)|0);
      HEAP32[(($27)>>2)]=$21;
      var $28=$g;
      var $29=$28;
      var $30=(($29+4)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=$g;
      var $33=$32;
      var $34=(($33)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=$35;
      var $37=(($36+4)|0);
      HEAP32[(($37)>>2)]=$31;
      var $38=$g;
      var $39=$38;
      var $40=(($39)|0);
      HEAP32[(($40)>>2)]=0;
      label = 6; break;
    case 6: 
      var $42=$1;
      var $43=(($42+24)|0);
      HEAP8[($43)]=0;
      var $44=$1;
      var $45=(($44+8)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46)|(0))!=0;
      if ($47) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $49=$1;
      var $50=(($49+8)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=$51;
      _PyMem_Free($52);
      var $53=$1;
      var $54=(($53+8)|0);
      HEAP32[(($54)>>2)]=0;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $57=$1;
      var $58=(($57+32)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=(($59)|(0))!=0;
      if ($60) { label = 10; break; } else { label = 16; break; }
    case 10: 
      var $62=$1;
      var $63=(($62+32)|0);
      var $64=HEAP32[(($63)>>2)];
      $_py_tmp=$64;
      var $65=$1;
      var $66=(($65+32)|0);
      HEAP32[(($66)>>2)]=0;
      label = 11; break;
    case 11: 
      var $68=$_py_tmp;
      var $69=(($68)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=((($70)-(1))|0);
      HEAP32[(($69)>>2)]=$71;
      var $72=(($71)|(0))!=0;
      if ($72) { label = 12; break; } else { label = 13; break; }
    case 12: 
      label = 14; break;
    case 13: 
      var $75=$_py_tmp;
      var $76=(($75+4)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=(($77+24)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=$_py_tmp;
      FUNCTION_TABLE[$79]($80);
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $86=$1;
      var $87=(($86+36)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=(($88)|(0))!=0;
      if ($89) { label = 19; break; } else { label = 25; break; }
    case 19: 
      var $91=$1;
      var $92=(($91+36)|0);
      var $93=HEAP32[(($92)>>2)];
      $_py_tmp1=$93;
      var $94=$1;
      var $95=(($94+36)|0);
      HEAP32[(($95)>>2)]=0;
      label = 20; break;
    case 20: 
      var $97=$_py_tmp1;
      var $98=(($97)|0);
      var $99=HEAP32[(($98)>>2)];
      var $100=((($99)-(1))|0);
      HEAP32[(($98)>>2)]=$100;
      var $101=(($100)|(0))!=0;
      if ($101) { label = 21; break; } else { label = 22; break; }
    case 21: 
      label = 23; break;
    case 22: 
      var $104=$_py_tmp1;
      var $105=(($104+4)|0);
      var $106=HEAP32[(($105)>>2)];
      var $107=(($106+24)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=$_py_tmp1;
      FUNCTION_TABLE[$108]($109);
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $115=$1;
      var $116=(($115+28)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=(($117)|(0))!=0;
      if ($118) { label = 28; break; } else { label = 34; break; }
    case 28: 
      var $120=$1;
      var $121=(($120+28)|0);
      var $122=HEAP32[(($121)>>2)];
      $_py_tmp2=$122;
      var $123=$1;
      var $124=(($123+28)|0);
      HEAP32[(($124)>>2)]=0;
      label = 29; break;
    case 29: 
      var $126=$_py_tmp2;
      var $127=(($126)|0);
      var $128=HEAP32[(($127)>>2)];
      var $129=((($128)-(1))|0);
      HEAP32[(($127)>>2)]=$129;
      var $130=(($129)|(0))!=0;
      if ($130) { label = 30; break; } else { label = 31; break; }
    case 30: 
      label = 32; break;
    case 31: 
      var $133=$_py_tmp2;
      var $134=(($133+4)|0);
      var $135=HEAP32[(($134)>>2)];
      var $136=(($135+24)|0);
      var $137=HEAP32[(($136)>>2)];
      var $138=$_py_tmp2;
      FUNCTION_TABLE[$137]($138);
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $144=$1;
      var $145=(($144+40)|0);
      var $146=HEAP32[(($145)>>2)];
      var $147=(($146)|(0))!=0;
      if ($147) { label = 37; break; } else { label = 43; break; }
    case 37: 
      var $149=$1;
      var $150=(($149+40)|0);
      var $151=HEAP32[(($150)>>2)];
      $_py_tmp3=$151;
      var $152=$1;
      var $153=(($152+40)|0);
      HEAP32[(($153)>>2)]=0;
      label = 38; break;
    case 38: 
      var $155=$_py_tmp3;
      var $156=(($155)|0);
      var $157=HEAP32[(($156)>>2)];
      var $158=((($157)-(1))|0);
      HEAP32[(($156)>>2)]=$158;
      var $159=(($158)|(0))!=0;
      if ($159) { label = 39; break; } else { label = 40; break; }
    case 39: 
      label = 41; break;
    case 40: 
      var $162=$_py_tmp3;
      var $163=(($162+4)|0);
      var $164=HEAP32[(($163)>>2)];
      var $165=(($164+24)|0);
      var $166=HEAP32[(($165)>>2)];
      var $167=$_py_tmp3;
      FUNCTION_TABLE[$166]($167);
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      var $172=$1;
      var $173=(($172+44)|0);
      var $174=HEAP32[(($173)>>2)];
      var $175=(($174)|(0))!=0;
      if ($175) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $177=$1;
      var $178=$177;
      _PyObject_ClearWeakRefs($178);
      label = 46; break;
    case 46: 
      var $180=$1;
      var $181=$180;
      var $182=(($181+4)|0);
      var $183=HEAP32[(($182)>>2)];
      var $184=(($183+160)|0);
      var $185=HEAP32[(($184)>>2)];
      var $186=$1;
      var $187=$186;
      FUNCTION_TABLE[$185]($187);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _stringio_init($self, $args, $kwds) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 20)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $kwlist=__stackBase__;
      var $value=(__stackBase__)+(12);
      var $newline=(__stackBase__)+(16);
      var $_py_tmp;
      var $_py_tmp1;
      var $_py_tmp2;
      var $len;
      $2=$self;
      $3=$args;
      $4=$kwds;
      var $5=$kwlist;
      assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[((_stringio_init_kwlist)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[(((_stringio_init_kwlist)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[(((_stringio_init_kwlist)+(8))>>2)];
      HEAP32[(($value)>>2)]=0;
      HEAP32[(($newline)>>2)]=((__str5367)|0);
      var $6=$3;
      var $7=$4;
      var $8=(($kwlist)|0);
      var $9=__PyArg_ParseTupleAndKeywords_SizeT($6, $7, ((__str6368)|0), $8, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$value,HEAP32[(((tempInt)+(4))>>2)]=$newline,tempInt));
      var $10=(($9)|(0))!=0;
      if ($10) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=-1;
      label = 68; break;
    case 3: 
      var $13=HEAP32[(($newline)>>2)];
      var $14=(($13)|(0))!=0;
      if ($14) { label = 4; break; } else { label = 13; break; }
    case 4: 
      var $16=HEAP32[(($newline)>>2)];
      var $17=(($16)|0);
      var $18=HEAP8[($17)];
      var $19=(($18 << 24) >> 24);
      var $20=(($19)|(0))!=0;
      if ($20) { label = 5; break; } else { label = 13; break; }
    case 5: 
      var $22=HEAP32[(($newline)>>2)];
      var $23=(($22)|0);
      var $24=HEAP8[($23)];
      var $25=(($24 << 24) >> 24);
      var $26=(($25)|(0))==10;
      if ($26) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $28=HEAP32[(($newline)>>2)];
      var $29=(($28+1)|0);
      var $30=HEAP8[($29)];
      var $31=(($30 << 24) >> 24);
      var $32=(($31)|(0))==0;
      if ($32) { label = 13; break; } else { label = 7; break; }
    case 7: 
      var $34=HEAP32[(($newline)>>2)];
      var $35=(($34)|0);
      var $36=HEAP8[($35)];
      var $37=(($36 << 24) >> 24);
      var $38=(($37)|(0))==13;
      if ($38) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $40=HEAP32[(($newline)>>2)];
      var $41=(($40+1)|0);
      var $42=HEAP8[($41)];
      var $43=(($42 << 24) >> 24);
      var $44=(($43)|(0))==0;
      if ($44) { label = 13; break; } else { label = 9; break; }
    case 9: 
      var $46=HEAP32[(($newline)>>2)];
      var $47=(($46)|0);
      var $48=HEAP8[($47)];
      var $49=(($48 << 24) >> 24);
      var $50=(($49)|(0))==13;
      if ($50) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $52=HEAP32[(($newline)>>2)];
      var $53=(($52+1)|0);
      var $54=HEAP8[($53)];
      var $55=(($54 << 24) >> 24);
      var $56=(($55)|(0))==10;
      if ($56) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $58=HEAP32[(($newline)>>2)];
      var $59=(($58+2)|0);
      var $60=HEAP8[($59)];
      var $61=(($60 << 24) >> 24);
      var $62=(($61)|(0))==0;
      if ($62) { label = 13; break; } else { label = 12; break; }
    case 12: 
      var $64=HEAP32[((_PyExc_ValueError)>>2)];
      var $65=HEAP32[(($newline)>>2)];
      var $66=_PyErr_Format($64, ((__str7369)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$65,tempInt));
      $1=-1;
      label = 68; break;
    case 13: 
      var $68=HEAP32[(($value)>>2)];
      var $69=(($68)|(0))!=0;
      if ($69) { label = 14; break; } else { label = 17; break; }
    case 14: 
      var $71=HEAP32[(($value)>>2)];
      var $72=(($71)|(0))!=((__Py_NoneStruct)|(0));
      if ($72) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $74=HEAP32[(($value)>>2)];
      var $75=(($74+4)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=(($76+84)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=$78 & 268435456;
      var $80=(($79)|(0))!=0;
      if ($80) { label = 17; break; } else { label = 16; break; }
    case 16: 
      var $82=HEAP32[((_PyExc_TypeError)>>2)];
      var $83=HEAP32[(($value)>>2)];
      var $84=(($83+4)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=(($85+12)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=_PyErr_Format($82, ((__str8370)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$87,tempInt));
      $1=-1;
      label = 68; break;
    case 17: 
      var $90=$2;
      var $91=(($90+24)|0);
      HEAP8[($91)]=0;
      label = 18; break;
    case 18: 
      var $93=$2;
      var $94=(($93+32)|0);
      var $95=HEAP32[(($94)>>2)];
      var $96=(($95)|(0))!=0;
      if ($96) { label = 19; break; } else { label = 25; break; }
    case 19: 
      var $98=$2;
      var $99=(($98+32)|0);
      var $100=HEAP32[(($99)>>2)];
      $_py_tmp=$100;
      var $101=$2;
      var $102=(($101+32)|0);
      HEAP32[(($102)>>2)]=0;
      label = 20; break;
    case 20: 
      var $104=$_py_tmp;
      var $105=(($104)|0);
      var $106=HEAP32[(($105)>>2)];
      var $107=((($106)-(1))|0);
      HEAP32[(($105)>>2)]=$107;
      var $108=(($107)|(0))!=0;
      if ($108) { label = 21; break; } else { label = 22; break; }
    case 21: 
      label = 23; break;
    case 22: 
      var $111=$_py_tmp;
      var $112=(($111+4)|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=(($113+24)|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=$_py_tmp;
      FUNCTION_TABLE[$115]($116);
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $122=$2;
      var $123=(($122+36)|0);
      var $124=HEAP32[(($123)>>2)];
      var $125=(($124)|(0))!=0;
      if ($125) { label = 28; break; } else { label = 34; break; }
    case 28: 
      var $127=$2;
      var $128=(($127+36)|0);
      var $129=HEAP32[(($128)>>2)];
      $_py_tmp1=$129;
      var $130=$2;
      var $131=(($130+36)|0);
      HEAP32[(($131)>>2)]=0;
      label = 29; break;
    case 29: 
      var $133=$_py_tmp1;
      var $134=(($133)|0);
      var $135=HEAP32[(($134)>>2)];
      var $136=((($135)-(1))|0);
      HEAP32[(($134)>>2)]=$136;
      var $137=(($136)|(0))!=0;
      if ($137) { label = 30; break; } else { label = 31; break; }
    case 30: 
      label = 32; break;
    case 31: 
      var $140=$_py_tmp1;
      var $141=(($140+4)|0);
      var $142=HEAP32[(($141)>>2)];
      var $143=(($142+24)|0);
      var $144=HEAP32[(($143)>>2)];
      var $145=$_py_tmp1;
      FUNCTION_TABLE[$144]($145);
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $151=$2;
      var $152=(($151+28)|0);
      var $153=HEAP32[(($152)>>2)];
      var $154=(($153)|(0))!=0;
      if ($154) { label = 37; break; } else { label = 43; break; }
    case 37: 
      var $156=$2;
      var $157=(($156+28)|0);
      var $158=HEAP32[(($157)>>2)];
      $_py_tmp2=$158;
      var $159=$2;
      var $160=(($159+28)|0);
      HEAP32[(($160)>>2)]=0;
      label = 38; break;
    case 38: 
      var $162=$_py_tmp2;
      var $163=(($162)|0);
      var $164=HEAP32[(($163)>>2)];
      var $165=((($164)-(1))|0);
      HEAP32[(($163)>>2)]=$165;
      var $166=(($165)|(0))!=0;
      if ($166) { label = 39; break; } else { label = 40; break; }
    case 39: 
      label = 41; break;
    case 40: 
      var $169=$_py_tmp2;
      var $170=(($169+4)|0);
      var $171=HEAP32[(($170)>>2)];
      var $172=(($171+24)|0);
      var $173=HEAP32[(($172)>>2)];
      var $174=$_py_tmp2;
      FUNCTION_TABLE[$173]($174);
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      var $179=HEAP32[(($newline)>>2)];
      var $180=(($179)|(0))!=0;
      if ($180) { label = 45; break; } else { label = 48; break; }
    case 45: 
      var $182=HEAP32[(($newline)>>2)];
      var $183=_PyString_FromString($182);
      var $184=$2;
      var $185=(($184+32)|0);
      HEAP32[(($185)>>2)]=$183;
      var $186=$2;
      var $187=(($186+32)|0);
      var $188=HEAP32[(($187)>>2)];
      var $189=(($188)|(0))==0;
      if ($189) { label = 46; break; } else { label = 47; break; }
    case 46: 
      $1=-1;
      label = 68; break;
    case 47: 
      label = 48; break;
    case 48: 
      var $193=HEAP32[(($newline)>>2)];
      var $194=(($193)|(0))==0;
      if ($194) { var $202 = 1;label = 50; break; } else { label = 49; break; }
    case 49: 
      var $196=HEAP32[(($newline)>>2)];
      var $197=(($196)|0);
      var $198=HEAP8[($197)];
      var $199=(($198 << 24) >> 24);
      var $200=(($199)|(0))==0;
      var $202 = $200;label = 50; break;
    case 50: 
      var $202;
      var $203=(($202)&(1));
      var $204=(($203) & 255);
      var $205=$2;
      var $206=(($205+26)|0);
      HEAP8[($206)]=$204;
      var $207=HEAP32[(($newline)>>2)];
      var $208=(($207)|(0))==0;
      var $209=(($208)&(1));
      var $210=(($209) & 255);
      var $211=$2;
      var $212=(($211+27)|0);
      HEAP8[($212)]=$210;
      var $213=HEAP32[(($newline)>>2)];
      var $214=(($213)|(0))!=0;
      if ($214) { label = 51; break; } else { label = 53; break; }
    case 51: 
      var $216=HEAP32[(($newline)>>2)];
      var $217=(($216)|0);
      var $218=HEAP8[($217)];
      var $219=(($218 << 24) >> 24);
      var $220=(($219)|(0))==13;
      if ($220) { label = 52; break; } else { label = 53; break; }
    case 52: 
      var $222=HEAP32[(($newline)>>2)];
      var $223=_PyUnicodeUCS2_FromString($222);
      var $224=$2;
      var $225=(($224+36)|0);
      HEAP32[(($225)>>2)]=$223;
      label = 53; break;
    case 53: 
      var $227=$2;
      var $228=(($227+26)|0);
      var $229=HEAP8[($228)];
      var $230=(($229 << 24) >> 24)!=0;
      if ($230) { label = 54; break; } else { label = 57; break; }
    case 54: 
      var $232=$2;
      var $233=(($232+27)|0);
      var $234=HEAP8[($233)];
      var $235=(($234 << 24) >> 24);
      var $236=__PyObject_CallFunction_SizeT(_PyIncrementalNewlineDecoder_Type, ((__str9371)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=__Py_NoneStruct,HEAP32[(((tempInt)+(4))>>2)]=$235,tempInt));
      var $237=$2;
      var $238=(($237+28)|0);
      HEAP32[(($238)>>2)]=$236;
      var $239=$2;
      var $240=(($239+28)|0);
      var $241=HEAP32[(($240)>>2)];
      var $242=(($241)|(0))==0;
      if ($242) { label = 55; break; } else { label = 56; break; }
    case 55: 
      $1=-1;
      label = 68; break;
    case 56: 
      label = 57; break;
    case 57: 
      var $246=$2;
      var $247=(($246+16)|0);
      HEAP32[(($247)>>2)]=0;
      var $248=HEAP32[(($value)>>2)];
      var $249=(($248)|(0))!=0;
      if ($249) { label = 58; break; } else { label = 64; break; }
    case 58: 
      var $251=HEAP32[(($value)>>2)];
      var $252=(($251)|(0))!=((__Py_NoneStruct)|(0));
      if ($252) { label = 59; break; } else { label = 64; break; }
    case 59: 
      var $254=HEAP32[(($value)>>2)];
      var $255=_PyUnicodeUCS2_GetSize($254);
      $len=$255;
      var $256=$2;
      var $257=$len;
      var $258=_resize_buffer416($256, $257);
      var $259=(($258)|(0)) < 0;
      if ($259) { label = 60; break; } else { label = 61; break; }
    case 60: 
      $1=-1;
      label = 68; break;
    case 61: 
      var $262=$2;
      var $263=(($262+12)|0);
      HEAP32[(($263)>>2)]=0;
      var $264=$2;
      var $265=HEAP32[(($value)>>2)];
      var $266=_write_str($264, $265);
      var $267=(($266)|(0)) < 0;
      if ($267) { label = 62; break; } else { label = 63; break; }
    case 62: 
      $1=-1;
      label = 68; break;
    case 63: 
      label = 67; break;
    case 64: 
      var $271=$2;
      var $272=_resize_buffer416($271, 0);
      var $273=(($272)|(0)) < 0;
      if ($273) { label = 65; break; } else { label = 66; break; }
    case 65: 
      $1=-1;
      label = 68; break;
    case 66: 
      label = 67; break;
    case 67: 
      var $277=$2;
      var $278=(($277+12)|0);
      HEAP32[(($278)>>2)]=0;
      var $279=$2;
      var $280=(($279+25)|0);
      HEAP8[($280)]=0;
      var $281=$2;
      var $282=(($281+24)|0);
      HEAP8[($282)]=1;
      $1=0;
      label = 68; break;
    case 68: 
      var $284=$1;
      STACKTOP = __stackBase__;
      return $284;
    default: assert(0, "bad label: " + label);
  }
}
function _stringio_new($type, $args, $kwds) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $self;
      $2=$type;
      $3=$args;
      $4=$kwds;
      var $5=$2;
      var $6=(($5)|(0))!=0;
      if ($6) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $8=$2;
      var $9=(($8+152)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|(0))!=0;
      if ($11) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 5; break;
    case 4: 
      ___assert_func(((__str1363)|0), 536, ((___func___stringio_new)|0), ((__str2364)|0));
      throw "Reached an unreachable!";
      label = 5; break;
    case 5: 
      var $16=$2;
      var $17=(($16+152)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=$2;
      var $20=FUNCTION_TABLE[$18]($19, 0);
      var $21=$20;
      $self=$21;
      var $22=$self;
      var $23=(($22)|(0))==0;
      if ($23) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $1=0;
      label = 15; break;
    case 7: 
      var $26=_PyMem_Malloc(0);
      var $27=$26;
      var $28=$self;
      var $29=(($28+8)|0);
      HEAP32[(($29)>>2)]=$27;
      var $30=$self;
      var $31=(($30+8)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32)|(0))==0;
      if ($33) { label = 8; break; } else { label = 14; break; }
    case 8: 
      label = 9; break;
    case 9: 
      var $36=$self;
      var $37=$36;
      var $38=(($37)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=((($39)-(1))|0);
      HEAP32[(($38)>>2)]=$40;
      var $41=(($40)|(0))!=0;
      if ($41) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 12; break;
    case 11: 
      var $44=$self;
      var $45=$44;
      var $46=(($45+4)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=(($47+24)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=$self;
      var $51=$50;
      FUNCTION_TABLE[$49]($51);
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $54=_PyErr_NoMemory();
      $1=$54;
      label = 15; break;
    case 14: 
      var $56=$self;
      var $57=$56;
      $1=$57;
      label = 15; break;
    case 15: 
      var $59=$1;
      return $59;
    default: assert(0, "bad label: " + label);
  }
}
function _resize_buffer416($self, $size) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $alloc;
      var $new_buf;
      $2=$self;
      $3=$size;
      var $4=$2;
      var $5=(($4+20)|0);
      var $6=HEAP32[(($5)>>2)];
      $alloc=$6;
      $new_buf=0;
      var $7=$2;
      var $8=(($7+8)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9)|(0))!=0;
      if ($10) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      ___assert_func(((__str1363)|0), 61, ((___func___resize_buffer377)|0), ((__str10372)|0));
      throw "Reached an unreachable!";
      label = 4; break;
    case 4: 
      var $15=$3;
      var $16=((($15)+(1))|0);
      $3=$16;
      var $17=$3;
      var $18=(($17)>>>(0)) > 2147483647;
      if ($18) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 20; break;
    case 6: 
      var $21=$3;
      var $22=$alloc;
      var $23=Math.floor(((($22)>>>(0)))/(2));
      var $24=(($21)>>>(0)) < (($23)>>>(0));
      if ($24) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $26=$3;
      var $27=((($26)+(1))|0);
      $alloc=$27;
      label = 15; break;
    case 8: 
      var $29=$3;
      var $30=$alloc;
      var $31=(($29)>>>(0)) < (($30)>>>(0));
      if ($31) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $1=0;
      label = 21; break;
    case 10: 
      var $34=$3;
      var $35=(($34)>>>(0));
      var $36=$alloc;
      var $37=(($36)>>>(0));
      var $38=($37)*(1.125);
      var $39=$35 <= $38;
      if ($39) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $41=$3;
      var $42=$3;
      var $43=$42 >>> 3;
      var $44=((($41)+($43))|0);
      var $45=$3;
      var $46=(($45)>>>(0)) < 9;
      var $47=$46 ? 3 : 6;
      var $48=((($44)+($47))|0);
      $alloc=$48;
      label = 13; break;
    case 12: 
      var $50=$3;
      var $51=((($50)+(1))|0);
      $alloc=$51;
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $55=$alloc;
      var $56=(($55)>>>(0)) > 2147483647;
      if ($56) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 20; break;
    case 17: 
      var $59=$2;
      var $60=(($59+8)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=$61;
      var $63=$alloc;
      var $64=($63<<1);
      var $65=_PyMem_Realloc($62, $64);
      var $66=$65;
      $new_buf=$66;
      var $67=$new_buf;
      var $68=(($67)|(0))==0;
      if ($68) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $70=_PyErr_NoMemory();
      $1=-1;
      label = 21; break;
    case 19: 
      var $72=$alloc;
      var $73=$2;
      var $74=(($73+20)|0);
      HEAP32[(($74)>>2)]=$72;
      var $75=$new_buf;
      var $76=$2;
      var $77=(($76+8)|0);
      HEAP32[(($77)>>2)]=$75;
      $1=0;
      label = 21; break;
    case 20: 
      var $79=HEAP32[((_PyExc_OverflowError)>>2)];
      _PyErr_SetString($79, ((__str15378)|0));
      $1=-1;
      label = 21; break;
    case 21: 
      var $81=$1;
      return $81;
    default: assert(0, "bad label: " + label);
  }
}
function _stringio_closed($self, $context) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$self;
      $3=$context;
      var $4=$2;
      var $5=(($4+24)|0);
      var $6=HEAP8[($5)];
      var $7=(($6 << 24) >> 24);
      var $8=(($7)|(0)) <= 0;
      if ($8) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $10=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($10, ((__str19382)|0));
      $1=0;
      label = 4; break;
    case 3: 
      var $12=$2;
      var $13=(($12+25)|0);
      var $14=HEAP8[($13)];
      var $15=(($14 << 24) >> 24);
      var $16=_PyBool_FromLong($15);
      $1=$16;
      label = 4; break;
    case 4: 
      var $18=$1;
      return $18;
    default: assert(0, "bad label: " + label);
  }
}
function _stringio_newlines($self, $context) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$self;
      $3=$context;
      var $4=$2;
      var $5=(($4+24)|0);
      var $6=HEAP8[($5)];
      var $7=(($6 << 24) >> 24);
      var $8=(($7)|(0)) <= 0;
      if ($8) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $10=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($10, ((__str19382)|0));
      $1=0;
      label = 8; break;
    case 3: 
      var $12=$2;
      var $13=(($12+25)|0);
      var $14=HEAP8[($13)];
      var $15=(($14 << 24) >> 24)!=0;
      if ($15) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $17=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($17, ((__str20383)|0));
      $1=0;
      label = 8; break;
    case 5: 
      var $19=$2;
      var $20=(($19+28)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21)|(0))==0;
      if ($22) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $24=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $25=((($24)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$25;
      $1=__Py_NoneStruct;
      label = 8; break;
    case 7: 
      var $27=$2;
      var $28=(($27+28)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=HEAP32[((__PyIO_str_newlines)>>2)];
      var $31=_PyObject_GetAttr($29, $30);
      $1=$31;
      label = 8; break;
    case 8: 
      var $33=$1;
      return $33;
    default: assert(0, "bad label: " + label);
  }
}
function _stringio_line_buffering($self, $context) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$self;
      $3=$context;
      var $4=$2;
      var $5=(($4+24)|0);
      var $6=HEAP8[($5)];
      var $7=(($6 << 24) >> 24);
      var $8=(($7)|(0)) <= 0;
      if ($8) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $10=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($10, ((__str19382)|0));
      $1=0;
      label = 6; break;
    case 3: 
      var $12=$2;
      var $13=(($12+25)|0);
      var $14=HEAP8[($13)];
      var $15=(($14 << 24) >> 24)!=0;
      if ($15) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $17=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($17, ((__str20383)|0));
      $1=0;
      label = 6; break;
    case 5: 
      var $19=HEAP32[((((__Py_ZeroStruct)|0))>>2)];
      var $20=((($19)+(1))|0);
      HEAP32[((((__Py_ZeroStruct)|0))>>2)]=$20;
      $1=__Py_ZeroStruct;
      label = 6; break;
    case 6: 
      var $22=$1;
      return $22;
    default: assert(0, "bad label: " + label);
  }
}
function _stringio_close($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $_py_tmp;
      var $_py_tmp1;
      var $_py_tmp2;
      $2=$self;
      var $3=$2;
      var $4=(($3+25)|0);
      HEAP8[($4)]=1;
      var $5=$2;
      var $6=_resize_buffer416($5, 0);
      var $7=(($6)|(0)) < 0;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 31; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $11=$2;
      var $12=(($11+32)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13)|(0))!=0;
      if ($14) { label = 5; break; } else { label = 11; break; }
    case 5: 
      var $16=$2;
      var $17=(($16+32)|0);
      var $18=HEAP32[(($17)>>2)];
      $_py_tmp=$18;
      var $19=$2;
      var $20=(($19+32)|0);
      HEAP32[(($20)>>2)]=0;
      label = 6; break;
    case 6: 
      var $22=$_py_tmp;
      var $23=(($22)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=((($24)-(1))|0);
      HEAP32[(($23)>>2)]=$25;
      var $26=(($25)|(0))!=0;
      if ($26) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 9; break;
    case 8: 
      var $29=$_py_tmp;
      var $30=(($29+4)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31+24)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=$_py_tmp;
      FUNCTION_TABLE[$33]($34);
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $40=$2;
      var $41=(($40+36)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($42)|(0))!=0;
      if ($43) { label = 14; break; } else { label = 20; break; }
    case 14: 
      var $45=$2;
      var $46=(($45+36)|0);
      var $47=HEAP32[(($46)>>2)];
      $_py_tmp1=$47;
      var $48=$2;
      var $49=(($48+36)|0);
      HEAP32[(($49)>>2)]=0;
      label = 15; break;
    case 15: 
      var $51=$_py_tmp1;
      var $52=(($51)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=((($53)-(1))|0);
      HEAP32[(($52)>>2)]=$54;
      var $55=(($54)|(0))!=0;
      if ($55) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 18; break;
    case 17: 
      var $58=$_py_tmp1;
      var $59=(($58+4)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=(($60+24)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=$_py_tmp1;
      FUNCTION_TABLE[$62]($63);
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $69=$2;
      var $70=(($69+28)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=(($71)|(0))!=0;
      if ($72) { label = 23; break; } else { label = 29; break; }
    case 23: 
      var $74=$2;
      var $75=(($74+28)|0);
      var $76=HEAP32[(($75)>>2)];
      $_py_tmp2=$76;
      var $77=$2;
      var $78=(($77+28)|0);
      HEAP32[(($78)>>2)]=0;
      label = 24; break;
    case 24: 
      var $80=$_py_tmp2;
      var $81=(($80)|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=((($82)-(1))|0);
      HEAP32[(($81)>>2)]=$83;
      var $84=(($83)|(0))!=0;
      if ($84) { label = 25; break; } else { label = 26; break; }
    case 25: 
      label = 27; break;
    case 26: 
      var $87=$_py_tmp2;
      var $88=(($87+4)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=(($89+24)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=$_py_tmp2;
      FUNCTION_TABLE[$91]($92);
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      var $97=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $98=((($97)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$98;
      $1=__Py_NoneStruct;
      label = 31; break;
    case 31: 
      var $100=$1;
      return $100;
    default: assert(0, "bad label: " + label);
  }
}
function _stringio_getvalue($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $2=$self;
      var $3=$2;
      var $4=(($3+24)|0);
      var $5=HEAP8[($4)];
      var $6=(($5 << 24) >> 24);
      var $7=(($6)|(0)) <= 0;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $9=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($9, ((__str19382)|0));
      $1=0;
      label = 6; break;
    case 3: 
      var $11=$2;
      var $12=(($11+25)|0);
      var $13=HEAP8[($12)];
      var $14=(($13 << 24) >> 24)!=0;
      if ($14) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $16=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($16, ((__str20383)|0));
      $1=0;
      label = 6; break;
    case 5: 
      var $18=$2;
      var $19=(($18+8)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=$2;
      var $22=(($21+16)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=_PyUnicodeUCS2_FromUnicode($20, $23);
      $1=$24;
      label = 6; break;
    case 6: 
      var $26=$1;
      return $26;
    default: assert(0, "bad label: " + label);
  }
}
function _stringio_read($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $size;
      var $n;
      var $output;
      var $arg=__stackBase__;
      $2=$self;
      $3=$args;
      HEAP32[(($arg)>>2)]=__Py_NoneStruct;
      var $4=$2;
      var $5=(($4+24)|0);
      var $6=HEAP8[($5)];
      var $7=(($6 << 24) >> 24);
      var $8=(($7)|(0)) <= 0;
      if ($8) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $10=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($10, ((__str19382)|0));
      $1=0;
      label = 22; break;
    case 3: 
      var $12=$3;
      var $13=__PyArg_ParseTuple_SizeT($12, ((__str50413)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$arg,tempInt));
      var $14=(($13)|(0))!=0;
      if ($14) { label = 5; break; } else { label = 4; break; }
    case 4: 
      $1=0;
      label = 22; break;
    case 5: 
      var $17=$2;
      var $18=(($17+25)|0);
      var $19=HEAP8[($18)];
      var $20=(($19 << 24) >> 24)!=0;
      if ($20) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $22=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($22, ((__str20383)|0));
      $1=0;
      label = 22; break;
    case 7: 
      var $24=HEAP32[(($arg)>>2)];
      var $25=_PyNumber_Check($24);
      var $26=(($25)|(0))!=0;
      if ($26) { label = 8; break; } else { label = 12; break; }
    case 8: 
      var $28=HEAP32[(($arg)>>2)];
      var $29=HEAP32[((_PyExc_OverflowError)>>2)];
      var $30=_PyNumber_AsSsize_t($28, $29);
      $size=$30;
      var $31=$size;
      var $32=(($31)|(0))==-1;
      if ($32) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $34=_PyErr_Occurred();
      var $35=(($34)|(0))!=0;
      if ($35) { label = 10; break; } else { label = 11; break; }
    case 10: 
      $1=0;
      label = 22; break;
    case 11: 
      label = 16; break;
    case 12: 
      var $39=HEAP32[(($arg)>>2)];
      var $40=(($39)|(0))==((__Py_NoneStruct)|(0));
      if ($40) { label = 13; break; } else { label = 14; break; }
    case 13: 
      $size=-1;
      label = 15; break;
    case 14: 
      var $43=HEAP32[((_PyExc_TypeError)>>2)];
      var $44=HEAP32[(($arg)>>2)];
      var $45=(($44+4)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46+12)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=_PyErr_Format($43, ((__str46409)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$48,tempInt));
      $1=0;
      label = 22; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $52=$2;
      var $53=(($52+16)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=$2;
      var $56=(($55+12)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=((($54)-($57))|0);
      $n=$58;
      var $59=$size;
      var $60=(($59)|(0)) < 0;
      if ($60) { label = 18; break; } else { label = 17; break; }
    case 17: 
      var $62=$size;
      var $63=$n;
      var $64=(($62)|(0)) > (($63)|(0));
      if ($64) { label = 18; break; } else { label = 21; break; }
    case 18: 
      var $66=$n;
      $size=$66;
      var $67=$size;
      var $68=(($67)|(0)) < 0;
      if ($68) { label = 19; break; } else { label = 20; break; }
    case 19: 
      $size=0;
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $72=$2;
      var $73=(($72+8)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=$2;
      var $76=(($75+12)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=(($74+($77<<1))|0);
      $output=$78;
      var $79=$size;
      var $80=$2;
      var $81=(($80+12)|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=((($82)+($79))|0);
      HEAP32[(($81)>>2)]=$83;
      var $84=$output;
      var $85=$size;
      var $86=_PyUnicodeUCS2_FromUnicode($84, $85);
      $1=$86;
      label = 22; break;
    case 22: 
      var $88=$1;
      STACKTOP = __stackBase__;
      return $88;
    default: assert(0, "bad label: " + label);
  }
}
function _stringio_readline($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $arg=__stackBase__;
      var $limit;
      $2=$self;
      $3=$args;
      HEAP32[(($arg)>>2)]=__Py_NoneStruct;
      $limit=-1;
      var $4=$2;
      var $5=(($4+24)|0);
      var $6=HEAP8[($5)];
      var $7=(($6 << 24) >> 24);
      var $8=(($7)|(0)) <= 0;
      if ($8) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $10=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($10, ((__str19382)|0));
      $1=0;
      label = 16; break;
    case 3: 
      var $12=$3;
      var $13=__PyArg_ParseTuple_SizeT($12, ((__str48411)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$arg,tempInt));
      var $14=(($13)|(0))!=0;
      if ($14) { label = 5; break; } else { label = 4; break; }
    case 4: 
      $1=0;
      label = 16; break;
    case 5: 
      var $17=$2;
      var $18=(($17+25)|0);
      var $19=HEAP8[($18)];
      var $20=(($19 << 24) >> 24)!=0;
      if ($20) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $22=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($22, ((__str20383)|0));
      $1=0;
      label = 16; break;
    case 7: 
      var $24=HEAP32[(($arg)>>2)];
      var $25=_PyNumber_Check($24);
      var $26=(($25)|(0))!=0;
      if ($26) { label = 8; break; } else { label = 12; break; }
    case 8: 
      var $28=HEAP32[(($arg)>>2)];
      var $29=HEAP32[((_PyExc_OverflowError)>>2)];
      var $30=_PyNumber_AsSsize_t($28, $29);
      $limit=$30;
      var $31=$limit;
      var $32=(($31)|(0))==-1;
      if ($32) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $34=_PyErr_Occurred();
      var $35=(($34)|(0))!=0;
      if ($35) { label = 10; break; } else { label = 11; break; }
    case 10: 
      $1=0;
      label = 16; break;
    case 11: 
      label = 15; break;
    case 12: 
      var $39=HEAP32[(($arg)>>2)];
      var $40=(($39)|(0))!=((__Py_NoneStruct)|(0));
      if ($40) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $42=HEAP32[((_PyExc_TypeError)>>2)];
      var $43=HEAP32[(($arg)>>2)];
      var $44=(($43+4)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=(($45+12)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=_PyErr_Format($42, ((__str46409)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$47,tempInt));
      $1=0;
      label = 16; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $51=$2;
      var $52=$limit;
      var $53=__stringio_readline($51, $52);
      $1=$53;
      label = 16; break;
    case 16: 
      var $55=$1;
      STACKTOP = __stackBase__;
      return $55;
    default: assert(0, "bad label: " + label);
  }
}
function _write_str($self, $obj) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $str;
      var $len;
      var $decoded;
      var $translated;
      $2=$self;
      $3=$obj;
      $decoded=0;
      var $4=$2;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0))!=0;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      ___assert_func(((__str1363)|0), 114, ((___func___write_str)|0), ((__str10372)|0));
      throw "Reached an unreachable!";
      label = 4; break;
    case 4: 
      var $12=$2;
      var $13=(($12+12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14)|(0)) >= 0;
      if ($15) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 7; break;
    case 6: 
      ___assert_func(((__str1363)|0), 115, ((___func___write_str)|0), ((__str11373)|0));
      throw "Reached an unreachable!";
      label = 7; break;
    case 7: 
      var $20=$2;
      var $21=(($20+28)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22)|(0))!=0;
      if ($23) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $25=$2;
      var $26=(($25+28)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$3;
      var $29=__PyIncrementalNewlineDecoder_decode($27, $28, 1);
      $decoded=$29;
      label = 10; break;
    case 9: 
      var $31=$3;
      $decoded=$31;
      var $32=$decoded;
      var $33=(($32)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=((($34)+(1))|0);
      HEAP32[(($33)>>2)]=$35;
      label = 10; break;
    case 10: 
      var $37=$2;
      var $38=(($37+36)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39)|(0))!=0;
      if ($40) { label = 11; break; } else { label = 17; break; }
    case 11: 
      var $42=$decoded;
      var $43=HEAP32[((__PyIO_str_nl)>>2)];
      var $44=$2;
      var $45=(($44+36)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=_PyUnicodeUCS2_Replace($42, $43, $46, -1);
      $translated=$47;
      label = 12; break;
    case 12: 
      var $49=$decoded;
      var $50=(($49)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=((($51)-(1))|0);
      HEAP32[(($50)>>2)]=$52;
      var $53=(($52)|(0))!=0;
      if ($53) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 15; break;
    case 14: 
      var $56=$decoded;
      var $57=(($56+4)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=(($58+24)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=$decoded;
      FUNCTION_TABLE[$60]($61);
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $64=$translated;
      $decoded=$64;
      label = 17; break;
    case 17: 
      var $66=$decoded;
      var $67=(($66)|(0))==0;
      if ($67) { label = 18; break; } else { label = 19; break; }
    case 18: 
      $1=-1;
      label = 52; break;
    case 19: 
      var $70=$decoded;
      var $71=(($70+4)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=(($72+84)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=$74 & 268435456;
      var $76=(($75)|(0))!=0;
      if ($76) { label = 20; break; } else { label = 21; break; }
    case 20: 
      label = 22; break;
    case 21: 
      ___assert_func(((__str1363)|0), 134, ((___func___write_str)|0), ((__str12374)|0));
      throw "Reached an unreachable!";
      label = 22; break;
    case 22: 
      var $81=$decoded;
      var $82=$81;
      var $83=(($82+12)|0);
      var $84=HEAP32[(($83)>>2)];
      $str=$84;
      var $85=$decoded;
      var $86=$85;
      var $87=(($86+8)|0);
      var $88=HEAP32[(($87)>>2)];
      $len=$88;
      var $89=$len;
      var $90=(($89)|(0)) >= 0;
      if ($90) { label = 23; break; } else { label = 24; break; }
    case 23: 
      label = 25; break;
    case 24: 
      ___assert_func(((__str1363)|0), 138, ((___func___write_str)|0), ((__str13375)|0));
      throw "Reached an unreachable!";
      label = 25; break;
    case 25: 
      var $95=$2;
      var $96=(($95+12)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=$len;
      var $99=(((2147483647)-($98))|0);
      var $100=(($97)|(0)) > (($99)|(0));
      if ($100) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $102=HEAP32[((_PyExc_OverflowError)>>2)];
      _PyErr_SetString($102, ((__str14376)|0));
      label = 41; break;
    case 27: 
      var $104=$2;
      var $105=(($104+12)|0);
      var $106=HEAP32[(($105)>>2)];
      var $107=$len;
      var $108=((($106)+($107))|0);
      var $109=$2;
      var $110=(($109+16)|0);
      var $111=HEAP32[(($110)>>2)];
      var $112=(($108)|(0)) > (($111)|(0));
      if ($112) { label = 28; break; } else { label = 31; break; }
    case 28: 
      var $114=$2;
      var $115=$2;
      var $116=(($115+12)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=$len;
      var $119=((($117)+($118))|0);
      var $120=_resize_buffer416($114, $119);
      var $121=(($120)|(0)) < 0;
      if ($121) { label = 29; break; } else { label = 30; break; }
    case 29: 
      label = 41; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $125=$2;
      var $126=(($125+12)|0);
      var $127=HEAP32[(($126)>>2)];
      var $128=$2;
      var $129=(($128+16)|0);
      var $130=HEAP32[(($129)>>2)];
      var $131=(($127)|(0)) > (($130)|(0));
      if ($131) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $133=$2;
      var $134=(($133+8)|0);
      var $135=HEAP32[(($134)>>2)];
      var $136=$2;
      var $137=(($136+16)|0);
      var $138=HEAP32[(($137)>>2)];
      var $139=(($135+($138<<1))|0);
      var $140=$139;
      var $141=$2;
      var $142=(($141+12)|0);
      var $143=HEAP32[(($142)>>2)];
      var $144=$2;
      var $145=(($144+16)|0);
      var $146=HEAP32[(($145)>>2)];
      var $147=((($143)-($146))|0);
      var $148=($147<<1);
      _memset($140, 0, $148);
      label = 33; break;
    case 33: 
      var $150=$2;
      var $151=(($150+8)|0);
      var $152=HEAP32[(($151)>>2)];
      var $153=$2;
      var $154=(($153+12)|0);
      var $155=HEAP32[(($154)>>2)];
      var $156=(($152+($155<<1))|0);
      var $157=$156;
      var $158=$str;
      var $159=$158;
      var $160=$len;
      var $161=($160<<1);
      assert($161 % 1 === 0);_memcpy($157, $159, $161);
      var $162=$len;
      var $163=$2;
      var $164=(($163+12)|0);
      var $165=HEAP32[(($164)>>2)];
      var $166=((($165)+($162))|0);
      HEAP32[(($164)>>2)]=$166;
      var $167=$2;
      var $168=(($167+16)|0);
      var $169=HEAP32[(($168)>>2)];
      var $170=$2;
      var $171=(($170+12)|0);
      var $172=HEAP32[(($171)>>2)];
      var $173=(($169)|(0)) < (($172)|(0));
      if ($173) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $175=$2;
      var $176=(($175+12)|0);
      var $177=HEAP32[(($176)>>2)];
      var $178=$2;
      var $179=(($178+16)|0);
      HEAP32[(($179)>>2)]=$177;
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $182=$decoded;
      var $183=(($182)|0);
      var $184=HEAP32[(($183)>>2)];
      var $185=((($184)-(1))|0);
      HEAP32[(($183)>>2)]=$185;
      var $186=(($185)|(0))!=0;
      if ($186) { label = 37; break; } else { label = 38; break; }
    case 37: 
      label = 39; break;
    case 38: 
      var $189=$decoded;
      var $190=(($189+4)|0);
      var $191=HEAP32[(($190)>>2)];
      var $192=(($191+24)|0);
      var $193=HEAP32[(($192)>>2)];
      var $194=$decoded;
      FUNCTION_TABLE[$193]($194);
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      $1=0;
      label = 52; break;
    case 41: 
      label = 42; break;
    case 42: 
      var $199=$decoded;
      var $200=(($199)|(0))==0;
      if ($200) { label = 43; break; } else { label = 44; break; }
    case 43: 
      label = 50; break;
    case 44: 
      label = 45; break;
    case 45: 
      var $204=$decoded;
      var $205=(($204)|0);
      var $206=HEAP32[(($205)>>2)];
      var $207=((($206)-(1))|0);
      HEAP32[(($205)>>2)]=$207;
      var $208=(($207)|(0))!=0;
      if ($208) { label = 46; break; } else { label = 47; break; }
    case 46: 
      label = 48; break;
    case 47: 
      var $211=$decoded;
      var $212=(($211+4)|0);
      var $213=HEAP32[(($212)>>2)];
      var $214=(($213+24)|0);
      var $215=HEAP32[(($214)>>2)];
      var $216=$decoded;
      FUNCTION_TABLE[$215]($216);
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      $1=-1;
      label = 52; break;
    case 52: 
      var $222=$1;
      return $222;
    default: assert(0, "bad label: " + label);
  }
}
function _stringio_tell($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $2=$self;
      var $3=$2;
      var $4=(($3+24)|0);
      var $5=HEAP8[($4)];
      var $6=(($5 << 24) >> 24);
      var $7=(($6)|(0)) <= 0;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $9=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($9, ((__str19382)|0));
      $1=0;
      label = 6; break;
    case 3: 
      var $11=$2;
      var $12=(($11+25)|0);
      var $13=HEAP8[($12)];
      var $14=(($13 << 24) >> 24)!=0;
      if ($14) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $16=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($16, ((__str20383)|0));
      $1=0;
      label = 6; break;
    case 5: 
      var $18=$2;
      var $19=(($18+12)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=_PyLong_FromSsize_t($20);
      $1=$21;
      label = 6; break;
    case 6: 
      var $23=$1;
      return $23;
    default: assert(0, "bad label: " + label);
  }
}
function _stringio_truncate($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $size;
      var $arg=__stackBase__;
      $2=$self;
      $3=$args;
      HEAP32[(($arg)>>2)]=__Py_NoneStruct;
      var $4=$2;
      var $5=(($4+24)|0);
      var $6=HEAP8[($5)];
      var $7=(($6 << 24) >> 24);
      var $8=(($7)|(0)) <= 0;
      if ($8) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $10=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($10, ((__str19382)|0));
      $1=0;
      label = 23; break;
    case 3: 
      var $12=$3;
      var $13=__PyArg_ParseTuple_SizeT($12, ((__str45408)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$arg,tempInt));
      var $14=(($13)|(0))!=0;
      if ($14) { label = 5; break; } else { label = 4; break; }
    case 4: 
      $1=0;
      label = 23; break;
    case 5: 
      var $17=$2;
      var $18=(($17+25)|0);
      var $19=HEAP8[($18)];
      var $20=(($19 << 24) >> 24)!=0;
      if ($20) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $22=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($22, ((__str20383)|0));
      $1=0;
      label = 23; break;
    case 7: 
      var $24=HEAP32[(($arg)>>2)];
      var $25=_PyNumber_Check($24);
      var $26=(($25)|(0))!=0;
      if ($26) { label = 8; break; } else { label = 12; break; }
    case 8: 
      var $28=HEAP32[(($arg)>>2)];
      var $29=HEAP32[((_PyExc_OverflowError)>>2)];
      var $30=_PyNumber_AsSsize_t($28, $29);
      $size=$30;
      var $31=$size;
      var $32=(($31)|(0))==-1;
      if ($32) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $34=_PyErr_Occurred();
      var $35=(($34)|(0))!=0;
      if ($35) { label = 10; break; } else { label = 11; break; }
    case 10: 
      $1=0;
      label = 23; break;
    case 11: 
      label = 16; break;
    case 12: 
      var $39=HEAP32[(($arg)>>2)];
      var $40=(($39)|(0))==((__Py_NoneStruct)|(0));
      if ($40) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $42=$2;
      var $43=(($42+12)|0);
      var $44=HEAP32[(($43)>>2)];
      $size=$44;
      label = 15; break;
    case 14: 
      var $46=HEAP32[((_PyExc_TypeError)>>2)];
      var $47=HEAP32[(($arg)>>2)];
      var $48=(($47+4)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=(($49+12)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=_PyErr_Format($46, ((__str46409)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$51,tempInt));
      $1=0;
      label = 23; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $55=$size;
      var $56=(($55)|(0)) < 0;
      if ($56) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $58=HEAP32[((_PyExc_ValueError)>>2)];
      var $59=$size;
      var $60=_PyErr_Format($58, ((__str47410)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$59,tempInt));
      $1=0;
      label = 23; break;
    case 18: 
      var $62=$size;
      var $63=$2;
      var $64=(($63+16)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=(($62)|(0)) < (($65)|(0));
      if ($66) { label = 19; break; } else { label = 22; break; }
    case 19: 
      var $68=$2;
      var $69=$size;
      var $70=_resize_buffer416($68, $69);
      var $71=(($70)|(0)) < 0;
      if ($71) { label = 20; break; } else { label = 21; break; }
    case 20: 
      $1=0;
      label = 23; break;
    case 21: 
      var $74=$size;
      var $75=$2;
      var $76=(($75+16)|0);
      HEAP32[(($76)>>2)]=$74;
      label = 22; break;
    case 22: 
      var $78=$size;
      var $79=_PyLong_FromSsize_t($78);
      $1=$79;
      label = 23; break;
    case 23: 
      var $81=$1;
      STACKTOP = __stackBase__;
      return $81;
    default: assert(0, "bad label: " + label);
  }
}
function _stringio_seek($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $posobj=__stackBase__;
      var $pos;
      var $mode=(__stackBase__)+(4);
      $2=$self;
      $3=$args;
      HEAP32[(($mode)>>2)]=0;
      var $4=$2;
      var $5=(($4+24)|0);
      var $6=HEAP8[($5)];
      var $7=(($6 << 24) >> 24);
      var $8=(($7)|(0)) <= 0;
      if ($8) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $10=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($10, ((__str19382)|0));
      $1=0;
      label = 28; break;
    case 3: 
      var $12=$3;
      var $13=__PyArg_ParseTuple_SizeT($12, ((__str41404)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$posobj,HEAP32[(((tempInt)+(4))>>2)]=$mode,tempInt));
      var $14=(($13)|(0))!=0;
      if ($14) { label = 5; break; } else { label = 4; break; }
    case 4: 
      $1=0;
      label = 28; break;
    case 5: 
      var $17=HEAP32[(($posobj)>>2)];
      var $18=HEAP32[((_PyExc_OverflowError)>>2)];
      var $19=_PyNumber_AsSsize_t($17, $18);
      $pos=$19;
      var $20=$pos;
      var $21=(($20)|(0))==-1;
      if ($21) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $23=_PyErr_Occurred();
      var $24=(($23)|(0))!=0;
      if ($24) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $1=0;
      label = 28; break;
    case 8: 
      var $27=$2;
      var $28=(($27+25)|0);
      var $29=HEAP8[($28)];
      var $30=(($29 << 24) >> 24)!=0;
      if ($30) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $32=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($32, ((__str20383)|0));
      $1=0;
      label = 28; break;
    case 10: 
      var $34=HEAP32[(($mode)>>2)];
      var $35=(($34)|(0))!=0;
      if ($35) { label = 11; break; } else { label = 14; break; }
    case 11: 
      var $37=HEAP32[(($mode)>>2)];
      var $38=(($37)|(0))!=1;
      if ($38) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $40=HEAP32[(($mode)>>2)];
      var $41=(($40)|(0))!=2;
      if ($41) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $43=HEAP32[((_PyExc_ValueError)>>2)];
      var $44=HEAP32[(($mode)>>2)];
      var $45=_PyErr_Format($43, ((__str42405)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$44,tempInt));
      $1=0;
      label = 28; break;
    case 14: 
      var $47=$pos;
      var $48=(($47)|(0)) < 0;
      if ($48) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $50=HEAP32[(($mode)>>2)];
      var $51=(($50)|(0))==0;
      if ($51) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $53=HEAP32[((_PyExc_ValueError)>>2)];
      var $54=$pos;
      var $55=_PyErr_Format($53, ((__str43406)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$54,tempInt));
      $1=0;
      label = 28; break;
    case 17: 
      var $57=HEAP32[(($mode)>>2)];
      var $58=(($57)|(0))!=0;
      if ($58) { label = 18; break; } else { label = 20; break; }
    case 18: 
      var $60=$pos;
      var $61=(($60)|(0))!=0;
      if ($61) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $63=HEAP32[((_PyExc_IOError)>>2)];
      _PyErr_SetString($63, ((__str44407)|0));
      $1=0;
      label = 28; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $67=HEAP32[(($mode)>>2)];
      var $68=(($67)|(0))==1;
      if ($68) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $70=$2;
      var $71=(($70+12)|0);
      var $72=HEAP32[(($71)>>2)];
      $pos=$72;
      label = 27; break;
    case 24: 
      var $74=HEAP32[(($mode)>>2)];
      var $75=(($74)|(0))==2;
      if ($75) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $77=$2;
      var $78=(($77+16)|0);
      var $79=HEAP32[(($78)>>2)];
      $pos=$79;
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $82=$pos;
      var $83=$2;
      var $84=(($83+12)|0);
      HEAP32[(($84)>>2)]=$82;
      var $85=$2;
      var $86=(($85+12)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=_PyLong_FromSsize_t($87);
      $1=$88;
      label = 28; break;
    case 28: 
      var $90=$1;
      STACKTOP = __stackBase__;
      return $90;
    default: assert(0, "bad label: " + label);
  }
}
function _stringio_write($self, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $size;
      $2=$self;
      $3=$obj;
      var $4=$2;
      var $5=(($4+24)|0);
      var $6=HEAP8[($5)];
      var $7=(($6 << 24) >> 24);
      var $8=(($7)|(0)) <= 0;
      if ($8) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $10=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($10, ((__str19382)|0));
      $1=0;
      label = 11; break;
    case 3: 
      var $12=$3;
      var $13=(($12+4)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14+84)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$16 & 268435456;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $20=HEAP32[((_PyExc_TypeError)>>2)];
      var $21=$3;
      var $22=(($21+4)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+12)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=_PyErr_Format($20, ((__str40403)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$25,tempInt));
      $1=0;
      label = 11; break;
    case 5: 
      var $28=$2;
      var $29=(($28+25)|0);
      var $30=HEAP8[($29)];
      var $31=(($30 << 24) >> 24)!=0;
      if ($31) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $33=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($33, ((__str20383)|0));
      $1=0;
      label = 11; break;
    case 7: 
      var $35=$3;
      var $36=$35;
      var $37=(($36+8)|0);
      var $38=HEAP32[(($37)>>2)];
      $size=$38;
      var $39=$size;
      var $40=(($39)|(0)) > 0;
      if ($40) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $42=$2;
      var $43=$3;
      var $44=_write_str($42, $43);
      var $45=(($44)|(0)) < 0;
      if ($45) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $1=0;
      label = 11; break;
    case 10: 
      var $48=$size;
      var $49=_PyLong_FromSsize_t($48);
      $1=$49;
      label = 11; break;
    case 11: 
      var $51=$1;
      STACKTOP = __stackBase__;
      return $51;
    default: assert(0, "bad label: " + label);
  }
}
function _stringio_seekable($self, $args) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$self;
      $3=$args;
      var $4=$2;
      var $5=(($4+24)|0);
      var $6=HEAP8[($5)];
      var $7=(($6 << 24) >> 24);
      var $8=(($7)|(0)) <= 0;
      if ($8) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $10=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($10, ((__str19382)|0));
      $1=0;
      label = 6; break;
    case 3: 
      var $12=$2;
      var $13=(($12+25)|0);
      var $14=HEAP8[($13)];
      var $15=(($14 << 24) >> 24)!=0;
      if ($15) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $17=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($17, ((__str20383)|0));
      $1=0;
      label = 6; break;
    case 5: 
      var $19=HEAP32[((((__Py_TrueStruct)|0))>>2)];
      var $20=((($19)+(1))|0);
      HEAP32[((((__Py_TrueStruct)|0))>>2)]=$20;
      $1=__Py_TrueStruct;
      label = 6; break;
    case 6: 
      var $22=$1;
      return $22;
    default: assert(0, "bad label: " + label);
  }
}
function _stringio_readable($self, $args) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$self;
      $3=$args;
      var $4=$2;
      var $5=(($4+24)|0);
      var $6=HEAP8[($5)];
      var $7=(($6 << 24) >> 24);
      var $8=(($7)|(0)) <= 0;
      if ($8) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $10=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($10, ((__str19382)|0));
      $1=0;
      label = 6; break;
    case 3: 
      var $12=$2;
      var $13=(($12+25)|0);
      var $14=HEAP8[($13)];
      var $15=(($14 << 24) >> 24)!=0;
      if ($15) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $17=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($17, ((__str20383)|0));
      $1=0;
      label = 6; break;
    case 5: 
      var $19=HEAP32[((((__Py_TrueStruct)|0))>>2)];
      var $20=((($19)+(1))|0);
      HEAP32[((((__Py_TrueStruct)|0))>>2)]=$20;
      $1=__Py_TrueStruct;
      label = 6; break;
    case 6: 
      var $22=$1;
      return $22;
    default: assert(0, "bad label: " + label);
  }
}
function _stringio_writable($self, $args) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$self;
      $3=$args;
      var $4=$2;
      var $5=(($4+24)|0);
      var $6=HEAP8[($5)];
      var $7=(($6 << 24) >> 24);
      var $8=(($7)|(0)) <= 0;
      if ($8) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $10=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($10, ((__str19382)|0));
      $1=0;
      label = 6; break;
    case 3: 
      var $12=$2;
      var $13=(($12+25)|0);
      var $14=HEAP8[($13)];
      var $15=(($14 << 24) >> 24)!=0;
      if ($15) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $17=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($17, ((__str20383)|0));
      $1=0;
      label = 6; break;
    case 5: 
      var $19=HEAP32[((((__Py_TrueStruct)|0))>>2)];
      var $20=((($19)+(1))|0);
      HEAP32[((((__Py_TrueStruct)|0))>>2)]=$20;
      $1=__Py_TrueStruct;
      label = 6; break;
    case 6: 
      var $22=$1;
      return $22;
    default: assert(0, "bad label: " + label);
  }
}
function _stringio_getstate($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $initvalue;
      var $dict;
      var $state;
      $2=$self;
      var $3=$2;
      var $4=_stringio_getvalue($3);
      $initvalue=$4;
      var $5=$initvalue;
      var $6=(($5)|(0))==0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 17; break;
    case 3: 
      var $9=$2;
      var $10=(($9+40)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))==0;
      if ($12) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $14=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $15=((($14)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$15;
      $dict=__Py_NoneStruct;
      label = 8; break;
    case 5: 
      var $17=$2;
      var $18=(($17+40)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=_PyDict_Copy($19);
      $dict=$20;
      var $21=$dict;
      var $22=(($21)|(0))==0;
      if ($22) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $1=0;
      label = 17; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $26=$initvalue;
      var $27=$2;
      var $28=(($27+32)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29)|(0))!=0;
      if ($30) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $32=$2;
      var $33=(($32+32)|0);
      var $34=HEAP32[(($33)>>2)];
      var $37 = $34;label = 11; break;
    case 10: 
      var $37 = __Py_NoneStruct;label = 11; break;
    case 11: 
      var $37;
      var $38=$2;
      var $39=(($38+12)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=$dict;
      var $42=__Py_BuildValue_SizeT(((__str39402)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$26,HEAP32[(((tempInt)+(4))>>2)]=$37,HEAP32[(((tempInt)+(8))>>2)]=$40,HEAP32[(((tempInt)+(12))>>2)]=$41,tempInt));
      $state=$42;
      label = 12; break;
    case 12: 
      var $44=$initvalue;
      var $45=(($44)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=((($46)-(1))|0);
      HEAP32[(($45)>>2)]=$47;
      var $48=(($47)|(0))!=0;
      if ($48) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 15; break;
    case 14: 
      var $51=$initvalue;
      var $52=(($51+4)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=(($53+24)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=$initvalue;
      FUNCTION_TABLE[$55]($56);
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $59=$state;
      $1=$59;
      label = 17; break;
    case 17: 
      var $61=$1;
      STACKTOP = __stackBase__;
      return $61;
    default: assert(0, "bad label: " + label);
  }
}
function __stringio_readline($self, $limit) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $start;
      var $end;
      var $old_char;
      var $len;
      var $consumed=__stackBase__;
      $2=$self;
      $3=$limit;
      var $4=$2;
      var $5=(($4+12)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=$2;
      var $8=(($7+16)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($6)|(0)) >= (($9)|(0));
      if ($10) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $12=_PyUnicodeUCS2_FromString(((__str49412)|0));
      $1=$12;
      label = 9; break;
    case 3: 
      var $14=$2;
      var $15=(($14+8)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$2;
      var $18=(($17+12)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($16+($19<<1))|0);
      $start=$20;
      var $21=$3;
      var $22=(($21)|(0)) < 0;
      if ($22) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $24=$3;
      var $25=$2;
      var $26=(($25+16)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$2;
      var $29=(($28+12)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=((($27)-($30))|0);
      var $32=(($24)|(0)) > (($31)|(0));
      if ($32) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $34=$2;
      var $35=(($34+16)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=$2;
      var $38=(($37+12)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=((($36)-($39))|0);
      $3=$40;
      label = 6; break;
    case 6: 
      var $42=$start;
      var $43=$3;
      var $44=(($42+($43<<1))|0);
      $end=$44;
      var $45=$end;
      var $46=HEAP16[(($45)>>1)];
      $old_char=$46;
      var $47=$end;
      HEAP16[(($47)>>1)]=0;
      var $48=$2;
      var $49=(($48+27)|0);
      var $50=HEAP8[($49)];
      var $51=(($50 << 24) >> 24);
      var $52=$2;
      var $53=(($52+26)|0);
      var $54=HEAP8[($53)];
      var $55=(($54 << 24) >> 24);
      var $56=$2;
      var $57=(($56+32)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=$start;
      var $60=$end;
      var $61=__PyIO_find_line_ending($51, $55, $58, $59, $60, $consumed);
      $len=$61;
      var $62=$old_char;
      var $63=$end;
      HEAP16[(($63)>>1)]=$62;
      var $64=$len;
      var $65=(($64)|(0)) < 0;
      if ($65) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $67=$3;
      $len=$67;
      label = 8; break;
    case 8: 
      var $69=$len;
      var $70=$2;
      var $71=(($70+12)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=((($72)+($69))|0);
      HEAP32[(($71)>>2)]=$73;
      var $74=$start;
      var $75=$len;
      var $76=_PyUnicodeUCS2_FromUnicode($74, $75);
      $1=$76;
      label = 9; break;
    case 9: 
      var $78=$1;
      STACKTOP = __stackBase__;
      return $78;
    default: assert(0, "bad label: " + label);
  }
}
function _stringio_setstate($self, $state) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $initarg;
      var $position_obj;
      var $dict;
      var $pos;
      var $buf;
      var $bufsize;
      $2=$self;
      $3=$state;
      var $4=$3;
      var $5=(($4)|(0))!=0;
      if ($5) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      ___assert_func(((__str1363)|0), 715, ((___func___stringio_setstate)|0), ((__str34397)|0));
      throw "Reached an unreachable!";
      label = 4; break;
    case 4: 
      var $10=$2;
      var $11=(($10+25)|0);
      var $12=HEAP8[($11)];
      var $13=(($12 << 24) >> 24)!=0;
      if ($13) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $15=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($15, ((__str20383)|0));
      $1=0;
      label = 44; break;
    case 6: 
      var $17=$3;
      var $18=(($17+4)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19+84)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$21 & 67108864;
      var $23=(($22)|(0))!=0;
      if ($23) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $25=$3;
      var $26=$25;
      var $27=(($26+8)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28)|(0)) < 4;
      if ($29) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $31=HEAP32[((_PyExc_TypeError)>>2)];
      var $32=$2;
      var $33=$32;
      var $34=(($33+4)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35+12)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=$3;
      var $39=(($38+4)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40+12)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=_PyErr_Format($31, ((__str35398)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$37,HEAP32[(((tempInt)+(4))>>2)]=$42,tempInt));
      $1=0;
      label = 44; break;
    case 9: 
      var $45=$3;
      var $46=_PyTuple_GetSlice($45, 0, 2);
      $initarg=$46;
      var $47=$initarg;
      var $48=(($47)|(0))==0;
      if ($48) { label = 10; break; } else { label = 11; break; }
    case 10: 
      $1=0;
      label = 44; break;
    case 11: 
      var $51=$2;
      var $52=$initarg;
      var $53=_stringio_init($51, $52, 0);
      var $54=(($53)|(0)) < 0;
      if ($54) { label = 12; break; } else { label = 18; break; }
    case 12: 
      label = 13; break;
    case 13: 
      var $57=$initarg;
      var $58=(($57)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=((($59)-(1))|0);
      HEAP32[(($58)>>2)]=$60;
      var $61=(($60)|(0))!=0;
      if ($61) { label = 14; break; } else { label = 15; break; }
    case 14: 
      label = 16; break;
    case 15: 
      var $64=$initarg;
      var $65=(($64+4)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66+24)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=$initarg;
      FUNCTION_TABLE[$68]($69);
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      $1=0;
      label = 44; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $74=$initarg;
      var $75=(($74)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=((($76)-(1))|0);
      HEAP32[(($75)>>2)]=$77;
      var $78=(($77)|(0))!=0;
      if ($78) { label = 20; break; } else { label = 21; break; }
    case 20: 
      label = 22; break;
    case 21: 
      var $81=$initarg;
      var $82=(($81+4)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=(($83+24)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=$initarg;
      FUNCTION_TABLE[$85]($86);
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $89=$3;
      var $90=$89;
      var $91=(($90+12)|0);
      var $92=(($91)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=$93;
      var $95=(($94+12)|0);
      var $96=HEAP32[(($95)>>2)];
      $buf=$96;
      var $97=$3;
      var $98=$97;
      var $99=(($98+12)|0);
      var $100=(($99)|0);
      var $101=HEAP32[(($100)>>2)];
      var $102=$101;
      var $103=(($102+8)|0);
      var $104=HEAP32[(($103)>>2)];
      $bufsize=$104;
      var $105=$2;
      var $106=$bufsize;
      var $107=_resize_buffer416($105, $106);
      var $108=(($107)|(0)) < 0;
      if ($108) { label = 24; break; } else { label = 25; break; }
    case 24: 
      $1=0;
      label = 44; break;
    case 25: 
      var $111=$2;
      var $112=(($111+8)|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=$113;
      var $115=$buf;
      var $116=$115;
      var $117=$bufsize;
      var $118=($117<<1);
      assert($118 % 1 === 0);_memcpy($114, $116, $118);
      var $119=$bufsize;
      var $120=$2;
      var $121=(($120+16)|0);
      HEAP32[(($121)>>2)]=$119;
      var $122=$3;
      var $123=$122;
      var $124=(($123+12)|0);
      var $125=(($124+8)|0);
      var $126=HEAP32[(($125)>>2)];
      $position_obj=$126;
      var $127=$position_obj;
      var $128=(($127+4)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=(($129+48)|0);
      var $131=HEAP32[(($130)>>2)];
      var $132=(($131)|(0))!=0;
      if ($132) { label = 26; break; } else { label = 28; break; }
    case 26: 
      var $134=$position_obj;
      var $135=(($134+4)|0);
      var $136=HEAP32[(($135)>>2)];
      var $137=(($136+84)|0);
      var $138=HEAP32[(($137)>>2)];
      var $139=$138 & 131072;
      var $140=(($139)|(0))!=0;
      if ($140) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $142=$position_obj;
      var $143=(($142+4)|0);
      var $144=HEAP32[(($143)>>2)];
      var $145=(($144+48)|0);
      var $146=HEAP32[(($145)>>2)];
      var $147=(($146+152)|0);
      var $148=HEAP32[(($147)>>2)];
      var $149=(($148)|(0))!=0;
      if ($149) { label = 29; break; } else { label = 28; break; }
    case 28: 
      var $151=HEAP32[((_PyExc_TypeError)>>2)];
      var $152=$position_obj;
      var $153=(($152+4)|0);
      var $154=HEAP32[(($153)>>2)];
      var $155=(($154+12)|0);
      var $156=HEAP32[(($155)>>2)];
      var $157=_PyErr_Format($151, ((__str36399)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$156,tempInt));
      $1=0;
      label = 44; break;
    case 29: 
      var $159=$position_obj;
      var $160=HEAP32[((_PyExc_OverflowError)>>2)];
      var $161=_PyNumber_AsSsize_t($159, $160);
      $pos=$161;
      var $162=$pos;
      var $163=(($162)|(0))==-1;
      if ($163) { label = 30; break; } else { label = 32; break; }
    case 30: 
      var $165=_PyErr_Occurred();
      var $166=(($165)|(0))!=0;
      if ($166) { label = 31; break; } else { label = 32; break; }
    case 31: 
      $1=0;
      label = 44; break;
    case 32: 
      var $169=$pos;
      var $170=(($169)|(0)) < 0;
      if ($170) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $172=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($172, ((__str37400)|0));
      $1=0;
      label = 44; break;
    case 34: 
      var $174=$pos;
      var $175=$2;
      var $176=(($175+12)|0);
      HEAP32[(($176)>>2)]=$174;
      var $177=$3;
      var $178=$177;
      var $179=(($178+12)|0);
      var $180=(($179+12)|0);
      var $181=HEAP32[(($180)>>2)];
      $dict=$181;
      var $182=$dict;
      var $183=(($182)|(0))!=((__Py_NoneStruct)|(0));
      if ($183) { label = 35; break; } else { label = 43; break; }
    case 35: 
      var $185=$dict;
      var $186=(($185+4)|0);
      var $187=HEAP32[(($186)>>2)];
      var $188=(($187+84)|0);
      var $189=HEAP32[(($188)>>2)];
      var $190=$189 & 536870912;
      var $191=(($190)|(0))!=0;
      if ($191) { label = 37; break; } else { label = 36; break; }
    case 36: 
      var $193=HEAP32[((_PyExc_TypeError)>>2)];
      var $194=$dict;
      var $195=(($194+4)|0);
      var $196=HEAP32[(($195)>>2)];
      var $197=(($196+12)|0);
      var $198=HEAP32[(($197)>>2)];
      var $199=_PyErr_Format($193, ((__str38401)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$198,tempInt));
      $1=0;
      label = 44; break;
    case 37: 
      var $201=$2;
      var $202=(($201+40)|0);
      var $203=HEAP32[(($202)>>2)];
      var $204=(($203)|(0))!=0;
      if ($204) { label = 38; break; } else { label = 41; break; }
    case 38: 
      var $206=$2;
      var $207=(($206+40)|0);
      var $208=HEAP32[(($207)>>2)];
      var $209=$dict;
      var $210=_PyDict_Update($208, $209);
      var $211=(($210)|(0)) < 0;
      if ($211) { label = 39; break; } else { label = 40; break; }
    case 39: 
      $1=0;
      label = 44; break;
    case 40: 
      label = 42; break;
    case 41: 
      var $215=$dict;
      var $216=(($215)|0);
      var $217=HEAP32[(($216)>>2)];
      var $218=((($217)+(1))|0);
      HEAP32[(($216)>>2)]=$218;
      var $219=$dict;
      var $220=$2;
      var $221=(($220+40)|0);
      HEAP32[(($221)>>2)]=$219;
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      var $224=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $225=((($224)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$225;
      $1=__Py_NoneStruct;
      label = 44; break;
    case 44: 
      var $227=$1;
      STACKTOP = __stackBase__;
      return $227;
    default: assert(0, "bad label: " + label);
  }
}
function _check_decoded($decoded) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $2=$decoded;
      var $3=$2;
      var $4=(($3)|(0))==0;
      if ($4) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=-1;
      label = 11; break;
    case 3: 
      var $7=$2;
      var $8=(($7+4)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9+84)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=$11 & 268435456;
      var $13=(($12)|(0))!=0;
      if ($13) { label = 10; break; } else { label = 4; break; }
    case 4: 
      var $15=HEAP32[((_PyExc_TypeError)>>2)];
      var $16=$2;
      var $17=(($16+4)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18+12)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=_PyErr_Format($15, ((__str109)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$20,tempInt));
      label = 5; break;
    case 5: 
      var $23=$2;
      var $24=(($23)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=((($25)-(1))|0);
      HEAP32[(($24)>>2)]=$26;
      var $27=(($26)|(0))!=0;
      if ($27) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 8; break;
    case 7: 
      var $30=$2;
      var $31=(($30+4)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32+24)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=$2;
      FUNCTION_TABLE[$34]($35);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      $1=-1;
      label = 11; break;
    case 10: 
      $1=0;
      label = 11; break;
    case 11: 
      var $40=$1;
      STACKTOP = __stackBase__;
      return $40;
    default: assert(0, "bad label: " + label);
  }
}
function __PyIncrementalNewlineDecoder_decode($_self, $input, $final) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $output=__stackBase__;
      var $output_len;
      var $self;
      var $out;
      var $modified;
      var $modified1;
      var $in_str;
      var $len;
      var $seennl;
      var $only_lf;
      var $s;
      var $end;
      var $c;
      var $s2;
      var $end3;
      var $c4;
      var $translated;
      var $out_str;
      var $in;
      var $out5;
      var $end6;
      var $c7;
      $2=$_self;
      $3=$input;
      $4=$final;
      var $5=$2;
      var $6=$5;
      $self=$6;
      var $7=$self;
      var $8=(($7+8)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9)|(0))==0;
      if ($10) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $12=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($12, ((__str1420)|0));
      $1=0;
      label = 119; break;
    case 3: 
      var $14=$self;
      var $15=(($14+8)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16)|(0))!=((__Py_NoneStruct)|(0));
      if ($17) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $19=$self;
      var $20=(($19+8)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=HEAP32[((__PyIO_str_decode)>>2)];
      var $23=$3;
      var $24=$4;
      var $25=(($24)|(0))!=0;
      var $26=$25 ? __Py_TrueStruct : __Py_ZeroStruct;
      var $27=_PyObject_CallMethodObjArgs($21, $22, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$23,HEAP32[(((tempInt)+(4))>>2)]=$26,HEAP32[(((tempInt)+(8))>>2)]=0,tempInt));
      HEAP32[(($output)>>2)]=$27;
      label = 6; break;
    case 5: 
      var $29=$3;
      HEAP32[(($output)>>2)]=$29;
      var $30=HEAP32[(($output)>>2)];
      var $31=(($30)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=((($32)+(1))|0);
      HEAP32[(($31)>>2)]=$33;
      label = 6; break;
    case 6: 
      var $35=HEAP32[(($output)>>2)];
      var $36=_check_decoded($35);
      var $37=(($36)|(0)) < 0;
      if ($37) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $1=0;
      label = 119; break;
    case 8: 
      var $40=HEAP32[(($output)>>2)];
      var $41=$40;
      var $42=(($41+8)|0);
      var $43=HEAP32[(($42)>>2)];
      $output_len=$43;
      var $44=$self;
      var $45=$44;
      var $46=(($45+16)|0);
      var $47=$46;
      var $48=HEAP32[(($47)>>2)];
      var $49=$48 & 1;
      var $50=$49 << 31;
      var $51=$50 >> 31;
      var $52=(($51)|(0))!=0;
      if ($52) { label = 9; break; } else { label = 19; break; }
    case 9: 
      var $54=$4;
      var $55=(($54)|(0))!=0;
      if ($55) { label = 11; break; } else { label = 10; break; }
    case 10: 
      var $57=$output_len;
      var $58=(($57)|(0)) > 0;
      if ($58) { label = 11; break; } else { label = 19; break; }
    case 11: 
      var $60=$output_len;
      var $61=((($60)+(1))|0);
      var $62=_PyUnicodeUCS2_FromUnicode(0, $61);
      $modified=$62;
      var $63=$modified;
      var $64=(($63)|(0))==0;
      if ($64) { label = 12; break; } else { label = 13; break; }
    case 12: 
      label = 113; break;
    case 13: 
      var $67=$modified;
      var $68=$67;
      var $69=(($68+12)|0);
      var $70=HEAP32[(($69)>>2)];
      $out=$70;
      var $71=$out;
      var $72=(($71)|0);
      HEAP16[(($72)>>1)]=13;
      var $73=$out;
      var $74=(($73+2)|0);
      var $75=$74;
      var $76=HEAP32[(($output)>>2)];
      var $77=$76;
      var $78=(($77+12)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=$79;
      var $81=$output_len;
      var $82=($81<<1);
      assert($82 % 1 === 0);_memcpy($75, $80, $82);
      label = 14; break;
    case 14: 
      var $84=HEAP32[(($output)>>2)];
      var $85=(($84)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=((($86)-(1))|0);
      HEAP32[(($85)>>2)]=$87;
      var $88=(($87)|(0))!=0;
      if ($88) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 17; break;
    case 16: 
      var $91=HEAP32[(($output)>>2)];
      var $92=(($91+4)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=(($93+24)|0);
      var $95=HEAP32[(($94)>>2)];
      var $96=HEAP32[(($output)>>2)];
      FUNCTION_TABLE[$95]($96);
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $99=$modified;
      HEAP32[(($output)>>2)]=$99;
      var $100=$self;
      var $101=$100;
      var $102=(($101+16)|0);
      var $103=$102;
      var $104=HEAP32[(($103)>>2)];
      var $105=$104 & -2;
      HEAP32[(($103)>>2)]=$105;
      var $106=$output_len;
      var $107=((($106)+(1))|0);
      $output_len=$107;
      label = 19; break;
    case 19: 
      var $109=$4;
      var $110=(($109)|(0))!=0;
      if ($110) { label = 36; break; } else { label = 20; break; }
    case 20: 
      var $112=$output_len;
      var $113=(($112)|(0)) > 0;
      if ($113) { label = 21; break; } else { label = 35; break; }
    case 21: 
      var $115=$output_len;
      var $116=((($115)-(1))|0);
      var $117=HEAP32[(($output)>>2)];
      var $118=$117;
      var $119=(($118+12)|0);
      var $120=HEAP32[(($119)>>2)];
      var $121=(($120+($116<<1))|0);
      var $122=HEAP16[(($121)>>1)];
      var $123=(($122)&(65535));
      var $124=(($123)|(0))==13;
      if ($124) { label = 22; break; } else { label = 35; break; }
    case 22: 
      var $126=HEAP32[(($output)>>2)];
      var $127=(($126)|0);
      var $128=HEAP32[(($127)>>2)];
      var $129=(($128)|(0))==1;
      if ($129) { label = 23; break; } else { label = 26; break; }
    case 23: 
      var $131=$output_len;
      var $132=((($131)-(1))|0);
      var $133=_PyUnicodeUCS2_Resize($output, $132);
      var $134=(($133)|(0)) < 0;
      if ($134) { label = 24; break; } else { label = 25; break; }
    case 24: 
      label = 113; break;
    case 25: 
      label = 34; break;
    case 26: 
      var $138=HEAP32[(($output)>>2)];
      var $139=$138;
      var $140=(($139+12)|0);
      var $141=HEAP32[(($140)>>2)];
      var $142=$output_len;
      var $143=((($142)-(1))|0);
      var $144=_PyUnicodeUCS2_FromUnicode($141, $143);
      $modified1=$144;
      var $145=$modified1;
      var $146=(($145)|(0))==0;
      if ($146) { label = 27; break; } else { label = 28; break; }
    case 27: 
      label = 113; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $150=HEAP32[(($output)>>2)];
      var $151=(($150)|0);
      var $152=HEAP32[(($151)>>2)];
      var $153=((($152)-(1))|0);
      HEAP32[(($151)>>2)]=$153;
      var $154=(($153)|(0))!=0;
      if ($154) { label = 30; break; } else { label = 31; break; }
    case 30: 
      label = 32; break;
    case 31: 
      var $157=HEAP32[(($output)>>2)];
      var $158=(($157+4)|0);
      var $159=HEAP32[(($158)>>2)];
      var $160=(($159+24)|0);
      var $161=HEAP32[(($160)>>2)];
      var $162=HEAP32[(($output)>>2)];
      FUNCTION_TABLE[$161]($162);
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      var $165=$modified1;
      HEAP32[(($output)>>2)]=$165;
      label = 34; break;
    case 34: 
      var $167=$self;
      var $168=$167;
      var $169=(($168+16)|0);
      var $170=$169;
      var $171=HEAP32[(($170)>>2)];
      var $172=$171 & -2;
      var $173=$172 | 1;
      HEAP32[(($170)>>2)]=$173;
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $176=$self;
      var $177=$176;
      var $178=(($177+16)|0);
      var $179=$178;
      var $180=HEAP32[(($179)>>2)];
      var $181=$180 >>> 2;
      var $182=$181 & 7;
      $seennl=$182;
      $only_lf=0;
      var $183=HEAP32[(($output)>>2)];
      var $184=$183;
      var $185=(($184+12)|0);
      var $186=HEAP32[(($185)>>2)];
      $in_str=$186;
      var $187=HEAP32[(($output)>>2)];
      var $188=$187;
      var $189=(($188+8)|0);
      var $190=HEAP32[(($189)>>2)];
      $len=$190;
      var $191=$len;
      var $192=(($191)|(0))==0;
      if ($192) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $194=HEAP32[(($output)>>2)];
      $1=$194;
      label = 119; break;
    case 38: 
      var $196=$seennl;
      var $197=(($196)|(0))==2;
      if ($197) { label = 40; break; } else { label = 39; break; }
    case 39: 
      var $199=$seennl;
      var $200=(($199)|(0))==0;
      if ($200) { label = 40; break; } else { label = 41; break; }
    case 40: 
      var $202=$in_str;
      var $203=$202;
      var $204=$len;
      var $205=($204<<1);
      var $206=_memchr($203, 13, $205);
      var $207=(($206)|(0))==0;
      var $208=(($207)&(1));
      $only_lf=$208;
      label = 41; break;
    case 41: 
      var $210=$only_lf;
      var $211=(($210)|(0))!=0;
      if ($211) { label = 42; break; } else { label = 55; break; }
    case 42: 
      var $213=$seennl;
      var $214=(($213)|(0))==0;
      if ($214) { label = 43; break; } else { label = 54; break; }
    case 43: 
      var $216=$in_str;
      var $217=$216;
      var $218=$len;
      var $219=($218<<1);
      var $220=_memchr($217, 10, $219);
      var $221=(($220)|(0))!=0;
      if ($221) { label = 44; break; } else { label = 54; break; }
    case 44: 
      var $223=$in_str;
      $s=$223;
      var $224=$in_str;
      var $225=$len;
      var $226=(($224+($225<<1))|0);
      $end=$226;
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      var $229=$s;
      var $230=HEAP16[(($229)>>1)];
      var $231=(($230)&(65535));
      var $232=(($231)|(0)) > 10;
      if ($232) { label = 47; break; } else { label = 48; break; }
    case 47: 
      var $234=$s;
      var $235=(($234+2)|0);
      $s=$235;
      label = 46; break;
    case 48: 
      var $237=$s;
      var $238=(($237+2)|0);
      $s=$238;
      var $239=HEAP16[(($237)>>1)];
      $c=$239;
      var $240=$c;
      var $241=(($240)&(65535));
      var $242=(($241)|(0))==10;
      if ($242) { label = 49; break; } else { label = 50; break; }
    case 49: 
      var $244=$seennl;
      var $245=$244 | 2;
      $seennl=$245;
      label = 53; break;
    case 50: 
      var $247=$s;
      var $248=$end;
      var $249=(($247)>>>(0)) > (($248)>>>(0));
      if ($249) { label = 51; break; } else { label = 52; break; }
    case 51: 
      label = 53; break;
    case 52: 
      label = 45; break;
    case 53: 
      label = 54; break;
    case 54: 
      label = 112; break;
    case 55: 
      var $255=$self;
      var $256=$255;
      var $257=(($256+16)|0);
      var $258=$257;
      var $259=HEAP32[(($258)>>2)];
      var $260=$259 >>> 1;
      var $261=$260 & 1;
      var $262=$261 << 31;
      var $263=$262 >> 31;
      var $264=(($263)|(0))!=0;
      if ($264) { label = 77; break; } else { label = 56; break; }
    case 56: 
      var $266=$seennl;
      var $267=(($266)|(0))==7;
      if ($267) { label = 57; break; } else { label = 58; break; }
    case 57: 
      label = 76; break;
    case 58: 
      var $270=$in_str;
      $s2=$270;
      var $271=$in_str;
      var $272=$len;
      var $273=(($271+($272<<1))|0);
      $end3=$273;
      label = 59; break;
    case 59: 
      label = 60; break;
    case 60: 
      var $276=$s2;
      var $277=HEAP16[(($276)>>1)];
      var $278=(($277)&(65535));
      var $279=(($278)|(0)) > 13;
      if ($279) { label = 61; break; } else { label = 62; break; }
    case 61: 
      var $281=$s2;
      var $282=(($281+2)|0);
      $s2=$282;
      label = 60; break;
    case 62: 
      var $284=$s2;
      var $285=(($284+2)|0);
      $s2=$285;
      var $286=HEAP16[(($284)>>1)];
      $c4=$286;
      var $287=$c4;
      var $288=(($287)&(65535));
      var $289=(($288)|(0))==10;
      if ($289) { label = 63; break; } else { label = 64; break; }
    case 63: 
      var $291=$seennl;
      var $292=$291 | 2;
      $seennl=$292;
      label = 70; break;
    case 64: 
      var $294=$c4;
      var $295=(($294)&(65535));
      var $296=(($295)|(0))==13;
      if ($296) { label = 65; break; } else { label = 69; break; }
    case 65: 
      var $298=$s2;
      var $299=HEAP16[(($298)>>1)];
      var $300=(($299)&(65535));
      var $301=(($300)|(0))==10;
      if ($301) { label = 66; break; } else { label = 67; break; }
    case 66: 
      var $303=$seennl;
      var $304=$303 | 4;
      $seennl=$304;
      var $305=$s2;
      var $306=(($305+2)|0);
      $s2=$306;
      label = 68; break;
    case 67: 
      var $308=$seennl;
      var $309=$308 | 1;
      $seennl=$309;
      label = 68; break;
    case 68: 
      label = 69; break;
    case 69: 
      label = 70; break;
    case 70: 
      var $313=$s2;
      var $314=$end3;
      var $315=(($313)>>>(0)) > (($314)>>>(0));
      if ($315) { label = 71; break; } else { label = 72; break; }
    case 71: 
      label = 75; break;
    case 72: 
      var $318=$seennl;
      var $319=(($318)|(0))==7;
      if ($319) { label = 73; break; } else { label = 74; break; }
    case 73: 
      label = 75; break;
    case 74: 
      label = 59; break;
    case 75: 
      label = 76; break;
    case 76: 
      label = 111; break;
    case 77: 
      $translated=0;
      var $325=HEAP32[(($output)>>2)];
      var $326=(($325)|0);
      var $327=HEAP32[(($326)>>2)];
      var $328=(($327)|(0))!=1;
      if ($328) { label = 78; break; } else { label = 84; break; }
    case 78: 
      var $330=$len;
      var $331=_PyUnicodeUCS2_FromUnicode(0, $330);
      $translated=$331;
      var $332=$translated;
      var $333=(($332)|(0))==0;
      if ($333) { label = 79; break; } else { label = 80; break; }
    case 79: 
      label = 113; break;
    case 80: 
      var $336=$translated;
      var $337=(($336)|0);
      var $338=HEAP32[(($337)>>2)];
      var $339=(($338)|(0))==1;
      if ($339) { label = 81; break; } else { label = 82; break; }
    case 81: 
      label = 83; break;
    case 82: 
      ___assert_func(((__str2421)|0), 416, ((___func____PyIncrementalNewlineDecoder_decode)|0), ((__str3422)|0));
      throw "Reached an unreachable!";
      label = 83; break;
    case 83: 
      var $344=$translated;
      var $345=$344;
      var $346=(($345+12)|0);
      var $347=HEAP32[(($346)>>2)];
      var $348=$347;
      var $349=HEAP32[(($output)>>2)];
      var $350=$349;
      var $351=(($350+12)|0);
      var $352=HEAP32[(($351)>>2)];
      var $353=$352;
      var $354=$len;
      var $355=($354<<1);
      assert($355 % 1 === 0);_memcpy($348, $353, $355);
      label = 85; break;
    case 84: 
      var $357=HEAP32[(($output)>>2)];
      $translated=$357;
      label = 85; break;
    case 85: 
      var $359=$translated;
      var $360=$359;
      var $361=(($360+12)|0);
      var $362=HEAP32[(($361)>>2)];
      $out_str=$362;
      var $363=$in_str;
      $in=$363;
      var $364=$out_str;
      $out5=$364;
      var $365=$in_str;
      var $366=$len;
      var $367=(($365+($366<<1))|0);
      $end6=$367;
      label = 86; break;
    case 86: 
      label = 87; break;
    case 87: 
      var $370=$in;
      var $371=(($370+2)|0);
      $in=$371;
      var $372=HEAP16[(($370)>>1)];
      $c7=$372;
      var $373=(($372)&(65535));
      var $374=(($373)|(0)) > 13;
      if ($374) { label = 88; break; } else { label = 89; break; }
    case 88: 
      var $376=$c7;
      var $377=$out5;
      var $378=(($377+2)|0);
      $out5=$378;
      HEAP16[(($377)>>1)]=$376;
      label = 87; break;
    case 89: 
      var $380=$c7;
      var $381=(($380)&(65535));
      var $382=(($381)|(0))==10;
      if ($382) { label = 90; break; } else { label = 91; break; }
    case 90: 
      var $384=$c7;
      var $385=$out5;
      var $386=(($385+2)|0);
      $out5=$386;
      HEAP16[(($385)>>1)]=$384;
      var $387=$seennl;
      var $388=$387 | 2;
      $seennl=$388;
      label = 86; break;
    case 91: 
      var $390=$c7;
      var $391=(($390)&(65535));
      var $392=(($391)|(0))==13;
      if ($392) { label = 92; break; } else { label = 96; break; }
    case 92: 
      var $394=$in;
      var $395=HEAP16[(($394)>>1)];
      var $396=(($395)&(65535));
      var $397=(($396)|(0))==10;
      if ($397) { label = 93; break; } else { label = 94; break; }
    case 93: 
      var $399=$in;
      var $400=(($399+2)|0);
      $in=$400;
      var $401=$seennl;
      var $402=$401 | 4;
      $seennl=$402;
      label = 95; break;
    case 94: 
      var $404=$seennl;
      var $405=$404 | 1;
      $seennl=$405;
      label = 95; break;
    case 95: 
      var $407=$out5;
      var $408=(($407+2)|0);
      $out5=$408;
      HEAP16[(($407)>>1)]=10;
      label = 86; break;
    case 96: 
      var $410=$in;
      var $411=$end6;
      var $412=(($410)>>>(0)) > (($411)>>>(0));
      if ($412) { label = 97; break; } else { label = 98; break; }
    case 97: 
      label = 99; break;
    case 98: 
      var $415=$c7;
      var $416=$out5;
      var $417=(($416+2)|0);
      $out5=$417;
      HEAP16[(($416)>>1)]=$415;
      label = 86; break;
    case 99: 
      var $419=$translated;
      var $420=HEAP32[(($output)>>2)];
      var $421=(($419)|(0))!=(($420)|(0));
      if ($421) { label = 100; break; } else { label = 106; break; }
    case 100: 
      label = 101; break;
    case 101: 
      var $424=HEAP32[(($output)>>2)];
      var $425=(($424)|0);
      var $426=HEAP32[(($425)>>2)];
      var $427=((($426)-(1))|0);
      HEAP32[(($425)>>2)]=$427;
      var $428=(($427)|(0))!=0;
      if ($428) { label = 102; break; } else { label = 103; break; }
    case 102: 
      label = 104; break;
    case 103: 
      var $431=HEAP32[(($output)>>2)];
      var $432=(($431+4)|0);
      var $433=HEAP32[(($432)>>2)];
      var $434=(($433+24)|0);
      var $435=HEAP32[(($434)>>2)];
      var $436=HEAP32[(($output)>>2)];
      FUNCTION_TABLE[$435]($436);
      label = 104; break;
    case 104: 
      label = 105; break;
    case 105: 
      var $439=$translated;
      HEAP32[(($output)>>2)]=$439;
      label = 106; break;
    case 106: 
      var $441=$out5;
      var $442=$out_str;
      var $443=$441;
      var $444=$442;
      var $445=((($443)-($444))|0);
      var $446=((((($445)|(0)))/(2))&-1);
      var $447=$len;
      var $448=(($446)|(0))!=(($447)|(0));
      if ($448) { label = 107; break; } else { label = 110; break; }
    case 107: 
      var $450=$out5;
      var $451=$out_str;
      var $452=$450;
      var $453=$451;
      var $454=((($452)-($453))|0);
      var $455=((((($454)|(0)))/(2))&-1);
      var $456=_PyUnicodeUCS2_Resize($output, $455);
      var $457=(($456)|(0)) < 0;
      if ($457) { label = 108; break; } else { label = 109; break; }
    case 108: 
      label = 113; break;
    case 109: 
      label = 110; break;
    case 110: 
      label = 111; break;
    case 111: 
      label = 112; break;
    case 112: 
      var $463=$seennl;
      var $464=$self;
      var $465=$464;
      var $466=(($465+16)|0);
      var $467=$466;
      var $468=HEAP32[(($467)>>2)];
      var $469=$468 >>> 2;
      var $470=$469 & 7;
      var $471=$470 | $463;
      var $472=$471 & 7;
      var $473=$464;
      var $474=(($473+16)|0);
      var $475=$474;
      var $476=$472 & 7;
      var $477=$476 << 2;
      var $478=HEAP32[(($475)>>2)];
      var $479=$478 & -29;
      var $480=$479 | $477;
      HEAP32[(($475)>>2)]=$480;
      var $481=HEAP32[(($output)>>2)];
      $1=$481;
      label = 119; break;
    case 113: 
      label = 114; break;
    case 114: 
      var $484=HEAP32[(($output)>>2)];
      var $485=(($484)|0);
      var $486=HEAP32[(($485)>>2)];
      var $487=((($486)-(1))|0);
      HEAP32[(($485)>>2)]=$487;
      var $488=(($487)|(0))!=0;
      if ($488) { label = 115; break; } else { label = 116; break; }
    case 115: 
      label = 117; break;
    case 116: 
      var $491=HEAP32[(($output)>>2)];
      var $492=(($491+4)|0);
      var $493=HEAP32[(($492)>>2)];
      var $494=(($493+24)|0);
      var $495=HEAP32[(($494)>>2)];
      var $496=HEAP32[(($output)>>2)];
      FUNCTION_TABLE[$495]($496);
      label = 117; break;
    case 117: 
      label = 118; break;
    case 118: 
      $1=0;
      label = 119; break;
    case 119: 
      var $500=$1;
      STACKTOP = __stackBase__;
      return $500;
    default: assert(0, "bad label: " + label);
  }
}
function _find_control_char($start, $end, $ch) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $s;
      $2=$start;
      $3=$end;
      $4=$ch;
      var $5=$2;
      $s=$5;
      label = 2; break;
    case 2: 
      label = 3; break;
    case 3: 
      var $8=$s;
      var $9=HEAP16[(($8)>>1)];
      var $10=(($9)&(65535));
      var $11=$4;
      var $12=(($11)&(65535));
      var $13=(($10)|(0)) > (($12)|(0));
      if ($13) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $15=$s;
      var $16=(($15+2)|0);
      $s=$16;
      label = 3; break;
    case 5: 
      var $18=$s;
      var $19=HEAP16[(($18)>>1)];
      var $20=(($19)&(65535));
      var $21=$4;
      var $22=(($21)&(65535));
      var $23=(($20)|(0))==(($22)|(0));
      if ($23) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $25=$s;
      $1=$25;
      label = 10; break;
    case 7: 
      var $27=$s;
      var $28=$3;
      var $29=(($27)|(0))==(($28)|(0));
      if ($29) { label = 8; break; } else { label = 9; break; }
    case 8: 
      $1=0;
      label = 10; break;
    case 9: 
      var $32=$s;
      var $33=(($32+2)|0);
      $s=$33;
      label = 2; break;
    case 10: 
      var $35=$1;
      return $35;
    default: assert(0, "bad label: " + label);
  }
}
function _incrementalnewlinedecoder_dealloc($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $_py_tmp;
      var $_py_tmp1;
      $1=$self;
      label = 2; break;
    case 2: 
      var $3=$1;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 9; break; }
    case 3: 
      var $8=$1;
      var $9=(($8+8)|0);
      var $10=HEAP32[(($9)>>2)];
      $_py_tmp=$10;
      var $11=$1;
      var $12=(($11+8)|0);
      HEAP32[(($12)>>2)]=0;
      label = 4; break;
    case 4: 
      var $14=$_py_tmp;
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=((($16)-(1))|0);
      HEAP32[(($15)>>2)]=$17;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 7; break;
    case 6: 
      var $21=$_py_tmp;
      var $22=(($21+4)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+24)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=$_py_tmp;
      FUNCTION_TABLE[$25]($26);
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $32=$1;
      var $33=(($32+12)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($34)|(0))!=0;
      if ($35) { label = 12; break; } else { label = 18; break; }
    case 12: 
      var $37=$1;
      var $38=(($37+12)|0);
      var $39=HEAP32[(($38)>>2)];
      $_py_tmp1=$39;
      var $40=$1;
      var $41=(($40+12)|0);
      HEAP32[(($41)>>2)]=0;
      label = 13; break;
    case 13: 
      var $43=$_py_tmp1;
      var $44=(($43)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=((($45)-(1))|0);
      HEAP32[(($44)>>2)]=$46;
      var $47=(($46)|(0))!=0;
      if ($47) { label = 14; break; } else { label = 15; break; }
    case 14: 
      label = 16; break;
    case 15: 
      var $50=$_py_tmp1;
      var $51=(($50+4)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=(($52+24)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=$_py_tmp1;
      FUNCTION_TABLE[$54]($55);
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $60=$1;
      var $61=$60;
      var $62=(($61+4)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=(($63+160)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=$1;
      var $67=$66;
      var $68=$67;
      FUNCTION_TABLE[$65]($68);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _incrementalnewlinedecoder_init($self, $args, $kwds) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $decoder=__stackBase__;
      var $translate=(__stackBase__)+(4);
      var $errors=(__stackBase__)+(8);
      var $kwlist=(__stackBase__)+(12);
      $2=$self;
      $3=$args;
      $4=$kwds;
      HEAP32[(($errors)>>2)]=0;
      var $5=$kwlist;
      assert(16 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[((_incrementalnewlinedecoder_init_kwlist)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[(((_incrementalnewlinedecoder_init_kwlist)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[(((_incrementalnewlinedecoder_init_kwlist)+(8))>>2)];HEAP32[((($5)+(12))>>2)]=HEAP32[(((_incrementalnewlinedecoder_init_kwlist)+(12))>>2)];
      var $6=$3;
      var $7=$4;
      var $8=(($kwlist)|0);
      var $9=__PyArg_ParseTupleAndKeywords_SizeT($6, $7, ((__str98)|0), $8, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$decoder,HEAP32[(((tempInt)+(4))>>2)]=$translate,HEAP32[(((tempInt)+(8))>>2)]=$errors,tempInt));
      var $10=(($9)|(0))!=0;
      if ($10) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=-1;
      label = 9; break;
    case 3: 
      var $13=HEAP32[(($decoder)>>2)];
      var $14=$2;
      var $15=(($14+8)|0);
      HEAP32[(($15)>>2)]=$13;
      var $16=HEAP32[(($decoder)>>2)];
      var $17=(($16)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=((($18)+(1))|0);
      HEAP32[(($17)>>2)]=$19;
      var $20=HEAP32[(($errors)>>2)];
      var $21=(($20)|(0))==0;
      if ($21) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $23=_PyUnicodeUCS2_FromString(((__str17440)|0));
      var $24=$2;
      var $25=(($24+12)|0);
      HEAP32[(($25)>>2)]=$23;
      var $26=$2;
      var $27=(($26+12)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28)|(0))==0;
      if ($29) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $1=-1;
      label = 9; break;
    case 6: 
      label = 8; break;
    case 7: 
      var $33=HEAP32[(($errors)>>2)];
      var $34=(($33)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=((($35)+(1))|0);
      HEAP32[(($34)>>2)]=$36;
      var $37=HEAP32[(($errors)>>2)];
      var $38=$2;
      var $39=(($38+12)|0);
      HEAP32[(($39)>>2)]=$37;
      label = 8; break;
    case 8: 
      var $41=HEAP32[(($translate)>>2)];
      var $42=$2;
      var $43=$41 & 1;
      var $44=$43 << 31;
      var $45=$44 >> 31;
      var $46=$42;
      var $47=(($46+16)|0);
      var $48=$47;
      var $49=$43 & 1;
      var $50=$49 << 1;
      var $51=HEAP32[(($48)>>2)];
      var $52=$51 & -3;
      var $53=$52 | $50;
      HEAP32[(($48)>>2)]=$53;
      var $54=$2;
      var $55=$54;
      var $56=(($55+16)|0);
      var $57=$56;
      var $58=HEAP32[(($57)>>2)];
      var $59=$58 & -29;
      HEAP32[(($57)>>2)]=$59;
      var $60=$2;
      var $61=$60;
      var $62=(($61+16)|0);
      var $63=$62;
      var $64=HEAP32[(($63)>>2)];
      var $65=$64 & -2;
      HEAP32[(($63)>>2)]=$65;
      $1=0;
      label = 9; break;
    case 9: 
      var $67=$1;
      STACKTOP = __stackBase__;
      return $67;
    default: assert(0, "bad label: " + label);
  }
}
function __PyIO_find_line_ending($translated, $universal, $readnl, $start, $end, $consumed) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $len;
      var $pos;
      var $s;
      var $ch;
      var $readnl_len;
      var $nl;
      var $pos1;
      var $s2;
      var $e;
      var $pos3;
      var $i;
      var $pos4;
      $2=$translated;
      $3=$universal;
      $4=$readnl;
      $5=$start;
      $6=$end;
      $7=$consumed;
      var $8=$6;
      var $9=$5;
      var $10=$8;
      var $11=$9;
      var $12=((($10)-($11))|0);
      var $13=((((($12)|(0)))/(2))&-1);
      $len=$13;
      var $14=$2;
      var $15=(($14)|(0))!=0;
      if ($15) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $17=$5;
      var $18=$6;
      var $19=_find_control_char($17, $18, 10);
      $pos=$19;
      var $20=$pos;
      var $21=(($20)|(0))!=0;
      if ($21) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $23=$pos;
      var $24=$5;
      var $25=$23;
      var $26=$24;
      var $27=((($25)-($26))|0);
      var $28=((((($27)|(0)))/(2))&-1);
      var $29=((($28)+(1))|0);
      $1=$29;
      label = 43; break;
    case 4: 
      var $31=$len;
      var $32=$7;
      HEAP32[(($32)>>2)]=$31;
      $1=-1;
      label = 43; break;
    case 5: 
      var $34=$3;
      var $35=(($34)|(0))!=0;
      if ($35) { label = 6; break; } else { label = 19; break; }
    case 6: 
      var $37=$5;
      $s=$37;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $40=$s;
      var $41=HEAP16[(($40)>>1)];
      var $42=(($41)&(65535));
      var $43=(($42)|(0)) > 13;
      if ($43) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $45=$s;
      var $46=(($45+2)|0);
      $s=$46;
      label = 8; break;
    case 10: 
      var $48=$s;
      var $49=$6;
      var $50=(($48)>>>(0)) >= (($49)>>>(0));
      if ($50) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $52=$len;
      var $53=$7;
      HEAP32[(($53)>>2)]=$52;
      $1=-1;
      label = 43; break;
    case 12: 
      var $55=$s;
      var $56=(($55+2)|0);
      $s=$56;
      var $57=HEAP16[(($55)>>1)];
      $ch=$57;
      var $58=$ch;
      var $59=(($58)&(65535));
      var $60=(($59)|(0))==10;
      if ($60) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $62=$s;
      var $63=$5;
      var $64=$62;
      var $65=$63;
      var $66=((($64)-($65))|0);
      var $67=((((($66)|(0)))/(2))&-1);
      $1=$67;
      label = 43; break;
    case 14: 
      var $69=$ch;
      var $70=(($69)&(65535));
      var $71=(($70)|(0))==13;
      if ($71) { label = 15; break; } else { label = 18; break; }
    case 15: 
      var $73=$s;
      var $74=HEAP16[(($73)>>1)];
      var $75=(($74)&(65535));
      var $76=(($75)|(0))==10;
      if ($76) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $78=$s;
      var $79=$5;
      var $80=$78;
      var $81=$79;
      var $82=((($80)-($81))|0);
      var $83=((((($82)|(0)))/(2))&-1);
      var $84=((($83)+(1))|0);
      $1=$84;
      label = 43; break;
    case 17: 
      var $86=$s;
      var $87=$5;
      var $88=$86;
      var $89=$87;
      var $90=((($88)-($89))|0);
      var $91=((((($90)|(0)))/(2))&-1);
      $1=$91;
      label = 43; break;
    case 18: 
      label = 7; break;
    case 19: 
      var $94=$4;
      var $95=$94;
      var $96=(($95+8)|0);
      var $97=HEAP32[(($96)>>2)];
      $readnl_len=$97;
      var $98=$4;
      var $99=$98;
      var $100=(($99+20)|0);
      var $101=(($100)|0);
      $nl=$101;
      var $102=$readnl_len;
      var $103=(($102)|(0))==1;
      if ($103) { label = 20; break; } else { label = 23; break; }
    case 20: 
      var $105=$5;
      var $106=$6;
      var $107=$nl;
      var $108=(($107)|0);
      var $109=HEAP8[($108)];
      var $110=(($109)&(255));
      var $111=_find_control_char($105, $106, $110);
      $pos1=$111;
      var $112=$pos1;
      var $113=(($112)|(0))!=0;
      if ($113) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $115=$pos1;
      var $116=$5;
      var $117=$115;
      var $118=$116;
      var $119=((($117)-($118))|0);
      var $120=((((($119)|(0)))/(2))&-1);
      var $121=((($120)+(1))|0);
      $1=$121;
      label = 43; break;
    case 22: 
      var $123=$len;
      var $124=$7;
      HEAP32[(($124)>>2)]=$123;
      $1=-1;
      label = 43; break;
    case 23: 
      var $126=$5;
      $s2=$126;
      var $127=$6;
      var $128=$readnl_len;
      var $129=(((-$128))|0);
      var $130=(($127+($129<<1))|0);
      var $131=(($130+2)|0);
      $e=$131;
      var $132=$e;
      var $133=$s2;
      var $134=(($132)>>>(0)) < (($133)>>>(0));
      if ($134) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $136=$s2;
      $e=$136;
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $139=$s2;
      var $140=$e;
      var $141=(($139)>>>(0)) < (($140)>>>(0));
      if ($141) { label = 27; break; } else { label = 39; break; }
    case 27: 
      var $143=$s2;
      var $144=$6;
      var $145=$nl;
      var $146=(($145)|0);
      var $147=HEAP8[($146)];
      var $148=(($147)&(255));
      var $149=_find_control_char($143, $144, $148);
      $pos4=$149;
      var $150=$pos4;
      var $151=(($150)|(0))==0;
      if ($151) { label = 29; break; } else { label = 28; break; }
    case 28: 
      var $153=$pos4;
      var $154=$e;
      var $155=(($153)>>>(0)) >= (($154)>>>(0));
      if ($155) { label = 29; break; } else { label = 30; break; }
    case 29: 
      label = 39; break;
    case 30: 
      $i=1;
      label = 31; break;
    case 31: 
      var $159=$i;
      var $160=$readnl_len;
      var $161=(($159)|(0)) < (($160)|(0));
      if ($161) { label = 32; break; } else { label = 36; break; }
    case 32: 
      var $163=$i;
      var $164=$pos4;
      var $165=(($164+($163<<1))|0);
      var $166=HEAP16[(($165)>>1)];
      var $167=(($166)&(65535));
      var $168=$i;
      var $169=$nl;
      var $170=(($169+$168)|0);
      var $171=HEAP8[($170)];
      var $172=(($171)&(255));
      var $173=(($167)|(0))!=(($172)|(0));
      if ($173) { label = 33; break; } else { label = 34; break; }
    case 33: 
      label = 36; break;
    case 34: 
      label = 35; break;
    case 35: 
      var $177=$i;
      var $178=((($177)+(1))|0);
      $i=$178;
      label = 31; break;
    case 36: 
      var $180=$i;
      var $181=$readnl_len;
      var $182=(($180)|(0))==(($181)|(0));
      if ($182) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $184=$pos4;
      var $185=$5;
      var $186=$184;
      var $187=$185;
      var $188=((($186)-($187))|0);
      var $189=((((($188)|(0)))/(2))&-1);
      var $190=$readnl_len;
      var $191=((($189)+($190))|0);
      $1=$191;
      label = 43; break;
    case 38: 
      var $193=$pos4;
      var $194=(($193+2)|0);
      $s2=$194;
      label = 26; break;
    case 39: 
      var $196=$e;
      var $197=$6;
      var $198=$nl;
      var $199=(($198)|0);
      var $200=HEAP8[($199)];
      var $201=(($200)&(255));
      var $202=_find_control_char($196, $197, $201);
      $pos3=$202;
      var $203=$pos3;
      var $204=(($203)|(0))==0;
      if ($204) { label = 40; break; } else { label = 41; break; }
    case 40: 
      var $206=$len;
      var $207=$7;
      HEAP32[(($207)>>2)]=$206;
      label = 42; break;
    case 41: 
      var $209=$pos3;
      var $210=$5;
      var $211=$209;
      var $212=$210;
      var $213=((($211)-($212))|0);
      var $214=((((($213)|(0)))/(2))&-1);
      var $215=$7;
      HEAP32[(($215)>>2)]=$214;
      label = 42; break;
    case 42: 
      $1=-1;
      label = 43; break;
    case 43: 
      var $218=$1;
      return $218;
    default: assert(0, "bad label: " + label);
  }
}
function _textiowrapper_dealloc($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $g;
      var $_py_tmp;
      $1=$self;
      var $2=$1;
      var $3=__textiowrapper_clear($2);
      var $4=(($3)|(0)) < 0;
      if ($4) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 20; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $8=$1;
      var $9=$8;
      var $10=((($9)-(12))|0);
      $g=$10;
      var $11=$g;
      var $12=$11;
      var $13=(($12+8)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14)|(0))!=-2;
      if ($15) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 7; break;
    case 6: 
      ___assert_func(((__str2421)|0), 1089, ((___func___textiowrapper_dealloc)|0), ((__str95)|0));
      throw "Reached an unreachable!";
      label = 7; break;
    case 7: 
      var $20=$g;
      var $21=$20;
      var $22=(($21+8)|0);
      HEAP32[(($22)>>2)]=-2;
      var $23=$g;
      var $24=$23;
      var $25=(($24)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$g;
      var $28=$27;
      var $29=(($28+4)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=$30;
      var $32=(($31)|0);
      HEAP32[(($32)>>2)]=$26;
      var $33=$g;
      var $34=$33;
      var $35=(($34+4)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=$g;
      var $38=$37;
      var $39=(($38)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=$40;
      var $42=(($41+4)|0);
      HEAP32[(($42)>>2)]=$36;
      var $43=$g;
      var $44=$43;
      var $45=(($44)|0);
      HEAP32[(($45)>>2)]=0;
      label = 8; break;
    case 8: 
      var $47=$1;
      var $48=(($47+88)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=(($49)|(0))!=0;
      if ($50) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $52=$1;
      var $53=$52;
      _PyObject_ClearWeakRefs($53);
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $56=$1;
      var $57=(($56+92)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=(($58)|(0))!=0;
      if ($59) { label = 12; break; } else { label = 18; break; }
    case 12: 
      var $61=$1;
      var $62=(($61+92)|0);
      var $63=HEAP32[(($62)>>2)];
      $_py_tmp=$63;
      var $64=$1;
      var $65=(($64+92)|0);
      HEAP32[(($65)>>2)]=0;
      label = 13; break;
    case 13: 
      var $67=$_py_tmp;
      var $68=(($67)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=((($69)-(1))|0);
      HEAP32[(($68)>>2)]=$70;
      var $71=(($70)|(0))!=0;
      if ($71) { label = 14; break; } else { label = 15; break; }
    case 14: 
      label = 16; break;
    case 15: 
      var $74=$_py_tmp;
      var $75=(($74+4)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=(($76+24)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=$_py_tmp;
      FUNCTION_TABLE[$78]($79);
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $84=$1;
      var $85=$84;
      var $86=(($85+4)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=(($87+160)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=$1;
      var $91=$90;
      var $92=$91;
      FUNCTION_TABLE[$89]($92);
      label = 20; break;
    case 20: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _textiowrapper_repr($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $nameobj;
      var $res;
      var $namerepr;
      var $encrepr;
      $2=$self;
      $namerepr=0;
      $encrepr=0;
      var $3=$2;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0)) <= 0;
      if ($6) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $8=$2;
      var $9=(($8+12)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|(0))!=0;
      if ($11) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $13=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($13, ((__str36459)|0));
      label = 5; break;
    case 4: 
      var $15=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($15, ((__str37460)|0));
      label = 5; break;
    case 5: 
      $1=0;
      label = 59; break;
    case 6: 
      var $18=$2;
      var $19=$18;
      var $20=_PyObject_GetAttrString($19, ((__str22445)|0));
      $nameobj=$20;
      var $21=$nameobj;
      var $22=(($21)|(0))==0;
      if ($22) { label = 7; break; } else { label = 11; break; }
    case 7: 
      var $24=HEAP32[((_PyExc_AttributeError)>>2)];
      var $25=_PyErr_ExceptionMatches($24);
      var $26=(($25)|(0))!=0;
      if ($26) { label = 8; break; } else { label = 9; break; }
    case 8: 
      _PyErr_Clear();
      label = 10; break;
    case 9: 
      label = 38; break;
    case 10: 
      var $30=$2;
      var $31=(($30+24)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=_PyObject_Repr($32);
      $encrepr=$33;
      var $34=$encrepr;
      var $35=$34;
      var $36=(($35+20)|0);
      var $37=(($36)|0);
      var $38=_PyString_FromFormat(((__str93)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$37,tempInt));
      $res=$38;
      label = 17; break;
    case 11: 
      var $40=$2;
      var $41=(($40+24)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=_PyObject_Repr($42);
      $encrepr=$43;
      var $44=$nameobj;
      var $45=_PyObject_Repr($44);
      $namerepr=$45;
      var $46=$namerepr;
      var $47=$46;
      var $48=(($47+20)|0);
      var $49=(($48)|0);
      var $50=$encrepr;
      var $51=$50;
      var $52=(($51+20)|0);
      var $53=(($52)|0);
      var $54=_PyString_FromFormat(((__str94)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$49,HEAP32[(((tempInt)+(4))>>2)]=$53,tempInt));
      $res=$54;
      label = 12; break;
    case 12: 
      var $56=$nameobj;
      var $57=(($56)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=((($58)-(1))|0);
      HEAP32[(($57)>>2)]=$59;
      var $60=(($59)|(0))!=0;
      if ($60) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 15; break;
    case 14: 
      var $63=$nameobj;
      var $64=(($63+4)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=(($65+24)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=$nameobj;
      FUNCTION_TABLE[$67]($68);
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $73=$namerepr;
      var $74=(($73)|(0))==0;
      if ($74) { label = 19; break; } else { label = 20; break; }
    case 19: 
      label = 26; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $78=$namerepr;
      var $79=(($78)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=((($80)-(1))|0);
      HEAP32[(($79)>>2)]=$81;
      var $82=(($81)|(0))!=0;
      if ($82) { label = 22; break; } else { label = 23; break; }
    case 22: 
      label = 24; break;
    case 23: 
      var $85=$namerepr;
      var $86=(($85+4)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=(($87+24)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=$namerepr;
      FUNCTION_TABLE[$89]($90);
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      var $96=$encrepr;
      var $97=(($96)|(0))==0;
      if ($97) { label = 29; break; } else { label = 30; break; }
    case 29: 
      label = 36; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $101=$encrepr;
      var $102=(($101)|0);
      var $103=HEAP32[(($102)>>2)];
      var $104=((($103)-(1))|0);
      HEAP32[(($102)>>2)]=$104;
      var $105=(($104)|(0))!=0;
      if ($105) { label = 32; break; } else { label = 33; break; }
    case 32: 
      label = 34; break;
    case 33: 
      var $108=$encrepr;
      var $109=(($108+4)|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=(($110+24)|0);
      var $112=HEAP32[(($111)>>2)];
      var $113=$encrepr;
      FUNCTION_TABLE[$112]($113);
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      var $118=$res;
      $1=$118;
      label = 59; break;
    case 38: 
      label = 39; break;
    case 39: 
      var $121=$namerepr;
      var $122=(($121)|(0))==0;
      if ($122) { label = 40; break; } else { label = 41; break; }
    case 40: 
      label = 47; break;
    case 41: 
      label = 42; break;
    case 42: 
      var $126=$namerepr;
      var $127=(($126)|0);
      var $128=HEAP32[(($127)>>2)];
      var $129=((($128)-(1))|0);
      HEAP32[(($127)>>2)]=$129;
      var $130=(($129)|(0))!=0;
      if ($130) { label = 43; break; } else { label = 44; break; }
    case 43: 
      label = 45; break;
    case 44: 
      var $133=$namerepr;
      var $134=(($133+4)|0);
      var $135=HEAP32[(($134)>>2)];
      var $136=(($135+24)|0);
      var $137=HEAP32[(($136)>>2)];
      var $138=$namerepr;
      FUNCTION_TABLE[$137]($138);
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      var $144=$encrepr;
      var $145=(($144)|(0))==0;
      if ($145) { label = 50; break; } else { label = 51; break; }
    case 50: 
      label = 57; break;
    case 51: 
      label = 52; break;
    case 52: 
      var $149=$encrepr;
      var $150=(($149)|0);
      var $151=HEAP32[(($150)>>2)];
      var $152=((($151)-(1))|0);
      HEAP32[(($150)>>2)]=$152;
      var $153=(($152)|(0))!=0;
      if ($153) { label = 53; break; } else { label = 54; break; }
    case 53: 
      label = 55; break;
    case 54: 
      var $156=$encrepr;
      var $157=(($156+4)|0);
      var $158=HEAP32[(($157)>>2)];
      var $159=(($158+24)|0);
      var $160=HEAP32[(($159)>>2)];
      var $161=$encrepr;
      FUNCTION_TABLE[$160]($161);
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      $1=0;
      label = 59; break;
    case 59: 
      var $167=$1;
      STACKTOP = __stackBase__;
      return $167;
    default: assert(0, "bad label: " + label);
  }
}
function _textiowrapper_traverse($self, $visit, $arg) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $vret;
      var $vret1;
      var $vret2;
      var $vret3;
      var $vret4;
      var $vret5;
      var $vret6;
      var $vret7;
      var $vret8;
      var $vret9;
      var $vret10;
      $2=$self;
      $3=$visit;
      $4=$arg;
      label = 2; break;
    case 2: 
      var $6=$2;
      var $7=(($6+20)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $11=$3;
      var $12=$2;
      var $13=(($12+20)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$4;
      var $16=FUNCTION_TABLE[$11]($14, $15);
      $vret=$16;
      var $17=$vret;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $20=$vret;
      $1=$20;
      label = 68; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $25=$2;
      var $26=(($25+24)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27)|(0))!=0;
      if ($28) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $30=$3;
      var $31=$2;
      var $32=(($31+24)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=$4;
      var $35=FUNCTION_TABLE[$30]($33, $34);
      $vret1=$35;
      var $36=$vret1;
      var $37=(($36)|(0))!=0;
      if ($37) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $39=$vret1;
      $1=$39;
      label = 68; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $44=$2;
      var $45=(($44+28)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46)|(0))!=0;
      if ($47) { label = 15; break; } else { label = 18; break; }
    case 15: 
      var $49=$3;
      var $50=$2;
      var $51=(($50+28)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=$4;
      var $54=FUNCTION_TABLE[$49]($52, $53);
      $vret2=$54;
      var $55=$vret2;
      var $56=(($55)|(0))!=0;
      if ($56) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $58=$vret2;
      $1=$58;
      label = 68; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $63=$2;
      var $64=(($63+32)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=(($65)|(0))!=0;
      if ($66) { label = 21; break; } else { label = 24; break; }
    case 21: 
      var $68=$3;
      var $69=$2;
      var $70=(($69+32)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=$4;
      var $73=FUNCTION_TABLE[$68]($71, $72);
      $vret3=$73;
      var $74=$vret3;
      var $75=(($74)|(0))!=0;
      if ($75) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $77=$vret3;
      $1=$77;
      label = 68; break;
    case 23: 
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $82=$2;
      var $83=(($82+36)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=(($84)|(0))!=0;
      if ($85) { label = 27; break; } else { label = 30; break; }
    case 27: 
      var $87=$3;
      var $88=$2;
      var $89=(($88+36)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=$4;
      var $92=FUNCTION_TABLE[$87]($90, $91);
      $vret4=$92;
      var $93=$vret4;
      var $94=(($93)|(0))!=0;
      if ($94) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $96=$vret4;
      $1=$96;
      label = 68; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      var $101=$2;
      var $102=(($101+64)|0);
      var $103=HEAP32[(($102)>>2)];
      var $104=(($103)|(0))!=0;
      if ($104) { label = 33; break; } else { label = 36; break; }
    case 33: 
      var $106=$3;
      var $107=$2;
      var $108=(($107+64)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=$4;
      var $111=FUNCTION_TABLE[$106]($109, $110);
      $vret5=$111;
      var $112=$vret5;
      var $113=(($112)|(0))!=0;
      if ($113) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $115=$vret5;
      $1=$115;
      label = 68; break;
    case 35: 
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      var $120=$2;
      var $121=(($120+72)|0);
      var $122=HEAP32[(($121)>>2)];
      var $123=(($122)|(0))!=0;
      if ($123) { label = 39; break; } else { label = 42; break; }
    case 39: 
      var $125=$3;
      var $126=$2;
      var $127=(($126+72)|0);
      var $128=HEAP32[(($127)>>2)];
      var $129=$4;
      var $130=FUNCTION_TABLE[$125]($128, $129);
      $vret6=$130;
      var $131=$vret6;
      var $132=(($131)|(0))!=0;
      if ($132) { label = 40; break; } else { label = 41; break; }
    case 40: 
      var $134=$vret6;
      $1=$134;
      label = 68; break;
    case 41: 
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      var $139=$2;
      var $140=(($139+80)|0);
      var $141=HEAP32[(($140)>>2)];
      var $142=(($141)|(0))!=0;
      if ($142) { label = 45; break; } else { label = 48; break; }
    case 45: 
      var $144=$3;
      var $145=$2;
      var $146=(($145+80)|0);
      var $147=HEAP32[(($146)>>2)];
      var $148=$4;
      var $149=FUNCTION_TABLE[$144]($147, $148);
      $vret7=$149;
      var $150=$vret7;
      var $151=(($150)|(0))!=0;
      if ($151) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $153=$vret7;
      $1=$153;
      label = 68; break;
    case 47: 
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      var $158=$2;
      var $159=(($158+40)|0);
      var $160=HEAP32[(($159)>>2)];
      var $161=(($160)|(0))!=0;
      if ($161) { label = 51; break; } else { label = 54; break; }
    case 51: 
      var $163=$3;
      var $164=$2;
      var $165=(($164+40)|0);
      var $166=HEAP32[(($165)>>2)];
      var $167=$4;
      var $168=FUNCTION_TABLE[$163]($166, $167);
      $vret8=$168;
      var $169=$vret8;
      var $170=(($169)|(0))!=0;
      if ($170) { label = 52; break; } else { label = 53; break; }
    case 52: 
      var $172=$vret8;
      $1=$172;
      label = 68; break;
    case 53: 
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      var $177=$2;
      var $178=(($177+84)|0);
      var $179=HEAP32[(($178)>>2)];
      var $180=(($179)|(0))!=0;
      if ($180) { label = 57; break; } else { label = 60; break; }
    case 57: 
      var $182=$3;
      var $183=$2;
      var $184=(($183+84)|0);
      var $185=HEAP32[(($184)>>2)];
      var $186=$4;
      var $187=FUNCTION_TABLE[$182]($185, $186);
      $vret9=$187;
      var $188=$vret9;
      var $189=(($188)|(0))!=0;
      if ($189) { label = 58; break; } else { label = 59; break; }
    case 58: 
      var $191=$vret9;
      $1=$191;
      label = 68; break;
    case 59: 
      label = 60; break;
    case 60: 
      label = 61; break;
    case 61: 
      label = 62; break;
    case 62: 
      var $196=$2;
      var $197=(($196+92)|0);
      var $198=HEAP32[(($197)>>2)];
      var $199=(($198)|(0))!=0;
      if ($199) { label = 63; break; } else { label = 66; break; }
    case 63: 
      var $201=$3;
      var $202=$2;
      var $203=(($202+92)|0);
      var $204=HEAP32[(($203)>>2)];
      var $205=$4;
      var $206=FUNCTION_TABLE[$201]($204, $205);
      $vret10=$206;
      var $207=$vret10;
      var $208=(($207)|(0))!=0;
      if ($208) { label = 64; break; } else { label = 65; break; }
    case 64: 
      var $210=$vret10;
      $1=$210;
      label = 68; break;
    case 65: 
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      $1=0;
      label = 68; break;
    case 68: 
      var $215=$1;
      return $215;
    default: assert(0, "bad label: " + label);
  }
}
function _textiowrapper_clear($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $_py_tmp;
      $2=$self;
      var $3=$2;
      var $4=__textiowrapper_clear($3);
      var $5=(($4)|(0)) < 0;
      if ($5) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=-1;
      label = 13; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $9=$2;
      var $10=(($9+92)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 5; break; } else { label = 11; break; }
    case 5: 
      var $14=$2;
      var $15=(($14+92)|0);
      var $16=HEAP32[(($15)>>2)];
      $_py_tmp=$16;
      var $17=$2;
      var $18=(($17+92)|0);
      HEAP32[(($18)>>2)]=0;
      label = 6; break;
    case 6: 
      var $20=$_py_tmp;
      var $21=(($20)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=((($22)-(1))|0);
      HEAP32[(($21)>>2)]=$23;
      var $24=(($23)|(0))!=0;
      if ($24) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 9; break;
    case 8: 
      var $27=$_py_tmp;
      var $28=(($27+4)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29+24)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=$_py_tmp;
      FUNCTION_TABLE[$31]($32);
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      $1=0;
      label = 13; break;
    case 13: 
      var $38=$1;
      return $38;
    default: assert(0, "bad label: " + label);
  }
}
function _textiowrapper_iternext($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $line;
      var $_py_tmp;
      $2=$self;
      var $3=$2;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0)) <= 0;
      if ($6) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $8=$2;
      var $9=(($8+12)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|(0))!=0;
      if ($11) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $13=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($13, ((__str36459)|0));
      label = 5; break;
    case 4: 
      var $15=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($15, ((__str37460)|0));
      label = 5; break;
    case 5: 
      $1=0;
      label = 36; break;
    case 6: 
      var $18=$2;
      var $19=(($18+53)|0);
      HEAP8[($19)]=0;
      var $20=$2;
      var $21=$20;
      var $22=(($21+4)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23)|(0))==((_PyTextIOWrapper_Type)|(0));
      if ($24) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $26=$2;
      var $27=__textiowrapper_readline($26, -1);
      $line=$27;
      label = 17; break;
    case 8: 
      var $29=$2;
      var $30=$29;
      var $31=HEAP32[((__PyIO_str_readline)>>2)];
      var $32=_PyObject_CallMethodObjArgs($30, $31, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $line=$32;
      var $33=$line;
      var $34=(($33)|(0))!=0;
      if ($34) { label = 9; break; } else { label = 16; break; }
    case 9: 
      var $36=$line;
      var $37=(($36+4)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38+84)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=$40 & 268435456;
      var $42=(($41)|(0))!=0;
      if ($42) { label = 16; break; } else { label = 10; break; }
    case 10: 
      var $44=HEAP32[((_PyExc_IOError)>>2)];
      var $45=$line;
      var $46=(($45+4)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=(($47+12)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=_PyErr_Format($44, ((__str92)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$49,tempInt));
      label = 11; break;
    case 11: 
      var $52=$line;
      var $53=(($52)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=((($54)-(1))|0);
      HEAP32[(($53)>>2)]=$55;
      var $56=(($55)|(0))!=0;
      if ($56) { label = 12; break; } else { label = 13; break; }
    case 12: 
      label = 14; break;
    case 13: 
      var $59=$line;
      var $60=(($59+4)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=(($61+24)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=$line;
      FUNCTION_TABLE[$63]($64);
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      $1=0;
      label = 36; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $69=$line;
      var $70=(($69)|(0))==0;
      if ($70) { label = 18; break; } else { label = 19; break; }
    case 18: 
      $1=0;
      label = 36; break;
    case 19: 
      var $73=$line;
      var $74=$73;
      var $75=(($74+8)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=(($76)|(0))==0;
      if ($77) { label = 20; break; } else { label = 35; break; }
    case 20: 
      label = 21; break;
    case 21: 
      var $80=$line;
      var $81=(($80)|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=((($82)-(1))|0);
      HEAP32[(($81)>>2)]=$83;
      var $84=(($83)|(0))!=0;
      if ($84) { label = 22; break; } else { label = 23; break; }
    case 22: 
      label = 24; break;
    case 23: 
      var $87=$line;
      var $88=(($87+4)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=(($89+24)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=$line;
      FUNCTION_TABLE[$91]($92);
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $96=$2;
      var $97=(($96+80)|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=(($98)|(0))!=0;
      if ($99) { label = 27; break; } else { label = 33; break; }
    case 27: 
      var $101=$2;
      var $102=(($101+80)|0);
      var $103=HEAP32[(($102)>>2)];
      $_py_tmp=$103;
      var $104=$2;
      var $105=(($104+80)|0);
      HEAP32[(($105)>>2)]=0;
      label = 28; break;
    case 28: 
      var $107=$_py_tmp;
      var $108=(($107)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=((($109)-(1))|0);
      HEAP32[(($108)>>2)]=$110;
      var $111=(($110)|(0))!=0;
      if ($111) { label = 29; break; } else { label = 30; break; }
    case 29: 
      label = 31; break;
    case 30: 
      var $114=$_py_tmp;
      var $115=(($114+4)|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=(($116+24)|0);
      var $118=HEAP32[(($117)>>2)];
      var $119=$_py_tmp;
      FUNCTION_TABLE[$118]($119);
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      var $124=$2;
      var $125=(($124+52)|0);
      var $126=HEAP8[($125)];
      var $127=$2;
      var $128=(($127+53)|0);
      HEAP8[($128)]=$126;
      $1=0;
      label = 36; break;
    case 35: 
      var $130=$line;
      $1=$130;
      label = 36; break;
    case 36: 
      var $132=$1;
      STACKTOP = __stackBase__;
      return $132;
    default: assert(0, "bad label: " + label);
  }
}
function _textiowrapper_init($self, $args, $kwds) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 44)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $kwlist=__stackBase__;
      var $buffer=(__stackBase__)+(24);
      var $raw;
      var $encoding=(__stackBase__)+(28);
      var $errors=(__stackBase__)+(32);
      var $newline=(__stackBase__)+(36);
      var $line_buffering=(__stackBase__)+(40);
      var $res;
      var $r;
      var $_py_tmp;
      var $_py_tmp1;
      var $_py_tmp2;
      var $_py_tmp3;
      var $_py_tmp4;
      var $_py_tmp5;
      var $_py_tmp6;
      var $_py_tmp7;
      var $_py_tmp8;
      var $_py_tmp9;
      var $_py_tmp10;
      var $incrementalDecoder;
      var $_py_tmp11;
      var $ci;
      var $e;
      var $cookieObj;
      var $cmp;
      $2=$self;
      $3=$args;
      $4=$kwds;
      var $5=$kwlist;
      assert(24 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[((_textiowrapper_init_kwlist)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[(((_textiowrapper_init_kwlist)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[(((_textiowrapper_init_kwlist)+(8))>>2)];HEAP32[((($5)+(12))>>2)]=HEAP32[(((_textiowrapper_init_kwlist)+(12))>>2)];HEAP32[((($5)+(16))>>2)]=HEAP32[(((_textiowrapper_init_kwlist)+(16))>>2)];HEAP32[((($5)+(20))>>2)]=HEAP32[(((_textiowrapper_init_kwlist)+(20))>>2)];
      HEAP32[(($encoding)>>2)]=0;
      HEAP32[(($errors)>>2)]=0;
      HEAP32[(($newline)>>2)]=0;
      HEAP32[(($line_buffering)>>2)]=0;
      var $6=$2;
      var $7=(($6+8)|0);
      HEAP32[(($7)>>2)]=0;
      var $8=$2;
      var $9=(($8+12)|0);
      HEAP32[(($9)>>2)]=0;
      var $10=$3;
      var $11=$4;
      var $12=(($kwlist)|0);
      var $13=__PyArg_ParseTupleAndKeywords_SizeT($10, $11, ((__str11434)|0), $12, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$buffer,HEAP32[(((tempInt)+(4))>>2)]=$encoding,HEAP32[(((tempInt)+(8))>>2)]=$errors,HEAP32[(((tempInt)+(12))>>2)]=$newline,HEAP32[(((tempInt)+(16))>>2)]=$line_buffering,tempInt));
      var $14=(($13)|(0))!=0;
      if ($14) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=-1;
      label = 274; break;
    case 3: 
      var $17=HEAP32[(($newline)>>2)];
      var $18=(($17)|(0))!=0;
      if ($18) { label = 4; break; } else { label = 13; break; }
    case 4: 
      var $20=HEAP32[(($newline)>>2)];
      var $21=(($20)|0);
      var $22=HEAP8[($21)];
      var $23=(($22 << 24) >> 24);
      var $24=(($23)|(0))!=0;
      if ($24) { label = 5; break; } else { label = 13; break; }
    case 5: 
      var $26=HEAP32[(($newline)>>2)];
      var $27=(($26)|0);
      var $28=HEAP8[($27)];
      var $29=(($28 << 24) >> 24);
      var $30=(($29)|(0))==10;
      if ($30) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $32=HEAP32[(($newline)>>2)];
      var $33=(($32+1)|0);
      var $34=HEAP8[($33)];
      var $35=(($34 << 24) >> 24);
      var $36=(($35)|(0))==0;
      if ($36) { label = 13; break; } else { label = 7; break; }
    case 7: 
      var $38=HEAP32[(($newline)>>2)];
      var $39=(($38)|0);
      var $40=HEAP8[($39)];
      var $41=(($40 << 24) >> 24);
      var $42=(($41)|(0))==13;
      if ($42) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $44=HEAP32[(($newline)>>2)];
      var $45=(($44+1)|0);
      var $46=HEAP8[($45)];
      var $47=(($46 << 24) >> 24);
      var $48=(($47)|(0))==0;
      if ($48) { label = 13; break; } else { label = 9; break; }
    case 9: 
      var $50=HEAP32[(($newline)>>2)];
      var $51=(($50)|0);
      var $52=HEAP8[($51)];
      var $53=(($52 << 24) >> 24);
      var $54=(($53)|(0))==13;
      if ($54) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $56=HEAP32[(($newline)>>2)];
      var $57=(($56+1)|0);
      var $58=HEAP8[($57)];
      var $59=(($58 << 24) >> 24);
      var $60=(($59)|(0))==10;
      if ($60) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $62=HEAP32[(($newline)>>2)];
      var $63=(($62+2)|0);
      var $64=HEAP8[($63)];
      var $65=(($64 << 24) >> 24);
      var $66=(($65)|(0))==0;
      if ($66) { label = 13; break; } else { label = 12; break; }
    case 12: 
      var $68=HEAP32[((_PyExc_ValueError)>>2)];
      var $69=HEAP32[(($newline)>>2)];
      var $70=_PyErr_Format($68, ((__str12435)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$69,tempInt));
      $1=-1;
      label = 274; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $73=$2;
      var $74=(($73+20)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=(($75)|(0))!=0;
      if ($76) { label = 15; break; } else { label = 21; break; }
    case 15: 
      var $78=$2;
      var $79=(($78+20)|0);
      var $80=HEAP32[(($79)>>2)];
      $_py_tmp=$80;
      var $81=$2;
      var $82=(($81+20)|0);
      HEAP32[(($82)>>2)]=0;
      label = 16; break;
    case 16: 
      var $84=$_py_tmp;
      var $85=(($84)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=((($86)-(1))|0);
      HEAP32[(($85)>>2)]=$87;
      var $88=(($87)|(0))!=0;
      if ($88) { label = 17; break; } else { label = 18; break; }
    case 17: 
      label = 19; break;
    case 18: 
      var $91=$_py_tmp;
      var $92=(($91+4)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=(($93+24)|0);
      var $95=HEAP32[(($94)>>2)];
      var $96=$_py_tmp;
      FUNCTION_TABLE[$95]($96);
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $102=$2;
      var $103=(($102+24)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=(($104)|(0))!=0;
      if ($105) { label = 24; break; } else { label = 30; break; }
    case 24: 
      var $107=$2;
      var $108=(($107+24)|0);
      var $109=HEAP32[(($108)>>2)];
      $_py_tmp1=$109;
      var $110=$2;
      var $111=(($110+24)|0);
      HEAP32[(($111)>>2)]=0;
      label = 25; break;
    case 25: 
      var $113=$_py_tmp1;
      var $114=(($113)|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=((($115)-(1))|0);
      HEAP32[(($114)>>2)]=$116;
      var $117=(($116)|(0))!=0;
      if ($117) { label = 26; break; } else { label = 27; break; }
    case 26: 
      label = 28; break;
    case 27: 
      var $120=$_py_tmp1;
      var $121=(($120+4)|0);
      var $122=HEAP32[(($121)>>2)];
      var $123=(($122+24)|0);
      var $124=HEAP32[(($123)>>2)];
      var $125=$_py_tmp1;
      FUNCTION_TABLE[$124]($125);
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      var $131=$2;
      var $132=(($131+28)|0);
      var $133=HEAP32[(($132)>>2)];
      var $134=(($133)|(0))!=0;
      if ($134) { label = 33; break; } else { label = 39; break; }
    case 33: 
      var $136=$2;
      var $137=(($136+28)|0);
      var $138=HEAP32[(($137)>>2)];
      $_py_tmp2=$138;
      var $139=$2;
      var $140=(($139+28)|0);
      HEAP32[(($140)>>2)]=0;
      label = 34; break;
    case 34: 
      var $142=$_py_tmp2;
      var $143=(($142)|0);
      var $144=HEAP32[(($143)>>2)];
      var $145=((($144)-(1))|0);
      HEAP32[(($143)>>2)]=$145;
      var $146=(($145)|(0))!=0;
      if ($146) { label = 35; break; } else { label = 36; break; }
    case 35: 
      label = 37; break;
    case 36: 
      var $149=$_py_tmp2;
      var $150=(($149+4)|0);
      var $151=HEAP32[(($150)>>2)];
      var $152=(($151+24)|0);
      var $153=HEAP32[(($152)>>2)];
      var $154=$_py_tmp2;
      FUNCTION_TABLE[$153]($154);
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      var $160=$2;
      var $161=(($160+32)|0);
      var $162=HEAP32[(($161)>>2)];
      var $163=(($162)|(0))!=0;
      if ($163) { label = 42; break; } else { label = 48; break; }
    case 42: 
      var $165=$2;
      var $166=(($165+32)|0);
      var $167=HEAP32[(($166)>>2)];
      $_py_tmp3=$167;
      var $168=$2;
      var $169=(($168+32)|0);
      HEAP32[(($169)>>2)]=0;
      label = 43; break;
    case 43: 
      var $171=$_py_tmp3;
      var $172=(($171)|0);
      var $173=HEAP32[(($172)>>2)];
      var $174=((($173)-(1))|0);
      HEAP32[(($172)>>2)]=$174;
      var $175=(($174)|(0))!=0;
      if ($175) { label = 44; break; } else { label = 45; break; }
    case 44: 
      label = 46; break;
    case 45: 
      var $178=$_py_tmp3;
      var $179=(($178+4)|0);
      var $180=HEAP32[(($179)>>2)];
      var $181=(($180+24)|0);
      var $182=HEAP32[(($181)>>2)];
      var $183=$_py_tmp3;
      FUNCTION_TABLE[$182]($183);
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      var $189=$2;
      var $190=(($189+36)|0);
      var $191=HEAP32[(($190)>>2)];
      var $192=(($191)|(0))!=0;
      if ($192) { label = 51; break; } else { label = 57; break; }
    case 51: 
      var $194=$2;
      var $195=(($194+36)|0);
      var $196=HEAP32[(($195)>>2)];
      $_py_tmp4=$196;
      var $197=$2;
      var $198=(($197+36)|0);
      HEAP32[(($198)>>2)]=0;
      label = 52; break;
    case 52: 
      var $200=$_py_tmp4;
      var $201=(($200)|0);
      var $202=HEAP32[(($201)>>2)];
      var $203=((($202)-(1))|0);
      HEAP32[(($201)>>2)]=$203;
      var $204=(($203)|(0))!=0;
      if ($204) { label = 53; break; } else { label = 54; break; }
    case 53: 
      label = 55; break;
    case 54: 
      var $207=$_py_tmp4;
      var $208=(($207+4)|0);
      var $209=HEAP32[(($208)>>2)];
      var $210=(($209+24)|0);
      var $211=HEAP32[(($210)>>2)];
      var $212=$_py_tmp4;
      FUNCTION_TABLE[$211]($212);
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      label = 59; break;
    case 59: 
      var $218=$2;
      var $219=(($218+64)|0);
      var $220=HEAP32[(($219)>>2)];
      var $221=(($220)|(0))!=0;
      if ($221) { label = 60; break; } else { label = 66; break; }
    case 60: 
      var $223=$2;
      var $224=(($223+64)|0);
      var $225=HEAP32[(($224)>>2)];
      $_py_tmp5=$225;
      var $226=$2;
      var $227=(($226+64)|0);
      HEAP32[(($227)>>2)]=0;
      label = 61; break;
    case 61: 
      var $229=$_py_tmp5;
      var $230=(($229)|0);
      var $231=HEAP32[(($230)>>2)];
      var $232=((($231)-(1))|0);
      HEAP32[(($230)>>2)]=$232;
      var $233=(($232)|(0))!=0;
      if ($233) { label = 62; break; } else { label = 63; break; }
    case 62: 
      label = 64; break;
    case 63: 
      var $236=$_py_tmp5;
      var $237=(($236+4)|0);
      var $238=HEAP32[(($237)>>2)];
      var $239=(($238+24)|0);
      var $240=HEAP32[(($239)>>2)];
      var $241=$_py_tmp5;
      FUNCTION_TABLE[$240]($241);
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      label = 68; break;
    case 68: 
      var $247=$2;
      var $248=(($247+72)|0);
      var $249=HEAP32[(($248)>>2)];
      var $250=(($249)|(0))!=0;
      if ($250) { label = 69; break; } else { label = 75; break; }
    case 69: 
      var $252=$2;
      var $253=(($252+72)|0);
      var $254=HEAP32[(($253)>>2)];
      $_py_tmp6=$254;
      var $255=$2;
      var $256=(($255+72)|0);
      HEAP32[(($256)>>2)]=0;
      label = 70; break;
    case 70: 
      var $258=$_py_tmp6;
      var $259=(($258)|0);
      var $260=HEAP32[(($259)>>2)];
      var $261=((($260)-(1))|0);
      HEAP32[(($259)>>2)]=$261;
      var $262=(($261)|(0))!=0;
      if ($262) { label = 71; break; } else { label = 72; break; }
    case 71: 
      label = 73; break;
    case 72: 
      var $265=$_py_tmp6;
      var $266=(($265+4)|0);
      var $267=HEAP32[(($266)>>2)];
      var $268=(($267+24)|0);
      var $269=HEAP32[(($268)>>2)];
      var $270=$_py_tmp6;
      FUNCTION_TABLE[$269]($270);
      label = 73; break;
    case 73: 
      label = 74; break;
    case 74: 
      label = 75; break;
    case 75: 
      label = 76; break;
    case 76: 
      label = 77; break;
    case 77: 
      var $276=$2;
      var $277=(($276+80)|0);
      var $278=HEAP32[(($277)>>2)];
      var $279=(($278)|(0))!=0;
      if ($279) { label = 78; break; } else { label = 84; break; }
    case 78: 
      var $281=$2;
      var $282=(($281+80)|0);
      var $283=HEAP32[(($282)>>2)];
      $_py_tmp7=$283;
      var $284=$2;
      var $285=(($284+80)|0);
      HEAP32[(($285)>>2)]=0;
      label = 79; break;
    case 79: 
      var $287=$_py_tmp7;
      var $288=(($287)|0);
      var $289=HEAP32[(($288)>>2)];
      var $290=((($289)-(1))|0);
      HEAP32[(($288)>>2)]=$290;
      var $291=(($290)|(0))!=0;
      if ($291) { label = 80; break; } else { label = 81; break; }
    case 80: 
      label = 82; break;
    case 81: 
      var $294=$_py_tmp7;
      var $295=(($294+4)|0);
      var $296=HEAP32[(($295)>>2)];
      var $297=(($296+24)|0);
      var $298=HEAP32[(($297)>>2)];
      var $299=$_py_tmp7;
      FUNCTION_TABLE[$298]($299);
      label = 82; break;
    case 82: 
      label = 83; break;
    case 83: 
      label = 84; break;
    case 84: 
      label = 85; break;
    case 85: 
      label = 86; break;
    case 86: 
      var $305=$2;
      var $306=(($305+40)|0);
      var $307=HEAP32[(($306)>>2)];
      var $308=(($307)|(0))!=0;
      if ($308) { label = 87; break; } else { label = 93; break; }
    case 87: 
      var $310=$2;
      var $311=(($310+40)|0);
      var $312=HEAP32[(($311)>>2)];
      $_py_tmp8=$312;
      var $313=$2;
      var $314=(($313+40)|0);
      HEAP32[(($314)>>2)]=0;
      label = 88; break;
    case 88: 
      var $316=$_py_tmp8;
      var $317=(($316)|0);
      var $318=HEAP32[(($317)>>2)];
      var $319=((($318)-(1))|0);
      HEAP32[(($317)>>2)]=$319;
      var $320=(($319)|(0))!=0;
      if ($320) { label = 89; break; } else { label = 90; break; }
    case 89: 
      label = 91; break;
    case 90: 
      var $323=$_py_tmp8;
      var $324=(($323+4)|0);
      var $325=HEAP32[(($324)>>2)];
      var $326=(($325+24)|0);
      var $327=HEAP32[(($326)>>2)];
      var $328=$_py_tmp8;
      FUNCTION_TABLE[$327]($328);
      label = 91; break;
    case 91: 
      label = 92; break;
    case 92: 
      label = 93; break;
    case 93: 
      label = 94; break;
    case 94: 
      label = 95; break;
    case 95: 
      var $334=$2;
      var $335=(($334+84)|0);
      var $336=HEAP32[(($335)>>2)];
      var $337=(($336)|(0))!=0;
      if ($337) { label = 96; break; } else { label = 102; break; }
    case 96: 
      var $339=$2;
      var $340=(($339+84)|0);
      var $341=HEAP32[(($340)>>2)];
      $_py_tmp9=$341;
      var $342=$2;
      var $343=(($342+84)|0);
      HEAP32[(($343)>>2)]=0;
      label = 97; break;
    case 97: 
      var $345=$_py_tmp9;
      var $346=(($345)|0);
      var $347=HEAP32[(($346)>>2)];
      var $348=((($347)-(1))|0);
      HEAP32[(($346)>>2)]=$348;
      var $349=(($348)|(0))!=0;
      if ($349) { label = 98; break; } else { label = 99; break; }
    case 98: 
      label = 100; break;
    case 99: 
      var $352=$_py_tmp9;
      var $353=(($352+4)|0);
      var $354=HEAP32[(($353)>>2)];
      var $355=(($354+24)|0);
      var $356=HEAP32[(($355)>>2)];
      var $357=$_py_tmp9;
      FUNCTION_TABLE[$356]($357);
      label = 100; break;
    case 100: 
      label = 101; break;
    case 101: 
      label = 102; break;
    case 102: 
      label = 103; break;
    case 103: 
      var $362=$2;
      var $363=(($362+68)|0);
      HEAP32[(($363)>>2)]=0;
      var $364=$2;
      var $365=(($364+76)|0);
      HEAP32[(($365)>>2)]=0;
      var $366=$2;
      var $367=(($366+56)|0);
      HEAP32[(($367)>>2)]=0;
      var $368=$2;
      var $369=(($368+44)|0);
      HEAP32[(($369)>>2)]=0;
      var $370=HEAP32[(($encoding)>>2)];
      var $371=(($370)|(0))==0;
      if ($371) { label = 104; break; } else { label = 130; break; }
    case 104: 
      var $373=$2;
      var $374=(($373+24)|0);
      var $375=HEAP32[(($374)>>2)];
      var $376=(($375)|(0))==0;
      if ($376) { label = 105; break; } else { label = 130; break; }
    case 105: 
      var $378=HEAP32[((__PyIO_locale_module)>>2)];
      var $379=(($378)|(0))==0;
      if ($379) { label = 106; break; } else { label = 109; break; }
    case 106: 
      var $381=_PyImport_ImportModule(((__str13436)|0));
      HEAP32[((__PyIO_locale_module)>>2)]=$381;
      var $382=HEAP32[((__PyIO_locale_module)>>2)];
      var $383=(($382)|(0))==0;
      if ($383) { label = 107; break; } else { label = 108; break; }
    case 107: 
      label = 112; break;
    case 108: 
      label = 110; break;
    case 109: 
      label = 110; break;
    case 110: 
      var $388=HEAP32[((__PyIO_locale_module)>>2)];
      var $389=__PyObject_CallMethod_SizeT($388, ((__str14437)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $390=$2;
      var $391=(($390+24)|0);
      HEAP32[(($391)>>2)]=$389;
      var $392=$2;
      var $393=(($392+24)|0);
      var $394=HEAP32[(($393)>>2)];
      var $395=(($394)|(0))==0;
      if ($395) { label = 111; break; } else { label = 116; break; }
    case 111: 
      label = 112; break;
    case 112: 
      var $398=HEAP32[((_PyExc_ImportError)>>2)];
      var $399=_PyErr_ExceptionMatches($398);
      var $400=(($399)|(0))!=0;
      if ($400) { label = 113; break; } else { label = 114; break; }
    case 113: 
      _PyErr_Clear();
      var $402=_PyString_FromString(((__str15438)|0));
      var $403=$2;
      var $404=(($403+24)|0);
      HEAP32[(($404)>>2)]=$402;
      label = 115; break;
    case 114: 
      label = 273; break;
    case 115: 
      label = 128; break;
    case 116: 
      var $408=$2;
      var $409=(($408+24)|0);
      var $410=HEAP32[(($409)>>2)];
      var $411=(($410+4)|0);
      var $412=HEAP32[(($411)>>2)];
      var $413=(($412+84)|0);
      var $414=HEAP32[(($413)>>2)];
      var $415=$414 & 134217728;
      var $416=(($415)|(0))!=0;
      if ($416) { label = 127; break; } else { label = 117; break; }
    case 117: 
      label = 118; break;
    case 118: 
      var $419=$2;
      var $420=(($419+24)|0);
      var $421=HEAP32[(($420)>>2)];
      var $422=(($421)|(0))!=0;
      if ($422) { label = 119; break; } else { label = 125; break; }
    case 119: 
      var $424=$2;
      var $425=(($424+24)|0);
      var $426=HEAP32[(($425)>>2)];
      $_py_tmp10=$426;
      var $427=$2;
      var $428=(($427+24)|0);
      HEAP32[(($428)>>2)]=0;
      label = 120; break;
    case 120: 
      var $430=$_py_tmp10;
      var $431=(($430)|0);
      var $432=HEAP32[(($431)>>2)];
      var $433=((($432)-(1))|0);
      HEAP32[(($431)>>2)]=$433;
      var $434=(($433)|(0))!=0;
      if ($434) { label = 121; break; } else { label = 122; break; }
    case 121: 
      label = 123; break;
    case 122: 
      var $437=$_py_tmp10;
      var $438=(($437+4)|0);
      var $439=HEAP32[(($438)>>2)];
      var $440=(($439+24)|0);
      var $441=HEAP32[(($440)>>2)];
      var $442=$_py_tmp10;
      FUNCTION_TABLE[$441]($442);
      label = 123; break;
    case 123: 
      label = 124; break;
    case 124: 
      label = 125; break;
    case 125: 
      label = 126; break;
    case 126: 
      label = 127; break;
    case 127: 
      label = 128; break;
    case 128: 
      label = 129; break;
    case 129: 
      label = 130; break;
    case 130: 
      var $451=$2;
      var $452=(($451+24)|0);
      var $453=HEAP32[(($452)>>2)];
      var $454=(($453)|(0))!=0;
      if ($454) { label = 131; break; } else { label = 132; break; }
    case 131: 
      var $456=$2;
      var $457=(($456+24)|0);
      var $458=HEAP32[(($457)>>2)];
      var $459=_PyString_AsString($458);
      HEAP32[(($encoding)>>2)]=$459;
      label = 138; break;
    case 132: 
      var $461=HEAP32[(($encoding)>>2)];
      var $462=(($461)|(0))!=0;
      if ($462) { label = 133; break; } else { label = 136; break; }
    case 133: 
      var $464=HEAP32[(($encoding)>>2)];
      var $465=_PyString_FromString($464);
      var $466=$2;
      var $467=(($466+24)|0);
      HEAP32[(($467)>>2)]=$465;
      var $468=$2;
      var $469=(($468+24)|0);
      var $470=HEAP32[(($469)>>2)];
      var $471=(($470)|(0))==0;
      if ($471) { label = 134; break; } else { label = 135; break; }
    case 134: 
      label = 273; break;
    case 135: 
      label = 137; break;
    case 136: 
      var $475=HEAP32[((_PyExc_IOError)>>2)];
      _PyErr_SetString($475, ((__str16439)|0));
      label = 137; break;
    case 137: 
      label = 138; break;
    case 138: 
      var $478=HEAP32[(($errors)>>2)];
      var $479=(($478)|(0))==0;
      if ($479) { label = 139; break; } else { label = 140; break; }
    case 139: 
      HEAP32[(($errors)>>2)]=((__str17440)|0);
      label = 140; break;
    case 140: 
      var $482=HEAP32[(($errors)>>2)];
      var $483=_PyString_FromString($482);
      var $484=$2;
      var $485=(($484+40)|0);
      HEAP32[(($485)>>2)]=$483;
      var $486=$2;
      var $487=(($486+40)|0);
      var $488=HEAP32[(($487)>>2)];
      var $489=(($488)|(0))==0;
      if ($489) { label = 141; break; } else { label = 142; break; }
    case 141: 
      label = 273; break;
    case 142: 
      var $492=$2;
      var $493=(($492+16)|0);
      HEAP32[(($493)>>2)]=8192;
      var $494=HEAP32[(($newline)>>2)];
      var $495=(($494)|(0))==0;
      if ($495) { var $503 = 1;label = 144; break; } else { label = 143; break; }
    case 143: 
      var $497=HEAP32[(($newline)>>2)];
      var $498=(($497)|0);
      var $499=HEAP8[($498)];
      var $500=(($499 << 24) >> 24);
      var $501=(($500)|(0))==0;
      var $503 = $501;label = 144; break;
    case 144: 
      var $503;
      var $504=(($503)&(1));
      var $505=(($504) & 255);
      var $506=$2;
      var $507=(($506+49)|0);
      HEAP8[($507)]=$505;
      var $508=HEAP32[(($line_buffering)>>2)];
      var $509=(($508) & 255);
      var $510=$2;
      var $511=(($510+48)|0);
      HEAP8[($511)]=$509;
      var $512=HEAP32[(($newline)>>2)];
      var $513=(($512)|(0))==0;
      var $514=(($513)&(1));
      var $515=(($514) & 255);
      var $516=$2;
      var $517=(($516+50)|0);
      HEAP8[($517)]=$515;
      var $518=HEAP32[(($newline)>>2)];
      var $519=(($518)|(0))!=0;
      if ($519) { label = 145; break; } else { label = 148; break; }
    case 145: 
      var $521=HEAP32[(($newline)>>2)];
      var $522=_PyString_FromString($521);
      var $523=$2;
      var $524=(($523+36)|0);
      HEAP32[(($524)>>2)]=$522;
      var $525=$2;
      var $526=(($525+36)|0);
      var $527=HEAP32[(($526)>>2)];
      var $528=(($527)|(0))==0;
      if ($528) { label = 146; break; } else { label = 147; break; }
    case 146: 
      $1=-1;
      label = 274; break;
    case 147: 
      label = 148; break;
    case 148: 
      var $532=HEAP32[(($newline)>>2)];
      var $533=(($532)|(0))==0;
      if ($533) { var $541 = 1;label = 150; break; } else { label = 149; break; }
    case 149: 
      var $535=HEAP32[(($newline)>>2)];
      var $536=(($535)|0);
      var $537=HEAP8[($536)];
      var $538=(($537 << 24) >> 24);
      var $539=(($538)|(0))!=0;
      var $541 = $539;label = 150; break;
    case 150: 
      var $541;
      var $542=(($541)&(1));
      var $543=(($542) & 255);
      var $544=$2;
      var $545=(($544+51)|0);
      HEAP8[($545)]=$543;
      var $546=$2;
      var $547=(($546+49)|0);
      var $548=HEAP8[($547)];
      var $549=(($548 << 24) >> 24)!=0;
      if ($549) { label = 155; break; } else { label = 151; break; }
    case 151: 
      var $551=$2;
      var $552=(($551+51)|0);
      var $553=HEAP8[($552)];
      var $554=(($553 << 24) >> 24);
      var $555=(($554)|(0))!=0;
      if ($555) { label = 152; break; } else { label = 155; break; }
    case 152: 
      var $557=$2;
      var $558=(($557+36)|0);
      var $559=HEAP32[(($558)>>2)];
      var $560=_PyString_AsString($559);
      var $561=$2;
      var $562=(($561+44)|0);
      HEAP32[(($562)>>2)]=$560;
      var $563=$2;
      var $564=(($563+44)|0);
      var $565=HEAP32[(($564)>>2)];
      var $566=_strcmp($565, ((__str18441)|0));
      var $567=(($566)|(0))!=0;
      if ($567) { label = 154; break; } else { label = 153; break; }
    case 153: 
      var $569=$2;
      var $570=(($569+44)|0);
      HEAP32[(($570)>>2)]=0;
      label = 154; break;
    case 154: 
      label = 155; break;
    case 155: 
      var $573=HEAP32[(($buffer)>>2)];
      var $574=__PyObject_CallMethod_SizeT($573, ((__str19442)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $res=$574;
      var $575=$res;
      var $576=(($575)|(0))==0;
      if ($576) { label = 156; break; } else { label = 157; break; }
    case 156: 
      label = 273; break;
    case 157: 
      var $579=$res;
      var $580=_PyObject_IsTrue($579);
      $r=$580;
      label = 158; break;
    case 158: 
      var $582=$res;
      var $583=(($582)|0);
      var $584=HEAP32[(($583)>>2)];
      var $585=((($584)-(1))|0);
      HEAP32[(($583)>>2)]=$585;
      var $586=(($585)|(0))!=0;
      if ($586) { label = 159; break; } else { label = 160; break; }
    case 159: 
      label = 161; break;
    case 160: 
      var $589=$res;
      var $590=(($589+4)|0);
      var $591=HEAP32[(($590)>>2)];
      var $592=(($591+24)|0);
      var $593=HEAP32[(($592)>>2)];
      var $594=$res;
      FUNCTION_TABLE[$593]($594);
      label = 161; break;
    case 161: 
      label = 162; break;
    case 162: 
      var $597=$r;
      var $598=(($597)|(0))==-1;
      if ($598) { label = 163; break; } else { label = 164; break; }
    case 163: 
      label = 273; break;
    case 164: 
      var $601=$r;
      var $602=(($601)|(0))==1;
      if ($602) { label = 165; break; } else { label = 181; break; }
    case 165: 
      var $604=HEAP32[(($encoding)>>2)];
      var $605=HEAP32[(($errors)>>2)];
      var $606=_PyCodec_IncrementalDecoder($604, $605);
      var $607=$2;
      var $608=(($607+32)|0);
      HEAP32[(($608)>>2)]=$606;
      var $609=$2;
      var $610=(($609+32)|0);
      var $611=HEAP32[(($610)>>2)];
      var $612=(($611)|(0))==0;
      if ($612) { label = 166; break; } else { label = 167; break; }
    case 166: 
      label = 273; break;
    case 167: 
      var $615=$2;
      var $616=(($615+49)|0);
      var $617=HEAP8[($616)];
      var $618=(($617 << 24) >> 24)!=0;
      if ($618) { label = 168; break; } else { label = 180; break; }
    case 168: 
      var $620=$2;
      var $621=(($620+32)|0);
      var $622=HEAP32[(($621)>>2)];
      var $623=$2;
      var $624=(($623+50)|0);
      var $625=HEAP8[($624)];
      var $626=(($625 << 24) >> 24);
      var $627=__PyObject_CallFunction_SizeT(_PyIncrementalNewlineDecoder_Type, ((__str20443)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$622,HEAP32[(((tempInt)+(4))>>2)]=$626,tempInt));
      $incrementalDecoder=$627;
      var $628=$incrementalDecoder;
      var $629=(($628)|(0))==0;
      if ($629) { label = 169; break; } else { label = 170; break; }
    case 169: 
      label = 273; break;
    case 170: 
      label = 171; break;
    case 171: 
      var $633=$2;
      var $634=(($633+32)|0);
      var $635=HEAP32[(($634)>>2)];
      var $636=(($635)|(0))!=0;
      if ($636) { label = 172; break; } else { label = 178; break; }
    case 172: 
      var $638=$2;
      var $639=(($638+32)|0);
      var $640=HEAP32[(($639)>>2)];
      $_py_tmp11=$640;
      var $641=$2;
      var $642=(($641+32)|0);
      HEAP32[(($642)>>2)]=0;
      label = 173; break;
    case 173: 
      var $644=$_py_tmp11;
      var $645=(($644)|0);
      var $646=HEAP32[(($645)>>2)];
      var $647=((($646)-(1))|0);
      HEAP32[(($645)>>2)]=$647;
      var $648=(($647)|(0))!=0;
      if ($648) { label = 174; break; } else { label = 175; break; }
    case 174: 
      label = 176; break;
    case 175: 
      var $651=$_py_tmp11;
      var $652=(($651+4)|0);
      var $653=HEAP32[(($652)>>2)];
      var $654=(($653+24)|0);
      var $655=HEAP32[(($654)>>2)];
      var $656=$_py_tmp11;
      FUNCTION_TABLE[$655]($656);
      label = 176; break;
    case 176: 
      label = 177; break;
    case 177: 
      label = 178; break;
    case 178: 
      label = 179; break;
    case 179: 
      var $661=$incrementalDecoder;
      var $662=$2;
      var $663=(($662+32)|0);
      HEAP32[(($663)>>2)]=$661;
      label = 180; break;
    case 180: 
      label = 181; break;
    case 181: 
      var $666=HEAP32[(($buffer)>>2)];
      var $667=__PyObject_CallMethod_SizeT($666, ((__str21444)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $res=$667;
      var $668=$res;
      var $669=(($668)|(0))==0;
      if ($669) { label = 182; break; } else { label = 183; break; }
    case 182: 
      label = 273; break;
    case 183: 
      var $672=$res;
      var $673=_PyObject_IsTrue($672);
      $r=$673;
      label = 184; break;
    case 184: 
      var $675=$res;
      var $676=(($675)|0);
      var $677=HEAP32[(($676)>>2)];
      var $678=((($677)-(1))|0);
      HEAP32[(($676)>>2)]=$678;
      var $679=(($678)|(0))!=0;
      if ($679) { label = 185; break; } else { label = 186; break; }
    case 185: 
      label = 187; break;
    case 186: 
      var $682=$res;
      var $683=(($682+4)|0);
      var $684=HEAP32[(($683)>>2)];
      var $685=(($684+24)|0);
      var $686=HEAP32[(($685)>>2)];
      var $687=$res;
      FUNCTION_TABLE[$686]($687);
      label = 187; break;
    case 187: 
      label = 188; break;
    case 188: 
      var $690=$r;
      var $691=(($690)|(0))==-1;
      if ($691) { label = 189; break; } else { label = 190; break; }
    case 189: 
      label = 273; break;
    case 190: 
      var $694=$r;
      var $695=(($694)|(0))==1;
      if ($695) { label = 191; break; } else { label = 224; break; }
    case 191: 
      var $697=HEAP32[(($encoding)>>2)];
      var $698=HEAP32[(($errors)>>2)];
      var $699=_PyCodec_IncrementalEncoder($697, $698);
      var $700=$2;
      var $701=(($700+28)|0);
      HEAP32[(($701)>>2)]=$699;
      var $702=$2;
      var $703=(($702+28)|0);
      var $704=HEAP32[(($703)>>2)];
      var $705=(($704)|(0))==0;
      if ($705) { label = 192; break; } else { label = 193; break; }
    case 192: 
      label = 273; break;
    case 193: 
      var $708=HEAP32[(($encoding)>>2)];
      var $709=__PyCodec_Lookup($708);
      $ci=$709;
      var $710=$ci;
      var $711=(($710)|(0))==0;
      if ($711) { label = 194; break; } else { label = 195; break; }
    case 194: 
      label = 273; break;
    case 195: 
      var $714=$ci;
      var $715=_PyObject_GetAttrString($714, ((__str22445)|0));
      $res=$715;
      label = 196; break;
    case 196: 
      var $717=$ci;
      var $718=(($717)|0);
      var $719=HEAP32[(($718)>>2)];
      var $720=((($719)-(1))|0);
      HEAP32[(($718)>>2)]=$720;
      var $721=(($720)|(0))!=0;
      if ($721) { label = 197; break; } else { label = 198; break; }
    case 197: 
      label = 199; break;
    case 198: 
      var $724=$ci;
      var $725=(($724+4)|0);
      var $726=HEAP32[(($725)>>2)];
      var $727=(($726+24)|0);
      var $728=HEAP32[(($727)>>2)];
      var $729=$ci;
      FUNCTION_TABLE[$728]($729);
      label = 199; break;
    case 199: 
      label = 200; break;
    case 200: 
      var $732=$res;
      var $733=(($732)|(0))==0;
      if ($733) { label = 201; break; } else { label = 205; break; }
    case 201: 
      var $735=HEAP32[((_PyExc_AttributeError)>>2)];
      var $736=_PyErr_ExceptionMatches($735);
      var $737=(($736)|(0))!=0;
      if ($737) { label = 202; break; } else { label = 203; break; }
    case 202: 
      _PyErr_Clear();
      label = 204; break;
    case 203: 
      label = 273; break;
    case 204: 
      label = 213; break;
    case 205: 
      var $742=$res;
      var $743=(($742+4)|0);
      var $744=HEAP32[(($743)>>2)];
      var $745=(($744+84)|0);
      var $746=HEAP32[(($745)>>2)];
      var $747=$746 & 134217728;
      var $748=(($747)|(0))!=0;
      if ($748) { label = 206; break; } else { label = 212; break; }
    case 206: 
      $e=((_encodefuncs)|0);
      label = 207; break;
    case 207: 
      var $751=$e;
      var $752=(($751)|0);
      var $753=HEAP32[(($752)>>2)];
      var $754=(($753)|(0))!=0;
      if ($754) { label = 208; break; } else { label = 211; break; }
    case 208: 
      var $756=$res;
      var $757=$756;
      var $758=(($757+20)|0);
      var $759=(($758)|0);
      var $760=$e;
      var $761=(($760)|0);
      var $762=HEAP32[(($761)>>2)];
      var $763=_strcmp($759, $762);
      var $764=(($763)|(0))!=0;
      if ($764) { label = 210; break; } else { label = 209; break; }
    case 209: 
      var $766=$e;
      var $767=(($766+4)|0);
      var $768=HEAP32[(($767)>>2)];
      var $769=$2;
      var $770=(($769+56)|0);
      HEAP32[(($770)>>2)]=$768;
      label = 211; break;
    case 210: 
      var $772=$e;
      var $773=(($772+8)|0);
      $e=$773;
      label = 207; break;
    case 211: 
      label = 212; break;
    case 212: 
      label = 213; break;
    case 213: 
      label = 214; break;
    case 214: 
      var $778=$res;
      var $779=(($778)|(0))==0;
      if ($779) { label = 215; break; } else { label = 216; break; }
    case 215: 
      label = 222; break;
    case 216: 
      label = 217; break;
    case 217: 
      var $783=$res;
      var $784=(($783)|0);
      var $785=HEAP32[(($784)>>2)];
      var $786=((($785)-(1))|0);
      HEAP32[(($784)>>2)]=$786;
      var $787=(($786)|(0))!=0;
      if ($787) { label = 218; break; } else { label = 219; break; }
    case 218: 
      label = 220; break;
    case 219: 
      var $790=$res;
      var $791=(($790+4)|0);
      var $792=HEAP32[(($791)>>2)];
      var $793=(($792+24)|0);
      var $794=HEAP32[(($793)>>2)];
      var $795=$res;
      FUNCTION_TABLE[$794]($795);
      label = 220; break;
    case 220: 
      label = 221; break;
    case 221: 
      label = 222; break;
    case 222: 
      label = 223; break;
    case 223: 
      label = 224; break;
    case 224: 
      var $801=HEAP32[(($buffer)>>2)];
      var $802=$2;
      var $803=(($802+20)|0);
      HEAP32[(($803)>>2)]=$801;
      var $804=HEAP32[(($buffer)>>2)];
      var $805=(($804)|0);
      var $806=HEAP32[(($805)>>2)];
      var $807=((($806)+(1))|0);
      HEAP32[(($805)>>2)]=$807;
      var $808=HEAP32[(($buffer)>>2)];
      var $809=(($808+4)|0);
      var $810=HEAP32[(($809)>>2)];
      var $811=(($810)|(0))==((_PyBufferedReader_Type)|(0));
      if ($811) { label = 227; break; } else { label = 225; break; }
    case 225: 
      var $813=HEAP32[(($buffer)>>2)];
      var $814=(($813+4)|0);
      var $815=HEAP32[(($814)>>2)];
      var $816=(($815)|(0))==((_PyBufferedWriter_Type)|(0));
      if ($816) { label = 227; break; } else { label = 226; break; }
    case 226: 
      var $818=HEAP32[(($buffer)>>2)];
      var $819=(($818+4)|0);
      var $820=HEAP32[(($819)>>2)];
      var $821=(($820)|(0))==((_PyBufferedRandom_Type)|(0));
      if ($821) { label = 227; break; } else { label = 242; break; }
    case 227: 
      var $823=HEAP32[(($buffer)>>2)];
      var $824=_PyObject_GetAttrString($823, ((__str23446)|0));
      $raw=$824;
      var $825=$raw;
      var $826=(($825)|(0))==0;
      if ($826) { label = 228; break; } else { label = 232; break; }
    case 228: 
      var $828=HEAP32[((_PyExc_AttributeError)>>2)];
      var $829=_PyErr_ExceptionMatches($828);
      var $830=(($829)|(0))!=0;
      if ($830) { label = 229; break; } else { label = 230; break; }
    case 229: 
      _PyErr_Clear();
      label = 231; break;
    case 230: 
      label = 273; break;
    case 231: 
      label = 241; break;
    case 232: 
      var $835=$raw;
      var $836=(($835+4)|0);
      var $837=HEAP32[(($836)>>2)];
      var $838=(($837)|(0))==((_PyFileIO_Type)|(0));
      if ($838) { label = 233; break; } else { label = 234; break; }
    case 233: 
      var $840=$raw;
      var $841=$2;
      var $842=(($841+84)|0);
      HEAP32[(($842)>>2)]=$840;
      label = 240; break;
    case 234: 
      label = 235; break;
    case 235: 
      var $845=$raw;
      var $846=(($845)|0);
      var $847=HEAP32[(($846)>>2)];
      var $848=((($847)-(1))|0);
      HEAP32[(($846)>>2)]=$848;
      var $849=(($848)|(0))!=0;
      if ($849) { label = 236; break; } else { label = 237; break; }
    case 236: 
      label = 238; break;
    case 237: 
      var $852=$raw;
      var $853=(($852+4)|0);
      var $854=HEAP32[(($853)>>2)];
      var $855=(($854+24)|0);
      var $856=HEAP32[(($855)>>2)];
      var $857=$raw;
      FUNCTION_TABLE[$856]($857);
      label = 238; break;
    case 238: 
      label = 239; break;
    case 239: 
      label = 240; break;
    case 240: 
      label = 241; break;
    case 241: 
      label = 242; break;
    case 242: 
      var $863=HEAP32[(($buffer)>>2)];
      var $864=__PyObject_CallMethod_SizeT($863, ((__str24447)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $res=$864;
      var $865=$res;
      var $866=(($865)|(0))==0;
      if ($866) { label = 243; break; } else { label = 244; break; }
    case 243: 
      label = 273; break;
    case 244: 
      var $869=$res;
      var $870=_PyObject_IsTrue($869);
      $r=$870;
      label = 245; break;
    case 245: 
      var $872=$res;
      var $873=(($872)|0);
      var $874=HEAP32[(($873)>>2)];
      var $875=((($874)-(1))|0);
      HEAP32[(($873)>>2)]=$875;
      var $876=(($875)|(0))!=0;
      if ($876) { label = 246; break; } else { label = 247; break; }
    case 246: 
      label = 248; break;
    case 247: 
      var $879=$res;
      var $880=(($879+4)|0);
      var $881=HEAP32[(($880)>>2)];
      var $882=(($881+24)|0);
      var $883=HEAP32[(($882)>>2)];
      var $884=$res;
      FUNCTION_TABLE[$883]($884);
      label = 248; break;
    case 248: 
      label = 249; break;
    case 249: 
      var $887=$r;
      var $888=(($887)|(0)) < 0;
      if ($888) { label = 250; break; } else { label = 251; break; }
    case 250: 
      label = 273; break;
    case 251: 
      var $891=$r;
      var $892=(($891) & 255);
      var $893=$2;
      var $894=(($893+53)|0);
      HEAP8[($894)]=$892;
      var $895=$2;
      var $896=(($895+52)|0);
      HEAP8[($896)]=$892;
      var $897=$2;
      var $898=(($897+60)|0);
      HEAP8[($898)]=0;
      var $899=$2;
      var $900=(($899+52)|0);
      var $901=HEAP8[($900)];
      var $902=(($901 << 24) >> 24);
      var $903=(($902)|(0))!=0;
      if ($903) { label = 252; break; } else { label = 272; break; }
    case 252: 
      var $905=$2;
      var $906=(($905+28)|0);
      var $907=HEAP32[(($906)>>2)];
      var $908=(($907)|(0))!=0;
      if ($908) { label = 253; break; } else { label = 272; break; }
    case 253: 
      var $910=$2;
      var $911=(($910+60)|0);
      HEAP8[($911)]=1;
      var $912=HEAP32[(($buffer)>>2)];
      var $913=HEAP32[((__PyIO_str_tell)>>2)];
      var $914=_PyObject_CallMethodObjArgs($912, $913, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $cookieObj=$914;
      var $915=$cookieObj;
      var $916=(($915)|(0))==0;
      if ($916) { label = 254; break; } else { label = 255; break; }
    case 254: 
      label = 273; break;
    case 255: 
      var $919=$cookieObj;
      var $920=HEAP32[((__PyIO_zero)>>2)];
      var $921=_PyObject_RichCompareBool($919, $920, 2);
      $cmp=$921;
      label = 256; break;
    case 256: 
      var $923=$cookieObj;
      var $924=(($923)|0);
      var $925=HEAP32[(($924)>>2)];
      var $926=((($925)-(1))|0);
      HEAP32[(($924)>>2)]=$926;
      var $927=(($926)|(0))!=0;
      if ($927) { label = 257; break; } else { label = 258; break; }
    case 257: 
      label = 259; break;
    case 258: 
      var $930=$cookieObj;
      var $931=(($930+4)|0);
      var $932=HEAP32[(($931)>>2)];
      var $933=(($932+24)|0);
      var $934=HEAP32[(($933)>>2)];
      var $935=$cookieObj;
      FUNCTION_TABLE[$934]($935);
      label = 259; break;
    case 259: 
      label = 260; break;
    case 260: 
      var $938=$cmp;
      var $939=(($938)|(0)) < 0;
      if ($939) { label = 261; break; } else { label = 262; break; }
    case 261: 
      label = 273; break;
    case 262: 
      var $942=$cmp;
      var $943=(($942)|(0))==0;
      if ($943) { label = 263; break; } else { label = 271; break; }
    case 263: 
      var $945=$2;
      var $946=(($945+60)|0);
      HEAP8[($946)]=0;
      var $947=$2;
      var $948=(($947+28)|0);
      var $949=HEAP32[(($948)>>2)];
      var $950=HEAP32[((__PyIO_str_setstate)>>2)];
      var $951=HEAP32[((__PyIO_zero)>>2)];
      var $952=_PyObject_CallMethodObjArgs($949, $950, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$951,HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
      $res=$952;
      var $953=$res;
      var $954=(($953)|(0))==0;
      if ($954) { label = 264; break; } else { label = 265; break; }
    case 264: 
      label = 273; break;
    case 265: 
      label = 266; break;
    case 266: 
      var $958=$res;
      var $959=(($958)|0);
      var $960=HEAP32[(($959)>>2)];
      var $961=((($960)-(1))|0);
      HEAP32[(($959)>>2)]=$961;
      var $962=(($961)|(0))!=0;
      if ($962) { label = 267; break; } else { label = 268; break; }
    case 267: 
      label = 269; break;
    case 268: 
      var $965=$res;
      var $966=(($965+4)|0);
      var $967=HEAP32[(($966)>>2)];
      var $968=(($967+24)|0);
      var $969=HEAP32[(($968)>>2)];
      var $970=$res;
      FUNCTION_TABLE[$969]($970);
      label = 269; break;
    case 269: 
      label = 270; break;
    case 270: 
      label = 271; break;
    case 271: 
      label = 272; break;
    case 272: 
      var $975=$2;
      var $976=(($975+8)|0);
      HEAP32[(($976)>>2)]=1;
      $1=0;
      label = 274; break;
    case 273: 
      $1=-1;
      label = 274; break;
    case 274: 
      var $979=$1;
      STACKTOP = __stackBase__;
      return $979;
    default: assert(0, "bad label: " + label);
  }
}
function _ascii_encode($self, $text) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$text;
  var $3=$2;
  var $4=$3;
  var $5=(($4+12)|0);
  var $6=HEAP32[(($5)>>2)];
  var $7=$2;
  var $8=$7;
  var $9=(($8+8)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=$1;
  var $12=(($11+40)|0);
  var $13=HEAP32[(($12)>>2)];
  var $14=$13;
  var $15=(($14+20)|0);
  var $16=(($15)|0);
  var $17=_PyUnicodeUCS2_EncodeASCII($6, $10, $16);
  return $17;
}
function _latin1_encode($self, $text) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$text;
  var $3=$2;
  var $4=$3;
  var $5=(($4+12)|0);
  var $6=HEAP32[(($5)>>2)];
  var $7=$2;
  var $8=$7;
  var $9=(($8+8)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=$1;
  var $12=(($11+40)|0);
  var $13=HEAP32[(($12)>>2)];
  var $14=$13;
  var $15=(($14+20)|0);
  var $16=(($15)|0);
  var $17=_PyUnicodeUCS2_EncodeLatin1($6, $10, $16);
  return $17;
}
function _utf8_encode($self, $text) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$text;
  var $3=$2;
  var $4=$3;
  var $5=(($4+12)|0);
  var $6=HEAP32[(($5)>>2)];
  var $7=$2;
  var $8=$7;
  var $9=(($8+8)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=$1;
  var $12=(($11+40)|0);
  var $13=HEAP32[(($12)>>2)];
  var $14=$13;
  var $15=(($14+20)|0);
  var $16=(($15)|0);
  var $17=_PyUnicodeUCS2_EncodeUTF8($6, $10, $16);
  return $17;
}
function _utf16be_encode($self, $text) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$text;
  var $3=$2;
  var $4=$3;
  var $5=(($4+12)|0);
  var $6=HEAP32[(($5)>>2)];
  var $7=$2;
  var $8=$7;
  var $9=(($8+8)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=$1;
  var $12=(($11+40)|0);
  var $13=HEAP32[(($12)>>2)];
  var $14=$13;
  var $15=(($14+20)|0);
  var $16=(($15)|0);
  var $17=_PyUnicodeUCS2_EncodeUTF16($6, $10, $16, 1);
  return $17;
}
function _utf16le_encode($self, $text) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$text;
  var $3=$2;
  var $4=$3;
  var $5=(($4+12)|0);
  var $6=HEAP32[(($5)>>2)];
  var $7=$2;
  var $8=$7;
  var $9=(($8+8)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=$1;
  var $12=(($11+40)|0);
  var $13=HEAP32[(($12)>>2)];
  var $14=$13;
  var $15=(($14+20)|0);
  var $16=(($15)|0);
  var $17=_PyUnicodeUCS2_EncodeUTF16($6, $10, $16, -1);
  return $17;
}
function _utf16_encode($self, $text) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$self;
      $3=$text;
      var $4=$2;
      var $5=(($4+60)|0);
      var $6=HEAP8[($5)];
      var $7=(($6 << 24) >> 24)!=0;
      if ($7) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $9=$2;
      var $10=$3;
      var $11=_utf16le_encode($9, $10);
      $1=$11;
      label = 4; break;
    case 3: 
      var $13=$3;
      var $14=$13;
      var $15=(($14+12)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$3;
      var $18=$17;
      var $19=(($18+8)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=$2;
      var $22=(($21+40)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=$23;
      var $25=(($24+20)|0);
      var $26=(($25)|0);
      var $27=_PyUnicodeUCS2_EncodeUTF16($16, $20, $26, 0);
      $1=$27;
      label = 4; break;
    case 4: 
      var $29=$1;
      return $29;
    default: assert(0, "bad label: " + label);
  }
}
function _utf32be_encode($self, $text) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$text;
  var $3=$2;
  var $4=$3;
  var $5=(($4+12)|0);
  var $6=HEAP32[(($5)>>2)];
  var $7=$2;
  var $8=$7;
  var $9=(($8+8)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=$1;
  var $12=(($11+40)|0);
  var $13=HEAP32[(($12)>>2)];
  var $14=$13;
  var $15=(($14+20)|0);
  var $16=(($15)|0);
  var $17=_PyUnicodeUCS2_EncodeUTF32($6, $10, $16, 1);
  return $17;
}
function _utf32le_encode($self, $text) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$text;
  var $3=$2;
  var $4=$3;
  var $5=(($4+12)|0);
  var $6=HEAP32[(($5)>>2)];
  var $7=$2;
  var $8=$7;
  var $9=(($8+8)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=$1;
  var $12=(($11+40)|0);
  var $13=HEAP32[(($12)>>2)];
  var $14=$13;
  var $15=(($14+20)|0);
  var $16=(($15)|0);
  var $17=_PyUnicodeUCS2_EncodeUTF32($6, $10, $16, -1);
  return $17;
}
function _utf32_encode($self, $text) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$self;
      $3=$text;
      var $4=$2;
      var $5=(($4+60)|0);
      var $6=HEAP8[($5)];
      var $7=(($6 << 24) >> 24)!=0;
      if ($7) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $9=$2;
      var $10=$3;
      var $11=_utf32le_encode($9, $10);
      $1=$11;
      label = 4; break;
    case 3: 
      var $13=$3;
      var $14=$13;
      var $15=(($14+12)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$3;
      var $18=$17;
      var $19=(($18+8)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=$2;
      var $22=(($21+40)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=$23;
      var $25=(($24+20)|0);
      var $26=(($25)|0);
      var $27=_PyUnicodeUCS2_EncodeUTF32($16, $20, $26, 0);
      $1=$27;
      label = 4; break;
    case 4: 
      var $29=$1;
      return $29;
    default: assert(0, "bad label: " + label);
  }
}
function _textiowrapper_name_get($self, $context) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$self;
      $3=$context;
      var $4=$2;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0)) <= 0;
      if ($7) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $9=$2;
      var $10=(($9+12)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($14, ((__str36459)|0));
      label = 5; break;
    case 4: 
      var $16=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($16, ((__str37460)|0));
      label = 5; break;
    case 5: 
      $1=0;
      label = 7; break;
    case 6: 
      var $19=$2;
      var $20=(($19+20)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=_PyObject_GetAttrString($21, ((__str22445)|0));
      $1=$22;
      label = 7; break;
    case 7: 
      var $24=$1;
      return $24;
    default: assert(0, "bad label: " + label);
  }
}
function _textiowrapper_closed_get($self, $context) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$self;
      $3=$context;
      var $4=$2;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0)) <= 0;
      if ($7) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $9=$2;
      var $10=(($9+12)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($14, ((__str36459)|0));
      label = 5; break;
    case 4: 
      var $16=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($16, ((__str37460)|0));
      label = 5; break;
    case 5: 
      $1=0;
      label = 7; break;
    case 6: 
      var $19=$2;
      var $20=(($19+20)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=HEAP32[((__PyIO_str_closed)>>2)];
      var $23=_PyObject_GetAttr($21, $22);
      $1=$23;
      label = 7; break;
    case 7: 
      var $25=$1;
      return $25;
    default: assert(0, "bad label: " + label);
  }
}
function _textiowrapper_newlines_get($self, $context) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $res;
      $2=$self;
      $3=$context;
      var $4=$2;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0)) <= 0;
      if ($7) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $9=$2;
      var $10=(($9+12)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($14, ((__str36459)|0));
      label = 5; break;
    case 4: 
      var $16=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($16, ((__str37460)|0));
      label = 5; break;
    case 5: 
      $1=0;
      label = 13; break;
    case 6: 
      var $19=$2;
      var $20=(($19+32)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21)|(0))==0;
      if ($22) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $24=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $25=((($24)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$25;
      $1=__Py_NoneStruct;
      label = 13; break;
    case 8: 
      var $27=$2;
      var $28=(($27+32)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=HEAP32[((__PyIO_str_newlines)>>2)];
      var $31=_PyObject_GetAttr($29, $30);
      $res=$31;
      var $32=$res;
      var $33=(($32)|(0))==0;
      if ($33) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $35=HEAP32[((_PyExc_AttributeError)>>2)];
      var $36=_PyErr_ExceptionMatches($35);
      var $37=(($36)|(0))!=0;
      if ($37) { label = 10; break; } else { label = 11; break; }
    case 10: 
      _PyErr_Clear();
      var $39=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $40=((($39)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$40;
      $1=__Py_NoneStruct;
      label = 13; break;
    case 11: 
      $1=0;
      label = 13; break;
    case 12: 
      var $43=$res;
      $1=$43;
      label = 13; break;
    case 13: 
      var $45=$1;
      return $45;
    default: assert(0, "bad label: " + label);
  }
}
function _textiowrapper_errors_get($self, $context) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$self;
      $3=$context;
      var $4=$2;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0)) <= 0;
      if ($7) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $9=$2;
      var $10=(($9+12)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($14, ((__str36459)|0));
      label = 5; break;
    case 4: 
      var $16=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($16, ((__str37460)|0));
      label = 5; break;
    case 5: 
      $1=0;
      label = 7; break;
    case 6: 
      var $19=$2;
      var $20=(($19+40)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=((($23)+(1))|0);
      HEAP32[(($22)>>2)]=$24;
      var $25=$2;
      var $26=(($25+40)|0);
      var $27=HEAP32[(($26)>>2)];
      $1=$27;
      label = 7; break;
    case 7: 
      var $29=$1;
      return $29;
    default: assert(0, "bad label: " + label);
  }
}
function _textiowrapper_chunk_size_get($self, $context) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$self;
      $3=$context;
      var $4=$2;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0)) <= 0;
      if ($7) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $9=$2;
      var $10=(($9+12)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($14, ((__str36459)|0));
      label = 5; break;
    case 4: 
      var $16=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($16, ((__str37460)|0));
      label = 5; break;
    case 5: 
      $1=0;
      label = 7; break;
    case 6: 
      var $19=$2;
      var $20=(($19+16)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=_PyLong_FromSsize_t($21);
      $1=$22;
      label = 7; break;
    case 7: 
      var $24=$1;
      return $24;
    default: assert(0, "bad label: " + label);
  }
}
function _textiowrapper_chunk_size_set($self, $arg, $context) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $n;
      $2=$self;
      $3=$arg;
      $4=$context;
      var $5=$2;
      var $6=(($5+8)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|(0)) <= 0;
      if ($8) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $10=$2;
      var $11=(($10+12)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12)|(0))!=0;
      if ($13) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $15=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($15, ((__str36459)|0));
      label = 5; break;
    case 4: 
      var $17=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($17, ((__str37460)|0));
      label = 5; break;
    case 5: 
      $1=-1;
      label = 12; break;
    case 6: 
      var $20=$3;
      var $21=HEAP32[((_PyExc_TypeError)>>2)];
      var $22=_PyNumber_AsSsize_t($20, $21);
      $n=$22;
      var $23=$n;
      var $24=(($23)|(0))==-1;
      if ($24) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $26=_PyErr_Occurred();
      var $27=(($26)|(0))!=0;
      if ($27) { label = 8; break; } else { label = 9; break; }
    case 8: 
      $1=-1;
      label = 12; break;
    case 9: 
      var $30=$n;
      var $31=(($30)|(0)) <= 0;
      if ($31) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $33=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($33, ((__str38461)|0));
      $1=-1;
      label = 12; break;
    case 11: 
      var $35=$n;
      var $36=$2;
      var $37=(($36+16)|0);
      HEAP32[(($37)>>2)]=$35;
      $1=0;
      label = 12; break;
    case 12: 
      var $39=$1;
      return $39;
    default: assert(0, "bad label: " + label);
  }
}
function _textiowrapper_detach($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $buffer;
      var $res;
      $2=$self;
      var $3=$2;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0)) <= 0;
      if ($6) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $8=$2;
      var $9=(($8+12)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|(0))!=0;
      if ($11) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $13=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($13, ((__str36459)|0));
      label = 5; break;
    case 4: 
      var $15=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($15, ((__str37460)|0));
      label = 5; break;
    case 5: 
      $1=0;
      label = 14; break;
    case 6: 
      var $18=$2;
      var $19=$18;
      var $20=HEAP32[((__PyIO_str_flush)>>2)];
      var $21=_PyObject_CallMethodObjArgs($19, $20, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $res=$21;
      var $22=$res;
      var $23=(($22)|(0))==0;
      if ($23) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $1=0;
      label = 14; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $27=$res;
      var $28=(($27)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=((($29)-(1))|0);
      HEAP32[(($28)>>2)]=$30;
      var $31=(($30)|(0))!=0;
      if ($31) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 12; break;
    case 11: 
      var $34=$res;
      var $35=(($34+4)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36+24)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=$res;
      FUNCTION_TABLE[$38]($39);
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $42=$2;
      var $43=(($42+20)|0);
      var $44=HEAP32[(($43)>>2)];
      $buffer=$44;
      var $45=$2;
      var $46=(($45+20)|0);
      HEAP32[(($46)>>2)]=0;
      var $47=$2;
      var $48=(($47+12)|0);
      HEAP32[(($48)>>2)]=1;
      var $49=$2;
      var $50=(($49+8)|0);
      HEAP32[(($50)>>2)]=0;
      var $51=$buffer;
      $1=$51;
      label = 14; break;
    case 14: 
      var $53=$1;
      STACKTOP = __stackBase__;
      return $53;
    default: assert(0, "bad label: " + label);
  }
}
function _textiowrapper_write($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $ret;
      var $text=__stackBase__;
      var $b;
      var $textlen;
      var $haslf;
      var $needflush;
      var $r;
      var $_res;
      var $newtext;
      var $_py_tmp;
      $2=$self;
      $3=$args;
      $haslf=0;
      $needflush=0;
      var $4=$2;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0)) <= 0;
      if ($7) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $9=$2;
      var $10=(($9+12)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($14, ((__str36459)|0));
      label = 5; break;
    case 4: 
      var $16=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($16, ((__str37460)|0));
      label = 5; break;
    case 5: 
      $1=0;
      label = 116; break;
    case 6: 
      var $19=$3;
      var $20=__PyArg_ParseTuple_SizeT($19, ((__str88)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$text,tempInt));
      var $21=(($20)|(0))!=0;
      if ($21) { label = 8; break; } else { label = 7; break; }
    case 7: 
      $1=0;
      label = 116; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $25=$2;
      var $26=$25;
      var $27=(($26+4)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28)|(0))==((_PyTextIOWrapper_Type)|(0));
      if ($29) { label = 10; break; } else { label = 25; break; }
    case 10: 
      var $31=$2;
      var $32=(($31+84)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33)|(0))!=0;
      if ($34) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $36=$2;
      var $37=(($36+84)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=__PyFileIO_closed($38);
      $r=$39;
      label = 22; break;
    case 12: 
      var $41=$2;
      var $42=_textiowrapper_closed_get($41, 0);
      $_res=$42;
      var $43=$_res;
      var $44=(($43)|(0))==0;
      if ($44) { label = 13; break; } else { label = 14; break; }
    case 13: 
      $1=0;
      label = 116; break;
    case 14: 
      var $47=$_res;
      var $48=_PyObject_IsTrue($47);
      $r=$48;
      label = 15; break;
    case 15: 
      var $50=$_res;
      var $51=(($50)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=((($52)-(1))|0);
      HEAP32[(($51)>>2)]=$53;
      var $54=(($53)|(0))!=0;
      if ($54) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 18; break;
    case 17: 
      var $57=$_res;
      var $58=(($57+4)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=(($59+24)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=$_res;
      FUNCTION_TABLE[$61]($62);
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $65=$r;
      var $66=(($65)|(0)) < 0;
      if ($66) { label = 20; break; } else { label = 21; break; }
    case 20: 
      $1=0;
      label = 116; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $70=$r;
      var $71=(($70)|(0)) > 0;
      if ($71) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $73=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($73, ((__str51474)|0));
      $1=0;
      label = 116; break;
    case 24: 
      label = 28; break;
    case 25: 
      var $76=$2;
      var $77=$76;
      var $78=__PyIOBase_check_closed($77, __Py_TrueStruct);
      var $79=(($78)|(0))==0;
      if ($79) { label = 26; break; } else { label = 27; break; }
    case 26: 
      $1=0;
      label = 116; break;
    case 27: 
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $84=$2;
      var $85=(($84+28)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=(($86)|(0))==0;
      if ($87) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $89=HEAP32[((_PyExc_IOError)>>2)];
      _PyErr_SetString($89, ((__str89)|0));
      $1=0;
      label = 116; break;
    case 31: 
      var $91=HEAP32[(($text)>>2)];
      var $92=(($91)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=((($93)+(1))|0);
      HEAP32[(($92)>>2)]=$94;
      var $95=HEAP32[(($text)>>2)];
      var $96=_PyUnicodeUCS2_GetSize($95);
      $textlen=$96;
      var $97=$2;
      var $98=(($97+51)|0);
      var $99=HEAP8[($98)];
      var $100=(($99 << 24) >> 24);
      var $101=(($100)|(0))!=0;
      if ($101) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $103=$2;
      var $104=(($103+44)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=(($105)|(0))!=0;
      if ($106) { label = 34; break; } else { label = 33; break; }
    case 33: 
      var $108=$2;
      var $109=(($108+48)|0);
      var $110=HEAP8[($109)];
      var $111=(($110 << 24) >> 24);
      var $112=(($111)|(0))!=0;
      if ($112) { label = 34; break; } else { label = 37; break; }
    case 34: 
      var $114=HEAP32[(($text)>>2)];
      var $115=$114;
      var $116=(($115+12)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=HEAP32[(($text)>>2)];
      var $119=$118;
      var $120=(($119+8)|0);
      var $121=HEAP32[(($120)>>2)];
      var $122=_findchar($117, $121, 10);
      var $123=(($122)|(0))!=0;
      if ($123) { label = 35; break; } else { label = 36; break; }
    case 35: 
      $haslf=1;
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      var $127=$haslf;
      var $128=(($127)|(0))!=0;
      if ($128) { label = 38; break; } else { label = 48; break; }
    case 38: 
      var $130=$2;
      var $131=(($130+51)|0);
      var $132=HEAP8[($131)];
      var $133=(($132 << 24) >> 24);
      var $134=(($133)|(0))!=0;
      if ($134) { label = 39; break; } else { label = 48; break; }
    case 39: 
      var $136=$2;
      var $137=(($136+44)|0);
      var $138=HEAP32[(($137)>>2)];
      var $139=(($138)|(0))!=0;
      if ($139) { label = 40; break; } else { label = 48; break; }
    case 40: 
      var $141=HEAP32[(($text)>>2)];
      var $142=$2;
      var $143=(($142+44)|0);
      var $144=HEAP32[(($143)>>2)];
      var $145=__PyObject_CallMethod_SizeT($141, ((__str90)|0), ((__str91)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=((__str18441)|0),HEAP32[(((tempInt)+(4))>>2)]=$144,tempInt));
      $newtext=$145;
      label = 41; break;
    case 41: 
      var $147=HEAP32[(($text)>>2)];
      var $148=(($147)|0);
      var $149=HEAP32[(($148)>>2)];
      var $150=((($149)-(1))|0);
      HEAP32[(($148)>>2)]=$150;
      var $151=(($150)|(0))!=0;
      if ($151) { label = 42; break; } else { label = 43; break; }
    case 42: 
      label = 44; break;
    case 43: 
      var $154=HEAP32[(($text)>>2)];
      var $155=(($154+4)|0);
      var $156=HEAP32[(($155)>>2)];
      var $157=(($156+24)|0);
      var $158=HEAP32[(($157)>>2)];
      var $159=HEAP32[(($text)>>2)];
      FUNCTION_TABLE[$158]($159);
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      var $162=$newtext;
      var $163=(($162)|(0))==0;
      if ($163) { label = 46; break; } else { label = 47; break; }
    case 46: 
      $1=0;
      label = 116; break;
    case 47: 
      var $166=$newtext;
      HEAP32[(($text)>>2)]=$166;
      label = 48; break;
    case 48: 
      var $168=$2;
      var $169=(($168+48)|0);
      var $170=HEAP8[($169)];
      var $171=(($170 << 24) >> 24);
      var $172=(($171)|(0))!=0;
      if ($172) { label = 49; break; } else { label = 52; break; }
    case 49: 
      var $174=$haslf;
      var $175=(($174)|(0))!=0;
      if ($175) { label = 51; break; } else { label = 50; break; }
    case 50: 
      var $177=HEAP32[(($text)>>2)];
      var $178=$177;
      var $179=(($178+12)|0);
      var $180=HEAP32[(($179)>>2)];
      var $181=HEAP32[(($text)>>2)];
      var $182=$181;
      var $183=(($182+8)|0);
      var $184=HEAP32[(($183)>>2)];
      var $185=_findchar($180, $184, 13);
      var $186=(($185)|(0))!=0;
      if ($186) { label = 51; break; } else { label = 52; break; }
    case 51: 
      $needflush=1;
      label = 52; break;
    case 52: 
      var $189=$2;
      var $190=(($189+56)|0);
      var $191=HEAP32[(($190)>>2)];
      var $192=(($191)|(0))!=0;
      if ($192) { label = 53; break; } else { label = 54; break; }
    case 53: 
      var $194=$2;
      var $195=(($194+56)|0);
      var $196=HEAP32[(($195)>>2)];
      var $197=$2;
      var $198=$197;
      var $199=HEAP32[(($text)>>2)];
      var $200=FUNCTION_TABLE[$196]($198, $199);
      $b=$200;
      var $201=$2;
      var $202=(($201+60)|0);
      HEAP8[($202)]=0;
      label = 55; break;
    case 54: 
      var $204=$2;
      var $205=(($204+28)|0);
      var $206=HEAP32[(($205)>>2)];
      var $207=HEAP32[((__PyIO_str_encode)>>2)];
      var $208=HEAP32[(($text)>>2)];
      var $209=_PyObject_CallMethodObjArgs($206, $207, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$208,HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
      $b=$209;
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      var $212=HEAP32[(($text)>>2)];
      var $213=(($212)|0);
      var $214=HEAP32[(($213)>>2)];
      var $215=((($214)-(1))|0);
      HEAP32[(($213)>>2)]=$215;
      var $216=(($215)|(0))!=0;
      if ($216) { label = 57; break; } else { label = 58; break; }
    case 57: 
      label = 59; break;
    case 58: 
      var $219=HEAP32[(($text)>>2)];
      var $220=(($219+4)|0);
      var $221=HEAP32[(($220)>>2)];
      var $222=(($221+24)|0);
      var $223=HEAP32[(($222)>>2)];
      var $224=HEAP32[(($text)>>2)];
      FUNCTION_TABLE[$223]($224);
      label = 59; break;
    case 59: 
      label = 60; break;
    case 60: 
      var $227=$b;
      var $228=(($227)|(0))==0;
      if ($228) { label = 61; break; } else { label = 62; break; }
    case 61: 
      $1=0;
      label = 116; break;
    case 62: 
      var $231=$2;
      var $232=(($231+72)|0);
      var $233=HEAP32[(($232)>>2)];
      var $234=(($233)|(0))==0;
      if ($234) { label = 63; break; } else { label = 71; break; }
    case 63: 
      var $236=_PyList_New(0);
      var $237=$2;
      var $238=(($237+72)|0);
      HEAP32[(($238)>>2)]=$236;
      var $239=$2;
      var $240=(($239+72)|0);
      var $241=HEAP32[(($240)>>2)];
      var $242=(($241)|(0))==0;
      if ($242) { label = 64; break; } else { label = 70; break; }
    case 64: 
      label = 65; break;
    case 65: 
      var $245=$b;
      var $246=(($245)|0);
      var $247=HEAP32[(($246)>>2)];
      var $248=((($247)-(1))|0);
      HEAP32[(($246)>>2)]=$248;
      var $249=(($248)|(0))!=0;
      if ($249) { label = 66; break; } else { label = 67; break; }
    case 66: 
      label = 68; break;
    case 67: 
      var $252=$b;
      var $253=(($252+4)|0);
      var $254=HEAP32[(($253)>>2)];
      var $255=(($254+24)|0);
      var $256=HEAP32[(($255)>>2)];
      var $257=$b;
      FUNCTION_TABLE[$256]($257);
      label = 68; break;
    case 68: 
      label = 69; break;
    case 69: 
      $1=0;
      label = 116; break;
    case 70: 
      var $261=$2;
      var $262=(($261+76)|0);
      HEAP32[(($262)>>2)]=0;
      label = 71; break;
    case 71: 
      var $264=$2;
      var $265=(($264+72)|0);
      var $266=HEAP32[(($265)>>2)];
      var $267=$b;
      var $268=_PyList_Append($266, $267);
      var $269=(($268)|(0)) < 0;
      if ($269) { label = 72; break; } else { label = 78; break; }
    case 72: 
      label = 73; break;
    case 73: 
      var $272=$b;
      var $273=(($272)|0);
      var $274=HEAP32[(($273)>>2)];
      var $275=((($274)-(1))|0);
      HEAP32[(($273)>>2)]=$275;
      var $276=(($275)|(0))!=0;
      if ($276) { label = 74; break; } else { label = 75; break; }
    case 74: 
      label = 76; break;
    case 75: 
      var $279=$b;
      var $280=(($279+4)|0);
      var $281=HEAP32[(($280)>>2)];
      var $282=(($281+24)|0);
      var $283=HEAP32[(($282)>>2)];
      var $284=$b;
      FUNCTION_TABLE[$283]($284);
      label = 76; break;
    case 76: 
      label = 77; break;
    case 77: 
      $1=0;
      label = 116; break;
    case 78: 
      var $288=$b;
      var $289=$288;
      var $290=(($289+8)|0);
      var $291=HEAP32[(($290)>>2)];
      var $292=$2;
      var $293=(($292+76)|0);
      var $294=HEAP32[(($293)>>2)];
      var $295=((($294)+($291))|0);
      HEAP32[(($293)>>2)]=$295;
      label = 79; break;
    case 79: 
      var $297=$b;
      var $298=(($297)|0);
      var $299=HEAP32[(($298)>>2)];
      var $300=((($299)-(1))|0);
      HEAP32[(($298)>>2)]=$300;
      var $301=(($300)|(0))!=0;
      if ($301) { label = 80; break; } else { label = 81; break; }
    case 80: 
      label = 82; break;
    case 81: 
      var $304=$b;
      var $305=(($304+4)|0);
      var $306=HEAP32[(($305)>>2)];
      var $307=(($306+24)|0);
      var $308=HEAP32[(($307)>>2)];
      var $309=$b;
      FUNCTION_TABLE[$308]($309);
      label = 82; break;
    case 82: 
      label = 83; break;
    case 83: 
      var $312=$2;
      var $313=(($312+76)|0);
      var $314=HEAP32[(($313)>>2)];
      var $315=$2;
      var $316=(($315+16)|0);
      var $317=HEAP32[(($316)>>2)];
      var $318=(($314)|(0)) > (($317)|(0));
      if ($318) { label = 85; break; } else { label = 84; break; }
    case 84: 
      var $320=$needflush;
      var $321=(($320)|(0))!=0;
      if ($321) { label = 85; break; } else { label = 88; break; }
    case 85: 
      var $323=$2;
      var $324=__textiowrapper_writeflush($323);
      var $325=(($324)|(0)) < 0;
      if ($325) { label = 86; break; } else { label = 87; break; }
    case 86: 
      $1=0;
      label = 116; break;
    case 87: 
      label = 88; break;
    case 88: 
      var $329=$needflush;
      var $330=(($329)|(0))!=0;
      if ($330) { label = 89; break; } else { label = 97; break; }
    case 89: 
      var $332=$2;
      var $333=(($332+20)|0);
      var $334=HEAP32[(($333)>>2)];
      var $335=HEAP32[((__PyIO_str_flush)>>2)];
      var $336=_PyObject_CallMethodObjArgs($334, $335, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $ret=$336;
      var $337=$ret;
      var $338=(($337)|(0))==0;
      if ($338) { label = 90; break; } else { label = 91; break; }
    case 90: 
      $1=0;
      label = 116; break;
    case 91: 
      label = 92; break;
    case 92: 
      var $342=$ret;
      var $343=(($342)|0);
      var $344=HEAP32[(($343)>>2)];
      var $345=((($344)-(1))|0);
      HEAP32[(($343)>>2)]=$345;
      var $346=(($345)|(0))!=0;
      if ($346) { label = 93; break; } else { label = 94; break; }
    case 93: 
      label = 95; break;
    case 94: 
      var $349=$ret;
      var $350=(($349+4)|0);
      var $351=HEAP32[(($350)>>2)];
      var $352=(($351+24)|0);
      var $353=HEAP32[(($352)>>2)];
      var $354=$ret;
      FUNCTION_TABLE[$353]($354);
      label = 95; break;
    case 95: 
      label = 96; break;
    case 96: 
      label = 97; break;
    case 97: 
      label = 98; break;
    case 98: 
      var $359=$2;
      var $360=(($359+80)|0);
      var $361=HEAP32[(($360)>>2)];
      var $362=(($361)|(0))!=0;
      if ($362) { label = 99; break; } else { label = 105; break; }
    case 99: 
      var $364=$2;
      var $365=(($364+80)|0);
      var $366=HEAP32[(($365)>>2)];
      $_py_tmp=$366;
      var $367=$2;
      var $368=(($367+80)|0);
      HEAP32[(($368)>>2)]=0;
      label = 100; break;
    case 100: 
      var $370=$_py_tmp;
      var $371=(($370)|0);
      var $372=HEAP32[(($371)>>2)];
      var $373=((($372)-(1))|0);
      HEAP32[(($371)>>2)]=$373;
      var $374=(($373)|(0))!=0;
      if ($374) { label = 101; break; } else { label = 102; break; }
    case 101: 
      label = 103; break;
    case 102: 
      var $377=$_py_tmp;
      var $378=(($377+4)|0);
      var $379=HEAP32[(($378)>>2)];
      var $380=(($379+24)|0);
      var $381=HEAP32[(($380)>>2)];
      var $382=$_py_tmp;
      FUNCTION_TABLE[$381]($382);
      label = 103; break;
    case 103: 
      label = 104; break;
    case 104: 
      label = 105; break;
    case 105: 
      label = 106; break;
    case 106: 
      var $387=$2;
      var $388=(($387+32)|0);
      var $389=HEAP32[(($388)>>2)];
      var $390=(($389)|(0))!=0;
      if ($390) { label = 107; break; } else { label = 115; break; }
    case 107: 
      var $392=$2;
      var $393=(($392+32)|0);
      var $394=HEAP32[(($393)>>2)];
      var $395=__PyObject_CallMethod_SizeT($394, ((__str69492)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $ret=$395;
      var $396=$ret;
      var $397=(($396)|(0))==0;
      if ($397) { label = 108; break; } else { label = 109; break; }
    case 108: 
      $1=0;
      label = 116; break;
    case 109: 
      label = 110; break;
    case 110: 
      var $401=$ret;
      var $402=(($401)|0);
      var $403=HEAP32[(($402)>>2)];
      var $404=((($403)-(1))|0);
      HEAP32[(($402)>>2)]=$404;
      var $405=(($404)|(0))!=0;
      if ($405) { label = 111; break; } else { label = 112; break; }
    case 111: 
      label = 113; break;
    case 112: 
      var $408=$ret;
      var $409=(($408+4)|0);
      var $410=HEAP32[(($409)>>2)];
      var $411=(($410+24)|0);
      var $412=HEAP32[(($411)>>2)];
      var $413=$ret;
      FUNCTION_TABLE[$412]($413);
      label = 113; break;
    case 113: 
      label = 114; break;
    case 114: 
      label = 115; break;
    case 115: 
      var $417=$textlen;
      var $418=_PyLong_FromSsize_t($417);
      $1=$418;
      label = 116; break;
    case 116: 
      var $420=$1;
      STACKTOP = __stackBase__;
      return $420;
    default: assert(0, "bad label: " + label);
  }
}
function _textiowrapper_read($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $n=__stackBase__;
      var $result;
      var $chunks;
      var $r;
      var $_res;
      var $bytes;
      var $decoded;
      var $final;
      var $_py_tmp;
      var $res;
      var $remaining;
      var $_py_tmp1;
      var $_py_tmp2;
      $2=$self;
      $3=$args;
      HEAP32[(($n)>>2)]=-1;
      $result=0;
      $chunks=0;
      var $4=$2;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0)) <= 0;
      if ($7) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $9=$2;
      var $10=(($9+12)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($14, ((__str36459)|0));
      label = 5; break;
    case 4: 
      var $16=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($16, ((__str37460)|0));
      label = 5; break;
    case 5: 
      $1=0;
      label = 143; break;
    case 6: 
      var $19=$3;
      var $20=__PyArg_ParseTuple_SizeT($19, ((__str86)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=(FUNCTION_TABLE_OFFSET + 242),HEAP32[(((tempInt)+(4))>>2)]=$n,tempInt));
      var $21=(($20)|(0))!=0;
      if ($21) { label = 8; break; } else { label = 7; break; }
    case 7: 
      $1=0;
      label = 143; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $25=$2;
      var $26=$25;
      var $27=(($26+4)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28)|(0))==((_PyTextIOWrapper_Type)|(0));
      if ($29) { label = 10; break; } else { label = 25; break; }
    case 10: 
      var $31=$2;
      var $32=(($31+84)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33)|(0))!=0;
      if ($34) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $36=$2;
      var $37=(($36+84)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=__PyFileIO_closed($38);
      $r=$39;
      label = 22; break;
    case 12: 
      var $41=$2;
      var $42=_textiowrapper_closed_get($41, 0);
      $_res=$42;
      var $43=$_res;
      var $44=(($43)|(0))==0;
      if ($44) { label = 13; break; } else { label = 14; break; }
    case 13: 
      $1=0;
      label = 143; break;
    case 14: 
      var $47=$_res;
      var $48=_PyObject_IsTrue($47);
      $r=$48;
      label = 15; break;
    case 15: 
      var $50=$_res;
      var $51=(($50)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=((($52)-(1))|0);
      HEAP32[(($51)>>2)]=$53;
      var $54=(($53)|(0))!=0;
      if ($54) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 18; break;
    case 17: 
      var $57=$_res;
      var $58=(($57+4)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=(($59+24)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=$_res;
      FUNCTION_TABLE[$61]($62);
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $65=$r;
      var $66=(($65)|(0)) < 0;
      if ($66) { label = 20; break; } else { label = 21; break; }
    case 20: 
      $1=0;
      label = 143; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $70=$r;
      var $71=(($70)|(0)) > 0;
      if ($71) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $73=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($73, ((__str51474)|0));
      $1=0;
      label = 143; break;
    case 24: 
      label = 28; break;
    case 25: 
      var $76=$2;
      var $77=$76;
      var $78=__PyIOBase_check_closed($77, __Py_TrueStruct);
      var $79=(($78)|(0))==0;
      if ($79) { label = 26; break; } else { label = 27; break; }
    case 26: 
      $1=0;
      label = 143; break;
    case 27: 
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $84=$2;
      var $85=(($84+32)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=(($86)|(0))==0;
      if ($87) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $89=HEAP32[((_PyExc_IOError)>>2)];
      _PyErr_SetString($89, ((__str81)|0));
      $1=0;
      label = 143; break;
    case 31: 
      var $91=$2;
      var $92=__textiowrapper_writeflush($91);
      var $93=(($92)|(0)) < 0;
      if ($93) { label = 32; break; } else { label = 33; break; }
    case 32: 
      $1=0;
      label = 143; break;
    case 33: 
      var $96=HEAP32[(($n)>>2)];
      var $97=(($96)|(0)) < 0;
      if ($97) { label = 34; break; } else { label = 72; break; }
    case 34: 
      var $99=$2;
      var $100=(($99+20)|0);
      var $101=HEAP32[(($100)>>2)];
      var $102=__PyObject_CallMethod_SizeT($101, ((__str41464)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $bytes=$102;
      var $103=$bytes;
      var $104=(($103)|(0))==0;
      if ($104) { label = 35; break; } else { label = 36; break; }
    case 35: 
      label = 122; break;
    case 36: 
      var $107=$2;
      var $108=(($107+32)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=HEAP32[((__PyIO_str_decode)>>2)];
      var $111=$bytes;
      var $112=_PyObject_CallMethodObjArgs($109, $110, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$111,HEAP32[(((tempInt)+(4))>>2)]=__Py_TrueStruct,HEAP32[(((tempInt)+(8))>>2)]=0,tempInt));
      $decoded=$112;
      label = 37; break;
    case 37: 
      var $114=$bytes;
      var $115=(($114)|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=((($116)-(1))|0);
      HEAP32[(($115)>>2)]=$117;
      var $118=(($117)|(0))!=0;
      if ($118) { label = 38; break; } else { label = 39; break; }
    case 38: 
      label = 40; break;
    case 39: 
      var $121=$bytes;
      var $122=(($121+4)|0);
      var $123=HEAP32[(($122)>>2)];
      var $124=(($123+24)|0);
      var $125=HEAP32[(($124)>>2)];
      var $126=$bytes;
      FUNCTION_TABLE[$125]($126);
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      var $129=$decoded;
      var $130=_check_decoded($129);
      var $131=(($130)|(0)) < 0;
      if ($131) { label = 42; break; } else { label = 43; break; }
    case 42: 
      label = 122; break;
    case 43: 
      var $134=$2;
      var $135=_textiowrapper_get_decoded_chars($134, -1);
      $result=$135;
      var $136=$result;
      var $137=(($136)|(0))==0;
      if ($137) { label = 44; break; } else { label = 50; break; }
    case 44: 
      label = 45; break;
    case 45: 
      var $140=$decoded;
      var $141=(($140)|0);
      var $142=HEAP32[(($141)>>2)];
      var $143=((($142)-(1))|0);
      HEAP32[(($141)>>2)]=$143;
      var $144=(($143)|(0))!=0;
      if ($144) { label = 46; break; } else { label = 47; break; }
    case 46: 
      label = 48; break;
    case 47: 
      var $147=$decoded;
      var $148=(($147+4)|0);
      var $149=HEAP32[(($148)>>2)];
      var $150=(($149+24)|0);
      var $151=HEAP32[(($150)>>2)];
      var $152=$decoded;
      FUNCTION_TABLE[$151]($152);
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      $1=0;
      label = 143; break;
    case 50: 
      var $156=$result;
      var $157=$decoded;
      var $158=_PyUnicodeUCS2_Concat($156, $157);
      $final=$158;
      label = 51; break;
    case 51: 
      var $160=$result;
      var $161=(($160)|0);
      var $162=HEAP32[(($161)>>2)];
      var $163=((($162)-(1))|0);
      HEAP32[(($161)>>2)]=$163;
      var $164=(($163)|(0))!=0;
      if ($164) { label = 52; break; } else { label = 53; break; }
    case 52: 
      label = 54; break;
    case 53: 
      var $167=$result;
      var $168=(($167+4)|0);
      var $169=HEAP32[(($168)>>2)];
      var $170=(($169+24)|0);
      var $171=HEAP32[(($170)>>2)];
      var $172=$result;
      FUNCTION_TABLE[$171]($172);
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      var $176=$decoded;
      var $177=(($176)|0);
      var $178=HEAP32[(($177)>>2)];
      var $179=((($178)-(1))|0);
      HEAP32[(($177)>>2)]=$179;
      var $180=(($179)|(0))!=0;
      if ($180) { label = 57; break; } else { label = 58; break; }
    case 57: 
      label = 59; break;
    case 58: 
      var $183=$decoded;
      var $184=(($183+4)|0);
      var $185=HEAP32[(($184)>>2)];
      var $186=(($185+24)|0);
      var $187=HEAP32[(($186)>>2)];
      var $188=$decoded;
      FUNCTION_TABLE[$187]($188);
      label = 59; break;
    case 59: 
      label = 60; break;
    case 60: 
      var $191=$final;
      var $192=(($191)|(0))==0;
      if ($192) { label = 61; break; } else { label = 62; break; }
    case 61: 
      label = 122; break;
    case 62: 
      label = 63; break;
    case 63: 
      var $196=$2;
      var $197=(($196+80)|0);
      var $198=HEAP32[(($197)>>2)];
      var $199=(($198)|(0))!=0;
      if ($199) { label = 64; break; } else { label = 70; break; }
    case 64: 
      var $201=$2;
      var $202=(($201+80)|0);
      var $203=HEAP32[(($202)>>2)];
      $_py_tmp=$203;
      var $204=$2;
      var $205=(($204+80)|0);
      HEAP32[(($205)>>2)]=0;
      label = 65; break;
    case 65: 
      var $207=$_py_tmp;
      var $208=(($207)|0);
      var $209=HEAP32[(($208)>>2)];
      var $210=((($209)-(1))|0);
      HEAP32[(($208)>>2)]=$210;
      var $211=(($210)|(0))!=0;
      if ($211) { label = 66; break; } else { label = 67; break; }
    case 66: 
      label = 68; break;
    case 67: 
      var $214=$_py_tmp;
      var $215=(($214+4)|0);
      var $216=HEAP32[(($215)>>2)];
      var $217=(($216+24)|0);
      var $218=HEAP32[(($217)>>2)];
      var $219=$_py_tmp;
      FUNCTION_TABLE[$218]($219);
      label = 68; break;
    case 68: 
      label = 69; break;
    case 69: 
      label = 70; break;
    case 70: 
      label = 71; break;
    case 71: 
      var $224=$final;
      $1=$224;
      label = 143; break;
    case 72: 
      $res=1;
      var $226=HEAP32[(($n)>>2)];
      $remaining=$226;
      var $227=$2;
      var $228=HEAP32[(($n)>>2)];
      var $229=_textiowrapper_get_decoded_chars($227, $228);
      $result=$229;
      var $230=$result;
      var $231=(($230)|(0))==0;
      if ($231) { label = 73; break; } else { label = 74; break; }
    case 73: 
      label = 122; break;
    case 74: 
      var $234=$result;
      var $235=$234;
      var $236=(($235+8)|0);
      var $237=HEAP32[(($236)>>2)];
      var $238=$remaining;
      var $239=((($238)-($237))|0);
      $remaining=$239;
      label = 75; break;
    case 75: 
      var $241=$remaining;
      var $242=(($241)|(0)) > 0;
      if ($242) { label = 76; break; } else { label = 96; break; }
    case 76: 
      var $244=$2;
      var $245=_textiowrapper_read_chunk($244);
      $res=$245;
      var $246=$res;
      var $247=(($246)|(0)) < 0;
      if ($247) { label = 77; break; } else { label = 80; break; }
    case 77: 
      var $249=__PyIO_trap_eintr();
      var $250=(($249)|(0))!=0;
      if ($250) { label = 78; break; } else { label = 79; break; }
    case 78: 
      label = 75; break;
    case 79: 
      label = 122; break;
    case 80: 
      var $254=$res;
      var $255=(($254)|(0))==0;
      if ($255) { label = 81; break; } else { label = 82; break; }
    case 81: 
      label = 96; break;
    case 82: 
      var $258=$chunks;
      var $259=(($258)|(0))==0;
      if ($259) { label = 83; break; } else { label = 86; break; }
    case 83: 
      var $261=_PyList_New(0);
      $chunks=$261;
      var $262=$chunks;
      var $263=(($262)|(0))==0;
      if ($263) { label = 84; break; } else { label = 85; break; }
    case 84: 
      label = 122; break;
    case 85: 
      label = 86; break;
    case 86: 
      var $267=$chunks;
      var $268=$result;
      var $269=_PyList_Append($267, $268);
      var $270=(($269)|(0)) < 0;
      if ($270) { label = 87; break; } else { label = 88; break; }
    case 87: 
      label = 122; break;
    case 88: 
      label = 89; break;
    case 89: 
      var $274=$result;
      var $275=(($274)|0);
      var $276=HEAP32[(($275)>>2)];
      var $277=((($276)-(1))|0);
      HEAP32[(($275)>>2)]=$277;
      var $278=(($277)|(0))!=0;
      if ($278) { label = 90; break; } else { label = 91; break; }
    case 90: 
      label = 92; break;
    case 91: 
      var $281=$result;
      var $282=(($281+4)|0);
      var $283=HEAP32[(($282)>>2)];
      var $284=(($283+24)|0);
      var $285=HEAP32[(($284)>>2)];
      var $286=$result;
      FUNCTION_TABLE[$285]($286);
      label = 92; break;
    case 92: 
      label = 93; break;
    case 93: 
      var $289=$2;
      var $290=$remaining;
      var $291=_textiowrapper_get_decoded_chars($289, $290);
      $result=$291;
      var $292=$result;
      var $293=(($292)|(0))==0;
      if ($293) { label = 94; break; } else { label = 95; break; }
    case 94: 
      label = 122; break;
    case 95: 
      var $296=$result;
      var $297=$296;
      var $298=(($297+8)|0);
      var $299=HEAP32[(($298)>>2)];
      var $300=$remaining;
      var $301=((($300)-($299))|0);
      $remaining=$301;
      label = 75; break;
    case 96: 
      var $303=$chunks;
      var $304=(($303)|(0))!=0;
      if ($304) { label = 97; break; } else { label = 121; break; }
    case 97: 
      var $306=$result;
      var $307=(($306)|(0))!=0;
      if ($307) { label = 98; break; } else { label = 100; break; }
    case 98: 
      var $309=$chunks;
      var $310=$result;
      var $311=_PyList_Append($309, $310);
      var $312=(($311)|(0)) < 0;
      if ($312) { label = 99; break; } else { label = 100; break; }
    case 99: 
      label = 122; break;
    case 100: 
      label = 101; break;
    case 101: 
      var $316=$result;
      var $317=(($316)|(0))!=0;
      if ($317) { label = 102; break; } else { label = 108; break; }
    case 102: 
      var $319=$result;
      $_py_tmp1=$319;
      $result=0;
      label = 103; break;
    case 103: 
      var $321=$_py_tmp1;
      var $322=(($321)|0);
      var $323=HEAP32[(($322)>>2)];
      var $324=((($323)-(1))|0);
      HEAP32[(($322)>>2)]=$324;
      var $325=(($324)|(0))!=0;
      if ($325) { label = 104; break; } else { label = 105; break; }
    case 104: 
      label = 106; break;
    case 105: 
      var $328=$_py_tmp1;
      var $329=(($328+4)|0);
      var $330=HEAP32[(($329)>>2)];
      var $331=(($330+24)|0);
      var $332=HEAP32[(($331)>>2)];
      var $333=$_py_tmp1;
      FUNCTION_TABLE[$332]($333);
      label = 106; break;
    case 106: 
      label = 107; break;
    case 107: 
      label = 108; break;
    case 108: 
      label = 109; break;
    case 109: 
      var $338=HEAP32[((__PyIO_empty_str)>>2)];
      var $339=$chunks;
      var $340=_PyUnicodeUCS2_Join($338, $339);
      $result=$340;
      var $341=$result;
      var $342=(($341)|(0))==0;
      if ($342) { label = 110; break; } else { label = 111; break; }
    case 110: 
      label = 122; break;
    case 111: 
      label = 112; break;
    case 112: 
      var $346=$chunks;
      var $347=(($346)|(0))!=0;
      if ($347) { label = 113; break; } else { label = 119; break; }
    case 113: 
      var $349=$chunks;
      $_py_tmp2=$349;
      $chunks=0;
      label = 114; break;
    case 114: 
      var $351=$_py_tmp2;
      var $352=(($351)|0);
      var $353=HEAP32[(($352)>>2)];
      var $354=((($353)-(1))|0);
      HEAP32[(($352)>>2)]=$354;
      var $355=(($354)|(0))!=0;
      if ($355) { label = 115; break; } else { label = 116; break; }
    case 115: 
      label = 117; break;
    case 116: 
      var $358=$_py_tmp2;
      var $359=(($358+4)|0);
      var $360=HEAP32[(($359)>>2)];
      var $361=(($360+24)|0);
      var $362=HEAP32[(($361)>>2)];
      var $363=$_py_tmp2;
      FUNCTION_TABLE[$362]($363);
      label = 117; break;
    case 117: 
      label = 118; break;
    case 118: 
      label = 119; break;
    case 119: 
      label = 120; break;
    case 120: 
      label = 121; break;
    case 121: 
      var $369=$result;
      $1=$369;
      label = 143; break;
    case 122: 
      label = 123; break;
    case 123: 
      var $372=$result;
      var $373=(($372)|(0))==0;
      if ($373) { label = 124; break; } else { label = 125; break; }
    case 124: 
      label = 131; break;
    case 125: 
      label = 126; break;
    case 126: 
      var $377=$result;
      var $378=(($377)|0);
      var $379=HEAP32[(($378)>>2)];
      var $380=((($379)-(1))|0);
      HEAP32[(($378)>>2)]=$380;
      var $381=(($380)|(0))!=0;
      if ($381) { label = 127; break; } else { label = 128; break; }
    case 127: 
      label = 129; break;
    case 128: 
      var $384=$result;
      var $385=(($384+4)|0);
      var $386=HEAP32[(($385)>>2)];
      var $387=(($386+24)|0);
      var $388=HEAP32[(($387)>>2)];
      var $389=$result;
      FUNCTION_TABLE[$388]($389);
      label = 129; break;
    case 129: 
      label = 130; break;
    case 130: 
      label = 131; break;
    case 131: 
      label = 132; break;
    case 132: 
      label = 133; break;
    case 133: 
      var $395=$chunks;
      var $396=(($395)|(0))==0;
      if ($396) { label = 134; break; } else { label = 135; break; }
    case 134: 
      label = 141; break;
    case 135: 
      label = 136; break;
    case 136: 
      var $400=$chunks;
      var $401=(($400)|0);
      var $402=HEAP32[(($401)>>2)];
      var $403=((($402)-(1))|0);
      HEAP32[(($401)>>2)]=$403;
      var $404=(($403)|(0))!=0;
      if ($404) { label = 137; break; } else { label = 138; break; }
    case 137: 
      label = 139; break;
    case 138: 
      var $407=$chunks;
      var $408=(($407+4)|0);
      var $409=HEAP32[(($408)>>2)];
      var $410=(($409+24)|0);
      var $411=HEAP32[(($410)>>2)];
      var $412=$chunks;
      FUNCTION_TABLE[$411]($412);
      label = 139; break;
    case 139: 
      label = 140; break;
    case 140: 
      label = 141; break;
    case 141: 
      label = 142; break;
    case 142: 
      $1=0;
      label = 143; break;
    case 143: 
      var $418=$1;
      STACKTOP = __stackBase__;
      return $418;
    default: assert(0, "bad label: " + label);
  }
}
function _textiowrapper_readline($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $limitobj=__stackBase__;
      var $limit;
      $2=$self;
      $3=$args;
      HEAP32[(($limitobj)>>2)]=0;
      $limit=-1;
      var $4=$2;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0)) <= 0;
      if ($7) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $9=$2;
      var $10=(($9+12)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($14, ((__str36459)|0));
      label = 5; break;
    case 4: 
      var $16=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($16, ((__str37460)|0));
      label = 5; break;
    case 5: 
      $1=0;
      label = 16; break;
    case 6: 
      var $19=$3;
      var $20=__PyArg_ParseTuple_SizeT($19, ((__str78)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$limitobj,tempInt));
      var $21=(($20)|(0))!=0;
      if ($21) { label = 8; break; } else { label = 7; break; }
    case 7: 
      $1=0;
      label = 16; break;
    case 8: 
      var $24=HEAP32[(($limitobj)>>2)];
      var $25=(($24)|(0))!=0;
      if ($25) { label = 9; break; } else { label = 15; break; }
    case 9: 
      var $27=HEAP32[(($limitobj)>>2)];
      var $28=_PyNumber_Check($27);
      var $29=(($28)|(0))!=0;
      if ($29) { label = 11; break; } else { label = 10; break; }
    case 10: 
      var $31=HEAP32[((_PyExc_TypeError)>>2)];
      var $32=HEAP32[(($limitobj)>>2)];
      var $33=(($32+4)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($34+12)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=_PyErr_Format($31, ((__str79)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$36,tempInt));
      $1=0;
      label = 16; break;
    case 11: 
      var $39=HEAP32[(($limitobj)>>2)];
      var $40=HEAP32[((_PyExc_OverflowError)>>2)];
      var $41=_PyNumber_AsSsize_t($39, $40);
      $limit=$41;
      var $42=$limit;
      var $43=(($42)|(0))==-1;
      if ($43) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $45=_PyErr_Occurred();
      var $46=(($45)|(0))!=0;
      if ($46) { label = 13; break; } else { label = 14; break; }
    case 13: 
      $1=0;
      label = 16; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $50=$2;
      var $51=$limit;
      var $52=__textiowrapper_readline($50, $51);
      $1=$52;
      label = 16; break;
    case 16: 
      var $54=$1;
      STACKTOP = __stackBase__;
      return $54;
    default: assert(0, "bad label: " + label);
  }
}
function _textiowrapper_flush($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $r;
      var $_res;
      $2=$self;
      $3=$args;
      var $4=$2;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0)) <= 0;
      if ($7) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $9=$2;
      var $10=(($9+12)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($14, ((__str36459)|0));
      label = 5; break;
    case 4: 
      var $16=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($16, ((__str37460)|0));
      label = 5; break;
    case 5: 
      $1=0;
      label = 30; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $20=$2;
      var $21=$20;
      var $22=(($21+4)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23)|(0))==((_PyTextIOWrapper_Type)|(0));
      if ($24) { label = 8; break; } else { label = 23; break; }
    case 8: 
      var $26=$2;
      var $27=(($26+84)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28)|(0))!=0;
      if ($29) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $31=$2;
      var $32=(($31+84)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=__PyFileIO_closed($33);
      $r=$34;
      label = 20; break;
    case 10: 
      var $36=$2;
      var $37=_textiowrapper_closed_get($36, 0);
      $_res=$37;
      var $38=$_res;
      var $39=(($38)|(0))==0;
      if ($39) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $1=0;
      label = 30; break;
    case 12: 
      var $42=$_res;
      var $43=_PyObject_IsTrue($42);
      $r=$43;
      label = 13; break;
    case 13: 
      var $45=$_res;
      var $46=(($45)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=((($47)-(1))|0);
      HEAP32[(($46)>>2)]=$48;
      var $49=(($48)|(0))!=0;
      if ($49) { label = 14; break; } else { label = 15; break; }
    case 14: 
      label = 16; break;
    case 15: 
      var $52=$_res;
      var $53=(($52+4)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54+24)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=$_res;
      FUNCTION_TABLE[$56]($57);
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $60=$r;
      var $61=(($60)|(0)) < 0;
      if ($61) { label = 18; break; } else { label = 19; break; }
    case 18: 
      $1=0;
      label = 30; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $65=$r;
      var $66=(($65)|(0)) > 0;
      if ($66) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $68=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($68, ((__str51474)|0));
      $1=0;
      label = 30; break;
    case 22: 
      label = 26; break;
    case 23: 
      var $71=$2;
      var $72=$71;
      var $73=__PyIOBase_check_closed($72, __Py_TrueStruct);
      var $74=(($73)|(0))==0;
      if ($74) { label = 24; break; } else { label = 25; break; }
    case 24: 
      $1=0;
      label = 30; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $79=$2;
      var $80=(($79+52)|0);
      var $81=HEAP8[($80)];
      var $82=$2;
      var $83=(($82+53)|0);
      HEAP8[($83)]=$81;
      var $84=$2;
      var $85=__textiowrapper_writeflush($84);
      var $86=(($85)|(0)) < 0;
      if ($86) { label = 28; break; } else { label = 29; break; }
    case 28: 
      $1=0;
      label = 30; break;
    case 29: 
      var $89=$2;
      var $90=(($89+20)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=__PyObject_CallMethod_SizeT($91, ((__str43466)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=$92;
      label = 30; break;
    case 30: 
      var $94=$1;
      STACKTOP = __stackBase__;
      return $94;
    default: assert(0, "bad label: " + label);
  }
}
function _textiowrapper_close($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $res;
      var $r;
      var $exc=__stackBase__;
      var $val=(__stackBase__)+(4);
      var $tb=(__stackBase__)+(8);
      var $_py_tmp;
      $2=$self;
      $3=$args;
      var $4=$2;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0)) <= 0;
      if ($7) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $9=$2;
      var $10=(($9+12)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($14, ((__str36459)|0));
      label = 5; break;
    case 4: 
      var $16=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($16, ((__str37460)|0));
      label = 5; break;
    case 5: 
      $1=0;
      label = 65; break;
    case 6: 
      var $19=$2;
      var $20=_textiowrapper_closed_get($19, 0);
      $res=$20;
      var $21=$res;
      var $22=(($21)|(0))==0;
      if ($22) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $1=0;
      label = 65; break;
    case 8: 
      var $25=$res;
      var $26=_PyObject_IsTrue($25);
      $r=$26;
      label = 9; break;
    case 9: 
      var $28=$res;
      var $29=(($28)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=((($30)-(1))|0);
      HEAP32[(($29)>>2)]=$31;
      var $32=(($31)|(0))!=0;
      if ($32) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 12; break;
    case 11: 
      var $35=$res;
      var $36=(($35+4)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37+24)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=$res;
      FUNCTION_TABLE[$39]($40);
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $43=$r;
      var $44=(($43)|(0)) < 0;
      if ($44) { label = 14; break; } else { label = 15; break; }
    case 14: 
      $1=0;
      label = 65; break;
    case 15: 
      var $47=$r;
      var $48=(($47)|(0)) > 0;
      if ($48) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $50=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $51=((($50)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$51;
      $1=__Py_NoneStruct;
      label = 65; break;
    case 17: 
      HEAP32[(($exc)>>2)]=0;
      var $53=$2;
      var $54=$53;
      var $55=__PyObject_CallMethod_SizeT($54, ((__str43466)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $res=$55;
      var $56=$res;
      var $57=(($56)|(0))==0;
      if ($57) { label = 18; break; } else { label = 19; break; }
    case 18: 
      _PyErr_Fetch($exc, $val, $tb);
      label = 25; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $61=$res;
      var $62=(($61)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=((($63)-(1))|0);
      HEAP32[(($62)>>2)]=$64;
      var $65=(($64)|(0))!=0;
      if ($65) { label = 21; break; } else { label = 22; break; }
    case 21: 
      label = 23; break;
    case 22: 
      var $68=$res;
      var $69=(($68+4)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=(($70+24)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=$res;
      FUNCTION_TABLE[$72]($73);
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $77=$2;
      var $78=(($77+20)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=__PyObject_CallMethod_SizeT($79, ((__str44467)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $res=$80;
      var $81=HEAP32[(($exc)>>2)];
      var $82=(($81)|(0))!=0;
      if ($82) { label = 26; break; } else { label = 64; break; }
    case 26: 
      var $84=$res;
      var $85=(($84)|(0))!=0;
      if ($85) { label = 27; break; } else { label = 37; break; }
    case 27: 
      label = 28; break;
    case 28: 
      var $88=$res;
      var $89=(($88)|(0))!=0;
      if ($89) { label = 29; break; } else { label = 35; break; }
    case 29: 
      var $91=$res;
      $_py_tmp=$91;
      $res=0;
      label = 30; break;
    case 30: 
      var $93=$_py_tmp;
      var $94=(($93)|0);
      var $95=HEAP32[(($94)>>2)];
      var $96=((($95)-(1))|0);
      HEAP32[(($94)>>2)]=$96;
      var $97=(($96)|(0))!=0;
      if ($97) { label = 31; break; } else { label = 32; break; }
    case 31: 
      label = 33; break;
    case 32: 
      var $100=$_py_tmp;
      var $101=(($100+4)|0);
      var $102=HEAP32[(($101)>>2)];
      var $103=(($102+24)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=$_py_tmp;
      FUNCTION_TABLE[$104]($105);
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $110=HEAP32[(($exc)>>2)];
      var $111=HEAP32[(($val)>>2)];
      var $112=HEAP32[(($tb)>>2)];
      _PyErr_Restore($110, $111, $112);
      label = 63; break;
    case 37: 
      label = 38; break;
    case 38: 
      var $115=HEAP32[(($exc)>>2)];
      var $116=(($115)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=((($117)-(1))|0);
      HEAP32[(($116)>>2)]=$118;
      var $119=(($118)|(0))!=0;
      if ($119) { label = 39; break; } else { label = 40; break; }
    case 39: 
      label = 41; break;
    case 40: 
      var $122=HEAP32[(($exc)>>2)];
      var $123=(($122+4)|0);
      var $124=HEAP32[(($123)>>2)];
      var $125=(($124+24)|0);
      var $126=HEAP32[(($125)>>2)];
      var $127=HEAP32[(($exc)>>2)];
      FUNCTION_TABLE[$126]($127);
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      var $131=HEAP32[(($val)>>2)];
      var $132=(($131)|(0))==0;
      if ($132) { label = 44; break; } else { label = 45; break; }
    case 44: 
      label = 51; break;
    case 45: 
      label = 46; break;
    case 46: 
      var $136=HEAP32[(($val)>>2)];
      var $137=(($136)|0);
      var $138=HEAP32[(($137)>>2)];
      var $139=((($138)-(1))|0);
      HEAP32[(($137)>>2)]=$139;
      var $140=(($139)|(0))!=0;
      if ($140) { label = 47; break; } else { label = 48; break; }
    case 47: 
      label = 49; break;
    case 48: 
      var $143=HEAP32[(($val)>>2)];
      var $144=(($143+4)|0);
      var $145=HEAP32[(($144)>>2)];
      var $146=(($145+24)|0);
      var $147=HEAP32[(($146)>>2)];
      var $148=HEAP32[(($val)>>2)];
      FUNCTION_TABLE[$147]($148);
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      var $154=HEAP32[(($tb)>>2)];
      var $155=(($154)|(0))==0;
      if ($155) { label = 54; break; } else { label = 55; break; }
    case 54: 
      label = 61; break;
    case 55: 
      label = 56; break;
    case 56: 
      var $159=HEAP32[(($tb)>>2)];
      var $160=(($159)|0);
      var $161=HEAP32[(($160)>>2)];
      var $162=((($161)-(1))|0);
      HEAP32[(($160)>>2)]=$162;
      var $163=(($162)|(0))!=0;
      if ($163) { label = 57; break; } else { label = 58; break; }
    case 57: 
      label = 59; break;
    case 58: 
      var $166=HEAP32[(($tb)>>2)];
      var $167=(($166+4)|0);
      var $168=HEAP32[(($167)>>2)];
      var $169=(($168+24)|0);
      var $170=HEAP32[(($169)>>2)];
      var $171=HEAP32[(($tb)>>2)];
      FUNCTION_TABLE[$170]($171);
      label = 59; break;
    case 59: 
      label = 60; break;
    case 60: 
      label = 61; break;
    case 61: 
      label = 62; break;
    case 62: 
      label = 63; break;
    case 63: 
      label = 64; break;
    case 64: 
      var $178=$res;
      $1=$178;
      label = 65; break;
    case 65: 
      var $180=$1;
      STACKTOP = __stackBase__;
      return $180;
    default: assert(0, "bad label: " + label);
  }
}
function _textiowrapper_fileno($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$self;
      $3=$args;
      var $4=$2;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0)) <= 0;
      if ($7) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $9=$2;
      var $10=(($9+12)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($14, ((__str36459)|0));
      label = 5; break;
    case 4: 
      var $16=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($16, ((__str37460)|0));
      label = 5; break;
    case 5: 
      $1=0;
      label = 7; break;
    case 6: 
      var $19=$2;
      var $20=(($19+20)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=__PyObject_CallMethod_SizeT($21, ((__str45468)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=$22;
      label = 7; break;
    case 7: 
      var $24=$1;
      STACKTOP = __stackBase__;
      return $24;
    default: assert(0, "bad label: " + label);
  }
}
function _textiowrapper_seekable($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$self;
      $3=$args;
      var $4=$2;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0)) <= 0;
      if ($7) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $9=$2;
      var $10=(($9+12)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($14, ((__str36459)|0));
      label = 5; break;
    case 4: 
      var $16=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($16, ((__str37460)|0));
      label = 5; break;
    case 5: 
      $1=0;
      label = 7; break;
    case 6: 
      var $19=$2;
      var $20=(($19+20)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=__PyObject_CallMethod_SizeT($21, ((__str24447)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=$22;
      label = 7; break;
    case 7: 
      var $24=$1;
      STACKTOP = __stackBase__;
      return $24;
    default: assert(0, "bad label: " + label);
  }
}
function _textiowrapper_readable($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$self;
      $3=$args;
      var $4=$2;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0)) <= 0;
      if ($7) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $9=$2;
      var $10=(($9+12)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($14, ((__str36459)|0));
      label = 5; break;
    case 4: 
      var $16=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($16, ((__str37460)|0));
      label = 5; break;
    case 5: 
      $1=0;
      label = 7; break;
    case 6: 
      var $19=$2;
      var $20=(($19+20)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=__PyObject_CallMethod_SizeT($21, ((__str19442)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=$22;
      label = 7; break;
    case 7: 
      var $24=$1;
      STACKTOP = __stackBase__;
      return $24;
    default: assert(0, "bad label: " + label);
  }
}
function _textiowrapper_writable($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$self;
      $3=$args;
      var $4=$2;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0)) <= 0;
      if ($7) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $9=$2;
      var $10=(($9+12)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($14, ((__str36459)|0));
      label = 5; break;
    case 4: 
      var $16=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($16, ((__str37460)|0));
      label = 5; break;
    case 5: 
      $1=0;
      label = 7; break;
    case 6: 
      var $19=$2;
      var $20=(($19+20)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=__PyObject_CallMethod_SizeT($21, ((__str21444)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=$22;
      label = 7; break;
    case 7: 
      var $24=$1;
      STACKTOP = __stackBase__;
      return $24;
    default: assert(0, "bad label: " + label);
  }
}
function _textiowrapper_isatty($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$self;
      $3=$args;
      var $4=$2;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0)) <= 0;
      if ($7) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $9=$2;
      var $10=(($9+12)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($14, ((__str36459)|0));
      label = 5; break;
    case 4: 
      var $16=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($16, ((__str37460)|0));
      label = 5; break;
    case 5: 
      $1=0;
      label = 7; break;
    case 6: 
      var $19=$2;
      var $20=(($19+20)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=__PyObject_CallMethod_SizeT($21, ((__str46469)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=$22;
      label = 7; break;
    case 7: 
      var $24=$1;
      STACKTOP = __stackBase__;
      return $24;
    default: assert(0, "bad label: " + label);
  }
}
function _textiowrapper_seek($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $cookieObj=__stackBase__;
      var $posobj;
      var $cookie=(__stackBase__)+(4);
      var $whence=(__stackBase__)+(24);
      var $res;
      var $cmp;
      var $r;
      var $_res;
      var $_py_tmp;
      var $repr;
      var $_py_tmp1;
      var $input_chunk;
      var $decoded;
      $2=$self;
      $3=$args;
      HEAP32[(($whence)>>2)]=0;
      var $4=$2;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0)) <= 0;
      if ($7) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $9=$2;
      var $10=(($9+12)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($14, ((__str36459)|0));
      label = 5; break;
    case 4: 
      var $16=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($16, ((__str37460)|0));
      label = 5; break;
    case 5: 
      $1=0;
      label = 177; break;
    case 6: 
      var $19=$3;
      var $20=__PyArg_ParseTuple_SizeT($19, ((__str66489)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$cookieObj,HEAP32[(((tempInt)+(4))>>2)]=$whence,tempInt));
      var $21=(($20)|(0))!=0;
      if ($21) { label = 8; break; } else { label = 7; break; }
    case 7: 
      $1=0;
      label = 177; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $25=$2;
      var $26=$25;
      var $27=(($26+4)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28)|(0))==((_PyTextIOWrapper_Type)|(0));
      if ($29) { label = 10; break; } else { label = 25; break; }
    case 10: 
      var $31=$2;
      var $32=(($31+84)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33)|(0))!=0;
      if ($34) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $36=$2;
      var $37=(($36+84)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=__PyFileIO_closed($38);
      $r=$39;
      label = 22; break;
    case 12: 
      var $41=$2;
      var $42=_textiowrapper_closed_get($41, 0);
      $_res=$42;
      var $43=$_res;
      var $44=(($43)|(0))==0;
      if ($44) { label = 13; break; } else { label = 14; break; }
    case 13: 
      $1=0;
      label = 177; break;
    case 14: 
      var $47=$_res;
      var $48=_PyObject_IsTrue($47);
      $r=$48;
      label = 15; break;
    case 15: 
      var $50=$_res;
      var $51=(($50)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=((($52)-(1))|0);
      HEAP32[(($51)>>2)]=$53;
      var $54=(($53)|(0))!=0;
      if ($54) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 18; break;
    case 17: 
      var $57=$_res;
      var $58=(($57+4)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=(($59+24)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=$_res;
      FUNCTION_TABLE[$61]($62);
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $65=$r;
      var $66=(($65)|(0)) < 0;
      if ($66) { label = 20; break; } else { label = 21; break; }
    case 20: 
      $1=0;
      label = 177; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $70=$r;
      var $71=(($70)|(0)) > 0;
      if ($71) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $73=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($73, ((__str51474)|0));
      $1=0;
      label = 177; break;
    case 24: 
      label = 28; break;
    case 25: 
      var $76=$2;
      var $77=$76;
      var $78=__PyIOBase_check_closed($77, __Py_TrueStruct);
      var $79=(($78)|(0))==0;
      if ($79) { label = 26; break; } else { label = 27; break; }
    case 26: 
      $1=0;
      label = 177; break;
    case 27: 
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $84=HEAP32[(($cookieObj)>>2)];
      var $85=(($84)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=((($86)+(1))|0);
      HEAP32[(($85)>>2)]=$87;
      var $88=$2;
      var $89=(($88+52)|0);
      var $90=HEAP8[($89)];
      var $91=(($90 << 24) >> 24)!=0;
      if ($91) { label = 31; break; } else { label = 30; break; }
    case 30: 
      var $93=HEAP32[((_PyExc_IOError)>>2)];
      _PyErr_SetString($93, ((__str52475)|0));
      label = 166; break;
    case 31: 
      var $95=HEAP32[(($whence)>>2)];
      var $96=(($95)|(0))==1;
      if ($96) { label = 32; break; } else { label = 44; break; }
    case 32: 
      var $98=HEAP32[(($cookieObj)>>2)];
      var $99=HEAP32[((__PyIO_zero)>>2)];
      var $100=_PyObject_RichCompareBool($98, $99, 2);
      $cmp=$100;
      var $101=$cmp;
      var $102=(($101)|(0)) < 0;
      if ($102) { label = 33; break; } else { label = 34; break; }
    case 33: 
      label = 166; break;
    case 34: 
      var $105=$cmp;
      var $106=(($105)|(0))==0;
      if ($106) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $108=HEAP32[((_PyExc_IOError)>>2)];
      _PyErr_SetString($108, ((__str67490)|0));
      label = 166; break;
    case 36: 
      label = 37; break;
    case 37: 
      var $111=HEAP32[(($cookieObj)>>2)];
      var $112=(($111)|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=((($113)-(1))|0);
      HEAP32[(($112)>>2)]=$114;
      var $115=(($114)|(0))!=0;
      if ($115) { label = 38; break; } else { label = 39; break; }
    case 38: 
      label = 40; break;
    case 39: 
      var $118=HEAP32[(($cookieObj)>>2)];
      var $119=(($118+4)|0);
      var $120=HEAP32[(($119)>>2)];
      var $121=(($120+24)|0);
      var $122=HEAP32[(($121)>>2)];
      var $123=HEAP32[(($cookieObj)>>2)];
      FUNCTION_TABLE[$122]($123);
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      var $126=$2;
      var $127=$126;
      var $128=__PyObject_CallMethod_SizeT($127, ((__str48471)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      HEAP32[(($cookieObj)>>2)]=$128;
      var $129=HEAP32[(($cookieObj)>>2)];
      var $130=(($129)|(0))==0;
      if ($130) { label = 42; break; } else { label = 43; break; }
    case 42: 
      label = 166; break;
    case 43: 
      label = 89; break;
    case 44: 
      var $134=HEAP32[(($whence)>>2)];
      var $135=(($134)|(0))==2;
      if ($135) { label = 45; break; } else { label = 85; break; }
    case 45: 
      var $137=HEAP32[(($cookieObj)>>2)];
      var $138=HEAP32[((__PyIO_zero)>>2)];
      var $139=_PyObject_RichCompareBool($137, $138, 2);
      $cmp=$139;
      var $140=$cmp;
      var $141=(($140)|(0)) < 0;
      if ($141) { label = 46; break; } else { label = 47; break; }
    case 46: 
      label = 166; break;
    case 47: 
      var $144=$cmp;
      var $145=(($144)|(0))==0;
      if ($145) { label = 48; break; } else { label = 49; break; }
    case 48: 
      var $147=HEAP32[((_PyExc_IOError)>>2)];
      _PyErr_SetString($147, ((__str68491)|0));
      label = 166; break;
    case 49: 
      var $149=$2;
      var $150=$149;
      var $151=__PyObject_CallMethod_SizeT($150, ((__str43466)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $res=$151;
      var $152=$res;
      var $153=(($152)|(0))==0;
      if ($153) { label = 50; break; } else { label = 51; break; }
    case 50: 
      label = 166; break;
    case 51: 
      label = 52; break;
    case 52: 
      var $157=$res;
      var $158=(($157)|0);
      var $159=HEAP32[(($158)>>2)];
      var $160=((($159)-(1))|0);
      HEAP32[(($158)>>2)]=$160;
      var $161=(($160)|(0))!=0;
      if ($161) { label = 53; break; } else { label = 54; break; }
    case 53: 
      label = 55; break;
    case 54: 
      var $164=$res;
      var $165=(($164+4)|0);
      var $166=HEAP32[(($165)>>2)];
      var $167=(($166+24)|0);
      var $168=HEAP32[(($167)>>2)];
      var $169=$res;
      FUNCTION_TABLE[$168]($169);
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      var $172=$2;
      _textiowrapper_set_decoded_chars($172, 0);
      label = 57; break;
    case 57: 
      var $174=$2;
      var $175=(($174+80)|0);
      var $176=HEAP32[(($175)>>2)];
      var $177=(($176)|(0))!=0;
      if ($177) { label = 58; break; } else { label = 64; break; }
    case 58: 
      var $179=$2;
      var $180=(($179+80)|0);
      var $181=HEAP32[(($180)>>2)];
      $_py_tmp=$181;
      var $182=$2;
      var $183=(($182+80)|0);
      HEAP32[(($183)>>2)]=0;
      label = 59; break;
    case 59: 
      var $185=$_py_tmp;
      var $186=(($185)|0);
      var $187=HEAP32[(($186)>>2)];
      var $188=((($187)-(1))|0);
      HEAP32[(($186)>>2)]=$188;
      var $189=(($188)|(0))!=0;
      if ($189) { label = 60; break; } else { label = 61; break; }
    case 60: 
      label = 62; break;
    case 61: 
      var $192=$_py_tmp;
      var $193=(($192+4)|0);
      var $194=HEAP32[(($193)>>2)];
      var $195=(($194+24)|0);
      var $196=HEAP32[(($195)>>2)];
      var $197=$_py_tmp;
      FUNCTION_TABLE[$196]($197);
      label = 62; break;
    case 62: 
      label = 63; break;
    case 63: 
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      var $202=$2;
      var $203=(($202+32)|0);
      var $204=HEAP32[(($203)>>2)];
      var $205=(($204)|(0))!=0;
      if ($205) { label = 66; break; } else { label = 74; break; }
    case 66: 
      var $207=$2;
      var $208=(($207+32)|0);
      var $209=HEAP32[(($208)>>2)];
      var $210=__PyObject_CallMethod_SizeT($209, ((__str69492)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $res=$210;
      var $211=$res;
      var $212=(($211)|(0))==0;
      if ($212) { label = 67; break; } else { label = 68; break; }
    case 67: 
      label = 166; break;
    case 68: 
      label = 69; break;
    case 69: 
      var $216=$res;
      var $217=(($216)|0);
      var $218=HEAP32[(($217)>>2)];
      var $219=((($218)-(1))|0);
      HEAP32[(($217)>>2)]=$219;
      var $220=(($219)|(0))!=0;
      if ($220) { label = 70; break; } else { label = 71; break; }
    case 70: 
      label = 72; break;
    case 71: 
      var $223=$res;
      var $224=(($223+4)|0);
      var $225=HEAP32[(($224)>>2)];
      var $226=(($225+24)|0);
      var $227=HEAP32[(($226)>>2)];
      var $228=$res;
      FUNCTION_TABLE[$227]($228);
      label = 72; break;
    case 72: 
      label = 73; break;
    case 73: 
      label = 74; break;
    case 74: 
      var $232=$2;
      var $233=(($232+20)|0);
      var $234=HEAP32[(($233)>>2)];
      var $235=__PyObject_CallMethod_SizeT($234, ((__str47470)|0), ((__str70493)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,HEAP32[(((tempInt)+(4))>>2)]=2,tempInt));
      $res=$235;
      label = 75; break;
    case 75: 
      var $237=HEAP32[(($cookieObj)>>2)];
      var $238=(($237)|(0))==0;
      if ($238) { label = 76; break; } else { label = 77; break; }
    case 76: 
      label = 83; break;
    case 77: 
      label = 78; break;
    case 78: 
      var $242=HEAP32[(($cookieObj)>>2)];
      var $243=(($242)|0);
      var $244=HEAP32[(($243)>>2)];
      var $245=((($244)-(1))|0);
      HEAP32[(($243)>>2)]=$245;
      var $246=(($245)|(0))!=0;
      if ($246) { label = 79; break; } else { label = 80; break; }
    case 79: 
      label = 81; break;
    case 80: 
      var $249=HEAP32[(($cookieObj)>>2)];
      var $250=(($249+4)|0);
      var $251=HEAP32[(($250)>>2)];
      var $252=(($251+24)|0);
      var $253=HEAP32[(($252)>>2)];
      var $254=HEAP32[(($cookieObj)>>2)];
      FUNCTION_TABLE[$253]($254);
      label = 81; break;
    case 81: 
      label = 82; break;
    case 82: 
      label = 83; break;
    case 83: 
      label = 84; break;
    case 84: 
      var $259=$res;
      $1=$259;
      label = 177; break;
    case 85: 
      var $261=HEAP32[(($whence)>>2)];
      var $262=(($261)|(0))!=0;
      if ($262) { label = 86; break; } else { label = 87; break; }
    case 86: 
      var $264=HEAP32[((_PyExc_ValueError)>>2)];
      var $265=HEAP32[(($whence)>>2)];
      var $266=_PyErr_Format($264, ((__str71494)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$265,tempInt));
      label = 166; break;
    case 87: 
      label = 88; break;
    case 88: 
      label = 89; break;
    case 89: 
      var $270=HEAP32[(($cookieObj)>>2)];
      var $271=HEAP32[((__PyIO_zero)>>2)];
      var $272=_PyObject_RichCompareBool($270, $271, 0);
      $cmp=$272;
      var $273=$cmp;
      var $274=(($273)|(0)) < 0;
      if ($274) { label = 90; break; } else { label = 91; break; }
    case 90: 
      label = 166; break;
    case 91: 
      var $277=$cmp;
      var $278=(($277)|(0))==1;
      if ($278) { label = 92; break; } else { label = 100; break; }
    case 92: 
      var $280=HEAP32[(($cookieObj)>>2)];
      var $281=_PyObject_Repr($280);
      $repr=$281;
      var $282=$repr;
      var $283=(($282)|(0))!=0;
      if ($283) { label = 93; break; } else { label = 99; break; }
    case 93: 
      var $285=HEAP32[((_PyExc_ValueError)>>2)];
      var $286=$repr;
      var $287=$286;
      var $288=(($287+20)|0);
      var $289=(($288)|0);
      var $290=_PyErr_Format($285, ((__str72495)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$289,tempInt));
      label = 94; break;
    case 94: 
      var $292=$repr;
      var $293=(($292)|0);
      var $294=HEAP32[(($293)>>2)];
      var $295=((($294)-(1))|0);
      HEAP32[(($293)>>2)]=$295;
      var $296=(($295)|(0))!=0;
      if ($296) { label = 95; break; } else { label = 96; break; }
    case 95: 
      label = 97; break;
    case 96: 
      var $299=$repr;
      var $300=(($299+4)|0);
      var $301=HEAP32[(($300)>>2)];
      var $302=(($301+24)|0);
      var $303=HEAP32[(($302)>>2)];
      var $304=$repr;
      FUNCTION_TABLE[$303]($304);
      label = 97; break;
    case 97: 
      label = 98; break;
    case 98: 
      label = 99; break;
    case 99: 
      label = 166; break;
    case 100: 
      var $309=$2;
      var $310=$309;
      var $311=HEAP32[((__PyIO_str_flush)>>2)];
      var $312=_PyObject_CallMethodObjArgs($310, $311, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $res=$312;
      var $313=$res;
      var $314=(($313)|(0))==0;
      if ($314) { label = 101; break; } else { label = 102; break; }
    case 101: 
      label = 166; break;
    case 102: 
      label = 103; break;
    case 103: 
      var $318=$res;
      var $319=(($318)|0);
      var $320=HEAP32[(($319)>>2)];
      var $321=((($320)-(1))|0);
      HEAP32[(($319)>>2)]=$321;
      var $322=(($321)|(0))!=0;
      if ($322) { label = 104; break; } else { label = 105; break; }
    case 104: 
      label = 106; break;
    case 105: 
      var $325=$res;
      var $326=(($325+4)|0);
      var $327=HEAP32[(($326)>>2)];
      var $328=(($327+24)|0);
      var $329=HEAP32[(($328)>>2)];
      var $330=$res;
      FUNCTION_TABLE[$329]($330);
      label = 106; break;
    case 106: 
      label = 107; break;
    case 107: 
      var $333=HEAP32[(($cookieObj)>>2)];
      var $334=_textiowrapper_parse_cookie($cookie, $333);
      var $335=(($334)|(0)) < 0;
      if ($335) { label = 108; break; } else { label = 109; break; }
    case 108: 
      label = 166; break;
    case 109: 
      var $338=(($cookie)|0);
      var $339=HEAP32[(($338)>>2)];
      var $340=_PyLong_FromSsize_t($339);
      $posobj=$340;
      var $341=$posobj;
      var $342=(($341)|(0))==0;
      if ($342) { label = 110; break; } else { label = 111; break; }
    case 110: 
      label = 166; break;
    case 111: 
      var $345=$2;
      var $346=(($345+20)|0);
      var $347=HEAP32[(($346)>>2)];
      var $348=HEAP32[((__PyIO_str_seek)>>2)];
      var $349=$posobj;
      var $350=_PyObject_CallMethodObjArgs($347, $348, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$349,HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
      $res=$350;
      label = 112; break;
    case 112: 
      var $352=$posobj;
      var $353=(($352)|0);
      var $354=HEAP32[(($353)>>2)];
      var $355=((($354)-(1))|0);
      HEAP32[(($353)>>2)]=$355;
      var $356=(($355)|(0))!=0;
      if ($356) { label = 113; break; } else { label = 114; break; }
    case 113: 
      label = 115; break;
    case 114: 
      var $359=$posobj;
      var $360=(($359+4)|0);
      var $361=HEAP32[(($360)>>2)];
      var $362=(($361+24)|0);
      var $363=HEAP32[(($362)>>2)];
      var $364=$posobj;
      FUNCTION_TABLE[$363]($364);
      label = 115; break;
    case 115: 
      label = 116; break;
    case 116: 
      var $367=$res;
      var $368=(($367)|(0))==0;
      if ($368) { label = 117; break; } else { label = 118; break; }
    case 117: 
      label = 166; break;
    case 118: 
      label = 119; break;
    case 119: 
      var $372=$res;
      var $373=(($372)|0);
      var $374=HEAP32[(($373)>>2)];
      var $375=((($374)-(1))|0);
      HEAP32[(($373)>>2)]=$375;
      var $376=(($375)|(0))!=0;
      if ($376) { label = 120; break; } else { label = 121; break; }
    case 120: 
      label = 122; break;
    case 121: 
      var $379=$res;
      var $380=(($379+4)|0);
      var $381=HEAP32[(($380)>>2)];
      var $382=(($381+24)|0);
      var $383=HEAP32[(($382)>>2)];
      var $384=$res;
      FUNCTION_TABLE[$383]($384);
      label = 122; break;
    case 122: 
      label = 123; break;
    case 123: 
      var $387=$2;
      _textiowrapper_set_decoded_chars($387, 0);
      label = 124; break;
    case 124: 
      var $389=$2;
      var $390=(($389+80)|0);
      var $391=HEAP32[(($390)>>2)];
      var $392=(($391)|(0))!=0;
      if ($392) { label = 125; break; } else { label = 131; break; }
    case 125: 
      var $394=$2;
      var $395=(($394+80)|0);
      var $396=HEAP32[(($395)>>2)];
      $_py_tmp1=$396;
      var $397=$2;
      var $398=(($397+80)|0);
      HEAP32[(($398)>>2)]=0;
      label = 126; break;
    case 126: 
      var $400=$_py_tmp1;
      var $401=(($400)|0);
      var $402=HEAP32[(($401)>>2)];
      var $403=((($402)-(1))|0);
      HEAP32[(($401)>>2)]=$403;
      var $404=(($403)|(0))!=0;
      if ($404) { label = 127; break; } else { label = 128; break; }
    case 127: 
      label = 129; break;
    case 128: 
      var $407=$_py_tmp1;
      var $408=(($407+4)|0);
      var $409=HEAP32[(($408)>>2)];
      var $410=(($409+24)|0);
      var $411=HEAP32[(($410)>>2)];
      var $412=$_py_tmp1;
      FUNCTION_TABLE[$411]($412);
      label = 129; break;
    case 129: 
      label = 130; break;
    case 130: 
      label = 131; break;
    case 131: 
      label = 132; break;
    case 132: 
      var $417=$2;
      var $418=(($417+32)|0);
      var $419=HEAP32[(($418)>>2)];
      var $420=(($419)|(0))!=0;
      if ($420) { label = 133; break; } else { label = 136; break; }
    case 133: 
      var $422=$2;
      var $423=__textiowrapper_decoder_setstate($422, $cookie);
      var $424=(($423)|(0)) < 0;
      if ($424) { label = 134; break; } else { label = 135; break; }
    case 134: 
      label = 166; break;
    case 135: 
      label = 136; break;
    case 136: 
      var $428=(($cookie+12)|0);
      var $429=HEAP32[(($428)>>2)];
      var $430=(($429)|(0))!=0;
      if ($430) { label = 137; break; } else { label = 158; break; }
    case 137: 
      var $432=$2;
      var $433=(($432+20)|0);
      var $434=HEAP32[(($433)>>2)];
      var $435=(($cookie+8)|0);
      var $436=HEAP32[(($435)>>2)];
      var $437=__PyObject_CallMethod_SizeT($434, ((__str41464)|0), ((__str73496)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$436,tempInt));
      $input_chunk=$437;
      var $438=$input_chunk;
      var $439=(($438)|(0))==0;
      if ($439) { label = 138; break; } else { label = 139; break; }
    case 138: 
      label = 166; break;
    case 139: 
      var $442=$input_chunk;
      var $443=(($442+4)|0);
      var $444=HEAP32[(($443)>>2)];
      var $445=(($444+84)|0);
      var $446=HEAP32[(($445)>>2)];
      var $447=$446 & 134217728;
      var $448=(($447)|(0))!=0;
      if ($448) { label = 146; break; } else { label = 140; break; }
    case 140: 
      var $450=HEAP32[((_PyExc_TypeError)>>2)];
      var $451=$input_chunk;
      var $452=(($451+4)|0);
      var $453=HEAP32[(($452)>>2)];
      var $454=(($453+12)|0);
      var $455=HEAP32[(($454)>>2)];
      var $456=_PyErr_Format($450, ((__str74)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$455,tempInt));
      label = 141; break;
    case 141: 
      var $458=$input_chunk;
      var $459=(($458)|0);
      var $460=HEAP32[(($459)>>2)];
      var $461=((($460)-(1))|0);
      HEAP32[(($459)>>2)]=$461;
      var $462=(($461)|(0))!=0;
      if ($462) { label = 142; break; } else { label = 143; break; }
    case 142: 
      label = 144; break;
    case 143: 
      var $465=$input_chunk;
      var $466=(($465+4)|0);
      var $467=HEAP32[(($466)>>2)];
      var $468=(($467+24)|0);
      var $469=HEAP32[(($468)>>2)];
      var $470=$input_chunk;
      FUNCTION_TABLE[$469]($470);
      label = 144; break;
    case 144: 
      label = 145; break;
    case 145: 
      label = 166; break;
    case 146: 
      var $474=(($cookie+4)|0);
      var $475=HEAP32[(($474)>>2)];
      var $476=$input_chunk;
      var $477=__Py_BuildValue_SizeT(((__str75)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$475,HEAP32[(((tempInt)+(4))>>2)]=$476,tempInt));
      var $478=$2;
      var $479=(($478+80)|0);
      HEAP32[(($479)>>2)]=$477;
      var $480=$2;
      var $481=(($480+80)|0);
      var $482=HEAP32[(($481)>>2)];
      var $483=(($482)|(0))==0;
      if ($483) { label = 147; break; } else { label = 153; break; }
    case 147: 
      label = 148; break;
    case 148: 
      var $486=$input_chunk;
      var $487=(($486)|0);
      var $488=HEAP32[(($487)>>2)];
      var $489=((($488)-(1))|0);
      HEAP32[(($487)>>2)]=$489;
      var $490=(($489)|(0))!=0;
      if ($490) { label = 149; break; } else { label = 150; break; }
    case 149: 
      label = 151; break;
    case 150: 
      var $493=$input_chunk;
      var $494=(($493+4)|0);
      var $495=HEAP32[(($494)>>2)];
      var $496=(($495+24)|0);
      var $497=HEAP32[(($496)>>2)];
      var $498=$input_chunk;
      FUNCTION_TABLE[$497]($498);
      label = 151; break;
    case 151: 
      label = 152; break;
    case 152: 
      label = 166; break;
    case 153: 
      var $502=$2;
      var $503=(($502+32)|0);
      var $504=HEAP32[(($503)>>2)];
      var $505=$input_chunk;
      var $506=(($cookie+16)|0);
      var $507=HEAP8[($506)];
      var $508=(($507 << 24) >> 24);
      var $509=__PyObject_CallMethod_SizeT($504, ((__str57480)|0), ((__str20443)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$505,HEAP32[(((tempInt)+(4))>>2)]=$508,tempInt));
      $decoded=$509;
      var $510=$decoded;
      var $511=_check_decoded($510);
      var $512=(($511)|(0)) < 0;
      if ($512) { label = 154; break; } else { label = 155; break; }
    case 154: 
      label = 166; break;
    case 155: 
      var $515=$2;
      var $516=$decoded;
      _textiowrapper_set_decoded_chars($515, $516);
      var $517=$2;
      var $518=(($517+64)|0);
      var $519=HEAP32[(($518)>>2)];
      var $520=_PyUnicodeUCS2_GetSize($519);
      var $521=(($cookie+12)|0);
      var $522=HEAP32[(($521)>>2)];
      var $523=(($520)|(0)) < (($522)|(0));
      if ($523) { label = 156; break; } else { label = 157; break; }
    case 156: 
      var $525=HEAP32[((_PyExc_IOError)>>2)];
      _PyErr_SetString($525, ((__str76)|0));
      label = 166; break;
    case 157: 
      var $527=(($cookie+12)|0);
      var $528=HEAP32[(($527)>>2)];
      var $529=$2;
      var $530=(($529+68)|0);
      HEAP32[(($530)>>2)]=$528;
      label = 161; break;
    case 158: 
      var $532=(($cookie+4)|0);
      var $533=HEAP32[(($532)>>2)];
      var $534=__Py_BuildValue_SizeT(((__str77)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$533,HEAP32[(((tempInt)+(4))>>2)]=((__str61484)|0),tempInt));
      var $535=$2;
      var $536=(($535+80)|0);
      HEAP32[(($536)>>2)]=$534;
      var $537=$2;
      var $538=(($537+80)|0);
      var $539=HEAP32[(($538)>>2)];
      var $540=(($539)|(0))==0;
      if ($540) { label = 159; break; } else { label = 160; break; }
    case 159: 
      label = 166; break;
    case 160: 
      label = 161; break;
    case 161: 
      var $544=$2;
      var $545=(($544+28)|0);
      var $546=HEAP32[(($545)>>2)];
      var $547=(($546)|(0))!=0;
      if ($547) { label = 162; break; } else { label = 165; break; }
    case 162: 
      var $549=$2;
      var $550=__textiowrapper_encoder_setstate($549, $cookie);
      var $551=(($550)|(0)) < 0;
      if ($551) { label = 163; break; } else { label = 164; break; }
    case 163: 
      label = 166; break;
    case 164: 
      label = 165; break;
    case 165: 
      var $555=HEAP32[(($cookieObj)>>2)];
      $1=$555;
      label = 177; break;
    case 166: 
      label = 167; break;
    case 167: 
      var $558=HEAP32[(($cookieObj)>>2)];
      var $559=(($558)|(0))==0;
      if ($559) { label = 168; break; } else { label = 169; break; }
    case 168: 
      label = 175; break;
    case 169: 
      label = 170; break;
    case 170: 
      var $563=HEAP32[(($cookieObj)>>2)];
      var $564=(($563)|0);
      var $565=HEAP32[(($564)>>2)];
      var $566=((($565)-(1))|0);
      HEAP32[(($564)>>2)]=$566;
      var $567=(($566)|(0))!=0;
      if ($567) { label = 171; break; } else { label = 172; break; }
    case 171: 
      label = 173; break;
    case 172: 
      var $570=HEAP32[(($cookieObj)>>2)];
      var $571=(($570+4)|0);
      var $572=HEAP32[(($571)>>2)];
      var $573=(($572+24)|0);
      var $574=HEAP32[(($573)>>2)];
      var $575=HEAP32[(($cookieObj)>>2)];
      FUNCTION_TABLE[$574]($575);
      label = 173; break;
    case 173: 
      label = 174; break;
    case 174: 
      label = 175; break;
    case 175: 
      label = 176; break;
    case 176: 
      $1=0;
      label = 177; break;
    case 177: 
      var $581=$1;
      STACKTOP = __stackBase__;
      return $581;
    default: assert(0, "bad label: " + label);
  }
}
function _textiowrapper_tell($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $res;
      var $posobj;
      var $cookie=__stackBase__;
      var $next_input=(__stackBase__)+(20);
      var $chars_to_skip;
      var $chars_decoded;
      var $saved_state;
      var $input;
      var $input_end;
      var $r;
      var $_res;
      var $state;
      var $dec_buffer=(__stackBase__)+(24);
      var $dec_buffer_len=(__stackBase__)+(28);
      var $dec_flags=(__stackBase__)+(32);
      var $decoded;
      var $decoded1;
      var $type=(__stackBase__)+(36);
      var $value=(__stackBase__)+(40);
      var $traceback=(__stackBase__)+(44);
      $2=$self;
      $3=$args;
      $posobj=0;
      var $4=$cookie;
      assert(20 % 1 === 0);HEAP32[(($4)>>2)]=HEAP32[((_textiowrapper_tell_cookie)>>2)];HEAP32[((($4)+(4))>>2)]=HEAP32[(((_textiowrapper_tell_cookie)+(4))>>2)];HEAP32[((($4)+(8))>>2)]=HEAP32[(((_textiowrapper_tell_cookie)+(8))>>2)];HEAP32[((($4)+(12))>>2)]=HEAP32[(((_textiowrapper_tell_cookie)+(12))>>2)];HEAP32[((($4)+(16))>>2)]=HEAP32[(((_textiowrapper_tell_cookie)+(16))>>2)];
      $saved_state=0;
      var $5=$2;
      var $6=(($5+8)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|(0)) <= 0;
      if ($8) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $10=$2;
      var $11=(($10+12)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12)|(0))!=0;
      if ($13) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $15=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($15, ((__str36459)|0));
      label = 5; break;
    case 4: 
      var $17=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($17, ((__str37460)|0));
      label = 5; break;
    case 5: 
      $1=0;
      label = 155; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $21=$2;
      var $22=$21;
      var $23=(($22+4)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24)|(0))==((_PyTextIOWrapper_Type)|(0));
      if ($25) { label = 8; break; } else { label = 23; break; }
    case 8: 
      var $27=$2;
      var $28=(($27+84)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29)|(0))!=0;
      if ($30) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $32=$2;
      var $33=(($32+84)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=__PyFileIO_closed($34);
      $r=$35;
      label = 20; break;
    case 10: 
      var $37=$2;
      var $38=_textiowrapper_closed_get($37, 0);
      $_res=$38;
      var $39=$_res;
      var $40=(($39)|(0))==0;
      if ($40) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $1=0;
      label = 155; break;
    case 12: 
      var $43=$_res;
      var $44=_PyObject_IsTrue($43);
      $r=$44;
      label = 13; break;
    case 13: 
      var $46=$_res;
      var $47=(($46)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=((($48)-(1))|0);
      HEAP32[(($47)>>2)]=$49;
      var $50=(($49)|(0))!=0;
      if ($50) { label = 14; break; } else { label = 15; break; }
    case 14: 
      label = 16; break;
    case 15: 
      var $53=$_res;
      var $54=(($53+4)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=(($55+24)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=$_res;
      FUNCTION_TABLE[$57]($58);
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $61=$r;
      var $62=(($61)|(0)) < 0;
      if ($62) { label = 18; break; } else { label = 19; break; }
    case 18: 
      $1=0;
      label = 155; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $66=$r;
      var $67=(($66)|(0)) > 0;
      if ($67) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $69=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($69, ((__str51474)|0));
      $1=0;
      label = 155; break;
    case 22: 
      label = 26; break;
    case 23: 
      var $72=$2;
      var $73=$72;
      var $74=__PyIOBase_check_closed($73, __Py_TrueStruct);
      var $75=(($74)|(0))==0;
      if ($75) { label = 24; break; } else { label = 25; break; }
    case 24: 
      $1=0;
      label = 155; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $80=$2;
      var $81=(($80+52)|0);
      var $82=HEAP8[($81)];
      var $83=(($82 << 24) >> 24)!=0;
      if ($83) { label = 29; break; } else { label = 28; break; }
    case 28: 
      var $85=HEAP32[((_PyExc_IOError)>>2)];
      _PyErr_SetString($85, ((__str52475)|0));
      label = 130; break;
    case 29: 
      var $87=$2;
      var $88=(($87+53)|0);
      var $89=HEAP8[($88)];
      var $90=(($89 << 24) >> 24)!=0;
      if ($90) { label = 31; break; } else { label = 30; break; }
    case 30: 
      var $92=HEAP32[((_PyExc_IOError)>>2)];
      _PyErr_SetString($92, ((__str53476)|0));
      label = 130; break;
    case 31: 
      var $94=$2;
      var $95=__textiowrapper_writeflush($94);
      var $96=(($95)|(0)) < 0;
      if ($96) { label = 32; break; } else { label = 33; break; }
    case 32: 
      $1=0;
      label = 155; break;
    case 33: 
      var $99=$2;
      var $100=$99;
      var $101=__PyObject_CallMethod_SizeT($100, ((__str43466)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $res=$101;
      var $102=$res;
      var $103=(($102)|(0))==0;
      if ($103) { label = 34; break; } else { label = 35; break; }
    case 34: 
      label = 130; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $107=$res;
      var $108=(($107)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=((($109)-(1))|0);
      HEAP32[(($108)>>2)]=$110;
      var $111=(($110)|(0))!=0;
      if ($111) { label = 37; break; } else { label = 38; break; }
    case 37: 
      label = 39; break;
    case 38: 
      var $114=$res;
      var $115=(($114+4)|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=(($116+24)|0);
      var $118=HEAP32[(($117)>>2)];
      var $119=$res;
      FUNCTION_TABLE[$118]($119);
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      var $122=$2;
      var $123=(($122+20)|0);
      var $124=HEAP32[(($123)>>2)];
      var $125=__PyObject_CallMethod_SizeT($124, ((__str48471)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $posobj=$125;
      var $126=$posobj;
      var $127=(($126)|(0))==0;
      if ($127) { label = 41; break; } else { label = 42; break; }
    case 41: 
      label = 130; break;
    case 42: 
      var $130=$2;
      var $131=(($130+32)|0);
      var $132=HEAP32[(($131)>>2)];
      var $133=(($132)|(0))==0;
      if ($133) { label = 44; break; } else { label = 43; break; }
    case 43: 
      var $135=$2;
      var $136=(($135+80)|0);
      var $137=HEAP32[(($136)>>2)];
      var $138=(($137)|(0))==0;
      if ($138) { label = 44; break; } else { label = 49; break; }
    case 44: 
      var $140=$2;
      var $141=(($140+64)|0);
      var $142=HEAP32[(($141)>>2)];
      var $143=(($142)|(0))==0;
      if ($143) { label = 46; break; } else { label = 45; break; }
    case 45: 
      var $145=$2;
      var $146=(($145+64)|0);
      var $147=HEAP32[(($146)>>2)];
      var $148=_PyUnicodeUCS2_GetSize($147);
      var $149=(($148)|(0))==0;
      if ($149) { label = 46; break; } else { label = 47; break; }
    case 46: 
      label = 48; break;
    case 47: 
      ___assert_func(((__str2421)|0), 2218, ((___func___textiowrapper_tell)|0), ((__str54477)|0));
      throw "Reached an unreachable!";
      label = 48; break;
    case 48: 
      var $154=$posobj;
      $1=$154;
      label = 155; break;
    case 49: 
      var $156=$posobj;
      var $157=_PyLong_AsLong($156);
      var $158=(($cookie)|0);
      HEAP32[(($158)>>2)]=$157;
      var $159=_PyErr_Occurred();
      var $160=(($159)|(0))!=0;
      if ($160) { label = 50; break; } else { label = 51; break; }
    case 50: 
      label = 130; break;
    case 51: 
      var $163=$2;
      var $164=(($163+80)|0);
      var $165=HEAP32[(($164)>>2)];
      var $166=(($cookie+4)|0);
      var $167=__PyArg_Parse_SizeT($165, ((__str55478)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$166,HEAP32[(((tempInt)+(4))>>2)]=$next_input,tempInt));
      var $168=(($167)|(0))!=0;
      if ($168) { label = 53; break; } else { label = 52; break; }
    case 52: 
      label = 130; break;
    case 53: 
      var $171=HEAP32[(($next_input)>>2)];
      var $172=(($171+4)|0);
      var $173=HEAP32[(($172)>>2)];
      var $174=(($173+84)|0);
      var $175=HEAP32[(($174)>>2)];
      var $176=$175 & 134217728;
      var $177=(($176)|(0))!=0;
      if ($177) { label = 54; break; } else { label = 55; break; }
    case 54: 
      label = 56; break;
    case 55: 
      ___assert_func(((__str2421)|0), 2234, ((___func___textiowrapper_tell)|0), ((__str56479)|0));
      throw "Reached an unreachable!";
      label = 56; break;
    case 56: 
      var $182=HEAP32[(($next_input)>>2)];
      var $183=$182;
      var $184=(($183+8)|0);
      var $185=HEAP32[(($184)>>2)];
      var $186=(($cookie)|0);
      var $187=HEAP32[(($186)>>2)];
      var $188=((($187)-($185))|0);
      HEAP32[(($186)>>2)]=$188;
      var $189=$2;
      var $190=(($189+68)|0);
      var $191=HEAP32[(($190)>>2)];
      var $192=(($191)|(0))==0;
      if ($192) { label = 57; break; } else { label = 63; break; }
    case 57: 
      label = 58; break;
    case 58: 
      var $195=$posobj;
      var $196=(($195)|0);
      var $197=HEAP32[(($196)>>2)];
      var $198=((($197)-(1))|0);
      HEAP32[(($196)>>2)]=$198;
      var $199=(($198)|(0))!=0;
      if ($199) { label = 59; break; } else { label = 60; break; }
    case 59: 
      label = 61; break;
    case 60: 
      var $202=$posobj;
      var $203=(($202+4)|0);
      var $204=HEAP32[(($203)>>2)];
      var $205=(($204+24)|0);
      var $206=HEAP32[(($205)>>2)];
      var $207=$posobj;
      FUNCTION_TABLE[$206]($207);
      label = 61; break;
    case 61: 
      label = 62; break;
    case 62: 
      var $210=_textiowrapper_build_cookie($cookie);
      $1=$210;
      label = 155; break;
    case 63: 
      var $212=$2;
      var $213=(($212+68)|0);
      var $214=HEAP32[(($213)>>2)];
      $chars_to_skip=$214;
      var $215=$2;
      var $216=(($215+32)|0);
      var $217=HEAP32[(($216)>>2)];
      var $218=HEAP32[((__PyIO_str_getstate)>>2)];
      var $219=_PyObject_CallMethodObjArgs($217, $218, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $saved_state=$219;
      var $220=$saved_state;
      var $221=(($220)|(0))==0;
      if ($221) { label = 64; break; } else { label = 65; break; }
    case 64: 
      label = 130; break;
    case 65: 
      var $224=$2;
      var $225=__textiowrapper_decoder_setstate($224, $cookie);
      var $226=(($225)|(0)) < 0;
      if ($226) { label = 66; break; } else { label = 67; break; }
    case 66: 
      label = 130; break;
    case 67: 
      $chars_decoded=0;
      var $229=HEAP32[(($next_input)>>2)];
      var $230=$229;
      var $231=(($230+20)|0);
      var $232=(($231)|0);
      $input=$232;
      var $233=$input;
      var $234=HEAP32[(($next_input)>>2)];
      var $235=$234;
      var $236=(($235+8)|0);
      var $237=HEAP32[(($236)>>2)];
      var $238=(($233+$237)|0);
      $input_end=$238;
      label = 68; break;
    case 68: 
      var $240=$input;
      var $241=$input_end;
      var $242=(($240)>>>(0)) < (($241)>>>(0));
      if ($242) { label = 69; break; } else { label = 96; break; }
    case 69: 
      var $244=$2;
      var $245=(($244+32)|0);
      var $246=HEAP32[(($245)>>2)];
      var $247=$input;
      var $248=__PyObject_CallMethod_SizeT($246, ((__str57480)|0), ((__str58481)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$247,HEAP32[(((tempInt)+(4))>>2)]=1,tempInt));
      $decoded=$248;
      var $249=$decoded;
      var $250=_check_decoded($249);
      var $251=(($250)|(0)) < 0;
      if ($251) { label = 70; break; } else { label = 71; break; }
    case 70: 
      label = 130; break;
    case 71: 
      var $254=$decoded;
      var $255=$254;
      var $256=(($255+8)|0);
      var $257=HEAP32[(($256)>>2)];
      var $258=$chars_decoded;
      var $259=((($258)+($257))|0);
      $chars_decoded=$259;
      label = 72; break;
    case 72: 
      var $261=$decoded;
      var $262=(($261)|0);
      var $263=HEAP32[(($262)>>2)];
      var $264=((($263)-(1))|0);
      HEAP32[(($262)>>2)]=$264;
      var $265=(($264)|(0))!=0;
      if ($265) { label = 73; break; } else { label = 74; break; }
    case 73: 
      label = 75; break;
    case 74: 
      var $268=$decoded;
      var $269=(($268+4)|0);
      var $270=HEAP32[(($269)>>2)];
      var $271=(($270+24)|0);
      var $272=HEAP32[(($271)>>2)];
      var $273=$decoded;
      FUNCTION_TABLE[$272]($273);
      label = 75; break;
    case 75: 
      label = 76; break;
    case 76: 
      var $276=(($cookie+8)|0);
      var $277=HEAP32[(($276)>>2)];
      var $278=((($277)+(1))|0);
      HEAP32[(($276)>>2)]=$278;
      var $279=$2;
      var $280=(($279+32)|0);
      var $281=HEAP32[(($280)>>2)];
      var $282=HEAP32[((__PyIO_str_getstate)>>2)];
      var $283=_PyObject_CallMethodObjArgs($281, $282, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $state=$283;
      var $284=$state;
      var $285=(($284)|(0))==0;
      if ($285) { label = 77; break; } else { label = 78; break; }
    case 77: 
      label = 130; break;
    case 78: 
      var $288=$state;
      var $289=__PyArg_Parse_SizeT($288, ((__str59482)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$dec_buffer,HEAP32[(((tempInt)+(4))>>2)]=$dec_buffer_len,HEAP32[(((tempInt)+(8))>>2)]=$dec_flags,tempInt));
      var $290=(($289)|(0))!=0;
      if ($290) { label = 85; break; } else { label = 79; break; }
    case 79: 
      label = 80; break;
    case 80: 
      var $293=$state;
      var $294=(($293)|0);
      var $295=HEAP32[(($294)>>2)];
      var $296=((($295)-(1))|0);
      HEAP32[(($294)>>2)]=$296;
      var $297=(($296)|(0))!=0;
      if ($297) { label = 81; break; } else { label = 82; break; }
    case 81: 
      label = 83; break;
    case 82: 
      var $300=$state;
      var $301=(($300+4)|0);
      var $302=HEAP32[(($301)>>2)];
      var $303=(($302+24)|0);
      var $304=HEAP32[(($303)>>2)];
      var $305=$state;
      FUNCTION_TABLE[$304]($305);
      label = 83; break;
    case 83: 
      label = 84; break;
    case 84: 
      label = 130; break;
    case 85: 
      label = 86; break;
    case 86: 
      var $310=$state;
      var $311=(($310)|0);
      var $312=HEAP32[(($311)>>2)];
      var $313=((($312)-(1))|0);
      HEAP32[(($311)>>2)]=$313;
      var $314=(($313)|(0))!=0;
      if ($314) { label = 87; break; } else { label = 88; break; }
    case 87: 
      label = 89; break;
    case 88: 
      var $317=$state;
      var $318=(($317+4)|0);
      var $319=HEAP32[(($318)>>2)];
      var $320=(($319+24)|0);
      var $321=HEAP32[(($320)>>2)];
      var $322=$state;
      FUNCTION_TABLE[$321]($322);
      label = 89; break;
    case 89: 
      label = 90; break;
    case 90: 
      var $325=HEAP32[(($dec_buffer_len)>>2)];
      var $326=(($325)|(0))==0;
      if ($326) { label = 91; break; } else { label = 93; break; }
    case 91: 
      var $328=$chars_decoded;
      var $329=$chars_to_skip;
      var $330=(($328)|(0)) <= (($329)|(0));
      if ($330) { label = 92; break; } else { label = 93; break; }
    case 92: 
      var $332=(($cookie+8)|0);
      var $333=HEAP32[(($332)>>2)];
      var $334=(($cookie)|0);
      var $335=HEAP32[(($334)>>2)];
      var $336=((($335)+($333))|0);
      HEAP32[(($334)>>2)]=$336;
      var $337=$chars_decoded;
      var $338=$chars_to_skip;
      var $339=((($338)-($337))|0);
      $chars_to_skip=$339;
      var $340=HEAP32[(($dec_flags)>>2)];
      var $341=(($cookie+4)|0);
      HEAP32[(($341)>>2)]=$340;
      var $342=(($cookie+8)|0);
      HEAP32[(($342)>>2)]=0;
      $chars_decoded=0;
      label = 93; break;
    case 93: 
      var $344=$chars_decoded;
      var $345=$chars_to_skip;
      var $346=(($344)|(0)) >= (($345)|(0));
      if ($346) { label = 94; break; } else { label = 95; break; }
    case 94: 
      label = 96; break;
    case 95: 
      var $349=$input;
      var $350=(($349+1)|0);
      $input=$350;
      label = 68; break;
    case 96: 
      var $352=$input;
      var $353=$input_end;
      var $354=(($352)|(0))==(($353)|(0));
      if ($354) { label = 97; break; } else { label = 107; break; }
    case 97: 
      var $356=$2;
      var $357=(($356+32)|0);
      var $358=HEAP32[(($357)>>2)];
      var $359=__PyObject_CallMethod_SizeT($358, ((__str57480)|0), ((__str60483)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=((__str61484)|0),HEAP32[(((tempInt)+(4))>>2)]=1,tempInt));
      $decoded1=$359;
      var $360=$decoded1;
      var $361=_check_decoded($360);
      var $362=(($361)|(0)) < 0;
      if ($362) { label = 98; break; } else { label = 99; break; }
    case 98: 
      label = 130; break;
    case 99: 
      var $365=$decoded1;
      var $366=$365;
      var $367=(($366+8)|0);
      var $368=HEAP32[(($367)>>2)];
      var $369=$chars_decoded;
      var $370=((($369)+($368))|0);
      $chars_decoded=$370;
      label = 100; break;
    case 100: 
      var $372=$decoded1;
      var $373=(($372)|0);
      var $374=HEAP32[(($373)>>2)];
      var $375=((($374)-(1))|0);
      HEAP32[(($373)>>2)]=$375;
      var $376=(($375)|(0))!=0;
      if ($376) { label = 101; break; } else { label = 102; break; }
    case 101: 
      label = 103; break;
    case 102: 
      var $379=$decoded1;
      var $380=(($379+4)|0);
      var $381=HEAP32[(($380)>>2)];
      var $382=(($381+24)|0);
      var $383=HEAP32[(($382)>>2)];
      var $384=$decoded1;
      FUNCTION_TABLE[$383]($384);
      label = 103; break;
    case 103: 
      label = 104; break;
    case 104: 
      var $387=(($cookie+16)|0);
      HEAP8[($387)]=1;
      var $388=$chars_decoded;
      var $389=$chars_to_skip;
      var $390=(($388)|(0)) < (($389)|(0));
      if ($390) { label = 105; break; } else { label = 106; break; }
    case 105: 
      var $392=HEAP32[((_PyExc_IOError)>>2)];
      _PyErr_SetString($392, ((__str62485)|0));
      label = 130; break;
    case 106: 
      label = 107; break;
    case 107: 
      label = 108; break;
    case 108: 
      var $396=$posobj;
      var $397=(($396)|(0))==0;
      if ($397) { label = 109; break; } else { label = 110; break; }
    case 109: 
      label = 116; break;
    case 110: 
      label = 111; break;
    case 111: 
      var $401=$posobj;
      var $402=(($401)|0);
      var $403=HEAP32[(($402)>>2)];
      var $404=((($403)-(1))|0);
      HEAP32[(($402)>>2)]=$404;
      var $405=(($404)|(0))!=0;
      if ($405) { label = 112; break; } else { label = 113; break; }
    case 112: 
      label = 114; break;
    case 113: 
      var $408=$posobj;
      var $409=(($408+4)|0);
      var $410=HEAP32[(($409)>>2)];
      var $411=(($410+24)|0);
      var $412=HEAP32[(($411)>>2)];
      var $413=$posobj;
      FUNCTION_TABLE[$412]($413);
      label = 114; break;
    case 114: 
      label = 115; break;
    case 115: 
      label = 116; break;
    case 116: 
      label = 117; break;
    case 117: 
      var $418=$2;
      var $419=(($418+32)|0);
      var $420=HEAP32[(($419)>>2)];
      var $421=$saved_state;
      var $422=__PyObject_CallMethod_SizeT($420, ((__str63486)|0), ((__str64487)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$421,tempInt));
      $res=$422;
      label = 118; break;
    case 118: 
      var $424=$saved_state;
      var $425=(($424)|0);
      var $426=HEAP32[(($425)>>2)];
      var $427=((($426)-(1))|0);
      HEAP32[(($425)>>2)]=$427;
      var $428=(($427)|(0))!=0;
      if ($428) { label = 119; break; } else { label = 120; break; }
    case 119: 
      label = 121; break;
    case 120: 
      var $431=$saved_state;
      var $432=(($431+4)|0);
      var $433=HEAP32[(($432)>>2)];
      var $434=(($433+24)|0);
      var $435=HEAP32[(($434)>>2)];
      var $436=$saved_state;
      FUNCTION_TABLE[$435]($436);
      label = 121; break;
    case 121: 
      label = 122; break;
    case 122: 
      var $439=$res;
      var $440=(($439)|(0))==0;
      if ($440) { label = 123; break; } else { label = 124; break; }
    case 123: 
      $1=0;
      label = 155; break;
    case 124: 
      label = 125; break;
    case 125: 
      var $444=$res;
      var $445=(($444)|0);
      var $446=HEAP32[(($445)>>2)];
      var $447=((($446)-(1))|0);
      HEAP32[(($445)>>2)]=$447;
      var $448=(($447)|(0))!=0;
      if ($448) { label = 126; break; } else { label = 127; break; }
    case 126: 
      label = 128; break;
    case 127: 
      var $451=$res;
      var $452=(($451+4)|0);
      var $453=HEAP32[(($452)>>2)];
      var $454=(($453+24)|0);
      var $455=HEAP32[(($454)>>2)];
      var $456=$res;
      FUNCTION_TABLE[$455]($456);
      label = 128; break;
    case 128: 
      label = 129; break;
    case 129: 
      var $459=$chars_to_skip;
      var $460=(($cookie+12)|0);
      HEAP32[(($460)>>2)]=$459;
      var $461=_textiowrapper_build_cookie($cookie);
      $1=$461;
      label = 155; break;
    case 130: 
      label = 131; break;
    case 131: 
      var $464=$posobj;
      var $465=(($464)|(0))==0;
      if ($465) { label = 132; break; } else { label = 133; break; }
    case 132: 
      label = 139; break;
    case 133: 
      label = 134; break;
    case 134: 
      var $469=$posobj;
      var $470=(($469)|0);
      var $471=HEAP32[(($470)>>2)];
      var $472=((($471)-(1))|0);
      HEAP32[(($470)>>2)]=$472;
      var $473=(($472)|(0))!=0;
      if ($473) { label = 135; break; } else { label = 136; break; }
    case 135: 
      label = 137; break;
    case 136: 
      var $476=$posobj;
      var $477=(($476+4)|0);
      var $478=HEAP32[(($477)>>2)];
      var $479=(($478+24)|0);
      var $480=HEAP32[(($479)>>2)];
      var $481=$posobj;
      FUNCTION_TABLE[$480]($481);
      label = 137; break;
    case 137: 
      label = 138; break;
    case 138: 
      label = 139; break;
    case 139: 
      label = 140; break;
    case 140: 
      var $486=$saved_state;
      var $487=(($486)|(0))!=0;
      if ($487) { label = 141; break; } else { label = 154; break; }
    case 141: 
      _PyErr_Fetch($type, $value, $traceback);
      var $489=$2;
      var $490=(($489+32)|0);
      var $491=HEAP32[(($490)>>2)];
      var $492=$saved_state;
      var $493=__PyObject_CallMethod_SizeT($491, ((__str63486)|0), ((__str64487)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$492,tempInt));
      $res=$493;
      label = 142; break;
    case 142: 
      var $495=$saved_state;
      var $496=(($495)|0);
      var $497=HEAP32[(($496)>>2)];
      var $498=((($497)-(1))|0);
      HEAP32[(($496)>>2)]=$498;
      var $499=(($498)|(0))!=0;
      if ($499) { label = 143; break; } else { label = 144; break; }
    case 143: 
      label = 145; break;
    case 144: 
      var $502=$saved_state;
      var $503=(($502+4)|0);
      var $504=HEAP32[(($503)>>2)];
      var $505=(($504+24)|0);
      var $506=HEAP32[(($505)>>2)];
      var $507=$saved_state;
      FUNCTION_TABLE[$506]($507);
      label = 145; break;
    case 145: 
      label = 146; break;
    case 146: 
      var $510=$res;
      var $511=(($510)|(0))==0;
      if ($511) { label = 147; break; } else { label = 148; break; }
    case 147: 
      $1=0;
      label = 155; break;
    case 148: 
      label = 149; break;
    case 149: 
      var $515=$res;
      var $516=(($515)|0);
      var $517=HEAP32[(($516)>>2)];
      var $518=((($517)-(1))|0);
      HEAP32[(($516)>>2)]=$518;
      var $519=(($518)|(0))!=0;
      if ($519) { label = 150; break; } else { label = 151; break; }
    case 150: 
      label = 152; break;
    case 151: 
      var $522=$res;
      var $523=(($522+4)|0);
      var $524=HEAP32[(($523)>>2)];
      var $525=(($524+24)|0);
      var $526=HEAP32[(($525)>>2)];
      var $527=$res;
      FUNCTION_TABLE[$526]($527);
      label = 152; break;
    case 152: 
      label = 153; break;
    case 153: 
      var $530=HEAP32[(($type)>>2)];
      var $531=HEAP32[(($value)>>2)];
      var $532=HEAP32[(($traceback)>>2)];
      _PyErr_Restore($530, $531, $532);
      label = 154; break;
    case 154: 
      $1=0;
      label = 155; break;
    case 155: 
      var $535=$1;
      STACKTOP = __stackBase__;
      return $535;
    default: assert(0, "bad label: " + label);
  }
}
function _textiowrapper_truncate($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $pos=__stackBase__;
      var $res;
      $2=$self;
      $3=$args;
      HEAP32[(($pos)>>2)]=__Py_NoneStruct;
      var $4=$2;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0)) <= 0;
      if ($7) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $9=$2;
      var $10=(($9+12)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($14, ((__str36459)|0));
      label = 5; break;
    case 4: 
      var $16=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($16, ((__str37460)|0));
      label = 5; break;
    case 5: 
      $1=0;
      label = 16; break;
    case 6: 
      var $19=$3;
      var $20=__PyArg_ParseTuple_SizeT($19, ((__str50473)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$pos,tempInt));
      var $21=(($20)|(0))!=0;
      if ($21) { label = 8; break; } else { label = 7; break; }
    case 7: 
      $1=0;
      label = 16; break;
    case 8: 
      var $24=$2;
      var $25=$24;
      var $26=HEAP32[((__PyIO_str_flush)>>2)];
      var $27=_PyObject_CallMethodObjArgs($25, $26, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $res=$27;
      var $28=$res;
      var $29=(($28)|(0))==0;
      if ($29) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $1=0;
      label = 16; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $33=$res;
      var $34=(($33)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=((($35)-(1))|0);
      HEAP32[(($34)>>2)]=$36;
      var $37=(($36)|(0))!=0;
      if ($37) { label = 12; break; } else { label = 13; break; }
    case 12: 
      label = 14; break;
    case 13: 
      var $40=$res;
      var $41=(($40+4)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($42+24)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=$res;
      FUNCTION_TABLE[$44]($45);
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $48=$2;
      var $49=(($48+20)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=HEAP32[((__PyIO_str_truncate)>>2)];
      var $52=HEAP32[(($pos)>>2)];
      var $53=_PyObject_CallMethodObjArgs($50, $51, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$52,HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
      $1=$53;
      label = 16; break;
    case 16: 
      var $55=$1;
      STACKTOP = __stackBase__;
      return $55;
    default: assert(0, "bad label: " + label);
  }
}
function __textiowrapper_writeflush($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $pending;
      var $b;
      var $ret;
      var $_py_tmp;
      $2=$self;
      var $3=$2;
      var $4=(($3+72)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))==0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 37; break;
    case 3: 
      var $9=$2;
      var $10=(($9+72)|0);
      var $11=HEAP32[(($10)>>2)];
      $pending=$11;
      var $12=$pending;
      var $13=(($12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=((($14)+(1))|0);
      HEAP32[(($13)>>2)]=$15;
      var $16=$2;
      var $17=(($16+76)|0);
      HEAP32[(($17)>>2)]=0;
      label = 4; break;
    case 4: 
      var $19=$2;
      var $20=(($19+72)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21)|(0))!=0;
      if ($22) { label = 5; break; } else { label = 11; break; }
    case 5: 
      var $24=$2;
      var $25=(($24+72)|0);
      var $26=HEAP32[(($25)>>2)];
      $_py_tmp=$26;
      var $27=$2;
      var $28=(($27+72)|0);
      HEAP32[(($28)>>2)]=0;
      label = 6; break;
    case 6: 
      var $30=$_py_tmp;
      var $31=(($30)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=((($32)-(1))|0);
      HEAP32[(($31)>>2)]=$33;
      var $34=(($33)|(0))!=0;
      if ($34) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 9; break;
    case 8: 
      var $37=$_py_tmp;
      var $38=(($37+4)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39+24)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=$_py_tmp;
      FUNCTION_TABLE[$41]($42);
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $47=HEAP32[((__PyIO_empty_bytes)>>2)];
      var $48=$pending;
      var $49=__PyString_Join($47, $48);
      $b=$49;
      label = 13; break;
    case 13: 
      var $51=$pending;
      var $52=(($51)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=((($53)-(1))|0);
      HEAP32[(($52)>>2)]=$54;
      var $55=(($54)|(0))!=0;
      if ($55) { label = 14; break; } else { label = 15; break; }
    case 14: 
      label = 16; break;
    case 15: 
      var $58=$pending;
      var $59=(($58+4)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=(($60+24)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=$pending;
      FUNCTION_TABLE[$62]($63);
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $66=$b;
      var $67=(($66)|(0))==0;
      if ($67) { label = 18; break; } else { label = 19; break; }
    case 18: 
      $1=-1;
      label = 37; break;
    case 19: 
      $ret=0;
      label = 20; break;
    case 20: 
      var $71=$2;
      var $72=(($71+20)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=HEAP32[((__PyIO_str_write)>>2)];
      var $75=$b;
      var $76=_PyObject_CallMethodObjArgs($73, $74, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$75,HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
      $ret=$76;
      label = 21; break;
    case 21: 
      var $78=$ret;
      var $79=(($78)|(0))==0;
      if ($79) { label = 22; break; } else { var $84 = 0;label = 23; break; }
    case 22: 
      var $81=__PyIO_trap_eintr();
      var $82=(($81)|(0))!=0;
      var $84 = $82;label = 23; break;
    case 23: 
      var $84;
      if ($84) { label = 20; break; } else { label = 24; break; }
    case 24: 
      label = 25; break;
    case 25: 
      var $87=$b;
      var $88=(($87)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=((($89)-(1))|0);
      HEAP32[(($88)>>2)]=$90;
      var $91=(($90)|(0))!=0;
      if ($91) { label = 26; break; } else { label = 27; break; }
    case 26: 
      label = 28; break;
    case 27: 
      var $94=$b;
      var $95=(($94+4)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=(($96+24)|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=$b;
      FUNCTION_TABLE[$98]($99);
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $102=$ret;
      var $103=(($102)|(0))==0;
      if ($103) { label = 30; break; } else { label = 31; break; }
    case 30: 
      $1=-1;
      label = 37; break;
    case 31: 
      label = 32; break;
    case 32: 
      var $107=$ret;
      var $108=(($107)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=((($109)-(1))|0);
      HEAP32[(($108)>>2)]=$110;
      var $111=(($110)|(0))!=0;
      if ($111) { label = 33; break; } else { label = 34; break; }
    case 33: 
      label = 35; break;
    case 34: 
      var $114=$ret;
      var $115=(($114+4)|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=(($116+24)|0);
      var $118=HEAP32[(($117)>>2)];
      var $119=$ret;
      FUNCTION_TABLE[$118]($119);
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      $1=0;
      label = 37; break;
    case 37: 
      var $123=$1;
      STACKTOP = __stackBase__;
      return $123;
    default: assert(0, "bad label: " + label);
  }
}
function _textiowrapper_build_cookie($cookie) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 20)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $buffer=__stackBase__;
  $1=$cookie;
  var $2=(($buffer)|0);
  var $3=(($2)|0);
  var $4=$1;
  var $5=(($4)|0);
  var $6=$5;
  assert(4 % 1 === 0);HEAP8[($3)]=HEAP8[($6)];HEAP8[((($3)+(1))|0)]=HEAP8[((($6)+(1))|0)];HEAP8[((($3)+(2))|0)]=HEAP8[((($6)+(2))|0)];HEAP8[((($3)+(3))|0)]=HEAP8[((($6)+(3))|0)];
  var $7=(($buffer)|0);
  var $8=(($7+4)|0);
  var $9=$1;
  var $10=(($9+4)|0);
  var $11=$10;
  assert(4 % 1 === 0);HEAP8[($8)]=HEAP8[($11)];HEAP8[((($8)+(1))|0)]=HEAP8[((($11)+(1))|0)];HEAP8[((($8)+(2))|0)]=HEAP8[((($11)+(2))|0)];HEAP8[((($8)+(3))|0)]=HEAP8[((($11)+(3))|0)];
  var $12=(($buffer)|0);
  var $13=(($12+8)|0);
  var $14=$1;
  var $15=(($14+8)|0);
  var $16=$15;
  assert(4 % 1 === 0);HEAP8[($13)]=HEAP8[($16)];HEAP8[((($13)+(1))|0)]=HEAP8[((($16)+(1))|0)];HEAP8[((($13)+(2))|0)]=HEAP8[((($16)+(2))|0)];HEAP8[((($13)+(3))|0)]=HEAP8[((($16)+(3))|0)];
  var $17=(($buffer)|0);
  var $18=(($17+12)|0);
  var $19=$1;
  var $20=(($19+12)|0);
  var $21=$20;
  assert(4 % 1 === 0);HEAP8[($18)]=HEAP8[($21)];HEAP8[((($18)+(1))|0)]=HEAP8[((($21)+(1))|0)];HEAP8[((($18)+(2))|0)]=HEAP8[((($21)+(2))|0)];HEAP8[((($18)+(3))|0)]=HEAP8[((($21)+(3))|0)];
  var $22=(($buffer)|0);
  var $23=(($22+16)|0);
  var $24=$1;
  var $25=(($24+16)|0);
  assert(1 % 1 === 0);HEAP8[($23)]=HEAP8[($25)];
  var $26=(($buffer)|0);
  var $27=__PyLong_FromByteArray($26, 17, 1, 0);
  STACKTOP = __stackBase__;
  return $27;
}
function __textiowrapper_decoder_setstate($self, $cookie) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $res;
      $2=$self;
      $3=$cookie;
      var $4=$3;
      var $5=(($4)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0))==0;
      if ($7) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $9=$3;
      var $10=(($9+4)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))==0;
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14=$2;
      var $15=(($14+32)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=HEAP32[((__PyIO_str_reset)>>2)];
      var $18=_PyObject_CallMethodObjArgs($16, $17, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $res=$18;
      label = 5; break;
    case 4: 
      var $20=$2;
      var $21=(($20+32)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=$3;
      var $24=(($23+4)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=__PyObject_CallMethod_SizeT($22, ((__str63486)|0), ((__str65488)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=((__str61484)|0),HEAP32[(((tempInt)+(4))>>2)]=$25,tempInt));
      $res=$26;
      label = 5; break;
    case 5: 
      var $28=$res;
      var $29=(($28)|(0))==0;
      if ($29) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $1=-1;
      label = 13; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $33=$res;
      var $34=(($33)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=((($35)-(1))|0);
      HEAP32[(($34)>>2)]=$36;
      var $37=(($36)|(0))!=0;
      if ($37) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 11; break;
    case 10: 
      var $40=$res;
      var $41=(($40+4)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($42+24)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=$res;
      FUNCTION_TABLE[$44]($45);
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      $1=0;
      label = 13; break;
    case 13: 
      var $49=$1;
      STACKTOP = __stackBase__;
      return $49;
    default: assert(0, "bad label: " + label);
  }
}
function _textiowrapper_set_decoded_chars($self, $chars) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $_py_tmp;
      $1=$self;
      $2=$chars;
      label = 2; break;
    case 2: 
      var $4=$1;
      var $5=(($4+64)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0))!=0;
      if ($7) { label = 3; break; } else { label = 9; break; }
    case 3: 
      var $9=$1;
      var $10=(($9+64)|0);
      var $11=HEAP32[(($10)>>2)];
      $_py_tmp=$11;
      var $12=$1;
      var $13=(($12+64)|0);
      HEAP32[(($13)>>2)]=0;
      label = 4; break;
    case 4: 
      var $15=$_py_tmp;
      var $16=(($15)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=((($17)-(1))|0);
      HEAP32[(($16)>>2)]=$18;
      var $19=(($18)|(0))!=0;
      if ($19) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 7; break;
    case 6: 
      var $22=$_py_tmp;
      var $23=(($22+4)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24+24)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$_py_tmp;
      FUNCTION_TABLE[$26]($27);
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $32=$2;
      var $33=$1;
      var $34=(($33+64)|0);
      HEAP32[(($34)>>2)]=$32;
      var $35=$1;
      var $36=(($35+68)|0);
      HEAP32[(($36)>>2)]=0;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _textiowrapper_parse_cookie($cookie, $cookieObj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 20)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $buffer=__stackBase__;
      var $cookieLong;
      $2=$cookie;
      $3=$cookieObj;
      var $4=$3;
      var $5=_PyNumber_Long($4);
      var $6=$5;
      $cookieLong=$6;
      var $7=$cookieLong;
      var $8=(($7)|(0))==0;
      if ($8) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=-1;
      label = 16; break;
    case 3: 
      var $11=$cookieLong;
      var $12=(($buffer)|0);
      var $13=__PyLong_AsByteArray($11, $12, 17, 1, 0);
      var $14=(($13)|(0)) < 0;
      if ($14) { label = 4; break; } else { label = 10; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $17=$cookieLong;
      var $18=$17;
      var $19=(($18)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=((($20)-(1))|0);
      HEAP32[(($19)>>2)]=$21;
      var $22=(($21)|(0))!=0;
      if ($22) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 8; break;
    case 7: 
      var $25=$cookieLong;
      var $26=$25;
      var $27=(($26+4)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28+24)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=$cookieLong;
      var $32=$31;
      FUNCTION_TABLE[$30]($32);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      $1=-1;
      label = 16; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $37=$cookieLong;
      var $38=$37;
      var $39=(($38)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=((($40)-(1))|0);
      HEAP32[(($39)>>2)]=$41;
      var $42=(($41)|(0))!=0;
      if ($42) { label = 12; break; } else { label = 13; break; }
    case 12: 
      label = 14; break;
    case 13: 
      var $45=$cookieLong;
      var $46=$45;
      var $47=(($46+4)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=(($48+24)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=$cookieLong;
      var $52=$51;
      FUNCTION_TABLE[$50]($52);
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $55=$2;
      var $56=(($55)|0);
      var $57=$56;
      var $58=(($buffer)|0);
      var $59=(($58)|0);
      assert(4 % 1 === 0);HEAP8[($57)]=HEAP8[($59)];HEAP8[((($57)+(1))|0)]=HEAP8[((($59)+(1))|0)];HEAP8[((($57)+(2))|0)]=HEAP8[((($59)+(2))|0)];HEAP8[((($57)+(3))|0)]=HEAP8[((($59)+(3))|0)];
      var $60=$2;
      var $61=(($60+4)|0);
      var $62=$61;
      var $63=(($buffer)|0);
      var $64=(($63+4)|0);
      assert(4 % 1 === 0);HEAP8[($62)]=HEAP8[($64)];HEAP8[((($62)+(1))|0)]=HEAP8[((($64)+(1))|0)];HEAP8[((($62)+(2))|0)]=HEAP8[((($64)+(2))|0)];HEAP8[((($62)+(3))|0)]=HEAP8[((($64)+(3))|0)];
      var $65=$2;
      var $66=(($65+8)|0);
      var $67=$66;
      var $68=(($buffer)|0);
      var $69=(($68+8)|0);
      assert(4 % 1 === 0);HEAP8[($67)]=HEAP8[($69)];HEAP8[((($67)+(1))|0)]=HEAP8[((($69)+(1))|0)];HEAP8[((($67)+(2))|0)]=HEAP8[((($69)+(2))|0)];HEAP8[((($67)+(3))|0)]=HEAP8[((($69)+(3))|0)];
      var $70=$2;
      var $71=(($70+12)|0);
      var $72=$71;
      var $73=(($buffer)|0);
      var $74=(($73+12)|0);
      assert(4 % 1 === 0);HEAP8[($72)]=HEAP8[($74)];HEAP8[((($72)+(1))|0)]=HEAP8[((($74)+(1))|0)];HEAP8[((($72)+(2))|0)]=HEAP8[((($74)+(2))|0)];HEAP8[((($72)+(3))|0)]=HEAP8[((($74)+(3))|0)];
      var $75=$2;
      var $76=(($75+16)|0);
      var $77=(($buffer)|0);
      var $78=(($77+16)|0);
      assert(1 % 1 === 0);HEAP8[($76)]=HEAP8[($78)];
      $1=0;
      label = 16; break;
    case 16: 
      var $80=$1;
      STACKTOP = __stackBase__;
      return $80;
    default: assert(0, "bad label: " + label);
  }
}
function __textiowrapper_encoder_setstate($self, $cookie) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $res;
      $2=$self;
      $3=$cookie;
      var $4=$3;
      var $5=(($4)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0))==0;
      if ($7) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $9=$3;
      var $10=(($9+4)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))==0;
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14=$2;
      var $15=(($14+28)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=HEAP32[((__PyIO_str_reset)>>2)];
      var $18=_PyObject_CallMethodObjArgs($16, $17, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $res=$18;
      var $19=$2;
      var $20=(($19+60)|0);
      HEAP8[($20)]=1;
      label = 5; break;
    case 4: 
      var $22=$2;
      var $23=(($22+28)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=HEAP32[((__PyIO_str_setstate)>>2)];
      var $26=HEAP32[((__PyIO_zero)>>2)];
      var $27=_PyObject_CallMethodObjArgs($24, $25, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$26,HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
      $res=$27;
      var $28=$2;
      var $29=(($28+60)|0);
      HEAP8[($29)]=0;
      label = 5; break;
    case 5: 
      var $31=$res;
      var $32=(($31)|(0))==0;
      if ($32) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $1=-1;
      label = 13; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $36=$res;
      var $37=(($36)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=((($38)-(1))|0);
      HEAP32[(($37)>>2)]=$39;
      var $40=(($39)|(0))!=0;
      if ($40) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 11; break;
    case 10: 
      var $43=$res;
      var $44=(($43+4)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=(($45+24)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=$res;
      FUNCTION_TABLE[$47]($48);
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      $1=0;
      label = 13; break;
    case 13: 
      var $52=$1;
      STACKTOP = __stackBase__;
      return $52;
    default: assert(0, "bad label: " + label);
  }
}
function __textiowrapper_readline($self, $limit) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $line=__stackBase__;
      var $chunks;
      var $remaining;
      var $start;
      var $endpos;
      var $chunked;
      var $offset_to_buffer;
      var $res;
      var $r;
      var $_res;
      var $ptr;
      var $line_len;
      var $consumed=(__stackBase__)+(4);
      var $_py_tmp;
      var $_py_tmp1;
      var $s;
      var $_py_tmp2;
      var $s3;
      var $_py_tmp4;
      var $_py_tmp5;
      var $_py_tmp6;
      $2=$self;
      $3=$limit;
      HEAP32[(($line)>>2)]=0;
      $chunks=0;
      $remaining=0;
      label = 2; break;
    case 2: 
      var $5=$2;
      var $6=$5;
      var $7=(($6+4)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))==((_PyTextIOWrapper_Type)|(0));
      if ($9) { label = 3; break; } else { label = 18; break; }
    case 3: 
      var $11=$2;
      var $12=(($11+84)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13)|(0))!=0;
      if ($14) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $16=$2;
      var $17=(($16+84)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=__PyFileIO_closed($18);
      $r=$19;
      label = 15; break;
    case 5: 
      var $21=$2;
      var $22=_textiowrapper_closed_get($21, 0);
      $_res=$22;
      var $23=$_res;
      var $24=(($23)|(0))==0;
      if ($24) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $1=0;
      label = 200; break;
    case 7: 
      var $27=$_res;
      var $28=_PyObject_IsTrue($27);
      $r=$28;
      label = 8; break;
    case 8: 
      var $30=$_res;
      var $31=(($30)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=((($32)-(1))|0);
      HEAP32[(($31)>>2)]=$33;
      var $34=(($33)|(0))!=0;
      if ($34) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 11; break;
    case 10: 
      var $37=$_res;
      var $38=(($37+4)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39+24)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=$_res;
      FUNCTION_TABLE[$41]($42);
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $45=$r;
      var $46=(($45)|(0)) < 0;
      if ($46) { label = 13; break; } else { label = 14; break; }
    case 13: 
      $1=0;
      label = 200; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $50=$r;
      var $51=(($50)|(0)) > 0;
      if ($51) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $53=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($53, ((__str51474)|0));
      $1=0;
      label = 200; break;
    case 17: 
      label = 21; break;
    case 18: 
      var $56=$2;
      var $57=$56;
      var $58=__PyIOBase_check_closed($57, __Py_TrueStruct);
      var $59=(($58)|(0))==0;
      if ($59) { label = 19; break; } else { label = 20; break; }
    case 19: 
      $1=0;
      label = 200; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $64=$2;
      var $65=__textiowrapper_writeflush($64);
      var $66=(($65)|(0)) < 0;
      if ($66) { label = 23; break; } else { label = 24; break; }
    case 23: 
      $1=0;
      label = 200; break;
    case 24: 
      $chunked=0;
      label = 25; break;
    case 25: 
      HEAP32[(($consumed)>>2)]=0;
      $res=1;
      label = 26; break;
    case 26: 
      var $71=$2;
      var $72=(($71+64)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=(($73)|(0))!=0;
      if ($74) { label = 27; break; } else { var $85 = 1;label = 28; break; }
    case 27: 
      var $76=$2;
      var $77=(($76+64)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=$78;
      var $80=(($79+8)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=(($81)|(0))!=0;
      var $83=$82 ^ 1;
      var $85 = $83;label = 28; break;
    case 28: 
      var $85;
      if ($85) { label = 29; break; } else { label = 36; break; }
    case 29: 
      var $87=$2;
      var $88=_textiowrapper_read_chunk($87);
      $res=$88;
      var $89=$res;
      var $90=(($89)|(0)) < 0;
      if ($90) { label = 30; break; } else { label = 33; break; }
    case 30: 
      var $92=__PyIO_trap_eintr();
      var $93=(($92)|(0))!=0;
      if ($93) { label = 31; break; } else { label = 32; break; }
    case 31: 
      label = 26; break;
    case 32: 
      label = 169; break;
    case 33: 
      var $97=$res;
      var $98=(($97)|(0))==0;
      if ($98) { label = 34; break; } else { label = 35; break; }
    case 34: 
      label = 36; break;
    case 35: 
      label = 26; break;
    case 36: 
      var $102=$res;
      var $103=(($102)|(0))==0;
      if ($103) { label = 37; break; } else { label = 47; break; }
    case 37: 
      var $105=$2;
      _textiowrapper_set_decoded_chars($105, 0);
      label = 38; break;
    case 38: 
      var $107=$2;
      var $108=(($107+80)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=(($109)|(0))!=0;
      if ($110) { label = 39; break; } else { label = 45; break; }
    case 39: 
      var $112=$2;
      var $113=(($112+80)|0);
      var $114=HEAP32[(($113)>>2)];
      $_py_tmp=$114;
      var $115=$2;
      var $116=(($115+80)|0);
      HEAP32[(($116)>>2)]=0;
      label = 40; break;
    case 40: 
      var $118=$_py_tmp;
      var $119=(($118)|0);
      var $120=HEAP32[(($119)>>2)];
      var $121=((($120)-(1))|0);
      HEAP32[(($119)>>2)]=$121;
      var $122=(($121)|(0))!=0;
      if ($122) { label = 41; break; } else { label = 42; break; }
    case 41: 
      label = 43; break;
    case 42: 
      var $125=$_py_tmp;
      var $126=(($125+4)|0);
      var $127=HEAP32[(($126)>>2)];
      var $128=(($127+24)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=$_py_tmp;
      FUNCTION_TABLE[$129]($130);
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      $offset_to_buffer=0;
      $endpos=0;
      $start=0;
      label = 106; break;
    case 47: 
      var $136=$remaining;
      var $137=(($136)|(0))==0;
      if ($137) { label = 48; break; } else { label = 49; break; }
    case 48: 
      var $139=$2;
      var $140=(($139+64)|0);
      var $141=HEAP32[(($140)>>2)];
      HEAP32[(($line)>>2)]=$141;
      var $142=$2;
      var $143=(($142+68)|0);
      var $144=HEAP32[(($143)>>2)];
      $start=$144;
      $offset_to_buffer=0;
      var $145=HEAP32[(($line)>>2)];
      var $146=(($145)|0);
      var $147=HEAP32[(($146)>>2)];
      var $148=((($147)+(1))|0);
      HEAP32[(($146)>>2)]=$148;
      label = 64; break;
    case 49: 
      var $150=$2;
      var $151=(($150+68)|0);
      var $152=HEAP32[(($151)>>2)];
      var $153=(($152)|(0))==0;
      if ($153) { label = 50; break; } else { label = 51; break; }
    case 50: 
      label = 52; break;
    case 51: 
      ___assert_func(((__str2421)|0), 1736, ((___func____textiowrapper_readline)|0), ((__str80)|0));
      throw "Reached an unreachable!";
      label = 52; break;
    case 52: 
      var $158=$remaining;
      var $159=$2;
      var $160=(($159+64)|0);
      var $161=HEAP32[(($160)>>2)];
      var $162=_PyUnicodeUCS2_Concat($158, $161);
      HEAP32[(($line)>>2)]=$162;
      $start=0;
      var $163=$remaining;
      var $164=$163;
      var $165=(($164+8)|0);
      var $166=HEAP32[(($165)>>2)];
      $offset_to_buffer=$166;
      label = 53; break;
    case 53: 
      var $168=$remaining;
      var $169=(($168)|(0))!=0;
      if ($169) { label = 54; break; } else { label = 60; break; }
    case 54: 
      var $171=$remaining;
      $_py_tmp1=$171;
      $remaining=0;
      label = 55; break;
    case 55: 
      var $173=$_py_tmp1;
      var $174=(($173)|0);
      var $175=HEAP32[(($174)>>2)];
      var $176=((($175)-(1))|0);
      HEAP32[(($174)>>2)]=$176;
      var $177=(($176)|(0))!=0;
      if ($177) { label = 56; break; } else { label = 57; break; }
    case 56: 
      label = 58; break;
    case 57: 
      var $180=$_py_tmp1;
      var $181=(($180+4)|0);
      var $182=HEAP32[(($181)>>2)];
      var $183=(($182+24)|0);
      var $184=HEAP32[(($183)>>2)];
      var $185=$_py_tmp1;
      FUNCTION_TABLE[$184]($185);
      label = 58; break;
    case 58: 
      label = 59; break;
    case 59: 
      label = 60; break;
    case 60: 
      label = 61; break;
    case 61: 
      var $190=HEAP32[(($line)>>2)];
      var $191=(($190)|(0))==0;
      if ($191) { label = 62; break; } else { label = 63; break; }
    case 62: 
      label = 169; break;
    case 63: 
      label = 64; break;
    case 64: 
      var $195=HEAP32[(($line)>>2)];
      var $196=$195;
      var $197=(($196+12)|0);
      var $198=HEAP32[(($197)>>2)];
      $ptr=$198;
      var $199=HEAP32[(($line)>>2)];
      var $200=$199;
      var $201=(($200+8)|0);
      var $202=HEAP32[(($201)>>2)];
      $line_len=$202;
      var $203=$2;
      var $204=(($203+50)|0);
      var $205=HEAP8[($204)];
      var $206=(($205 << 24) >> 24);
      var $207=$2;
      var $208=(($207+49)|0);
      var $209=HEAP8[($208)];
      var $210=(($209 << 24) >> 24);
      var $211=$2;
      var $212=(($211+36)|0);
      var $213=HEAP32[(($212)>>2)];
      var $214=$ptr;
      var $215=$start;
      var $216=(($214+($215<<1))|0);
      var $217=$ptr;
      var $218=$line_len;
      var $219=(($217+($218<<1))|0);
      var $220=__PyIO_find_line_ending($206, $210, $213, $216, $219, $consumed);
      $endpos=$220;
      var $221=$endpos;
      var $222=(($221)|(0)) >= 0;
      if ($222) { label = 65; break; } else { label = 69; break; }
    case 65: 
      var $224=$start;
      var $225=$endpos;
      var $226=((($225)+($224))|0);
      $endpos=$226;
      var $227=$3;
      var $228=(($227)|(0)) >= 0;
      if ($228) { label = 66; break; } else { label = 68; break; }
    case 66: 
      var $230=$endpos;
      var $231=$start;
      var $232=((($230)-($231))|0);
      var $233=$chunked;
      var $234=((($232)+($233))|0);
      var $235=$3;
      var $236=(($234)|(0)) >= (($235)|(0));
      if ($236) { label = 67; break; } else { label = 68; break; }
    case 67: 
      var $238=$start;
      var $239=$3;
      var $240=((($238)+($239))|0);
      var $241=$chunked;
      var $242=((($240)-($241))|0);
      $endpos=$242;
      label = 68; break;
    case 68: 
      label = 106; break;
    case 69: 
      var $245=HEAP32[(($consumed)>>2)];
      var $246=$start;
      var $247=((($245)+($246))|0);
      $endpos=$247;
      var $248=$3;
      var $249=(($248)|(0)) >= 0;
      if ($249) { label = 70; break; } else { label = 72; break; }
    case 70: 
      var $251=$endpos;
      var $252=$start;
      var $253=((($251)-($252))|0);
      var $254=$chunked;
      var $255=((($253)+($254))|0);
      var $256=$3;
      var $257=(($255)|(0)) >= (($256)|(0));
      if ($257) { label = 71; break; } else { label = 72; break; }
    case 71: 
      var $259=$start;
      var $260=$3;
      var $261=((($259)+($260))|0);
      var $262=$chunked;
      var $263=((($261)-($262))|0);
      $endpos=$263;
      label = 106; break;
    case 72: 
      var $265=$endpos;
      var $266=$start;
      var $267=(($265)|(0)) > (($266)|(0));
      if ($267) { label = 73; break; } else { label = 92; break; }
    case 73: 
      var $269=$chunks;
      var $270=(($269)|(0))==0;
      if ($270) { label = 74; break; } else { label = 77; break; }
    case 74: 
      var $272=_PyList_New(0);
      $chunks=$272;
      var $273=$chunks;
      var $274=(($273)|(0))==0;
      if ($274) { label = 75; break; } else { label = 76; break; }
    case 75: 
      label = 169; break;
    case 76: 
      label = 77; break;
    case 77: 
      var $278=$ptr;
      var $279=$start;
      var $280=(($278+($279<<1))|0);
      var $281=$endpos;
      var $282=$start;
      var $283=((($281)-($282))|0);
      var $284=_PyUnicodeUCS2_FromUnicode($280, $283);
      $s=$284;
      var $285=$s;
      var $286=(($285)|(0))==0;
      if ($286) { label = 78; break; } else { label = 79; break; }
    case 78: 
      label = 169; break;
    case 79: 
      var $289=$chunks;
      var $290=$s;
      var $291=_PyList_Append($289, $290);
      var $292=(($291)|(0)) < 0;
      if ($292) { label = 80; break; } else { label = 86; break; }
    case 80: 
      label = 81; break;
    case 81: 
      var $295=$s;
      var $296=(($295)|0);
      var $297=HEAP32[(($296)>>2)];
      var $298=((($297)-(1))|0);
      HEAP32[(($296)>>2)]=$298;
      var $299=(($298)|(0))!=0;
      if ($299) { label = 82; break; } else { label = 83; break; }
    case 82: 
      label = 84; break;
    case 83: 
      var $302=$s;
      var $303=(($302+4)|0);
      var $304=HEAP32[(($303)>>2)];
      var $305=(($304+24)|0);
      var $306=HEAP32[(($305)>>2)];
      var $307=$s;
      FUNCTION_TABLE[$306]($307);
      label = 84; break;
    case 84: 
      label = 85; break;
    case 85: 
      label = 169; break;
    case 86: 
      var $311=$s;
      var $312=$311;
      var $313=(($312+8)|0);
      var $314=HEAP32[(($313)>>2)];
      var $315=$chunked;
      var $316=((($315)+($314))|0);
      $chunked=$316;
      label = 87; break;
    case 87: 
      var $318=$s;
      var $319=(($318)|0);
      var $320=HEAP32[(($319)>>2)];
      var $321=((($320)-(1))|0);
      HEAP32[(($319)>>2)]=$321;
      var $322=(($321)|(0))!=0;
      if ($322) { label = 88; break; } else { label = 89; break; }
    case 88: 
      label = 90; break;
    case 89: 
      var $325=$s;
      var $326=(($325+4)|0);
      var $327=HEAP32[(($326)>>2)];
      var $328=(($327+24)|0);
      var $329=HEAP32[(($328)>>2)];
      var $330=$s;
      FUNCTION_TABLE[$329]($330);
      label = 90; break;
    case 90: 
      label = 91; break;
    case 91: 
      label = 92; break;
    case 92: 
      var $334=$endpos;
      var $335=$line_len;
      var $336=(($334)|(0)) < (($335)|(0));
      if ($336) { label = 93; break; } else { label = 96; break; }
    case 93: 
      var $338=$ptr;
      var $339=$endpos;
      var $340=(($338+($339<<1))|0);
      var $341=$line_len;
      var $342=$endpos;
      var $343=((($341)-($342))|0);
      var $344=_PyUnicodeUCS2_FromUnicode($340, $343);
      $remaining=$344;
      var $345=$remaining;
      var $346=(($345)|(0))==0;
      if ($346) { label = 94; break; } else { label = 95; break; }
    case 94: 
      label = 169; break;
    case 95: 
      label = 96; break;
    case 96: 
      label = 97; break;
    case 97: 
      var $351=HEAP32[(($line)>>2)];
      var $352=(($351)|(0))!=0;
      if ($352) { label = 98; break; } else { label = 104; break; }
    case 98: 
      var $354=HEAP32[(($line)>>2)];
      $_py_tmp2=$354;
      HEAP32[(($line)>>2)]=0;
      label = 99; break;
    case 99: 
      var $356=$_py_tmp2;
      var $357=(($356)|0);
      var $358=HEAP32[(($357)>>2)];
      var $359=((($358)-(1))|0);
      HEAP32[(($357)>>2)]=$359;
      var $360=(($359)|(0))!=0;
      if ($360) { label = 100; break; } else { label = 101; break; }
    case 100: 
      label = 102; break;
    case 101: 
      var $363=$_py_tmp2;
      var $364=(($363+4)|0);
      var $365=HEAP32[(($364)>>2)];
      var $366=(($365+24)|0);
      var $367=HEAP32[(($366)>>2)];
      var $368=$_py_tmp2;
      FUNCTION_TABLE[$367]($368);
      label = 102; break;
    case 102: 
      label = 103; break;
    case 103: 
      label = 104; break;
    case 104: 
      label = 105; break;
    case 105: 
      var $373=$2;
      _textiowrapper_set_decoded_chars($373, 0);
      label = 25; break;
    case 106: 
      var $375=HEAP32[(($line)>>2)];
      var $376=(($375)|(0))!=0;
      if ($376) { label = 107; break; } else { label = 128; break; }
    case 107: 
      var $378=$endpos;
      var $379=$offset_to_buffer;
      var $380=((($378)-($379))|0);
      var $381=$2;
      var $382=(($381+68)|0);
      HEAP32[(($382)>>2)]=$380;
      var $383=$start;
      var $384=(($383)|(0)) > 0;
      if ($384) { label = 109; break; } else { label = 108; break; }
    case 108: 
      var $386=$endpos;
      var $387=HEAP32[(($line)>>2)];
      var $388=$387;
      var $389=(($388+8)|0);
      var $390=HEAP32[(($389)>>2)];
      var $391=(($386)|(0)) < (($390)|(0));
      if ($391) { label = 109; break; } else { label = 127; break; }
    case 109: 
      var $393=$start;
      var $394=(($393)|(0))==0;
      if ($394) { label = 110; break; } else { label = 114; break; }
    case 110: 
      var $396=HEAP32[(($line)>>2)];
      var $397=(($396)|0);
      var $398=HEAP32[(($397)>>2)];
      var $399=(($398)|(0))==1;
      if ($399) { label = 111; break; } else { label = 114; break; }
    case 111: 
      var $401=$endpos;
      var $402=_PyUnicodeUCS2_Resize($line, $401);
      var $403=(($402)|(0)) < 0;
      if ($403) { label = 112; break; } else { label = 113; break; }
    case 112: 
      label = 169; break;
    case 113: 
      label = 126; break;
    case 114: 
      var $407=HEAP32[(($line)>>2)];
      var $408=$407;
      var $409=(($408+12)|0);
      var $410=HEAP32[(($409)>>2)];
      var $411=$start;
      var $412=(($410+($411<<1))|0);
      var $413=$endpos;
      var $414=$start;
      var $415=((($413)-($414))|0);
      var $416=_PyUnicodeUCS2_FromUnicode($412, $415);
      $s3=$416;
      label = 115; break;
    case 115: 
      var $418=HEAP32[(($line)>>2)];
      var $419=(($418)|(0))!=0;
      if ($419) { label = 116; break; } else { label = 122; break; }
    case 116: 
      var $421=HEAP32[(($line)>>2)];
      $_py_tmp4=$421;
      HEAP32[(($line)>>2)]=0;
      label = 117; break;
    case 117: 
      var $423=$_py_tmp4;
      var $424=(($423)|0);
      var $425=HEAP32[(($424)>>2)];
      var $426=((($425)-(1))|0);
      HEAP32[(($424)>>2)]=$426;
      var $427=(($426)|(0))!=0;
      if ($427) { label = 118; break; } else { label = 119; break; }
    case 118: 
      label = 120; break;
    case 119: 
      var $430=$_py_tmp4;
      var $431=(($430+4)|0);
      var $432=HEAP32[(($431)>>2)];
      var $433=(($432+24)|0);
      var $434=HEAP32[(($433)>>2)];
      var $435=$_py_tmp4;
      FUNCTION_TABLE[$434]($435);
      label = 120; break;
    case 120: 
      label = 121; break;
    case 121: 
      label = 122; break;
    case 122: 
      label = 123; break;
    case 123: 
      var $440=$s3;
      var $441=(($440)|(0))==0;
      if ($441) { label = 124; break; } else { label = 125; break; }
    case 124: 
      label = 169; break;
    case 125: 
      var $444=$s3;
      HEAP32[(($line)>>2)]=$444;
      label = 126; break;
    case 126: 
      label = 127; break;
    case 127: 
      label = 128; break;
    case 128: 
      var $448=$remaining;
      var $449=(($448)|(0))!=0;
      if ($449) { label = 129; break; } else { label = 145; break; }
    case 129: 
      var $451=$chunks;
      var $452=(($451)|(0))==0;
      if ($452) { label = 130; break; } else { label = 133; break; }
    case 130: 
      var $454=_PyList_New(0);
      $chunks=$454;
      var $455=$chunks;
      var $456=(($455)|(0))==0;
      if ($456) { label = 131; break; } else { label = 132; break; }
    case 131: 
      label = 169; break;
    case 132: 
      label = 133; break;
    case 133: 
      var $460=$chunks;
      var $461=$remaining;
      var $462=_PyList_Append($460, $461);
      var $463=(($462)|(0)) < 0;
      if ($463) { label = 134; break; } else { label = 135; break; }
    case 134: 
      label = 169; break;
    case 135: 
      label = 136; break;
    case 136: 
      var $467=$remaining;
      var $468=(($467)|(0))!=0;
      if ($468) { label = 137; break; } else { label = 143; break; }
    case 137: 
      var $470=$remaining;
      $_py_tmp5=$470;
      $remaining=0;
      label = 138; break;
    case 138: 
      var $472=$_py_tmp5;
      var $473=(($472)|0);
      var $474=HEAP32[(($473)>>2)];
      var $475=((($474)-(1))|0);
      HEAP32[(($473)>>2)]=$475;
      var $476=(($475)|(0))!=0;
      if ($476) { label = 139; break; } else { label = 140; break; }
    case 139: 
      label = 141; break;
    case 140: 
      var $479=$_py_tmp5;
      var $480=(($479+4)|0);
      var $481=HEAP32[(($480)>>2)];
      var $482=(($481+24)|0);
      var $483=HEAP32[(($482)>>2)];
      var $484=$_py_tmp5;
      FUNCTION_TABLE[$483]($484);
      label = 141; break;
    case 141: 
      label = 142; break;
    case 142: 
      label = 143; break;
    case 143: 
      label = 144; break;
    case 144: 
      label = 145; break;
    case 145: 
      var $490=$chunks;
      var $491=(($490)|(0))!=0;
      if ($491) { label = 146; break; } else { label = 166; break; }
    case 146: 
      var $493=HEAP32[(($line)>>2)];
      var $494=(($493)|(0))!=0;
      if ($494) { label = 147; break; } else { label = 149; break; }
    case 147: 
      var $496=$chunks;
      var $497=HEAP32[(($line)>>2)];
      var $498=_PyList_Append($496, $497);
      var $499=(($498)|(0)) < 0;
      if ($499) { label = 148; break; } else { label = 149; break; }
    case 148: 
      label = 169; break;
    case 149: 
      label = 150; break;
    case 150: 
      var $503=HEAP32[(($line)>>2)];
      var $504=(($503)|(0))!=0;
      if ($504) { label = 151; break; } else { label = 157; break; }
    case 151: 
      var $506=HEAP32[(($line)>>2)];
      $_py_tmp6=$506;
      HEAP32[(($line)>>2)]=0;
      label = 152; break;
    case 152: 
      var $508=$_py_tmp6;
      var $509=(($508)|0);
      var $510=HEAP32[(($509)>>2)];
      var $511=((($510)-(1))|0);
      HEAP32[(($509)>>2)]=$511;
      var $512=(($511)|(0))!=0;
      if ($512) { label = 153; break; } else { label = 154; break; }
    case 153: 
      label = 155; break;
    case 154: 
      var $515=$_py_tmp6;
      var $516=(($515+4)|0);
      var $517=HEAP32[(($516)>>2)];
      var $518=(($517+24)|0);
      var $519=HEAP32[(($518)>>2)];
      var $520=$_py_tmp6;
      FUNCTION_TABLE[$519]($520);
      label = 155; break;
    case 155: 
      label = 156; break;
    case 156: 
      label = 157; break;
    case 157: 
      label = 158; break;
    case 158: 
      var $525=HEAP32[((__PyIO_empty_str)>>2)];
      var $526=$chunks;
      var $527=_PyUnicodeUCS2_Join($525, $526);
      HEAP32[(($line)>>2)]=$527;
      var $528=HEAP32[(($line)>>2)];
      var $529=(($528)|(0))==0;
      if ($529) { label = 159; break; } else { label = 160; break; }
    case 159: 
      label = 169; break;
    case 160: 
      label = 161; break;
    case 161: 
      var $533=$chunks;
      var $534=(($533)|0);
      var $535=HEAP32[(($534)>>2)];
      var $536=((($535)-(1))|0);
      HEAP32[(($534)>>2)]=$536;
      var $537=(($536)|(0))!=0;
      if ($537) { label = 162; break; } else { label = 163; break; }
    case 162: 
      label = 164; break;
    case 163: 
      var $540=$chunks;
      var $541=(($540+4)|0);
      var $542=HEAP32[(($541)>>2)];
      var $543=(($542+24)|0);
      var $544=HEAP32[(($543)>>2)];
      var $545=$chunks;
      FUNCTION_TABLE[$544]($545);
      label = 164; break;
    case 164: 
      label = 165; break;
    case 165: 
      label = 166; break;
    case 166: 
      var $549=HEAP32[(($line)>>2)];
      var $550=(($549)|(0))==0;
      if ($550) { label = 167; break; } else { label = 168; break; }
    case 167: 
      var $552=_PyUnicodeUCS2_FromStringAndSize(0, 0);
      HEAP32[(($line)>>2)]=$552;
      label = 168; break;
    case 168: 
      var $554=HEAP32[(($line)>>2)];
      $1=$554;
      label = 200; break;
    case 169: 
      label = 170; break;
    case 170: 
      var $557=$chunks;
      var $558=(($557)|(0))==0;
      if ($558) { label = 171; break; } else { label = 172; break; }
    case 171: 
      label = 178; break;
    case 172: 
      label = 173; break;
    case 173: 
      var $562=$chunks;
      var $563=(($562)|0);
      var $564=HEAP32[(($563)>>2)];
      var $565=((($564)-(1))|0);
      HEAP32[(($563)>>2)]=$565;
      var $566=(($565)|(0))!=0;
      if ($566) { label = 174; break; } else { label = 175; break; }
    case 174: 
      label = 176; break;
    case 175: 
      var $569=$chunks;
      var $570=(($569+4)|0);
      var $571=HEAP32[(($570)>>2)];
      var $572=(($571+24)|0);
      var $573=HEAP32[(($572)>>2)];
      var $574=$chunks;
      FUNCTION_TABLE[$573]($574);
      label = 176; break;
    case 176: 
      label = 177; break;
    case 177: 
      label = 178; break;
    case 178: 
      label = 179; break;
    case 179: 
      label = 180; break;
    case 180: 
      var $580=$remaining;
      var $581=(($580)|(0))==0;
      if ($581) { label = 181; break; } else { label = 182; break; }
    case 181: 
      label = 188; break;
    case 182: 
      label = 183; break;
    case 183: 
      var $585=$remaining;
      var $586=(($585)|0);
      var $587=HEAP32[(($586)>>2)];
      var $588=((($587)-(1))|0);
      HEAP32[(($586)>>2)]=$588;
      var $589=(($588)|(0))!=0;
      if ($589) { label = 184; break; } else { label = 185; break; }
    case 184: 
      label = 186; break;
    case 185: 
      var $592=$remaining;
      var $593=(($592+4)|0);
      var $594=HEAP32[(($593)>>2)];
      var $595=(($594+24)|0);
      var $596=HEAP32[(($595)>>2)];
      var $597=$remaining;
      FUNCTION_TABLE[$596]($597);
      label = 186; break;
    case 186: 
      label = 187; break;
    case 187: 
      label = 188; break;
    case 188: 
      label = 189; break;
    case 189: 
      label = 190; break;
    case 190: 
      var $603=HEAP32[(($line)>>2)];
      var $604=(($603)|(0))==0;
      if ($604) { label = 191; break; } else { label = 192; break; }
    case 191: 
      label = 198; break;
    case 192: 
      label = 193; break;
    case 193: 
      var $608=HEAP32[(($line)>>2)];
      var $609=(($608)|0);
      var $610=HEAP32[(($609)>>2)];
      var $611=((($610)-(1))|0);
      HEAP32[(($609)>>2)]=$611;
      var $612=(($611)|(0))!=0;
      if ($612) { label = 194; break; } else { label = 195; break; }
    case 194: 
      label = 196; break;
    case 195: 
      var $615=HEAP32[(($line)>>2)];
      var $616=(($615+4)|0);
      var $617=HEAP32[(($616)>>2)];
      var $618=(($617+24)|0);
      var $619=HEAP32[(($618)>>2)];
      var $620=HEAP32[(($line)>>2)];
      FUNCTION_TABLE[$619]($620);
      label = 196; break;
    case 196: 
      label = 197; break;
    case 197: 
      label = 198; break;
    case 198: 
      label = 199; break;
    case 199: 
      $1=0;
      label = 200; break;
    case 200: 
      var $626=$1;
      STACKTOP = __stackBase__;
      return $626;
    default: assert(0, "bad label: " + label);
  }
}
function _findchar($s, $size, $ch) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $2=$s;
      $3=$size;
      $4=$ch;
      label = 2; break;
    case 2: 
      var $6=$3;
      var $7=((($6)-(1))|0);
      $3=$7;
      var $8=(($6)|(0)) > 0;
      if ($8) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $10=$2;
      var $11=HEAP16[(($10)>>1)];
      var $12=(($11)&(65535));
      var $13=$4;
      var $14=(($13)&(65535));
      var $15=(($12)|(0))==(($14)|(0));
      if ($15) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $17=$2;
      $1=$17;
      label = 7; break;
    case 5: 
      var $19=$2;
      var $20=(($19+2)|0);
      $2=$20;
      label = 2; break;
    case 6: 
      $1=0;
      label = 7; break;
    case 7: 
      var $23=$1;
      return $23;
    default: assert(0, "bad label: " + label);
  }
}
function _textiowrapper_read_chunk($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $dec_buffer=__stackBase__;
      var $dec_flags=(__stackBase__)+(4);
      var $input_chunk;
      var $decoded_chars;
      var $chunk_size;
      var $eof;
      var $state;
      var $next_input;
      var $_py_tmp;
      $2=$self;
      HEAP32[(($dec_buffer)>>2)]=0;
      HEAP32[(($dec_flags)>>2)]=0;
      $input_chunk=0;
      var $3=$2;
      var $4=(($3+32)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))==0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=HEAP32[((_PyExc_IOError)>>2)];
      _PyErr_SetString($8, ((__str81)|0));
      $1=-1;
      label = 99; break;
    case 3: 
      var $10=$2;
      var $11=(($10+53)|0);
      var $12=HEAP8[($11)];
      var $13=(($12 << 24) >> 24)!=0;
      if ($13) { label = 4; break; } else { label = 19; break; }
    case 4: 
      var $15=$2;
      var $16=(($15+32)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=HEAP32[((__PyIO_str_getstate)>>2)];
      var $19=_PyObject_CallMethodObjArgs($17, $18, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $state=$19;
      var $20=$state;
      var $21=(($20)|(0))==0;
      if ($21) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $1=-1;
      label = 99; break;
    case 6: 
      var $24=$state;
      var $25=__PyArg_Parse_SizeT($24, ((__str82)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$dec_buffer,HEAP32[(((tempInt)+(4))>>2)]=$dec_flags,tempInt));
      var $26=(($25)|(0)) < 0;
      if ($26) { label = 7; break; } else { label = 13; break; }
    case 7: 
      label = 8; break;
    case 8: 
      var $29=$state;
      var $30=(($29)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=((($31)-(1))|0);
      HEAP32[(($30)>>2)]=$32;
      var $33=(($32)|(0))!=0;
      if ($33) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 11; break;
    case 10: 
      var $36=$state;
      var $37=(($36+4)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38+24)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=$state;
      FUNCTION_TABLE[$40]($41);
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      $1=-1;
      label = 99; break;
    case 13: 
      var $45=HEAP32[(($dec_buffer)>>2)];
      var $46=(($45)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=((($47)+(1))|0);
      HEAP32[(($46)>>2)]=$48;
      var $49=HEAP32[(($dec_flags)>>2)];
      var $50=(($49)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=((($51)+(1))|0);
      HEAP32[(($50)>>2)]=$52;
      label = 14; break;
    case 14: 
      var $54=$state;
      var $55=(($54)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=((($56)-(1))|0);
      HEAP32[(($55)>>2)]=$57;
      var $58=(($57)|(0))!=0;
      if ($58) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 17; break;
    case 16: 
      var $61=$state;
      var $62=(($61+4)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=(($63+24)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=$state;
      FUNCTION_TABLE[$65]($66);
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $70=$2;
      var $71=(($70+16)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=_PyLong_FromSsize_t($72);
      $chunk_size=$73;
      var $74=$chunk_size;
      var $75=(($74)|(0))==0;
      if ($75) { label = 20; break; } else { label = 21; break; }
    case 20: 
      label = 68; break;
    case 21: 
      var $78=$2;
      var $79=(($78+20)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=HEAP32[((__PyIO_str_read1)>>2)];
      var $82=$chunk_size;
      var $83=_PyObject_CallMethodObjArgs($80, $81, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$82,HEAP32[(((tempInt)+(4))>>2)]=0,tempInt));
      $input_chunk=$83;
      label = 22; break;
    case 22: 
      var $85=$chunk_size;
      var $86=(($85)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=((($87)-(1))|0);
      HEAP32[(($86)>>2)]=$88;
      var $89=(($88)|(0))!=0;
      if ($89) { label = 23; break; } else { label = 24; break; }
    case 23: 
      label = 25; break;
    case 24: 
      var $92=$chunk_size;
      var $93=(($92+4)|0);
      var $94=HEAP32[(($93)>>2)];
      var $95=(($94+24)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=$chunk_size;
      FUNCTION_TABLE[$96]($97);
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $100=$input_chunk;
      var $101=(($100)|(0))==0;
      if ($101) { label = 27; break; } else { label = 28; break; }
    case 27: 
      label = 68; break;
    case 28: 
      var $104=$input_chunk;
      var $105=(($104+4)|0);
      var $106=HEAP32[(($105)>>2)];
      var $107=(($106+84)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=$108 & 134217728;
      var $110=(($109)|(0))!=0;
      if ($110) { label = 30; break; } else { label = 29; break; }
    case 29: 
      var $112=HEAP32[((_PyExc_TypeError)>>2)];
      var $113=$input_chunk;
      var $114=(($113+4)|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=(($115+12)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=_PyErr_Format($112, ((__str83)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$117,tempInt));
      label = 68; break;
    case 30: 
      var $120=$input_chunk;
      var $121=_PyString_Size($120);
      var $122=(($121)|(0))==0;
      var $123=(($122)&(1));
      $eof=$123;
      var $124=$2;
      var $125=(($124+32)|0);
      var $126=HEAP32[(($125)>>2)];
      var $127=(($126+4)|0);
      var $128=HEAP32[(($127)>>2)];
      var $129=(($128)|(0))==((_PyIncrementalNewlineDecoder_Type)|(0));
      if ($129) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $131=$2;
      var $132=(($131+32)|0);
      var $133=HEAP32[(($132)>>2)];
      var $134=$input_chunk;
      var $135=$eof;
      var $136=__PyIncrementalNewlineDecoder_decode($133, $134, $135);
      $decoded_chars=$136;
      label = 33; break;
    case 32: 
      var $138=$2;
      var $139=(($138+32)|0);
      var $140=HEAP32[(($139)>>2)];
      var $141=HEAP32[((__PyIO_str_decode)>>2)];
      var $142=$input_chunk;
      var $143=$eof;
      var $144=(($143)|(0))!=0;
      var $145=$144 ? __Py_TrueStruct : __Py_ZeroStruct;
      var $146=_PyObject_CallMethodObjArgs($140, $141, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$142,HEAP32[(((tempInt)+(4))>>2)]=$145,HEAP32[(((tempInt)+(8))>>2)]=0,tempInt));
      $decoded_chars=$146;
      label = 33; break;
    case 33: 
      var $148=$decoded_chars;
      var $149=_check_decoded($148);
      var $150=(($149)|(0)) < 0;
      if ($150) { label = 34; break; } else { label = 35; break; }
    case 34: 
      label = 68; break;
    case 35: 
      var $153=$2;
      var $154=$decoded_chars;
      _textiowrapper_set_decoded_chars($153, $154);
      var $155=$decoded_chars;
      var $156=$155;
      var $157=(($156+8)|0);
      var $158=HEAP32[(($157)>>2)];
      var $159=(($158)|(0)) > 0;
      if ($159) { label = 36; break; } else { label = 37; break; }
    case 36: 
      $eof=0;
      label = 37; break;
    case 37: 
      var $162=$2;
      var $163=(($162+53)|0);
      var $164=HEAP8[($163)];
      var $165=(($164 << 24) >> 24)!=0;
      if ($165) { label = 38; break; } else { label = 62; break; }
    case 38: 
      var $167=HEAP32[(($dec_buffer)>>2)];
      var $168=$input_chunk;
      var $169=_PyNumber_Add($167, $168);
      $next_input=$169;
      var $170=$next_input;
      var $171=(($170)|(0))==0;
      if ($171) { label = 39; break; } else { label = 40; break; }
    case 39: 
      label = 68; break;
    case 40: 
      var $174=$next_input;
      var $175=(($174+4)|0);
      var $176=HEAP32[(($175)>>2)];
      var $177=(($176+84)|0);
      var $178=HEAP32[(($177)>>2)];
      var $179=$178 & 134217728;
      var $180=(($179)|(0))!=0;
      if ($180) { label = 47; break; } else { label = 41; break; }
    case 41: 
      var $182=HEAP32[((_PyExc_TypeError)>>2)];
      var $183=$next_input;
      var $184=(($183+4)|0);
      var $185=HEAP32[(($184)>>2)];
      var $186=(($185+12)|0);
      var $187=HEAP32[(($186)>>2)];
      var $188=_PyErr_Format($182, ((__str84)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$187,tempInt));
      label = 42; break;
    case 42: 
      var $190=$next_input;
      var $191=(($190)|0);
      var $192=HEAP32[(($191)>>2)];
      var $193=((($192)-(1))|0);
      HEAP32[(($191)>>2)]=$193;
      var $194=(($193)|(0))!=0;
      if ($194) { label = 43; break; } else { label = 44; break; }
    case 43: 
      label = 45; break;
    case 44: 
      var $197=$next_input;
      var $198=(($197+4)|0);
      var $199=HEAP32[(($198)>>2)];
      var $200=(($199+24)|0);
      var $201=HEAP32[(($200)>>2)];
      var $202=$next_input;
      FUNCTION_TABLE[$201]($202);
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      label = 68; break;
    case 47: 
      label = 48; break;
    case 48: 
      var $207=HEAP32[(($dec_buffer)>>2)];
      var $208=(($207)|0);
      var $209=HEAP32[(($208)>>2)];
      var $210=((($209)-(1))|0);
      HEAP32[(($208)>>2)]=$210;
      var $211=(($210)|(0))!=0;
      if ($211) { label = 49; break; } else { label = 50; break; }
    case 49: 
      label = 51; break;
    case 50: 
      var $214=HEAP32[(($dec_buffer)>>2)];
      var $215=(($214+4)|0);
      var $216=HEAP32[(($215)>>2)];
      var $217=(($216+24)|0);
      var $218=HEAP32[(($217)>>2)];
      var $219=HEAP32[(($dec_buffer)>>2)];
      FUNCTION_TABLE[$218]($219);
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      var $223=$2;
      var $224=(($223+80)|0);
      var $225=HEAP32[(($224)>>2)];
      var $226=(($225)|(0))!=0;
      if ($226) { label = 54; break; } else { label = 60; break; }
    case 54: 
      var $228=$2;
      var $229=(($228+80)|0);
      var $230=HEAP32[(($229)>>2)];
      $_py_tmp=$230;
      var $231=$2;
      var $232=(($231+80)|0);
      HEAP32[(($232)>>2)]=0;
      label = 55; break;
    case 55: 
      var $234=$_py_tmp;
      var $235=(($234)|0);
      var $236=HEAP32[(($235)>>2)];
      var $237=((($236)-(1))|0);
      HEAP32[(($235)>>2)]=$237;
      var $238=(($237)|(0))!=0;
      if ($238) { label = 56; break; } else { label = 57; break; }
    case 56: 
      label = 58; break;
    case 57: 
      var $241=$_py_tmp;
      var $242=(($241+4)|0);
      var $243=HEAP32[(($242)>>2)];
      var $244=(($243+24)|0);
      var $245=HEAP32[(($244)>>2)];
      var $246=$_py_tmp;
      FUNCTION_TABLE[$245]($246);
      label = 58; break;
    case 58: 
      label = 59; break;
    case 59: 
      label = 60; break;
    case 60: 
      label = 61; break;
    case 61: 
      var $251=HEAP32[(($dec_flags)>>2)];
      var $252=$next_input;
      var $253=__Py_BuildValue_SizeT(((__str85)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$251,HEAP32[(((tempInt)+(4))>>2)]=$252,tempInt));
      var $254=$2;
      var $255=(($254+80)|0);
      HEAP32[(($255)>>2)]=$253;
      label = 62; break;
    case 62: 
      label = 63; break;
    case 63: 
      var $258=$input_chunk;
      var $259=(($258)|0);
      var $260=HEAP32[(($259)>>2)];
      var $261=((($260)-(1))|0);
      HEAP32[(($259)>>2)]=$261;
      var $262=(($261)|(0))!=0;
      if ($262) { label = 64; break; } else { label = 65; break; }
    case 64: 
      label = 66; break;
    case 65: 
      var $265=$input_chunk;
      var $266=(($265+4)|0);
      var $267=HEAP32[(($266)>>2)];
      var $268=(($267+24)|0);
      var $269=HEAP32[(($268)>>2)];
      var $270=$input_chunk;
      FUNCTION_TABLE[$269]($270);
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      var $273=$eof;
      var $274=(($273)|(0))==0;
      var $275=(($274)&(1));
      $1=$275;
      label = 99; break;
    case 68: 
      label = 69; break;
    case 69: 
      var $278=HEAP32[(($dec_buffer)>>2)];
      var $279=(($278)|(0))==0;
      if ($279) { label = 70; break; } else { label = 71; break; }
    case 70: 
      label = 77; break;
    case 71: 
      label = 72; break;
    case 72: 
      var $283=HEAP32[(($dec_buffer)>>2)];
      var $284=(($283)|0);
      var $285=HEAP32[(($284)>>2)];
      var $286=((($285)-(1))|0);
      HEAP32[(($284)>>2)]=$286;
      var $287=(($286)|(0))!=0;
      if ($287) { label = 73; break; } else { label = 74; break; }
    case 73: 
      label = 75; break;
    case 74: 
      var $290=HEAP32[(($dec_buffer)>>2)];
      var $291=(($290+4)|0);
      var $292=HEAP32[(($291)>>2)];
      var $293=(($292+24)|0);
      var $294=HEAP32[(($293)>>2)];
      var $295=HEAP32[(($dec_buffer)>>2)];
      FUNCTION_TABLE[$294]($295);
      label = 75; break;
    case 75: 
      label = 76; break;
    case 76: 
      label = 77; break;
    case 77: 
      label = 78; break;
    case 78: 
      label = 79; break;
    case 79: 
      var $301=HEAP32[(($dec_flags)>>2)];
      var $302=(($301)|(0))==0;
      if ($302) { label = 80; break; } else { label = 81; break; }
    case 80: 
      label = 87; break;
    case 81: 
      label = 82; break;
    case 82: 
      var $306=HEAP32[(($dec_flags)>>2)];
      var $307=(($306)|0);
      var $308=HEAP32[(($307)>>2)];
      var $309=((($308)-(1))|0);
      HEAP32[(($307)>>2)]=$309;
      var $310=(($309)|(0))!=0;
      if ($310) { label = 83; break; } else { label = 84; break; }
    case 83: 
      label = 85; break;
    case 84: 
      var $313=HEAP32[(($dec_flags)>>2)];
      var $314=(($313+4)|0);
      var $315=HEAP32[(($314)>>2)];
      var $316=(($315+24)|0);
      var $317=HEAP32[(($316)>>2)];
      var $318=HEAP32[(($dec_flags)>>2)];
      FUNCTION_TABLE[$317]($318);
      label = 85; break;
    case 85: 
      label = 86; break;
    case 86: 
      label = 87; break;
    case 87: 
      label = 88; break;
    case 88: 
      label = 89; break;
    case 89: 
      var $324=$input_chunk;
      var $325=(($324)|(0))==0;
      if ($325) { label = 90; break; } else { label = 91; break; }
    case 90: 
      label = 97; break;
    case 91: 
      label = 92; break;
    case 92: 
      var $329=$input_chunk;
      var $330=(($329)|0);
      var $331=HEAP32[(($330)>>2)];
      var $332=((($331)-(1))|0);
      HEAP32[(($330)>>2)]=$332;
      var $333=(($332)|(0))!=0;
      if ($333) { label = 93; break; } else { label = 94; break; }
    case 93: 
      label = 95; break;
    case 94: 
      var $336=$input_chunk;
      var $337=(($336+4)|0);
      var $338=HEAP32[(($337)>>2)];
      var $339=(($338+24)|0);
      var $340=HEAP32[(($339)>>2)];
      var $341=$input_chunk;
      FUNCTION_TABLE[$340]($341);
      label = 95; break;
    case 95: 
      label = 96; break;
    case 96: 
      label = 97; break;
    case 97: 
      label = 98; break;
    case 98: 
      $1=-1;
      label = 99; break;
    case 99: 
      var $347=$1;
      STACKTOP = __stackBase__;
      return $347;
    default: assert(0, "bad label: " + label);
  }
}
function _textiowrapper_get_decoded_chars($self, $n) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $chars;
      var $avail;
      $2=$self;
      $3=$n;
      var $4=$2;
      var $5=(($4+64)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0))==0;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $9=_PyUnicodeUCS2_FromStringAndSize(0, 0);
      $1=$9;
      label = 16; break;
    case 3: 
      var $11=$2;
      var $12=(($11+64)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=$13;
      var $15=(($14+8)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$2;
      var $18=(($17+68)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=((($16)-($19))|0);
      $avail=$20;
      var $21=$avail;
      var $22=(($21)|(0)) >= 0;
      if ($22) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 6; break;
    case 5: 
      ___assert_func(((__str2421)|0), 1356, ((___func___textiowrapper_get_decoded_chars)|0), ((__str87)|0));
      throw "Reached an unreachable!";
      label = 6; break;
    case 6: 
      var $27=$3;
      var $28=(($27)|(0)) < 0;
      if ($28) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $30=$3;
      var $31=$avail;
      var $32=(($30)|(0)) > (($31)|(0));
      if ($32) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $34=$avail;
      $3=$34;
      label = 9; break;
    case 9: 
      var $36=$2;
      var $37=(($36+68)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38)|(0)) > 0;
      if ($39) { label = 11; break; } else { label = 10; break; }
    case 10: 
      var $41=$3;
      var $42=$avail;
      var $43=(($41)|(0)) < (($42)|(0));
      if ($43) { label = 11; break; } else { label = 14; break; }
    case 11: 
      var $45=$2;
      var $46=(($45+64)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=$47;
      var $49=(($48+12)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=$2;
      var $52=(($51+68)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=(($50+($53<<1))|0);
      var $55=$3;
      var $56=_PyUnicodeUCS2_FromUnicode($54, $55);
      $chars=$56;
      var $57=$chars;
      var $58=(($57)|(0))==0;
      if ($58) { label = 12; break; } else { label = 13; break; }
    case 12: 
      $1=0;
      label = 16; break;
    case 13: 
      label = 15; break;
    case 14: 
      var $62=$2;
      var $63=(($62+64)|0);
      var $64=HEAP32[(($63)>>2)];
      $chars=$64;
      var $65=$chars;
      var $66=(($65)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=((($67)+(1))|0);
      HEAP32[(($66)>>2)]=$68;
      label = 15; break;
    case 15: 
      var $70=$3;
      var $71=$2;
      var $72=(($71+68)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=((($73)+($70))|0);
      HEAP32[(($72)>>2)]=$74;
      var $75=$chars;
      $1=$75;
      label = 16; break;
    case 16: 
      var $77=$1;
      return $77;
    default: assert(0, "bad label: " + label);
  }
}
function _textiobase_encoding_get($self, $context) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$context;
  var $3=HEAP32[((((__Py_NoneStruct)|0))>>2)];
  var $4=((($3)+(1))|0);
  HEAP32[((((__Py_NoneStruct)|0))>>2)]=$4;
  return __Py_NoneStruct;
}
function _textiobase_newlines_get($self, $context) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$context;
  var $3=HEAP32[((((__Py_NoneStruct)|0))>>2)];
  var $4=((($3)+(1))|0);
  HEAP32[((((__Py_NoneStruct)|0))>>2)]=$4;
  return __Py_NoneStruct;
}
function _textiobase_errors_get($self, $context) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$context;
  var $3=HEAP32[((((__Py_NoneStruct)|0))>>2)];
  var $4=((($3)+(1))|0);
  HEAP32[((((__Py_NoneStruct)|0))>>2)]=$4;
  return __Py_NoneStruct;
}
function __textiowrapper_clear($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $_py_tmp;
      var $_py_tmp1;
      var $_py_tmp2;
      var $_py_tmp3;
      var $_py_tmp4;
      var $_py_tmp5;
      var $_py_tmp6;
      var $_py_tmp7;
      var $_py_tmp8;
      var $_py_tmp9;
      $2=$self;
      var $3=$2;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))!=0;
      if ($6) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $8=$2;
      var $9=$8;
      var $10=__PyIOBase_finalize($9);
      var $11=(($10)|(0)) < 0;
      if ($11) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=-1;
      label = 95; break;
    case 4: 
      var $14=$2;
      var $15=(($14+8)|0);
      HEAP32[(($15)>>2)]=0;
      label = 5; break;
    case 5: 
      var $17=$2;
      var $18=(($17+20)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19)|(0))!=0;
      if ($20) { label = 6; break; } else { label = 12; break; }
    case 6: 
      var $22=$2;
      var $23=(($22+20)|0);
      var $24=HEAP32[(($23)>>2)];
      $_py_tmp=$24;
      var $25=$2;
      var $26=(($25+20)|0);
      HEAP32[(($26)>>2)]=0;
      label = 7; break;
    case 7: 
      var $28=$_py_tmp;
      var $29=(($28)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=((($30)-(1))|0);
      HEAP32[(($29)>>2)]=$31;
      var $32=(($31)|(0))!=0;
      if ($32) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 10; break;
    case 9: 
      var $35=$_py_tmp;
      var $36=(($35+4)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37+24)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=$_py_tmp;
      FUNCTION_TABLE[$39]($40);
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $46=$2;
      var $47=(($46+24)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=(($48)|(0))!=0;
      if ($49) { label = 15; break; } else { label = 21; break; }
    case 15: 
      var $51=$2;
      var $52=(($51+24)|0);
      var $53=HEAP32[(($52)>>2)];
      $_py_tmp1=$53;
      var $54=$2;
      var $55=(($54+24)|0);
      HEAP32[(($55)>>2)]=0;
      label = 16; break;
    case 16: 
      var $57=$_py_tmp1;
      var $58=(($57)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=((($59)-(1))|0);
      HEAP32[(($58)>>2)]=$60;
      var $61=(($60)|(0))!=0;
      if ($61) { label = 17; break; } else { label = 18; break; }
    case 17: 
      label = 19; break;
    case 18: 
      var $64=$_py_tmp1;
      var $65=(($64+4)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66+24)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=$_py_tmp1;
      FUNCTION_TABLE[$68]($69);
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $75=$2;
      var $76=(($75+28)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=(($77)|(0))!=0;
      if ($78) { label = 24; break; } else { label = 30; break; }
    case 24: 
      var $80=$2;
      var $81=(($80+28)|0);
      var $82=HEAP32[(($81)>>2)];
      $_py_tmp2=$82;
      var $83=$2;
      var $84=(($83+28)|0);
      HEAP32[(($84)>>2)]=0;
      label = 25; break;
    case 25: 
      var $86=$_py_tmp2;
      var $87=(($86)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=((($88)-(1))|0);
      HEAP32[(($87)>>2)]=$89;
      var $90=(($89)|(0))!=0;
      if ($90) { label = 26; break; } else { label = 27; break; }
    case 26: 
      label = 28; break;
    case 27: 
      var $93=$_py_tmp2;
      var $94=(($93+4)|0);
      var $95=HEAP32[(($94)>>2)];
      var $96=(($95+24)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=$_py_tmp2;
      FUNCTION_TABLE[$97]($98);
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      var $104=$2;
      var $105=(($104+32)|0);
      var $106=HEAP32[(($105)>>2)];
      var $107=(($106)|(0))!=0;
      if ($107) { label = 33; break; } else { label = 39; break; }
    case 33: 
      var $109=$2;
      var $110=(($109+32)|0);
      var $111=HEAP32[(($110)>>2)];
      $_py_tmp3=$111;
      var $112=$2;
      var $113=(($112+32)|0);
      HEAP32[(($113)>>2)]=0;
      label = 34; break;
    case 34: 
      var $115=$_py_tmp3;
      var $116=(($115)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=((($117)-(1))|0);
      HEAP32[(($116)>>2)]=$118;
      var $119=(($118)|(0))!=0;
      if ($119) { label = 35; break; } else { label = 36; break; }
    case 35: 
      label = 37; break;
    case 36: 
      var $122=$_py_tmp3;
      var $123=(($122+4)|0);
      var $124=HEAP32[(($123)>>2)];
      var $125=(($124+24)|0);
      var $126=HEAP32[(($125)>>2)];
      var $127=$_py_tmp3;
      FUNCTION_TABLE[$126]($127);
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      var $133=$2;
      var $134=(($133+36)|0);
      var $135=HEAP32[(($134)>>2)];
      var $136=(($135)|(0))!=0;
      if ($136) { label = 42; break; } else { label = 48; break; }
    case 42: 
      var $138=$2;
      var $139=(($138+36)|0);
      var $140=HEAP32[(($139)>>2)];
      $_py_tmp4=$140;
      var $141=$2;
      var $142=(($141+36)|0);
      HEAP32[(($142)>>2)]=0;
      label = 43; break;
    case 43: 
      var $144=$_py_tmp4;
      var $145=(($144)|0);
      var $146=HEAP32[(($145)>>2)];
      var $147=((($146)-(1))|0);
      HEAP32[(($145)>>2)]=$147;
      var $148=(($147)|(0))!=0;
      if ($148) { label = 44; break; } else { label = 45; break; }
    case 44: 
      label = 46; break;
    case 45: 
      var $151=$_py_tmp4;
      var $152=(($151+4)|0);
      var $153=HEAP32[(($152)>>2)];
      var $154=(($153+24)|0);
      var $155=HEAP32[(($154)>>2)];
      var $156=$_py_tmp4;
      FUNCTION_TABLE[$155]($156);
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      var $162=$2;
      var $163=(($162+64)|0);
      var $164=HEAP32[(($163)>>2)];
      var $165=(($164)|(0))!=0;
      if ($165) { label = 51; break; } else { label = 57; break; }
    case 51: 
      var $167=$2;
      var $168=(($167+64)|0);
      var $169=HEAP32[(($168)>>2)];
      $_py_tmp5=$169;
      var $170=$2;
      var $171=(($170+64)|0);
      HEAP32[(($171)>>2)]=0;
      label = 52; break;
    case 52: 
      var $173=$_py_tmp5;
      var $174=(($173)|0);
      var $175=HEAP32[(($174)>>2)];
      var $176=((($175)-(1))|0);
      HEAP32[(($174)>>2)]=$176;
      var $177=(($176)|(0))!=0;
      if ($177) { label = 53; break; } else { label = 54; break; }
    case 53: 
      label = 55; break;
    case 54: 
      var $180=$_py_tmp5;
      var $181=(($180+4)|0);
      var $182=HEAP32[(($181)>>2)];
      var $183=(($182+24)|0);
      var $184=HEAP32[(($183)>>2)];
      var $185=$_py_tmp5;
      FUNCTION_TABLE[$184]($185);
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      label = 59; break;
    case 59: 
      var $191=$2;
      var $192=(($191+72)|0);
      var $193=HEAP32[(($192)>>2)];
      var $194=(($193)|(0))!=0;
      if ($194) { label = 60; break; } else { label = 66; break; }
    case 60: 
      var $196=$2;
      var $197=(($196+72)|0);
      var $198=HEAP32[(($197)>>2)];
      $_py_tmp6=$198;
      var $199=$2;
      var $200=(($199+72)|0);
      HEAP32[(($200)>>2)]=0;
      label = 61; break;
    case 61: 
      var $202=$_py_tmp6;
      var $203=(($202)|0);
      var $204=HEAP32[(($203)>>2)];
      var $205=((($204)-(1))|0);
      HEAP32[(($203)>>2)]=$205;
      var $206=(($205)|(0))!=0;
      if ($206) { label = 62; break; } else { label = 63; break; }
    case 62: 
      label = 64; break;
    case 63: 
      var $209=$_py_tmp6;
      var $210=(($209+4)|0);
      var $211=HEAP32[(($210)>>2)];
      var $212=(($211+24)|0);
      var $213=HEAP32[(($212)>>2)];
      var $214=$_py_tmp6;
      FUNCTION_TABLE[$213]($214);
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      label = 68; break;
    case 68: 
      var $220=$2;
      var $221=(($220+80)|0);
      var $222=HEAP32[(($221)>>2)];
      var $223=(($222)|(0))!=0;
      if ($223) { label = 69; break; } else { label = 75; break; }
    case 69: 
      var $225=$2;
      var $226=(($225+80)|0);
      var $227=HEAP32[(($226)>>2)];
      $_py_tmp7=$227;
      var $228=$2;
      var $229=(($228+80)|0);
      HEAP32[(($229)>>2)]=0;
      label = 70; break;
    case 70: 
      var $231=$_py_tmp7;
      var $232=(($231)|0);
      var $233=HEAP32[(($232)>>2)];
      var $234=((($233)-(1))|0);
      HEAP32[(($232)>>2)]=$234;
      var $235=(($234)|(0))!=0;
      if ($235) { label = 71; break; } else { label = 72; break; }
    case 71: 
      label = 73; break;
    case 72: 
      var $238=$_py_tmp7;
      var $239=(($238+4)|0);
      var $240=HEAP32[(($239)>>2)];
      var $241=(($240+24)|0);
      var $242=HEAP32[(($241)>>2)];
      var $243=$_py_tmp7;
      FUNCTION_TABLE[$242]($243);
      label = 73; break;
    case 73: 
      label = 74; break;
    case 74: 
      label = 75; break;
    case 75: 
      label = 76; break;
    case 76: 
      label = 77; break;
    case 77: 
      var $249=$2;
      var $250=(($249+40)|0);
      var $251=HEAP32[(($250)>>2)];
      var $252=(($251)|(0))!=0;
      if ($252) { label = 78; break; } else { label = 84; break; }
    case 78: 
      var $254=$2;
      var $255=(($254+40)|0);
      var $256=HEAP32[(($255)>>2)];
      $_py_tmp8=$256;
      var $257=$2;
      var $258=(($257+40)|0);
      HEAP32[(($258)>>2)]=0;
      label = 79; break;
    case 79: 
      var $260=$_py_tmp8;
      var $261=(($260)|0);
      var $262=HEAP32[(($261)>>2)];
      var $263=((($262)-(1))|0);
      HEAP32[(($261)>>2)]=$263;
      var $264=(($263)|(0))!=0;
      if ($264) { label = 80; break; } else { label = 81; break; }
    case 80: 
      label = 82; break;
    case 81: 
      var $267=$_py_tmp8;
      var $268=(($267+4)|0);
      var $269=HEAP32[(($268)>>2)];
      var $270=(($269+24)|0);
      var $271=HEAP32[(($270)>>2)];
      var $272=$_py_tmp8;
      FUNCTION_TABLE[$271]($272);
      label = 82; break;
    case 82: 
      label = 83; break;
    case 83: 
      label = 84; break;
    case 84: 
      label = 85; break;
    case 85: 
      label = 86; break;
    case 86: 
      var $278=$2;
      var $279=(($278+84)|0);
      var $280=HEAP32[(($279)>>2)];
      var $281=(($280)|(0))!=0;
      if ($281) { label = 87; break; } else { label = 93; break; }
    case 87: 
      var $283=$2;
      var $284=(($283+84)|0);
      var $285=HEAP32[(($284)>>2)];
      $_py_tmp9=$285;
      var $286=$2;
      var $287=(($286+84)|0);
      HEAP32[(($287)>>2)]=0;
      label = 88; break;
    case 88: 
      var $289=$_py_tmp9;
      var $290=(($289)|0);
      var $291=HEAP32[(($290)>>2)];
      var $292=((($291)-(1))|0);
      HEAP32[(($290)>>2)]=$292;
      var $293=(($292)|(0))!=0;
      if ($293) { label = 89; break; } else { label = 90; break; }
    case 89: 
      label = 91; break;
    case 90: 
      var $296=$_py_tmp9;
      var $297=(($296+4)|0);
      var $298=HEAP32[(($297)>>2)];
      var $299=(($298+24)|0);
      var $300=HEAP32[(($299)>>2)];
      var $301=$_py_tmp9;
      FUNCTION_TABLE[$300]($301);
      label = 91; break;
    case 91: 
      label = 92; break;
    case 92: 
      label = 93; break;
    case 93: 
      label = 94; break;
    case 94: 
      $1=0;
      label = 95; break;
    case 95: 
      var $307=$1;
      return $307;
    default: assert(0, "bad label: " + label);
  }
}
function _incrementalnewlinedecoder_newlines_get($self, $context) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$self;
      $3=$context;
      var $4=$2;
      var $5=$4;
      var $6=(($5+16)|0);
      var $7=$6;
      var $8=HEAP32[(($7)>>2)];
      var $9=$8 >>> 2;
      var $10=$9 & 7;
      if ((($10)|(0))==1) {
        label = 2; break;
      }
      else if ((($10)|(0))==2) {
        label = 3; break;
      }
      else if ((($10)|(0))==4) {
        label = 4; break;
      }
      else if ((($10)|(0))==3) {
        label = 5; break;
      }
      else if ((($10)|(0))==5) {
        label = 6; break;
      }
      else if ((($10)|(0))==6) {
        label = 7; break;
      }
      else if ((($10)|(0))==7) {
        label = 8; break;
      }
      else {
      label = 9; break;
      }
    case 2: 
      var $12=_PyUnicodeUCS2_FromString(((__str99)|0));
      $1=$12;
      label = 10; break;
    case 3: 
      var $14=_PyUnicodeUCS2_FromString(((__str18441)|0));
      $1=$14;
      label = 10; break;
    case 4: 
      var $16=_PyUnicodeUCS2_FromString(((__str100)|0));
      $1=$16;
      label = 10; break;
    case 5: 
      var $18=__Py_BuildValue_SizeT(((__str91)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=((__str99)|0),HEAP32[(((tempInt)+(4))>>2)]=((__str18441)|0),tempInt));
      $1=$18;
      label = 10; break;
    case 6: 
      var $20=__Py_BuildValue_SizeT(((__str91)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=((__str99)|0),HEAP32[(((tempInt)+(4))>>2)]=((__str100)|0),tempInt));
      $1=$20;
      label = 10; break;
    case 7: 
      var $22=__Py_BuildValue_SizeT(((__str91)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=((__str18441)|0),HEAP32[(((tempInt)+(4))>>2)]=((__str100)|0),tempInt));
      $1=$22;
      label = 10; break;
    case 8: 
      var $24=__Py_BuildValue_SizeT(((__str101)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=((__str99)|0),HEAP32[(((tempInt)+(4))>>2)]=((__str18441)|0),HEAP32[(((tempInt)+(8))>>2)]=((__str100)|0),tempInt));
      $1=$24;
      label = 10; break;
    case 9: 
      var $26=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $27=((($26)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$27;
      $1=__Py_NoneStruct;
      label = 10; break;
    case 10: 
      var $29=$1;
      STACKTOP = __stackBase__;
      return $29;
    default: assert(0, "bad label: " + label);
  }
}
function _incrementalnewlinedecoder_decode($self, $args, $kwds) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 20)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $kwlist=__stackBase__;
      var $input=(__stackBase__)+(12);
      var $final=(__stackBase__)+(16);
      $2=$self;
      $3=$args;
      $4=$kwds;
      var $5=$kwlist;
      assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[((_incrementalnewlinedecoder_decode_kwlist)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[(((_incrementalnewlinedecoder_decode_kwlist)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[(((_incrementalnewlinedecoder_decode_kwlist)+(8))>>2)];
      HEAP32[(($final)>>2)]=0;
      var $6=$3;
      var $7=$4;
      var $8=(($kwlist)|0);
      var $9=__PyArg_ParseTupleAndKeywords_SizeT($6, $7, ((__str108)|0), $8, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$input,HEAP32[(((tempInt)+(4))>>2)]=$final,tempInt));
      var $10=(($9)|(0))!=0;
      if ($10) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 4; break;
    case 3: 
      var $13=$2;
      var $14=$13;
      var $15=HEAP32[(($input)>>2)];
      var $16=HEAP32[(($final)>>2)];
      var $17=__PyIncrementalNewlineDecoder_decode($14, $15, $16);
      $1=$17;
      label = 4; break;
    case 4: 
      var $19=$1;
      STACKTOP = __stackBase__;
      return $19;
    default: assert(0, "bad label: " + label);
  }
}
function _incrementalnewlinedecoder_getstate($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $buffer=__stackBase__;
      var $flag=(__stackBase__)+(4);
      var $state;
      $2=$self;
      $3=$args;
      var $4=$2;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0))!=((__Py_NoneStruct)|(0));
      if ($7) { label = 2; break; } else { label = 17; break; }
    case 2: 
      var $9=$2;
      var $10=(($9+8)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=HEAP32[((__PyIO_str_getstate)>>2)];
      var $13=_PyObject_CallMethodObjArgs($11, $12, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $state=$13;
      var $14=$state;
      var $15=(($14)|(0))==0;
      if ($15) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=0;
      label = 21; break;
    case 4: 
      var $18=$state;
      var $19=__PyArg_Parse_SizeT($18, ((__str103)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$buffer,HEAP32[(((tempInt)+(4))>>2)]=$flag,tempInt));
      var $20=(($19)|(0))!=0;
      if ($20) { label = 11; break; } else { label = 5; break; }
    case 5: 
      label = 6; break;
    case 6: 
      var $23=$state;
      var $24=(($23)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=((($25)-(1))|0);
      HEAP32[(($24)>>2)]=$26;
      var $27=(($26)|(0))!=0;
      if ($27) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 9; break;
    case 8: 
      var $30=$state;
      var $31=(($30+4)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32+24)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=$state;
      FUNCTION_TABLE[$34]($35);
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      $1=0;
      label = 21; break;
    case 11: 
      var $39=HEAP32[(($buffer)>>2)];
      var $40=(($39)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=((($41)+(1))|0);
      HEAP32[(($40)>>2)]=$42;
      label = 12; break;
    case 12: 
      var $44=$state;
      var $45=(($44)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=((($46)-(1))|0);
      HEAP32[(($45)>>2)]=$47;
      var $48=(($47)|(0))!=0;
      if ($48) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 15; break;
    case 14: 
      var $51=$state;
      var $52=(($51+4)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=(($53+24)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=$state;
      FUNCTION_TABLE[$55]($56);
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 18; break;
    case 17: 
      var $60=_PyString_FromString(((__str61484)|0));
      HEAP32[(($buffer)>>2)]=$60;
      var $$etemp$0$0=0;
      var $$etemp$0$1=0;
      var $st$1$0=(($flag)|0);
      HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
      var $st$2$1=(($flag+4)|0);
      HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
      label = 18; break;
    case 18: 
      var $ld$3$0=(($flag)|0);
      var $62$0=HEAP32[(($ld$3$0)>>2)];
      var $ld$4$1=(($flag+4)|0);
      var $62$1=HEAP32[(($ld$4$1)>>2)];
      var $63$0=($62$0 << 1) | (0 >>> 31);
      var $63$1=($62$1 << 1) | ($62$0 >>> 31);
      var $st$5$0=(($flag)|0);
      HEAP32[(($st$5$0)>>2)]=$63$0;
      var $st$6$1=(($flag+4)|0);
      HEAP32[(($st$6$1)>>2)]=$63$1;
      var $64=$2;
      var $65=$64;
      var $66=(($65+16)|0);
      var $67=$66;
      var $68=HEAP32[(($67)>>2)];
      var $69=$68 & 1;
      var $70=$69 << 31;
      var $71=$70 >> 31;
      var $72=(($71)|(0))!=0;
      if ($72) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $ld$7$0=(($flag)|0);
      var $74$0=HEAP32[(($ld$7$0)>>2)];
      var $ld$8$1=(($flag+4)|0);
      var $74$1=HEAP32[(($ld$8$1)>>2)];
      var $$etemp$9$0=1;
      var $$etemp$9$1=0;
      var $75$0=$74$0 | $$etemp$9$0;
      var $75$1=$74$1 | $$etemp$9$1;
      var $st$10$0=(($flag)|0);
      HEAP32[(($st$10$0)>>2)]=$75$0;
      var $st$11$1=(($flag+4)|0);
      HEAP32[(($st$11$1)>>2)]=$75$1;
      label = 20; break;
    case 20: 
      var $77=HEAP32[(($buffer)>>2)];
      var $ld$12$0=(($flag)|0);
      var $78$0=HEAP32[(($ld$12$0)>>2)];
      var $ld$13$1=(($flag+4)|0);
      var $78$1=HEAP32[(($ld$13$1)>>2)];
      var $$etemp$14=((__str105)|0);
      var $79=__Py_BuildValue_SizeT($$etemp$14, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$77,HEAP32[(((tempInt)+(4))>>2)]=$78$0,HEAP32[(((tempInt)+(8))>>2)]=$78$1,tempInt));
      $1=$79;
      label = 21; break;
    case 21: 
      var $81=$1;
      STACKTOP = __stackBase__;
      return $81;
    default: assert(0, "bad label: " + label);
  }
}
function _incrementalnewlinedecoder_setstate($self, $state) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $buffer=__stackBase__;
      var $flag=(__stackBase__)+(4);
      $2=$self;
      $3=$state;
      var $4=$3;
      var $5=__PyArg_Parse_SizeT($4, ((__str103)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$buffer,HEAP32[(((tempInt)+(4))>>2)]=$flag,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 6; break;
    case 3: 
      var $ld$0$0=(($flag)|0);
      var $9$0=HEAP32[(($ld$0$0)>>2)];
      var $ld$1$1=(($flag+4)|0);
      var $9$1=HEAP32[(($ld$1$1)>>2)];
      var $10$0=$9$0;
      var $10=$10$0;
      var $11=$10 & 1;
      var $12=$2;
      var $13=$11 & 1;
      var $14=$13 << 31;
      var $15=$14 >> 31;
      var $16=$12;
      var $17=(($16+16)|0);
      var $18=$17;
      var $19=$13 & 1;
      var $20=HEAP32[(($18)>>2)];
      var $21=$20 & -2;
      var $22=$21 | $19;
      HEAP32[(($18)>>2)]=$22;
      var $ld$2$0=(($flag)|0);
      var $23$0=HEAP32[(($ld$2$0)>>2)];
      var $ld$3$1=(($flag+4)|0);
      var $23$1=HEAP32[(($ld$3$1)>>2)];
      var $24$0=($23$0 >>> 1) | ($23$1 << 31);
      var $24$1=($23$1 >>> 1) | (0 << 31);
      var $st$4$0=(($flag)|0);
      HEAP32[(($st$4$0)>>2)]=$24$0;
      var $st$5$1=(($flag+4)|0);
      HEAP32[(($st$5$1)>>2)]=$24$1;
      var $25=$2;
      var $26=(($25+8)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27)|(0))!=((__Py_NoneStruct)|(0));
      if ($28) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $30=$2;
      var $31=(($30+8)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=HEAP32[(($buffer)>>2)];
      var $ld$6$0=(($flag)|0);
      var $34$0=HEAP32[(($ld$6$0)>>2)];
      var $ld$7$1=(($flag+4)|0);
      var $34$1=HEAP32[(($ld$7$1)>>2)];
      var $$etemp$9=((__str104)|0);
      var $$etemp$8=((__str63486)|0);
      var $35=__PyObject_CallMethod_SizeT($32, $$etemp$8, $$etemp$9, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$33,HEAP32[(((tempInt)+(4))>>2)]=$34$0,HEAP32[(((tempInt)+(8))>>2)]=$34$1,tempInt));
      $1=$35;
      label = 6; break;
    case 5: 
      var $37=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $38=((($37)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$38;
      $1=__Py_NoneStruct;
      label = 6; break;
    case 6: 
      var $40=$1;
      STACKTOP = __stackBase__;
      return $40;
    default: assert(0, "bad label: " + label);
  }
}
function _incrementalnewlinedecoder_reset($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$self;
      $3=$args;
      var $4=$2;
      var $5=$4;
      var $6=(($5+16)|0);
      var $7=$6;
      var $8=HEAP32[(($7)>>2)];
      var $9=$8 & -29;
      HEAP32[(($7)>>2)]=$9;
      var $10=$2;
      var $11=$10;
      var $12=(($11+16)|0);
      var $13=$12;
      var $14=HEAP32[(($13)>>2)];
      var $15=$14 & -2;
      HEAP32[(($13)>>2)]=$15;
      var $16=$2;
      var $17=(($16+8)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18)|(0))!=((__Py_NoneStruct)|(0));
      if ($19) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $21=$2;
      var $22=(($21+8)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=HEAP32[((__PyIO_str_reset)>>2)];
      var $25=_PyObject_CallMethodObjArgs($23, $24, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=$25;
      label = 4; break;
    case 3: 
      var $27=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $28=((($27)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$28;
      $1=__Py_NoneStruct;
      label = 4; break;
    case 4: 
      var $30=$1;
      STACKTOP = __stackBase__;
      return $30;
    default: assert(0, "bad label: " + label);
  }
}
function _textiobase_detach($self) {
  var label = 0;
  var $1;
  $1=$self;
  var $2=__unsupported(((__str39462)|0));
  return $2;
}
function _textiobase_read($self, $args) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$args;
  var $3=__unsupported(((__str41464)|0));
  return $3;
}
function _textiobase_readline($self, $args) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$args;
  var $3=__unsupported(((__str42465)|0));
  return $3;
}
function _textiobase_write($self, $args) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$args;
  var $3=__unsupported(((__str40463)|0));
  return $3;
}
function __unsupported($message) {
  var label = 0;
  var $1;
  $1=$message;
  var $2=HEAP32[((__PyIO_unsupported_operation)>>2)];
  var $3=$1;
  _PyErr_SetString($2, $3);
  return 0;
}
// EMSCRIPTEN_END_FUNCS
// EMSCRIPTEN_END_FUNCS
// Warning: printing of i64 values may be slightly rounded! No deep i64 math used, so precise i64 code not included
var i64Math = null;
// === Auto-generated postamble setup entry stuff ===
function run(args) {
  initRuntime();
}
Module['run'] = run;
// {{PRE_RUN_ADDITIONS}}
run();
// {{POST_RUN_ADDITIONS}}
  // {{MODULE_ADDITIONS}}
  return Module;
});
