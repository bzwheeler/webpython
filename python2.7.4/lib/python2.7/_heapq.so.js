// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
// Capture the output of this into a variable, if you want
(function(FUNCTION_TABLE_OFFSET, globalScope) {
  var Module = {};
  var args = [];
  Module.arguments = [];
// === Auto-generated preamble library stuff ===
//========================================
// Runtime essentials
//========================================
function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.pop();
    var func = callback.func;
    if (typeof func === 'number') {
      func = FUNCTION_TABLE[func];
    }
    func(callback.arg === undefined ? null : callback.arg);
  }
}
var __ATINIT__ = []; // functions called during startup
function initRuntime() {
  callRuntimeCallbacks(__ATINIT__);
}
// === Body ===
var _nsmallest_doc;
var _nlargest_doc;
var _module_doc;
var _heapreplace_doc;
var _heapq_methods;
var _heappushpop_doc;
var _heappush_doc;
var _heappop_doc;
var _heapify_doc;
var _cmp_lt_lt;
var __str9;
var __str8;
var __str7;
var __str6;
var __str5;
var __str4;
var __str3;
var __str2;
var __str16;
var __str15;
var __str14;
var __str13;
var __str12;
var __str11;
var __str10;
var __str1;
var __str;
var ___func____siftupmax;
var ___func____siftup;
var ___func____siftdownmax;
var ___func____siftdown;
var ___about__;
_nsmallest_doc=allocate([70,105,110,100,32,116,104,101,32,110,32,115,109,97,108,108,101,115,116,32,101,108,101,109,101,110,116,115,32,105,110,32,97,32,100,97,116,97,115,101,116,46,10,10,69,113,117,105,118,97,108,101,110,116,32,116,111,58,32,32,115,111,114,116,101,100,40,105,116,101,114,97,98,108,101,41,91,58,110,93,10,0,0,0], "i8", ALLOC_NORMAL);
_nlargest_doc=allocate([70,105,110,100,32,116,104,101,32,110,32,108,97,114,103,101,115,116,32,101,108,101,109,101,110,116,115,32,105,110,32,97,32,100,97,116,97,115,101,116,46,10,10,69,113,117,105,118,97,108,101,110,116,32,116,111,58,32,32,115,111,114,116,101,100,40,105,116,101,114,97,98,108,101,44,32,114,101,118,101,114,115,101,61,84,114,117,101,41,91,58,110,93,10,0,0], "i8", ALLOC_NORMAL);
_module_doc=allocate([72,101,97,112,32,113,117,101,117,101,32,97,108,103,111,114,105,116,104,109,32,40,97,46,107,46,97,46,32,112,114,105,111,114,105,116,121,32,113,117,101,117,101,41,46,10,10,72,101,97,112,115,32,97,114,101,32,97,114,114,97,121,115,32,102,111,114,32,119,104,105,99,104,32,97,91,107,93,32,60,61,32,97,91,50,42,107,43,49,93,32,97,110,100,32,97,91,107,93,32,60,61,32,97,91,50,42,107,43,50,93,32,102,111,114,10,97,108,108,32,107,44,32,99,111,117,110,116,105,110,103,32,101,108,101,109,101,110,116,115,32,102,114,111,109,32,48,46,32,32,70,111,114,32,116,104,101,32,115,97,107,101,32,111,102,32,99,111,109,112,97,114,105,115,111,110,44,10,110,111,110,45,101,120,105,115,116,105,110,103,32,101,108,101,109,101,110,116,115,32,97,114,101,32,99,111,110,115,105,100,101,114,101,100,32,116,111,32,98,101,32,105,110,102,105,110,105,116,101,46,32,32,84,104,101,32,105,110,116,101,114,101,115,116,105,110,103,10,112,114,111,112,101,114,116,121,32,111,102,32,97,32,104,101,97,112,32,105,115,32,116,104,97,116,32,97,91,48,93,32,105,115,32,97,108,119,97,121,115,32,105,116,115,32,115,109,97,108,108,101,115,116,32,101,108,101,109,101,110,116,46,10,10,85,115,97,103,101,58,10,10,104,101,97,112,32,61,32,91,93,32,32,32,32,32,32,32,32,32,32,32,32,35,32,99,114,101,97,116,101,115,32,97,110,32,101,109,112,116,121,32,104,101,97,112,10,104,101,97,112,112,117,115,104,40,104,101,97,112,44,32,105,116,101,109,41,32,35,32,112,117,115,104,101,115,32,97,32,110,101,119,32,105,116,101,109,32,111,110,32,116,104,101,32,104,101,97,112,10,105,116,101,109,32,61,32,104,101,97,112,112,111,112,40,104,101,97,112,41,32,35,32,112,111,112,115,32,116,104,101,32,115,109,97,108,108,101,115,116,32,105,116,101,109,32,102,114,111,109,32,116,104,101,32,104,101,97,112,10,105,116,101,109,32,61,32,104,101,97,112,91,48,93,32,32,32,32,32,32,32,35,32,115,109,97,108,108,101,115,116,32,105,116,101,109,32,111,110,32,116,104,101,32,104,101,97,112,32,119,105,116,104,111,117,116,32,112,111,112,112,105,110,103,32,105,116,10,104,101,97,112,105,102,121,40,120,41,32,32,32,32,32,32,32,32,32,32,32,35,32,116,114,97,110,115,102,111,114,109,115,32,108,105,115,116,32,105,110,116,111,32,97,32,104,101,97,112,44,32,105,110,45,112,108,97,99,101,44,32,105,110,32,108,105,110,101,97,114,32,116,105,109,101,10,105,116,101,109,32,61,32,104,101,97,112,114,101,112,108,97,99,101,40,104,101,97,112,44,32,105,116,101,109,41,32,35,32,112,111,112,115,32,97,110,100,32,114,101,116,117,114,110,115,32,115,109,97,108,108,101,115,116,32,105,116,101,109,44,32,97,110,100,32,97,100,100,115,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,35,32,110,101,119,32,105,116,101,109,59,32,116,104,101,32,104,101,97,112,32,115,105,122,101,32,105,115,32,117,110,99,104,97,110,103,101,100,10,10,79,117,114,32,65,80,73,32,100,105,102,102,101,114,115,32,102,114,111,109,32,116,101,120,116,98,111,111,107,32,104,101,97,112,32,97,108,103,111,114,105,116,104,109,115,32,97,115,32,102,111,108,108,111,119,115,58,10,10,45,32,87,101,32,117,115,101,32,48,45,98,97,115,101,100,32,105,110,100,101,120,105,110,103,46,32,32,84,104,105,115,32,109,97,107,101,115,32,116,104,101,32,114,101,108,97,116,105,111,110,115,104,105,112,32,98,101,116,119,101,101,110,32,116,104,101,10,32,32,105,110,100,101,120,32,102,111,114,32,97,32,110,111,100,101,32,97,110,100,32,116,104,101,32,105,110,100,101,120,101,115,32,102,111,114,32,105,116,115,32,99,104,105,108,100,114,101,110,32,115,108,105,103,104,116,108,121,32,108,101,115,115,10,32,32,111,98,118,105,111,117,115,44,32,98,117,116,32,105,115,32,109,111,114,101,32,115,117,105,116,97,98,108,101,32,115,105,110,99,101,32,80,121,116,104,111,110,32,117,115,101,115,32,48,45,98,97,115,101,100,32,105,110,100,101,120,105,110,103,46,10,10,45,32,79,117,114,32,104,101,97,112,112,111,112,40,41,32,109,101,116,104,111,100,32,114,101,116,117,114,110,115,32,116,104,101,32,115,109,97,108,108,101,115,116,32,105,116,101,109,44,32,110,111,116,32,116,104,101,32,108,97,114,103,101,115,116,46,10,10,84,104,101,115,101,32,116,119,111,32,109,97,107,101,32,105,116,32,112,111,115,115,105,98,108,101,32,116,111,32,118,105,101,119,32,116,104,101,32,104,101,97,112,32,97,115,32,97,32,114,101,103,117,108,97,114,32,80,121,116,104,111,110,32,108,105,115,116,10,119,105,116,104,111,117,116,32,115,117,114,112,114,105,115,101,115,58,32,104,101,97,112,91,48,93,32,105,115,32,116,104,101,32,115,109,97,108,108,101,115,116,32,105,116,101,109,44,32,97,110,100,32,104,101,97,112,46,115,111,114,116,40,41,10,109,97,105,110,116,97,105,110,115,32,116,104,101,32,104,101,97,112,32,105,110,118,97,114,105,97,110,116,33,10,0], "i8", ALLOC_NORMAL);
_heapreplace_doc=allocate([104,101,97,112,114,101,112,108,97,99,101,40,104,101,97,112,44,32,105,116,101,109,41,32,45,62,32,118,97,108,117,101,46,32,80,111,112,32,97,110,100,32,114,101,116,117,114,110,32,116,104,101,32,99,117,114,114,101,110,116,32,115,109,97,108,108,101,115,116,32,118,97,108,117,101,44,32,97,110,100,32,97,100,100,32,116,104,101,32,110,101,119,32,105,116,101,109,46,10,10,84,104,105,115,32,105,115,32,109,111,114,101,32,101,102,102,105,99,105,101,110,116,32,116,104,97,110,32,104,101,97,112,112,111,112,40,41,32,102,111,108,108,111,119,101,100,32,98,121,32,104,101,97,112,112,117,115,104,40,41,44,32,97,110,100,32,99,97,110,32,98,101,10,109,111,114,101,32,97,112,112,114,111,112,114,105,97,116,101,32,119,104,101,110,32,117,115,105,110,103,32,97,32,102,105,120,101,100,45,115,105,122,101,32,104,101,97,112,46,32,32,78,111,116,101,32,116,104,97,116,32,116,104,101,32,118,97,108,117,101,10,114,101,116,117,114,110,101,100,32,109,97,121,32,98,101,32,108,97,114,103,101,114,32,116,104,97,110,32,105,116,101,109,33,32,32,84,104,97,116,32,99,111,110,115,116,114,97,105,110,115,32,114,101,97,115,111,110,97,98,108,101,32,117,115,101,115,32,111,102,10,116,104,105,115,32,114,111,117,116,105,110,101,32,117,110,108,101,115,115,32,119,114,105,116,116,101,110,32,97,115,32,112,97,114,116,32,111,102,32,97,32,99,111,110,100,105,116,105,111,110,97,108,32,114,101,112,108,97,99,101,109,101,110,116,58,10,10,32,32,32,32,105,102,32,105,116,101,109,32,62,32,104,101,97,112,91,48,93,58,10,32,32,32,32,32,32,32,32,105,116,101,109,32,61,32,104,101,97,112,114,101,112,108,97,99,101,40,104,101,97,112,44,32,105,116,101,109,41,10,0,0,0,0], "i8", ALLOC_NORMAL);
_heapq_methods=allocate([0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_heappushpop_doc=allocate([104,101,97,112,112,117,115,104,112,111,112,40,104,101,97,112,44,32,105,116,101,109,41,32,45,62,32,118,97,108,117,101,46,32,80,117,115,104,32,105,116,101,109,32,111,110,32,116,104,101,32,104,101,97,112,44,32,116,104,101,110,32,112,111,112,32,97,110,100,32,114,101,116,117,114,110,32,116,104,101,32,115,109,97,108,108,101,115,116,32,105,116,101,109,10,102,114,111,109,32,116,104,101,32,104,101,97,112,46,32,84,104,101,32,99,111,109,98,105,110,101,100,32,97,99,116,105,111,110,32,114,117,110,115,32,109,111,114,101,32,101,102,102,105,99,105,101,110,116,108,121,32,116,104,97,110,10,104,101,97,112,112,117,115,104,40,41,32,102,111,108,108,111,119,101,100,32,98,121,32,97,32,115,101,112,97,114,97,116,101,32,99,97,108,108,32,116,111,32,104,101,97,112,112,111,112,40,41,46,0,0,0], "i8", ALLOC_NORMAL);
_heappush_doc=allocate([104,101,97,112,112,117,115,104,40,104,101,97,112,44,32,105,116,101,109,41,32,45,62,32,78,111,110,101,46,32,80,117,115,104,32,105,116,101,109,32,111,110,116,111,32,104,101,97,112,44,32,109,97,105,110,116,97,105,110,105,110,103,32,116,104,101,32,104,101,97,112,32,105,110,118,97,114,105,97,110,116,46,0,0], "i8", ALLOC_NORMAL);
_heappop_doc=allocate([80,111,112,32,116,104,101,32,115,109,97,108,108,101,115,116,32,105,116,101,109,32,111,102,102,32,116,104,101,32,104,101,97,112,44,32,109,97,105,110,116,97,105,110,105,110,103,32,116,104,101,32,104,101,97,112,32,105,110,118,97,114,105,97,110,116,46,0], "i8", ALLOC_NORMAL);
_heapify_doc=allocate([84,114,97,110,115,102,111,114,109,32,108,105,115,116,32,105,110,116,111,32,97,32,104,101,97,112,44,32,105,110,45,112,108,97,99,101,44,32,105,110,32,79,40,108,101,110,40,104,101,97,112,41,41,32,116,105,109,101,46,0], "i8", ALLOC_NORMAL);
_cmp_lt_lt=allocate([0,0,0,0], "i8", ALLOC_NORMAL);
__str9=allocate([110,79,58,110,115,109,97,108,108,101,115,116,0,0,0,0], "i8", ALLOC_NORMAL);
__str8=allocate([110,115,109,97,108,108,101,115,116,0,0,0], "i8", ALLOC_NORMAL);
__str7=allocate([110,108,97,114,103,101,115,116,0,0,0,0], "i8", ALLOC_NORMAL);
__str6=allocate([104,101,97,112,105,102,121,0], "i8", ALLOC_NORMAL);
__str5=allocate([104,101,97,112,114,101,112,108,97,99,101,0], "i8", ALLOC_NORMAL);
__str4=allocate([104,101,97,112,112,111,112,0], "i8", ALLOC_NORMAL);
__str3=allocate([104,101,97,112,112,117,115,104,112,111,112,0], "i8", ALLOC_NORMAL);
__str2=allocate([104,101,97,112,112,117,115,104,0,0,0,0], "i8", ALLOC_NORMAL);
__str16=allocate([104,101,97,112,32,97,114,103,117,109,101,110,116,32,109,117,115,116,32,98,101,32,97,32,108,105,115,116,0,0,0,0], "i8", ALLOC_NORMAL);
__str15=allocate([108,105,115,116,32,99,104,97,110,103,101,100,32,115,105,122,101,32,100,117,114,105,110,103,32,105,116,101,114,97,116,105,111,110,0,0], "i8", ALLOC_NORMAL);
__str14=allocate([110,79,58,110,108,97,114,103,101,115,116,0], "i8", ALLOC_NORMAL);
__str13=allocate([105,110,100,101,120,32,111,117,116,32,111,102,32,114,97,110,103,101,0,0], "i8", ALLOC_NORMAL);
__str12=allocate([80,121,76,105,115,116,95,67,104,101,99,107,40,104,101,97,112,41,0,0], "i8", ALLOC_NORMAL);
__str11=allocate([46,46,47,77,111,100,117,108,101,115,47,95,104,101,97,112,113,109,111,100,117,108,101,46,99,0,0,0], "i8", ALLOC_NORMAL);
__str10=allocate([95,95,108,116,95,95,0,0], "i8", ALLOC_NORMAL);
__str1=allocate([95,95,97,98,111,117,116,95,95,0,0,0], "i8", ALLOC_NORMAL);
__str=allocate([95,104,101,97,112,113,0,0], "i8", ALLOC_NORMAL);
___func____siftupmax=allocate([95,115,105,102,116,117,112,109,97,120,0,0], "i8", ALLOC_NORMAL);
___func____siftup=allocate([95,115,105,102,116,117,112,0], "i8", ALLOC_NORMAL);
___func____siftdownmax=allocate([95,115,105,102,116,100,111,119,110,109,97,120,0,0,0,0], "i8", ALLOC_NORMAL);
___func____siftdown=allocate([95,115,105,102,116,100,111,119,110,0,0,0], "i8", ALLOC_NORMAL);
___about__=allocate([72,101,97,112,32,113,117,101,117,101,115,10,10,91,101,120,112,108,97,110,97,116,105,111,110,32,98,121,32,70,114,97,110,231,111,105,115,32,80,105,110,97,114,100,93,10,10,72,101,97,112,115,32,97,114,101,32,97,114,114,97,121,115,32,102,111,114,32,119,104,105,99,104,32,97,91,107,93,32,60,61,32,97,91,50,42,107,43,49,93,32,97,110,100,32,97,91,107,93,32,60,61,32,97,91,50,42,107,43,50,93,32,102,111,114,10,97,108,108,32,107,44,32,99,111,117,110,116,105,110,103,32,101,108,101,109,101,110,116,115,32,102,114,111,109,32,48,46,32,32,70,111,114,32,116,104,101,32,115,97,107,101,32,111,102,32,99,111,109,112,97,114,105,115,111,110,44,10,110,111,110,45,101,120,105,115,116,105,110,103,32,101,108,101,109,101,110,116,115,32,97,114,101,32,99,111,110,115,105,100,101,114,101,100,32,116,111,32,98,101,32,105,110,102,105,110,105,116,101,46,32,32,84,104,101,32,105,110,116,101,114,101,115,116,105,110,103,10,112,114,111,112,101,114,116,121,32,111,102,32,97,32,104,101,97,112,32,105,115,32,116,104,97,116,32,97,91,48,93,32,105,115,32,97,108,119,97,121,115,32,105,116,115,32,115,109,97,108,108,101,115,116,32,101,108,101,109,101,110,116,46,10,10,84,104,101,32,115,116,114,97,110,103,101,32,105,110,118,97,114,105,97,110,116,32,97,98,111,118,101,32,105,115,32,109,101,97,110,116,32,116,111,32,98,101,32,97,110,32,101,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,10,114,101,112,114,101,115,101,110,116,97,116,105,111,110,32,102,111,114,32,97,32,116,111,117,114,110,97,109,101,110,116,46,32,32,84,104,101,32,110,117,109,98,101,114,115,32,98,101,108,111,119,32,97,114,101,32,96,107,39,44,32,110,111,116,32,97,91,107,93,58,10,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,48,10,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,49,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,50,10,10,32,32,32,32,32,32,32,32,32,32,51,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,52,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,53,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,54,10,10,32,32,32,32,32,32,55,32,32,32,32,32,32,32,56,32,32,32,32,32,32,32,57,32,32,32,32,32,32,32,49,48,32,32,32,32,32,32,49,49,32,32,32,32,32,32,49,50,32,32,32,32,32,32,49,51,32,32,32,32,32,32,49,52,10,10,32,32,32,32,49,53,32,49,54,32,32,32,49,55,32,49,56,32,32,32,49,57,32,50,48,32,32,32,50,49,32,50,50,32,32,32,50,51,32,50,52,32,32,32,50,53,32,50,54,32,32,32,50,55,32,50,56,32,32,32,50,57,32,51,48,10,10,10,73,110,32,116,104,101,32,116,114,101,101,32,97,98,111,118,101,44,32,101,97,99,104,32,99,101,108,108,32,96,107,39,32,105,115,32,116,111,112,112,105,110,103,32,96,50,42,107,43,49,39,32,97,110,100,32,96,50,42,107,43,50,39,46,32,32,73,110,10,97,110,32,117,115,117,97,108,32,98,105,110,97,114,121,32,116,111,117,114,110,97,109,101,110,116,32,119,101,32,115,101,101,32,105,110,32,115,112,111,114,116,115,44,32,101,97,99,104,32,99,101,108,108,32,105,115,32,116,104,101,32,119,105,110,110,101,114,10,111,118,101,114,32,116,104,101,32,116,119,111,32,99,101,108,108,115,32,105,116,32,116,111,112,115,44,32,97,110,100,32,119,101,32,99,97,110,32,116,114,97,99,101,32,116,104,101,32,119,105,110,110,101,114,32,100,111,119,110,32,116,104,101,32,116,114,101,101,10,116,111,32,115,101,101,32,97,108,108,32,111,112,112,111,110,101,110,116,115,32,115,47,104,101,32,104,97,100,46,32,32,72,111,119,101,118,101,114,44,32,105,110,32,109,97,110,121,32,99,111,109,112,117,116,101,114,32,97,112,112,108,105,99,97,116,105,111,110,115,10,111,102,32,115,117,99,104,32,116,111,117,114,110,97,109,101,110,116,115,44,32,119,101,32,100,111,32,110,111,116,32,110,101,101,100,32,116,111,32,116,114,97,99,101,32,116,104,101,32,104,105,115,116,111,114,121,32,111,102,32,97,32,119,105,110,110,101,114,46,10,84,111,32,98,101,32,109,111,114,101,32,109,101,109,111,114,121,32,101,102,102,105,99,105,101,110,116,44,32,119,104,101,110,32,97,32,119,105,110,110,101,114,32,105,115,32,112,114,111,109,111,116,101,100,44,32,119,101,32,116,114,121,32,116,111,10,114,101,112,108,97,99,101,32,105,116,32,98,121,32,115,111,109,101,116,104,105,110,103,32,101,108,115,101,32,97,116,32,97,32,108,111,119,101,114,32,108,101,118,101,108,44,32,97,110,100,32,116,104,101,32,114,117,108,101,32,98,101,99,111,109,101,115,10,116,104,97,116,32,97,32,99,101,108,108,32,97,110,100,32,116,104,101,32,116,119,111,32,99,101,108,108,115,32,105,116,32,116,111,112,115,32,99,111,110,116,97,105,110,32,116,104,114,101,101,32,100,105,102,102,101,114,101,110,116,32,105,116,101,109,115,44,10,98,117,116,32,116,104,101,32,116,111,112,32,99,101,108,108,32,34,119,105,110,115,34,32,111,118,101,114,32,116,104,101,32,116,119,111,32,116,111,112,112,101,100,32,99,101,108,108,115,46,10,10,73,102,32,116,104,105,115,32,104,101,97,112,32,105,110,118,97,114,105,97,110,116,32,105,115,32,112,114,111,116,101,99,116,101,100,32,97,116,32,97,108,108,32,116,105,109,101,44,32,105,110,100,101,120,32,48,32,105,115,32,99,108,101,97,114,108,121,10,116,104,101,32,111,118,101,114,97,108,108,32,119,105,110,110,101,114,46,32,32,84,104,101,32,115,105,109,112,108,101,115,116,32,97,108,103,111,114,105,116,104,109,105,99,32,119,97,121,32,116,111,32,114,101,109,111,118,101,32,105,116,32,97,110,100,10,102,105,110,100,32,116,104,101,32,34,110,101,120,116,34,32,119,105,110,110,101,114,32,105,115,32,116,111,32,109,111,118,101,32,115,111,109,101,32,108,111,115,101,114,32,40,108,101,116,39,115,32,115,97,121,32,99,101,108,108,32,51,48,32,105,110,32,116,104,101,10,100,105,97,103,114,97,109,32,97,98,111,118,101,41,32,105,110,116,111,32,116,104,101,32,48,32,112,111,115,105,116,105,111,110,44,32,97,110,100,32,116,104,101,110,32,112,101,114,99,111,108,97,116,101,32,116,104,105,115,32,110,101,119,32,48,32,100,111,119,110,10,116,104,101,32,116,114,101,101,44,32,101,120,99,104,97,110,103,105,110,103,32,118,97,108,117,101,115,44,32,117,110,116,105,108,32,116,104,101,32,105,110,118,97,114,105,97,110,116,32,105,115,32,114,101,45,101,115,116,97,98,108,105,115,104,101,100,46,10,84,104,105,115,32,105,115,32,99,108,101,97,114,108,121,32,108,111,103,97,114,105,116,104,109,105,99,32,111,110,32,116,104,101,32,116,111,116,97,108,32,110,117,109,98,101,114,32,111,102,32,105,116,101,109,115,32,105,110,32,116,104,101,32,116,114,101,101,46,10,66,121,32,105,116,101,114,97,116,105,110,103,32,111,118,101,114,32,97,108,108,32,105,116,101,109,115,44,32,121,111,117,32,103,101,116,32,97,110,32,79,40,110,32,108,110,32,110,41,32,115,111,114,116,46,10,10,65,32,110,105,99,101,32,102,101,97,116,117,114,101,32,111,102,32,116,104,105,115,32,115,111,114,116,32,105,115,32,116,104,97,116,32,121,111,117,32,99,97,110,32,101,102,102,105,99,105,101,110,116,108,121,32,105,110,115,101,114,116,32,110,101,119,10,105,116,101,109,115,32,119,104,105,108,101,32,116,104,101,32,115,111,114,116,32,105,115,32,103,111,105,110,103,32,111,110,44,32,112,114,111,118,105,100,101,100,32,116,104,97,116,32,116,104,101,32,105,110,115,101,114,116,101,100,32,105,116,101,109,115,32,97,114,101,10,110,111,116,32,34,98,101,116,116,101,114,34,32,116,104,97,110,32,116,104,101,32,108,97,115,116,32,48,39,116,104,32,101,108,101,109,101,110,116,32,121,111,117,32,101,120,116,114,97,99,116,101,100,46,32,32,84,104,105,115,32,105,115,10,101,115,112,101,99,105,97,108,108,121,32,117,115,101,102,117,108,32,105,110,32,115,105,109,117,108,97,116,105,111,110,32,99,111,110,116,101,120,116,115,44,32,119,104,101,114,101,32,116,104,101,32,116,114,101,101,32,104,111,108,100,115,32,97,108,108,10,105,110,99,111,109,105,110,103,32,101,118,101,110,116,115,44,32,97,110,100,32,116,104,101,32,34,119,105,110,34,32,99,111,110,100,105,116,105,111,110,32,109,101,97,110,115,32,116,104,101,32,115,109,97,108,108,101,115,116,32,115,99,104,101,100,117,108,101,100,10,116,105,109,101,46,32,32,87,104,101,110,32,97,110,32,101,118,101,110,116,32,115,99,104,101,100,117,108,101,32,111,116,104,101,114,32,101,118,101,110,116,115,32,102,111,114,32,101,120,101,99,117,116,105,111,110,44,32,116,104,101,121,32,97,114,101,10,115,99,104,101,100,117,108,101,100,32,105,110,116,111,32,116,104,101,32,102,117,116,117,114,101,44,32,115,111,32,116,104,101,121,32,99,97,110,32,101,97,115,105,108,121,32,103,111,32,105,110,116,111,32,116,104,101,32,104,101,97,112,46,32,32,83,111,44,32,97,10,104,101,97,112,32,105,115,32,97,32,103,111,111,100,32,115,116,114,117,99,116,117,114,101,32,102,111,114,32,105,109,112,108,101,109,101,110,116,105,110,103,32,115,99,104,101,100,117,108,101,114,115,32,40,116,104,105,115,32,105,115,32,119,104,97,116,32,73,10,117,115,101,100,32,102,111,114,32,109,121,32,77,73,68,73,32,115,101,113,117,101,110,99,101,114,32,58,45,41,46,10,10,86,97,114,105,111,117,115,32,115,116,114,117,99,116,117,114,101,115,32,102,111,114,32,105,109,112,108,101,109,101,110,116,105,110,103,32,115,99,104,101,100,117,108,101,114,115,32,104,97,118,101,32,98,101,101,110,32,101,120,116,101,110,115,105,118,101,108,121,10,115,116,117,100,105,101,100,44,32,97,110,100,32,104,101,97,112,115,32,97,114,101,32,103,111,111,100,32,102,111,114,32,116,104,105,115,44,32,97,115,32,116,104,101,121,32,97,114,101,32,114,101,97,115,111,110,97,98,108,121,32,115,112,101,101,100,121,44,10,116,104,101,32,115,112,101,101,100,32,105,115,32,97,108,109,111,115,116,32,99,111,110,115,116,97,110,116,44,32,97,110,100,32,116,104,101,32,119,111,114,115,116,32,99,97,115,101,32,105,115,32,110,111,116,32,109,117,99,104,32,100,105,102,102,101,114,101,110,116,10,116,104,97,110,32,116,104,101,32,97,118,101,114,97,103,101,32,99,97,115,101,46,32,32,72,111,119,101,118,101,114,44,32,116,104,101,114,101,32,97,114,101,32,111,116,104,101,114,32,114,101,112,114,101,115,101,110,116,97,116,105,111,110,115,32,119,104,105,99,104,10,97,114,101,32,109,111,114,101,32,101,102,102,105,99,105,101,110,116,32,111,118,101,114,97,108,108,44,32,121,101,116,32,116,104,101,32,119,111,114,115,116,32,99,97,115,101,115,32,109,105,103,104,116,32,98,101,32,116,101,114,114,105,98,108,101,46,10,10,72,101,97,112,115,32,97,114,101,32,97,108,115,111,32,118,101,114,121,32,117,115,101,102,117,108,32,105,110,32,98,105,103,32,100,105,115,107,32,115,111,114,116,115,46,32,32,89,111,117,32,109,111,115,116,32,112,114,111,98,97,98,108,121,32,97,108,108,10,107,110,111,119,32,116,104,97,116,32,97,32,98,105,103,32,115,111,114,116,32,105,109,112,108,105,101,115,32,112,114,111,100,117,99,105,110,103,32,34,114,117,110,115,34,32,40,119,104,105,99,104,32,97,114,101,32,112,114,101,45,115,111,114,116,101,100,10,115,101,113,117,101,110,99,101,115,44,32,119,104,105,99,104,32,115,105,122,101,32,105,115,32,117,115,117,97,108,108,121,32,114,101,108,97,116,101,100,32,116,111,32,116,104,101,32,97,109,111,117,110,116,32,111,102,32,67,80,85,32,109,101,109,111,114,121,41,44,10,102,111,108,108,111,119,101,100,32,98,121,32,97,32,109,101,114,103,105,110,103,32,112,97,115,115,101,115,32,102,111,114,32,116,104,101,115,101,32,114,117,110,115,44,32,119,104,105,99,104,32,109,101,114,103,105,110,103,32,105,115,32,111,102,116,101,110,10,118,101,114,121,32,99,108,101,118,101,114,108,121,32,111,114,103,97,110,105,115,101,100,91,49,93,46,32,32,73,116,32,105,115,32,118,101,114,121,32,105,109,112,111,114,116,97,110,116,32,116,104,97,116,32,116,104,101,32,105,110,105,116,105,97,108,10,115,111,114,116,32,112,114,111,100,117,99,101,115,32,116,104,101,32,108,111,110,103,101,115,116,32,114,117,110,115,32,112,111,115,115,105,98,108,101,46,32,32,84,111,117,114,110,97,109,101,110,116,115,32,97,114,101,32,97,32,103,111,111,100,32,119,97,121,10,116,111,32,116,104,97,116,46,32,32,73,102,44,32,117,115,105,110,103,32,97,108,108,32,116,104,101,32,109,101,109,111,114,121,32,97,118,97,105,108,97,98,108,101,32,116,111,32,104,111,108,100,32,97,32,116,111,117,114,110,97,109,101,110,116,44,32,121,111,117,10,114,101,112,108,97,99,101,32,97,110,100,32,112,101,114,99,111,108,97,116,101,32,105,116,101,109,115,32,116,104,97,116,32,104,97,112,112,101,110,32,116,111,32,102,105,116,32,116,104,101,32,99,117,114,114,101,110,116,32,114,117,110,44,32,121,111,117,39,108,108,10,112,114,111,100,117,99,101,32,114,117,110,115,32,119,104,105,99,104,32,97,114,101,32,116,119,105,99,101,32,116,104,101,32,115,105,122,101,32,111,102,32,116,104,101,32,109,101,109,111,114,121,32,102,111,114,32,114,97,110,100,111,109,32,105,110,112,117,116,44,10,97,110,100,32,109,117,99,104,32,98,101,116,116,101,114,32,102,111,114,32,105,110,112,117,116,32,102,117,122,122,105,108,121,32,111,114,100,101,114,101,100,46,10,10,77,111,114,101,111,118,101,114,44,32,105,102,32,121,111,117,32,111,117,116,112,117,116,32,116,104,101,32,48,39,116,104,32,105,116,101,109,32,111,110,32,100,105,115,107,32,97,110,100,32,103,101,116,32,97,110,32,105,110,112,117,116,32,119,104,105,99,104,10,109,97,121,32,110,111,116,32,102,105,116,32,105,110,32,116,104,101,32,99,117,114,114,101,110,116,32,116,111,117,114,110,97,109,101,110,116,32,40,98,101,99,97,117,115,101,32,116,104,101,32,118,97,108,117,101,32,34,119,105,110,115,34,32,111,118,101,114,10,116,104,101,32,108,97,115,116,32,111,117,116,112,117,116,32,118,97,108,117,101,41,44,32,105,116,32,99,97,110,110,111,116,32,102,105,116,32,105,110,32,116,104,101,32,104,101,97,112,44,32,115,111,32,116,104,101,32,115,105,122,101,32,111,102,32,116,104,101,10,104,101,97,112,32,100,101,99,114,101,97,115,101,115,46,32,32,84,104,101,32,102,114,101,101,100,32,109,101,109,111,114,121,32,99,111,117,108,100,32,98,101,32,99,108,101,118,101,114,108,121,32,114,101,117,115,101,100,32,105,109,109,101,100,105,97,116,101,108,121,10,102,111,114,32,112,114,111,103,114,101,115,115,105,118,101,108,121,32,98,117,105,108,100,105,110,103,32,97,32,115,101,99,111,110,100,32,104,101,97,112,44,32,119,104,105,99,104,32,103,114,111,119,115,32,97,116,32,101,120,97,99,116,108,121,32,116,104,101,10,115,97,109,101,32,114,97,116,101,32,116,104,101,32,102,105,114,115,116,32,104,101,97,112,32,105,115,32,109,101,108,116,105,110,103,46,32,32,87,104,101,110,32,116,104,101,32,102,105,114,115,116,32,104,101,97,112,32,99,111,109,112,108,101,116,101,108,121,10,118,97,110,105,115,104,101,115,44,32,121,111,117,32,115,119,105,116,99,104,32,104,101,97,112,115,32,97,110,100,32,115,116,97,114,116,32,97,32,110,101,119,32,114,117,110,46,32,32,67,108,101,118,101,114,32,97,110,100,32,113,117,105,116,101,10,101,102,102,101,99,116,105,118,101,33,10,10,73,110,32,97,32,119,111,114,100,44,32,104,101,97,112,115,32,97,114,101,32,117,115,101,102,117,108,32,109,101,109,111,114,121,32,115,116,114,117,99,116,117,114,101,115,32,116,111,32,107,110,111,119,46,32,32,73,32,117,115,101,32,116,104,101,109,32,105,110,10,97,32,102,101,119,32,97,112,112,108,105,99,97,116,105,111,110,115,44,32,97,110,100,32,73,32,116,104,105,110,107,32,105,116,32,105,115,32,103,111,111,100,32,116,111,32,107,101,101,112,32,97,32,96,104,101,97,112,39,32,109,111,100,117,108,101,10,97,114,111,117,110,100,46,32,58,45,41,10,10,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,10,91,49,93,32,84,104,101,32,100,105,115,107,32,98,97,108,97,110,99,105,110,103,32,97,108,103,111,114,105,116,104,109,115,32,119,104,105,99,104,32,97,114,101,32,99,117,114,114,101,110,116,44,32,110,111,119,97,100,97,121,115,44,32,97,114,101,10,109,111,114,101,32,97,110,110,111,121,105,110,103,32,116,104,97,110,32,99,108,101,118,101,114,44,32,97,110,100,32,116,104,105,115,32,105,115,32,97,32,99,111,110,115,101,113,117,101,110,99,101,32,111,102,32,116,104,101,32,115,101,101,107,105,110,103,10,99,97,112,97,98,105,108,105,116,105,101,115,32,111,102,32,116,104,101,32,100,105,115,107,115,46,32,32,79,110,32,100,101,118,105,99,101,115,32,119,104,105,99,104,32,99,97,110,110,111,116,32,115,101,101,107,44,32,108,105,107,101,32,98,105,103,10,116,97,112,101,32,100,114,105,118,101,115,44,32,116,104,101,32,115,116,111,114,121,32,119,97,115,32,113,117,105,116,101,32,100,105,102,102,101,114,101,110,116,44,32,97,110,100,32,111,110,101,32,104,97,100,32,116,111,32,98,101,32,118,101,114,121,10,99,108,101,118,101,114,32,116,111,32,101,110,115,117,114,101,32,40,102,97,114,32,105,110,32,97,100,118,97,110,99,101,41,32,116,104,97,116,32,101,97,99,104,32,116,97,112,101,32,109,111,118,101,109,101,110,116,32,119,105,108,108,32,98,101,32,116,104,101,10,109,111,115,116,32,101,102,102,101,99,116,105,118,101,32,112,111,115,115,105,98,108,101,32,40,116,104,97,116,32,105,115,44,32,119,105,108,108,32,98,101,115,116,32,112,97,114,116,105,99,105,112,97,116,101,32,97,116,10,34,112,114,111,103,114,101,115,115,105,110,103,34,32,116,104,101,32,109,101,114,103,101,41,46,32,32,83,111,109,101,32,116,97,112,101,115,32,119,101,114,101,32,101,118,101,110,32,97,98,108,101,32,116,111,32,114,101,97,100,10,98,97,99,107,119,97,114,100,115,44,32,97,110,100,32,116,104,105,115,32,119,97,115,32,97,108,115,111,32,117,115,101,100,32,116,111,32,97,118,111,105,100,32,116,104,101,32,114,101,119,105,110,100,105,110,103,32,116,105,109,101,46,10,66,101,108,105,101,118,101,32,109,101,44,32,114,101,97,108,32,103,111,111,100,32,116,97,112,101,32,115,111,114,116,115,32,119,101,114,101,32,113,117,105,116,101,32,115,112,101,99,116,97,99,117,108,97,114,32,116,111,32,119,97,116,99,104,33,10,70,114,111,109,32,97,108,108,32,116,105,109,101,115,44,32,115,111,114,116,105,110,103,32,104,97,115,32,97,108,119,97,121,115,32,98,101,101,110,32,97,32,71,114,101,97,116,32,65,114,116,33,32,58,45,41,10,0], "i8", ALLOC_NORMAL);
/* no memory initializer */
function runPostSets() {
HEAP32[((_heapq_methods)>>2)]=((__str2)|0);
HEAP32[(((_heapq_methods)+(4))>>2)]=(FUNCTION_TABLE_OFFSET + 14);
HEAP32[(((_heapq_methods)+(12))>>2)]=((_heappush_doc)|0);
HEAP32[(((_heapq_methods)+(16))>>2)]=((__str3)|0);
HEAP32[(((_heapq_methods)+(20))>>2)]=(FUNCTION_TABLE_OFFSET + 10);
HEAP32[(((_heapq_methods)+(28))>>2)]=((_heappushpop_doc)|0);
HEAP32[(((_heapq_methods)+(32))>>2)]=((__str4)|0);
HEAP32[(((_heapq_methods)+(36))>>2)]=(FUNCTION_TABLE_OFFSET + 12);
HEAP32[(((_heapq_methods)+(44))>>2)]=((_heappop_doc)|0);
HEAP32[(((_heapq_methods)+(48))>>2)]=((__str5)|0);
HEAP32[(((_heapq_methods)+(52))>>2)]=(FUNCTION_TABLE_OFFSET + 4);
HEAP32[(((_heapq_methods)+(60))>>2)]=((_heapreplace_doc)|0);
HEAP32[(((_heapq_methods)+(64))>>2)]=((__str6)|0);
HEAP32[(((_heapq_methods)+(68))>>2)]=(FUNCTION_TABLE_OFFSET + 2);
HEAP32[(((_heapq_methods)+(76))>>2)]=((_heapify_doc)|0);
HEAP32[(((_heapq_methods)+(80))>>2)]=((__str7)|0);
HEAP32[(((_heapq_methods)+(84))>>2)]=(FUNCTION_TABLE_OFFSET + 8);
HEAP32[(((_heapq_methods)+(92))>>2)]=((_nlargest_doc)|0);
HEAP32[(((_heapq_methods)+(96))>>2)]=((__str8)|0);
HEAP32[(((_heapq_methods)+(100))>>2)]=(FUNCTION_TABLE_OFFSET + 6);
HEAP32[(((_heapq_methods)+(108))>>2)]=((_nsmallest_doc)|0);
}
if (!awaitingMemoryInitializer) runPostSets();
FUNCTION_TABLE.push.apply(FUNCTION_TABLE, [0,0,_heapify,0,_heapreplace,0,_nsmallest,0,_nlargest,0,_heappushpop,0,_heappop,0,_heappush,0]);
// EMSCRIPTEN_START_FUNCS
function _init_heapq() {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $m;
      var $1=_Py_InitModule4(((__str)|0), ((_heapq_methods)|0), ((_module_doc)|0), 0, 1013);
      $m=$1;
      var $2=$m;
      var $3=(($2)|(0))==0;
      if ($3) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      var $6=$m;
      var $7=_PyString_FromString(((___about__)|0));
      var $8=_PyModule_AddObject($6, ((__str1)|0), $7);
      label = 4; break;
    case 4: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _heappush($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $heap=__stackBase__;
      var $item=(__stackBase__)+(4);
      $2=$self;
      $3=$args;
      var $4=$3;
      var $5=_PyArg_UnpackTuple($4, ((__str2)|0), 2, 2, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$heap,HEAP32[(((tempInt)+(4))>>2)]=$item,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 10; break;
    case 3: 
      var $9=HEAP32[(($heap)>>2)];
      var $10=(($9+4)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11+84)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=$13 & 33554432;
      var $15=(($14)|(0))!=0;
      if ($15) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $17=HEAP32[((_PyExc_TypeError)>>2)];
      _PyErr_SetString($17, ((__str16)|0));
      $1=0;
      label = 10; break;
    case 5: 
      var $19=HEAP32[(($heap)>>2)];
      var $20=HEAP32[(($item)>>2)];
      var $21=_PyList_Append($19, $20);
      var $22=(($21)|(0))==-1;
      if ($22) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $1=0;
      label = 10; break;
    case 7: 
      var $25=HEAP32[(($heap)>>2)];
      var $26=$25;
      var $27=HEAP32[(($heap)>>2)];
      var $28=$27;
      var $29=(($28+8)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=((($30)-(1))|0);
      var $32=__siftdown($26, 0, $31);
      var $33=(($32)|(0))==-1;
      if ($33) { label = 8; break; } else { label = 9; break; }
    case 8: 
      $1=0;
      label = 10; break;
    case 9: 
      var $36=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $37=((($36)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$37;
      $1=__Py_NoneStruct;
      label = 10; break;
    case 10: 
      var $39=$1;
      STACKTOP = __stackBase__;
      return $39;
    default: assert(0, "bad label: " + label);
  }
}
function _heappushpop($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $heap=__stackBase__;
      var $item=(__stackBase__)+(4);
      var $returnitem;
      var $cmp;
      $2=$self;
      $3=$args;
      var $4=$3;
      var $5=_PyArg_UnpackTuple($4, ((__str3)|0), 2, 2, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$heap,HEAP32[(((tempInt)+(4))>>2)]=$item,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 19; break;
    case 3: 
      var $9=HEAP32[(($heap)>>2)];
      var $10=(($9+4)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11+84)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=$13 & 33554432;
      var $15=(($14)|(0))!=0;
      if ($15) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $17=HEAP32[((_PyExc_TypeError)>>2)];
      _PyErr_SetString($17, ((__str16)|0));
      $1=0;
      label = 19; break;
    case 5: 
      var $19=HEAP32[(($heap)>>2)];
      var $20=$19;
      var $21=(($20+8)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22)|(0)) < 1;
      if ($23) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $25=HEAP32[(($item)>>2)];
      var $26=(($25)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=((($27)+(1))|0);
      HEAP32[(($26)>>2)]=$28;
      var $29=HEAP32[(($item)>>2)];
      $1=$29;
      label = 19; break;
    case 7: 
      var $31=HEAP32[(($heap)>>2)];
      var $32=$31;
      var $33=(($32+12)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($34)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=HEAP32[(($item)>>2)];
      var $38=_cmp_lt($36, $37);
      $cmp=$38;
      var $39=$cmp;
      var $40=(($39)|(0))==-1;
      if ($40) { label = 8; break; } else { label = 9; break; }
    case 8: 
      $1=0;
      label = 19; break;
    case 9: 
      var $43=$cmp;
      var $44=(($43)|(0))==0;
      if ($44) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $46=HEAP32[(($item)>>2)];
      var $47=(($46)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=((($48)+(1))|0);
      HEAP32[(($47)>>2)]=$49;
      var $50=HEAP32[(($item)>>2)];
      $1=$50;
      label = 19; break;
    case 11: 
      var $52=HEAP32[(($heap)>>2)];
      var $53=$52;
      var $54=(($53+12)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=(($55)|0);
      var $57=HEAP32[(($56)>>2)];
      $returnitem=$57;
      var $58=HEAP32[(($item)>>2)];
      var $59=(($58)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=((($60)+(1))|0);
      HEAP32[(($59)>>2)]=$61;
      var $62=HEAP32[(($item)>>2)];
      var $63=HEAP32[(($heap)>>2)];
      var $64=$63;
      var $65=(($64+12)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66)|0);
      HEAP32[(($67)>>2)]=$62;
      var $68=HEAP32[(($heap)>>2)];
      var $69=$68;
      var $70=__siftup($69, 0);
      var $71=(($70)|(0))==-1;
      if ($71) { label = 12; break; } else { label = 18; break; }
    case 12: 
      label = 13; break;
    case 13: 
      var $74=$returnitem;
      var $75=(($74)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=((($76)-(1))|0);
      HEAP32[(($75)>>2)]=$77;
      var $78=(($77)|(0))!=0;
      if ($78) { label = 14; break; } else { label = 15; break; }
    case 14: 
      label = 16; break;
    case 15: 
      var $81=$returnitem;
      var $82=(($81+4)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=(($83+24)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=$returnitem;
      FUNCTION_TABLE[$85]($86);
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      $1=0;
      label = 19; break;
    case 18: 
      var $90=$returnitem;
      $1=$90;
      label = 19; break;
    case 19: 
      var $92=$1;
      STACKTOP = __stackBase__;
      return $92;
    default: assert(0, "bad label: " + label);
  }
}
function _heappop($self, $heap) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $lastelt;
      var $returnitem;
      var $n;
      $2=$self;
      $3=$heap;
      var $4=$3;
      var $5=(($4+4)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6+84)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=$8 & 33554432;
      var $10=(($9)|(0))!=0;
      if ($10) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $12=HEAP32[((_PyExc_TypeError)>>2)];
      _PyErr_SetString($12, ((__str16)|0));
      $1=0;
      label = 15; break;
    case 3: 
      var $14=$3;
      var $15=$14;
      var $16=(($15+8)|0);
      var $17=HEAP32[(($16)>>2)];
      $n=$17;
      var $18=$n;
      var $19=(($18)|(0))==0;
      if ($19) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $21=HEAP32[((_PyExc_IndexError)>>2)];
      _PyErr_SetString($21, ((__str13)|0));
      $1=0;
      label = 15; break;
    case 5: 
      var $23=$n;
      var $24=((($23)-(1))|0);
      var $25=$3;
      var $26=$25;
      var $27=(($26+12)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28+($24<<2))|0);
      var $30=HEAP32[(($29)>>2)];
      $lastelt=$30;
      var $31=$lastelt;
      var $32=(($31)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=((($33)+(1))|0);
      HEAP32[(($32)>>2)]=$34;
      var $35=$3;
      var $36=$n;
      var $37=((($36)-(1))|0);
      var $38=$n;
      var $39=_PyList_SetSlice($35, $37, $38, 0);
      var $40=$n;
      var $41=((($40)-(1))|0);
      $n=$41;
      var $42=$n;
      var $43=(($42)|(0))!=0;
      if ($43) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $45=$lastelt;
      $1=$45;
      label = 15; break;
    case 7: 
      var $47=$3;
      var $48=$47;
      var $49=(($48+12)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=(($50)|0);
      var $52=HEAP32[(($51)>>2)];
      $returnitem=$52;
      var $53=$lastelt;
      var $54=$3;
      var $55=$54;
      var $56=(($55+12)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=(($57)|0);
      HEAP32[(($58)>>2)]=$53;
      var $59=$3;
      var $60=$59;
      var $61=__siftup($60, 0);
      var $62=(($61)|(0))==-1;
      if ($62) { label = 8; break; } else { label = 14; break; }
    case 8: 
      label = 9; break;
    case 9: 
      var $65=$returnitem;
      var $66=(($65)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=((($67)-(1))|0);
      HEAP32[(($66)>>2)]=$68;
      var $69=(($68)|(0))!=0;
      if ($69) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 12; break;
    case 11: 
      var $72=$returnitem;
      var $73=(($72+4)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=(($74+24)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=$returnitem;
      FUNCTION_TABLE[$76]($77);
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      $1=0;
      label = 15; break;
    case 14: 
      var $81=$returnitem;
      $1=$81;
      label = 15; break;
    case 15: 
      var $83=$1;
      return $83;
    default: assert(0, "bad label: " + label);
  }
}
function _heapreplace($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $heap=__stackBase__;
      var $item=(__stackBase__)+(4);
      var $returnitem;
      $2=$self;
      $3=$args;
      var $4=$3;
      var $5=_PyArg_UnpackTuple($4, ((__str5)|0), 2, 2, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$heap,HEAP32[(((tempInt)+(4))>>2)]=$item,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 15; break;
    case 3: 
      var $9=HEAP32[(($heap)>>2)];
      var $10=(($9+4)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11+84)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=$13 & 33554432;
      var $15=(($14)|(0))!=0;
      if ($15) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $17=HEAP32[((_PyExc_TypeError)>>2)];
      _PyErr_SetString($17, ((__str16)|0));
      $1=0;
      label = 15; break;
    case 5: 
      var $19=HEAP32[(($heap)>>2)];
      var $20=$19;
      var $21=(($20+8)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22)|(0)) < 1;
      if ($23) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $25=HEAP32[((_PyExc_IndexError)>>2)];
      _PyErr_SetString($25, ((__str13)|0));
      $1=0;
      label = 15; break;
    case 7: 
      var $27=HEAP32[(($heap)>>2)];
      var $28=$27;
      var $29=(($28+12)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=(($30)|0);
      var $32=HEAP32[(($31)>>2)];
      $returnitem=$32;
      var $33=HEAP32[(($item)>>2)];
      var $34=(($33)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=((($35)+(1))|0);
      HEAP32[(($34)>>2)]=$36;
      var $37=HEAP32[(($item)>>2)];
      var $38=HEAP32[(($heap)>>2)];
      var $39=$38;
      var $40=(($39+12)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($41)|0);
      HEAP32[(($42)>>2)]=$37;
      var $43=HEAP32[(($heap)>>2)];
      var $44=$43;
      var $45=__siftup($44, 0);
      var $46=(($45)|(0))==-1;
      if ($46) { label = 8; break; } else { label = 14; break; }
    case 8: 
      label = 9; break;
    case 9: 
      var $49=$returnitem;
      var $50=(($49)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=((($51)-(1))|0);
      HEAP32[(($50)>>2)]=$52;
      var $53=(($52)|(0))!=0;
      if ($53) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 12; break;
    case 11: 
      var $56=$returnitem;
      var $57=(($56+4)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=(($58+24)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=$returnitem;
      FUNCTION_TABLE[$60]($61);
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      $1=0;
      label = 15; break;
    case 14: 
      var $65=$returnitem;
      $1=$65;
      label = 15; break;
    case 15: 
      var $67=$1;
      STACKTOP = __stackBase__;
      return $67;
    default: assert(0, "bad label: " + label);
  }
}
function _heapify($self, $heap) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $i;
      var $n;
      $2=$self;
      $3=$heap;
      var $4=$3;
      var $5=(($4+4)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6+84)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=$8 & 33554432;
      var $10=(($9)|(0))!=0;
      if ($10) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $12=HEAP32[((_PyExc_TypeError)>>2)];
      _PyErr_SetString($12, ((__str16)|0));
      $1=0;
      label = 10; break;
    case 3: 
      var $14=$3;
      var $15=$14;
      var $16=(($15+8)|0);
      var $17=HEAP32[(($16)>>2)];
      $n=$17;
      var $18=$n;
      var $19=((((($18)|(0)))/(2))&-1);
      var $20=((($19)-(1))|0);
      $i=$20;
      label = 4; break;
    case 4: 
      var $22=$i;
      var $23=(($22)|(0)) >= 0;
      if ($23) { label = 5; break; } else { label = 9; break; }
    case 5: 
      var $25=$3;
      var $26=$25;
      var $27=$i;
      var $28=__siftup($26, $27);
      var $29=(($28)|(0))==-1;
      if ($29) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $1=0;
      label = 10; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $33=$i;
      var $34=((($33)-(1))|0);
      $i=$34;
      label = 4; break;
    case 9: 
      var $36=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $37=((($36)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$37;
      $1=__Py_NoneStruct;
      label = 10; break;
    case 10: 
      var $39=$1;
      return $39;
    default: assert(0, "bad label: " + label);
  }
}
function _nlargest($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $heap;
      var $elem;
      var $iterable=__stackBase__;
      var $sol;
      var $it;
      var $oldelem;
      var $i;
      var $n=(__stackBase__)+(4);
      var $cmp;
      $2=$self;
      $3=$args;
      $heap=0;
      var $4=$3;
      var $5=_PyArg_ParseTuple($4, ((__str14)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$n,HEAP32[(((tempInt)+(4))>>2)]=$iterable,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 88; break;
    case 3: 
      var $9=HEAP32[(($iterable)>>2)];
      var $10=_PyObject_GetIter($9);
      $it=$10;
      var $11=$it;
      var $12=(($11)|(0))==0;
      if ($12) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=0;
      label = 88; break;
    case 5: 
      var $15=_PyList_New(0);
      $heap=$15;
      var $16=$heap;
      var $17=(($16)|(0))==0;
      if ($17) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 72; break;
    case 7: 
      $i=0;
      label = 8; break;
    case 8: 
      var $21=$i;
      var $22=HEAP32[(($n)>>2)];
      var $23=(($21)|(0)) < (($22)|(0));
      if ($23) { label = 9; break; } else { label = 27; break; }
    case 9: 
      var $25=$it;
      var $26=_PyIter_Next($25);
      $elem=$26;
      var $27=$elem;
      var $28=(($27)|(0))==0;
      if ($28) { label = 10; break; } else { label = 13; break; }
    case 10: 
      var $30=_PyErr_Occurred();
      var $31=(($30)|(0))!=0;
      if ($31) { label = 11; break; } else { label = 12; break; }
    case 11: 
      label = 72; break;
    case 12: 
      label = 62; break;
    case 13: 
      var $35=$heap;
      var $36=$elem;
      var $37=_PyList_Append($35, $36);
      var $38=(($37)|(0))==-1;
      if ($38) { label = 14; break; } else { label = 20; break; }
    case 14: 
      label = 15; break;
    case 15: 
      var $41=$elem;
      var $42=(($41)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=((($43)-(1))|0);
      HEAP32[(($42)>>2)]=$44;
      var $45=(($44)|(0))!=0;
      if ($45) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 18; break;
    case 17: 
      var $48=$elem;
      var $49=(($48+4)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=(($50+24)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=$elem;
      FUNCTION_TABLE[$52]($53);
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 72; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $58=$elem;
      var $59=(($58)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=((($60)-(1))|0);
      HEAP32[(($59)>>2)]=$61;
      var $62=(($61)|(0))!=0;
      if ($62) { label = 22; break; } else { label = 23; break; }
    case 22: 
      label = 24; break;
    case 23: 
      var $65=$elem;
      var $66=(($65+4)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=(($67+24)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=$elem;
      FUNCTION_TABLE[$69]($70);
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $74=$i;
      var $75=((($74)+(1))|0);
      $i=$75;
      label = 8; break;
    case 27: 
      var $77=$heap;
      var $78=$77;
      var $79=(($78+8)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=(($80)|(0))==0;
      if ($81) { label = 28; break; } else { label = 29; break; }
    case 28: 
      label = 62; break;
    case 29: 
      var $84=HEAP32[(($n)>>2)];
      var $85=((((($84)|(0)))/(2))&-1);
      var $86=((($85)-(1))|0);
      $i=$86;
      label = 30; break;
    case 30: 
      var $88=$i;
      var $89=(($88)|(0)) >= 0;
      if ($89) { label = 31; break; } else { label = 35; break; }
    case 31: 
      var $91=$heap;
      var $92=$91;
      var $93=$i;
      var $94=__siftup($92, $93);
      var $95=(($94)|(0))==-1;
      if ($95) { label = 32; break; } else { label = 33; break; }
    case 32: 
      label = 72; break;
    case 33: 
      label = 34; break;
    case 34: 
      var $99=$i;
      var $100=((($99)-(1))|0);
      $i=$100;
      label = 30; break;
    case 35: 
      var $102=$heap;
      var $103=$102;
      var $104=(($103+12)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=(($105)|0);
      var $107=HEAP32[(($106)>>2)];
      $sol=$107;
      label = 36; break;
    case 36: 
      var $109=$it;
      var $110=_PyIter_Next($109);
      $elem=$110;
      var $111=$elem;
      var $112=(($111)|(0))==0;
      if ($112) { label = 37; break; } else { label = 40; break; }
    case 37: 
      var $114=_PyErr_Occurred();
      var $115=(($114)|(0))!=0;
      if ($115) { label = 38; break; } else { label = 39; break; }
    case 38: 
      label = 72; break;
    case 39: 
      label = 62; break;
    case 40: 
      var $119=$sol;
      var $120=$elem;
      var $121=_cmp_lt($119, $120);
      $cmp=$121;
      var $122=$cmp;
      var $123=(($122)|(0))==-1;
      if ($123) { label = 41; break; } else { label = 47; break; }
    case 41: 
      label = 42; break;
    case 42: 
      var $126=$elem;
      var $127=(($126)|0);
      var $128=HEAP32[(($127)>>2)];
      var $129=((($128)-(1))|0);
      HEAP32[(($127)>>2)]=$129;
      var $130=(($129)|(0))!=0;
      if ($130) { label = 43; break; } else { label = 44; break; }
    case 43: 
      label = 45; break;
    case 44: 
      var $133=$elem;
      var $134=(($133+4)|0);
      var $135=HEAP32[(($134)>>2)];
      var $136=(($135+24)|0);
      var $137=HEAP32[(($136)>>2)];
      var $138=$elem;
      FUNCTION_TABLE[$137]($138);
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      label = 72; break;
    case 47: 
      var $142=$cmp;
      var $143=(($142)|(0))==0;
      if ($143) { label = 48; break; } else { label = 54; break; }
    case 48: 
      label = 49; break;
    case 49: 
      var $146=$elem;
      var $147=(($146)|0);
      var $148=HEAP32[(($147)>>2)];
      var $149=((($148)-(1))|0);
      HEAP32[(($147)>>2)]=$149;
      var $150=(($149)|(0))!=0;
      if ($150) { label = 50; break; } else { label = 51; break; }
    case 50: 
      label = 52; break;
    case 51: 
      var $153=$elem;
      var $154=(($153+4)|0);
      var $155=HEAP32[(($154)>>2)];
      var $156=(($155+24)|0);
      var $157=HEAP32[(($156)>>2)];
      var $158=$elem;
      FUNCTION_TABLE[$157]($158);
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      label = 36; break;
    case 54: 
      var $162=$heap;
      var $163=$162;
      var $164=(($163+12)|0);
      var $165=HEAP32[(($164)>>2)];
      var $166=(($165)|0);
      var $167=HEAP32[(($166)>>2)];
      $oldelem=$167;
      var $168=$elem;
      var $169=$heap;
      var $170=$169;
      var $171=(($170+12)|0);
      var $172=HEAP32[(($171)>>2)];
      var $173=(($172)|0);
      HEAP32[(($173)>>2)]=$168;
      label = 55; break;
    case 55: 
      var $175=$oldelem;
      var $176=(($175)|0);
      var $177=HEAP32[(($176)>>2)];
      var $178=((($177)-(1))|0);
      HEAP32[(($176)>>2)]=$178;
      var $179=(($178)|(0))!=0;
      if ($179) { label = 56; break; } else { label = 57; break; }
    case 56: 
      label = 58; break;
    case 57: 
      var $182=$oldelem;
      var $183=(($182+4)|0);
      var $184=HEAP32[(($183)>>2)];
      var $185=(($184+24)|0);
      var $186=HEAP32[(($185)>>2)];
      var $187=$oldelem;
      FUNCTION_TABLE[$186]($187);
      label = 58; break;
    case 58: 
      label = 59; break;
    case 59: 
      var $190=$heap;
      var $191=$190;
      var $192=__siftup($191, 0);
      var $193=(($192)|(0))==-1;
      if ($193) { label = 60; break; } else { label = 61; break; }
    case 60: 
      label = 72; break;
    case 61: 
      var $196=$heap;
      var $197=$196;
      var $198=(($197+12)|0);
      var $199=HEAP32[(($198)>>2)];
      var $200=(($199)|0);
      var $201=HEAP32[(($200)>>2)];
      $sol=$201;
      label = 36; break;
    case 62: 
      var $203=$heap;
      var $204=_PyList_Sort($203);
      var $205=(($204)|(0))==-1;
      if ($205) { label = 63; break; } else { label = 64; break; }
    case 63: 
      label = 72; break;
    case 64: 
      var $208=$heap;
      var $209=_PyList_Reverse($208);
      var $210=(($209)|(0))==-1;
      if ($210) { label = 65; break; } else { label = 66; break; }
    case 65: 
      label = 72; break;
    case 66: 
      label = 67; break;
    case 67: 
      var $214=$it;
      var $215=(($214)|0);
      var $216=HEAP32[(($215)>>2)];
      var $217=((($216)-(1))|0);
      HEAP32[(($215)>>2)]=$217;
      var $218=(($217)|(0))!=0;
      if ($218) { label = 68; break; } else { label = 69; break; }
    case 68: 
      label = 70; break;
    case 69: 
      var $221=$it;
      var $222=(($221+4)|0);
      var $223=HEAP32[(($222)>>2)];
      var $224=(($223+24)|0);
      var $225=HEAP32[(($224)>>2)];
      var $226=$it;
      FUNCTION_TABLE[$225]($226);
      label = 70; break;
    case 70: 
      label = 71; break;
    case 71: 
      var $229=$heap;
      $1=$229;
      label = 88; break;
    case 72: 
      label = 73; break;
    case 73: 
      var $232=$it;
      var $233=(($232)|0);
      var $234=HEAP32[(($233)>>2)];
      var $235=((($234)-(1))|0);
      HEAP32[(($233)>>2)]=$235;
      var $236=(($235)|(0))!=0;
      if ($236) { label = 74; break; } else { label = 75; break; }
    case 74: 
      label = 76; break;
    case 75: 
      var $239=$it;
      var $240=(($239+4)|0);
      var $241=HEAP32[(($240)>>2)];
      var $242=(($241+24)|0);
      var $243=HEAP32[(($242)>>2)];
      var $244=$it;
      FUNCTION_TABLE[$243]($244);
      label = 76; break;
    case 76: 
      label = 77; break;
    case 77: 
      label = 78; break;
    case 78: 
      var $248=$heap;
      var $249=(($248)|(0))==0;
      if ($249) { label = 79; break; } else { label = 80; break; }
    case 79: 
      label = 86; break;
    case 80: 
      label = 81; break;
    case 81: 
      var $253=$heap;
      var $254=(($253)|0);
      var $255=HEAP32[(($254)>>2)];
      var $256=((($255)-(1))|0);
      HEAP32[(($254)>>2)]=$256;
      var $257=(($256)|(0))!=0;
      if ($257) { label = 82; break; } else { label = 83; break; }
    case 82: 
      label = 84; break;
    case 83: 
      var $260=$heap;
      var $261=(($260+4)|0);
      var $262=HEAP32[(($261)>>2)];
      var $263=(($262+24)|0);
      var $264=HEAP32[(($263)>>2)];
      var $265=$heap;
      FUNCTION_TABLE[$264]($265);
      label = 84; break;
    case 84: 
      label = 85; break;
    case 85: 
      label = 86; break;
    case 86: 
      label = 87; break;
    case 87: 
      $1=0;
      label = 88; break;
    case 88: 
      var $271=$1;
      STACKTOP = __stackBase__;
      return $271;
    default: assert(0, "bad label: " + label);
  }
}
function _nsmallest($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $heap;
      var $elem;
      var $iterable=__stackBase__;
      var $los;
      var $it;
      var $oldelem;
      var $i;
      var $n=(__stackBase__)+(4);
      var $cmp;
      $2=$self;
      $3=$args;
      $heap=0;
      var $4=$3;
      var $5=_PyArg_ParseTuple($4, ((__str9)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$n,HEAP32[(((tempInt)+(4))>>2)]=$iterable,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 86; break;
    case 3: 
      var $9=HEAP32[(($iterable)>>2)];
      var $10=_PyObject_GetIter($9);
      $it=$10;
      var $11=$it;
      var $12=(($11)|(0))==0;
      if ($12) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=0;
      label = 86; break;
    case 5: 
      var $15=_PyList_New(0);
      $heap=$15;
      var $16=$heap;
      var $17=(($16)|(0))==0;
      if ($17) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 70; break;
    case 7: 
      $i=0;
      label = 8; break;
    case 8: 
      var $21=$i;
      var $22=HEAP32[(($n)>>2)];
      var $23=(($21)|(0)) < (($22)|(0));
      if ($23) { label = 9; break; } else { label = 27; break; }
    case 9: 
      var $25=$it;
      var $26=_PyIter_Next($25);
      $elem=$26;
      var $27=$elem;
      var $28=(($27)|(0))==0;
      if ($28) { label = 10; break; } else { label = 13; break; }
    case 10: 
      var $30=_PyErr_Occurred();
      var $31=(($30)|(0))!=0;
      if ($31) { label = 11; break; } else { label = 12; break; }
    case 11: 
      label = 70; break;
    case 12: 
      label = 62; break;
    case 13: 
      var $35=$heap;
      var $36=$elem;
      var $37=_PyList_Append($35, $36);
      var $38=(($37)|(0))==-1;
      if ($38) { label = 14; break; } else { label = 20; break; }
    case 14: 
      label = 15; break;
    case 15: 
      var $41=$elem;
      var $42=(($41)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=((($43)-(1))|0);
      HEAP32[(($42)>>2)]=$44;
      var $45=(($44)|(0))!=0;
      if ($45) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 18; break;
    case 17: 
      var $48=$elem;
      var $49=(($48+4)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=(($50+24)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=$elem;
      FUNCTION_TABLE[$52]($53);
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 70; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $58=$elem;
      var $59=(($58)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=((($60)-(1))|0);
      HEAP32[(($59)>>2)]=$61;
      var $62=(($61)|(0))!=0;
      if ($62) { label = 22; break; } else { label = 23; break; }
    case 22: 
      label = 24; break;
    case 23: 
      var $65=$elem;
      var $66=(($65+4)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=(($67+24)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=$elem;
      FUNCTION_TABLE[$69]($70);
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $74=$i;
      var $75=((($74)+(1))|0);
      $i=$75;
      label = 8; break;
    case 27: 
      var $77=$heap;
      var $78=$77;
      var $79=(($78+8)|0);
      var $80=HEAP32[(($79)>>2)];
      HEAP32[(($n)>>2)]=$80;
      var $81=HEAP32[(($n)>>2)];
      var $82=(($81)|(0))==0;
      if ($82) { label = 28; break; } else { label = 29; break; }
    case 28: 
      label = 62; break;
    case 29: 
      var $85=HEAP32[(($n)>>2)];
      var $86=((((($85)|(0)))/(2))&-1);
      var $87=((($86)-(1))|0);
      $i=$87;
      label = 30; break;
    case 30: 
      var $89=$i;
      var $90=(($89)|(0)) >= 0;
      if ($90) { label = 31; break; } else { label = 35; break; }
    case 31: 
      var $92=$heap;
      var $93=$92;
      var $94=$i;
      var $95=__siftupmax($93, $94);
      var $96=(($95)|(0))==-1;
      if ($96) { label = 32; break; } else { label = 33; break; }
    case 32: 
      label = 70; break;
    case 33: 
      label = 34; break;
    case 34: 
      var $100=$i;
      var $101=((($100)-(1))|0);
      $i=$101;
      label = 30; break;
    case 35: 
      var $103=$heap;
      var $104=$103;
      var $105=(($104+12)|0);
      var $106=HEAP32[(($105)>>2)];
      var $107=(($106)|0);
      var $108=HEAP32[(($107)>>2)];
      $los=$108;
      label = 36; break;
    case 36: 
      var $110=$it;
      var $111=_PyIter_Next($110);
      $elem=$111;
      var $112=$elem;
      var $113=(($112)|(0))==0;
      if ($113) { label = 37; break; } else { label = 40; break; }
    case 37: 
      var $115=_PyErr_Occurred();
      var $116=(($115)|(0))!=0;
      if ($116) { label = 38; break; } else { label = 39; break; }
    case 38: 
      label = 70; break;
    case 39: 
      label = 62; break;
    case 40: 
      var $120=$elem;
      var $121=$los;
      var $122=_cmp_lt($120, $121);
      $cmp=$122;
      var $123=$cmp;
      var $124=(($123)|(0))==-1;
      if ($124) { label = 41; break; } else { label = 47; break; }
    case 41: 
      label = 42; break;
    case 42: 
      var $127=$elem;
      var $128=(($127)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=((($129)-(1))|0);
      HEAP32[(($128)>>2)]=$130;
      var $131=(($130)|(0))!=0;
      if ($131) { label = 43; break; } else { label = 44; break; }
    case 43: 
      label = 45; break;
    case 44: 
      var $134=$elem;
      var $135=(($134+4)|0);
      var $136=HEAP32[(($135)>>2)];
      var $137=(($136+24)|0);
      var $138=HEAP32[(($137)>>2)];
      var $139=$elem;
      FUNCTION_TABLE[$138]($139);
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      label = 70; break;
    case 47: 
      var $143=$cmp;
      var $144=(($143)|(0))==0;
      if ($144) { label = 48; break; } else { label = 54; break; }
    case 48: 
      label = 49; break;
    case 49: 
      var $147=$elem;
      var $148=(($147)|0);
      var $149=HEAP32[(($148)>>2)];
      var $150=((($149)-(1))|0);
      HEAP32[(($148)>>2)]=$150;
      var $151=(($150)|(0))!=0;
      if ($151) { label = 50; break; } else { label = 51; break; }
    case 50: 
      label = 52; break;
    case 51: 
      var $154=$elem;
      var $155=(($154+4)|0);
      var $156=HEAP32[(($155)>>2)];
      var $157=(($156+24)|0);
      var $158=HEAP32[(($157)>>2)];
      var $159=$elem;
      FUNCTION_TABLE[$158]($159);
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      label = 36; break;
    case 54: 
      var $163=$heap;
      var $164=$163;
      var $165=(($164+12)|0);
      var $166=HEAP32[(($165)>>2)];
      var $167=(($166)|0);
      var $168=HEAP32[(($167)>>2)];
      $oldelem=$168;
      var $169=$elem;
      var $170=$heap;
      var $171=$170;
      var $172=(($171+12)|0);
      var $173=HEAP32[(($172)>>2)];
      var $174=(($173)|0);
      HEAP32[(($174)>>2)]=$169;
      label = 55; break;
    case 55: 
      var $176=$oldelem;
      var $177=(($176)|0);
      var $178=HEAP32[(($177)>>2)];
      var $179=((($178)-(1))|0);
      HEAP32[(($177)>>2)]=$179;
      var $180=(($179)|(0))!=0;
      if ($180) { label = 56; break; } else { label = 57; break; }
    case 56: 
      label = 58; break;
    case 57: 
      var $183=$oldelem;
      var $184=(($183+4)|0);
      var $185=HEAP32[(($184)>>2)];
      var $186=(($185+24)|0);
      var $187=HEAP32[(($186)>>2)];
      var $188=$oldelem;
      FUNCTION_TABLE[$187]($188);
      label = 58; break;
    case 58: 
      label = 59; break;
    case 59: 
      var $191=$heap;
      var $192=$191;
      var $193=__siftupmax($192, 0);
      var $194=(($193)|(0))==-1;
      if ($194) { label = 60; break; } else { label = 61; break; }
    case 60: 
      label = 70; break;
    case 61: 
      var $197=$heap;
      var $198=$197;
      var $199=(($198+12)|0);
      var $200=HEAP32[(($199)>>2)];
      var $201=(($200)|0);
      var $202=HEAP32[(($201)>>2)];
      $los=$202;
      label = 36; break;
    case 62: 
      var $204=$heap;
      var $205=_PyList_Sort($204);
      var $206=(($205)|(0))==-1;
      if ($206) { label = 63; break; } else { label = 64; break; }
    case 63: 
      label = 70; break;
    case 64: 
      label = 65; break;
    case 65: 
      var $210=$it;
      var $211=(($210)|0);
      var $212=HEAP32[(($211)>>2)];
      var $213=((($212)-(1))|0);
      HEAP32[(($211)>>2)]=$213;
      var $214=(($213)|(0))!=0;
      if ($214) { label = 66; break; } else { label = 67; break; }
    case 66: 
      label = 68; break;
    case 67: 
      var $217=$it;
      var $218=(($217+4)|0);
      var $219=HEAP32[(($218)>>2)];
      var $220=(($219+24)|0);
      var $221=HEAP32[(($220)>>2)];
      var $222=$it;
      FUNCTION_TABLE[$221]($222);
      label = 68; break;
    case 68: 
      label = 69; break;
    case 69: 
      var $225=$heap;
      $1=$225;
      label = 86; break;
    case 70: 
      label = 71; break;
    case 71: 
      var $228=$it;
      var $229=(($228)|0);
      var $230=HEAP32[(($229)>>2)];
      var $231=((($230)-(1))|0);
      HEAP32[(($229)>>2)]=$231;
      var $232=(($231)|(0))!=0;
      if ($232) { label = 72; break; } else { label = 73; break; }
    case 72: 
      label = 74; break;
    case 73: 
      var $235=$it;
      var $236=(($235+4)|0);
      var $237=HEAP32[(($236)>>2)];
      var $238=(($237+24)|0);
      var $239=HEAP32[(($238)>>2)];
      var $240=$it;
      FUNCTION_TABLE[$239]($240);
      label = 74; break;
    case 74: 
      label = 75; break;
    case 75: 
      label = 76; break;
    case 76: 
      var $244=$heap;
      var $245=(($244)|(0))==0;
      if ($245) { label = 77; break; } else { label = 78; break; }
    case 77: 
      label = 84; break;
    case 78: 
      label = 79; break;
    case 79: 
      var $249=$heap;
      var $250=(($249)|0);
      var $251=HEAP32[(($250)>>2)];
      var $252=((($251)-(1))|0);
      HEAP32[(($250)>>2)]=$252;
      var $253=(($252)|(0))!=0;
      if ($253) { label = 80; break; } else { label = 81; break; }
    case 80: 
      label = 82; break;
    case 81: 
      var $256=$heap;
      var $257=(($256+4)|0);
      var $258=HEAP32[(($257)>>2)];
      var $259=(($258+24)|0);
      var $260=HEAP32[(($259)>>2)];
      var $261=$heap;
      FUNCTION_TABLE[$260]($261);
      label = 82; break;
    case 82: 
      label = 83; break;
    case 83: 
      label = 84; break;
    case 84: 
      label = 85; break;
    case 85: 
      $1=0;
      label = 86; break;
    case 86: 
      var $267=$1;
      STACKTOP = __stackBase__;
      return $267;
    default: assert(0, "bad label: " + label);
  }
}
function _cmp_lt($x, $y) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $cmp;
      $2=$x;
      $3=$y;
      var $4=HEAP32[((_cmp_lt_lt)>>2)];
      var $5=(($4)|(0))==0;
      if ($5) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $7=_PyString_FromString(((__str10)|0));
      HEAP32[((_cmp_lt_lt)>>2)]=$7;
      var $8=HEAP32[((_cmp_lt_lt)>>2)];
      var $9=(($8)|(0))==0;
      if ($9) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=-1;
      label = 10; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $13=$2;
      var $14=HEAP32[((_cmp_lt_lt)>>2)];
      var $15=_PyObject_HasAttr($13, $14);
      var $16=(($15)|(0))!=0;
      if ($16) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $18=$2;
      var $19=$3;
      var $20=_PyObject_RichCompareBool($18, $19, 0);
      $1=$20;
      label = 10; break;
    case 7: 
      var $22=$3;
      var $23=$2;
      var $24=_PyObject_RichCompareBool($22, $23, 1);
      $cmp=$24;
      var $25=$cmp;
      var $26=(($25)|(0))!=-1;
      if ($26) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $28=$cmp;
      var $29=(((1)-($28))|0);
      $cmp=$29;
      label = 9; break;
    case 9: 
      var $31=$cmp;
      $1=$31;
      label = 10; break;
    case 10: 
      var $33=$1;
      return $33;
    default: assert(0, "bad label: " + label);
  }
}
function __siftupmax($heap, $pos) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $startpos;
      var $endpos;
      var $childpos;
      var $rightpos;
      var $cmp;
      var $newitem;
      var $tmp;
      $2=$heap;
      $3=$pos;
      var $4=$2;
      var $5=$4;
      var $6=(($5+4)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7+84)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=$9 & 33554432;
      var $11=(($10)|(0))!=0;
      if ($11) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      ___assert_func(((__str11)|0), 446, ((___func____siftupmax)|0), ((__str12)|0));
      throw "Reached an unreachable!";
      label = 4; break;
    case 4: 
      var $16=$2;
      var $17=$16;
      var $18=(($17+8)|0);
      var $19=HEAP32[(($18)>>2)];
      $endpos=$19;
      var $20=$3;
      $startpos=$20;
      var $21=$3;
      var $22=$endpos;
      var $23=(($21)|(0)) >= (($22)|(0));
      if ($23) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $25=HEAP32[((_PyExc_IndexError)>>2)];
      _PyErr_SetString($25, ((__str13)|0));
      $1=-1;
      label = 31; break;
    case 6: 
      var $27=$3;
      var $28=$2;
      var $29=(($28+12)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=(($30+($27<<2))|0);
      var $32=HEAP32[(($31)>>2)];
      $newitem=$32;
      var $33=$newitem;
      var $34=(($33)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=((($35)+(1))|0);
      HEAP32[(($34)>>2)]=$36;
      var $37=$3;
      var $38=($37<<1);
      var $39=((($38)+(1))|0);
      $childpos=$39;
      label = 7; break;
    case 7: 
      var $41=$childpos;
      var $42=$endpos;
      var $43=(($41)|(0)) < (($42)|(0));
      if ($43) { label = 8; break; } else { label = 25; break; }
    case 8: 
      var $45=$childpos;
      var $46=((($45)+(1))|0);
      $rightpos=$46;
      var $47=$rightpos;
      var $48=$endpos;
      var $49=(($47)|(0)) < (($48)|(0));
      if ($49) { label = 9; break; } else { label = 19; break; }
    case 9: 
      var $51=$rightpos;
      var $52=$2;
      var $53=(($52+12)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54+($51<<2))|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=$childpos;
      var $58=$2;
      var $59=(($58+12)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=(($60+($57<<2))|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=_cmp_lt($56, $62);
      $cmp=$63;
      var $64=$cmp;
      var $65=(($64)|(0))==-1;
      if ($65) { label = 10; break; } else { label = 16; break; }
    case 10: 
      label = 11; break;
    case 11: 
      var $68=$newitem;
      var $69=(($68)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=((($70)-(1))|0);
      HEAP32[(($69)>>2)]=$71;
      var $72=(($71)|(0))!=0;
      if ($72) { label = 12; break; } else { label = 13; break; }
    case 12: 
      label = 14; break;
    case 13: 
      var $75=$newitem;
      var $76=(($75+4)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=(($77+24)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=$newitem;
      FUNCTION_TABLE[$79]($80);
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      $1=-1;
      label = 31; break;
    case 16: 
      var $84=$cmp;
      var $85=(($84)|(0))==0;
      if ($85) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $87=$rightpos;
      $childpos=$87;
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $90=$childpos;
      var $91=$2;
      var $92=(($91+12)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=(($93+($90<<2))|0);
      var $95=HEAP32[(($94)>>2)];
      $tmp=$95;
      var $96=$tmp;
      var $97=(($96)|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=((($98)+(1))|0);
      HEAP32[(($97)>>2)]=$99;
      label = 20; break;
    case 20: 
      var $101=$3;
      var $102=$2;
      var $103=(($102+12)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=(($104+($101<<2))|0);
      var $106=HEAP32[(($105)>>2)];
      var $107=(($106)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=((($108)-(1))|0);
      HEAP32[(($107)>>2)]=$109;
      var $110=(($109)|(0))!=0;
      if ($110) { label = 21; break; } else { label = 22; break; }
    case 21: 
      label = 23; break;
    case 22: 
      var $113=$3;
      var $114=$2;
      var $115=(($114+12)|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=(($116+($113<<2))|0);
      var $118=HEAP32[(($117)>>2)];
      var $119=(($118+4)|0);
      var $120=HEAP32[(($119)>>2)];
      var $121=(($120+24)|0);
      var $122=HEAP32[(($121)>>2)];
      var $123=$3;
      var $124=$2;
      var $125=(($124+12)|0);
      var $126=HEAP32[(($125)>>2)];
      var $127=(($126+($123<<2))|0);
      var $128=HEAP32[(($127)>>2)];
      FUNCTION_TABLE[$122]($128);
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $131=$tmp;
      var $132=$3;
      var $133=$2;
      var $134=(($133+12)|0);
      var $135=HEAP32[(($134)>>2)];
      var $136=(($135+($132<<2))|0);
      HEAP32[(($136)>>2)]=$131;
      var $137=$childpos;
      $3=$137;
      var $138=$3;
      var $139=($138<<1);
      var $140=((($139)+(1))|0);
      $childpos=$140;
      label = 7; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $143=$3;
      var $144=$2;
      var $145=(($144+12)|0);
      var $146=HEAP32[(($145)>>2)];
      var $147=(($146+($143<<2))|0);
      var $148=HEAP32[(($147)>>2)];
      var $149=(($148)|0);
      var $150=HEAP32[(($149)>>2)];
      var $151=((($150)-(1))|0);
      HEAP32[(($149)>>2)]=$151;
      var $152=(($151)|(0))!=0;
      if ($152) { label = 27; break; } else { label = 28; break; }
    case 27: 
      label = 29; break;
    case 28: 
      var $155=$3;
      var $156=$2;
      var $157=(($156+12)|0);
      var $158=HEAP32[(($157)>>2)];
      var $159=(($158+($155<<2))|0);
      var $160=HEAP32[(($159)>>2)];
      var $161=(($160+4)|0);
      var $162=HEAP32[(($161)>>2)];
      var $163=(($162+24)|0);
      var $164=HEAP32[(($163)>>2)];
      var $165=$3;
      var $166=$2;
      var $167=(($166+12)|0);
      var $168=HEAP32[(($167)>>2)];
      var $169=(($168+($165<<2))|0);
      var $170=HEAP32[(($169)>>2)];
      FUNCTION_TABLE[$164]($170);
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      var $173=$newitem;
      var $174=$3;
      var $175=$2;
      var $176=(($175+12)|0);
      var $177=HEAP32[(($176)>>2)];
      var $178=(($177+($174<<2))|0);
      HEAP32[(($178)>>2)]=$173;
      var $179=$2;
      var $180=$startpos;
      var $181=$3;
      var $182=__siftdownmax($179, $180, $181);
      $1=$182;
      label = 31; break;
    case 31: 
      var $184=$1;
      return $184;
    default: assert(0, "bad label: " + label);
  }
}
function __siftdownmax($heap, $startpos, $pos) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $newitem;
      var $parent;
      var $cmp;
      var $parentpos;
      $2=$heap;
      $3=$startpos;
      $4=$pos;
      var $5=$2;
      var $6=$5;
      var $7=(($6+4)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8+84)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=$10 & 33554432;
      var $12=(($11)|(0))!=0;
      if ($12) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      ___assert_func(((__str11)|0), 409, ((___func____siftdownmax)|0), ((__str12)|0));
      throw "Reached an unreachable!";
      label = 4; break;
    case 4: 
      var $17=$4;
      var $18=$2;
      var $19=$18;
      var $20=(($19+8)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($17)|(0)) >= (($21)|(0));
      if ($22) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $24=HEAP32[((_PyExc_IndexError)>>2)];
      _PyErr_SetString($24, ((__str13)|0));
      $1=-1;
      label = 29; break;
    case 6: 
      var $26=$4;
      var $27=$2;
      var $28=(($27+12)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29+($26<<2))|0);
      var $31=HEAP32[(($30)>>2)];
      $newitem=$31;
      var $32=$newitem;
      var $33=(($32)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=((($34)+(1))|0);
      HEAP32[(($33)>>2)]=$35;
      label = 7; break;
    case 7: 
      var $37=$4;
      var $38=$3;
      var $39=(($37)|(0)) > (($38)|(0));
      if ($39) { label = 8; break; } else { label = 23; break; }
    case 8: 
      var $41=$4;
      var $42=((($41)-(1))|0);
      var $43=$42 >> 1;
      $parentpos=$43;
      var $44=$parentpos;
      var $45=$2;
      var $46=(($45+12)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=(($47+($44<<2))|0);
      var $49=HEAP32[(($48)>>2)];
      $parent=$49;
      var $50=$parent;
      var $51=$newitem;
      var $52=_cmp_lt($50, $51);
      $cmp=$52;
      var $53=$cmp;
      var $54=(($53)|(0))==-1;
      if ($54) { label = 9; break; } else { label = 15; break; }
    case 9: 
      label = 10; break;
    case 10: 
      var $57=$newitem;
      var $58=(($57)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=((($59)-(1))|0);
      HEAP32[(($58)>>2)]=$60;
      var $61=(($60)|(0))!=0;
      if ($61) { label = 11; break; } else { label = 12; break; }
    case 11: 
      label = 13; break;
    case 12: 
      var $64=$newitem;
      var $65=(($64+4)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66+24)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=$newitem;
      FUNCTION_TABLE[$68]($69);
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      $1=-1;
      label = 29; break;
    case 15: 
      var $73=$cmp;
      var $74=(($73)|(0))==0;
      if ($74) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 23; break;
    case 17: 
      var $77=$parent;
      var $78=(($77)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=((($79)+(1))|0);
      HEAP32[(($78)>>2)]=$80;
      label = 18; break;
    case 18: 
      var $82=$4;
      var $83=$2;
      var $84=(($83+12)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=(($85+($82<<2))|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=(($87)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=((($89)-(1))|0);
      HEAP32[(($88)>>2)]=$90;
      var $91=(($90)|(0))!=0;
      if ($91) { label = 19; break; } else { label = 20; break; }
    case 19: 
      label = 21; break;
    case 20: 
      var $94=$4;
      var $95=$2;
      var $96=(($95+12)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=(($97+($94<<2))|0);
      var $99=HEAP32[(($98)>>2)];
      var $100=(($99+4)|0);
      var $101=HEAP32[(($100)>>2)];
      var $102=(($101+24)|0);
      var $103=HEAP32[(($102)>>2)];
      var $104=$4;
      var $105=$2;
      var $106=(($105+12)|0);
      var $107=HEAP32[(($106)>>2)];
      var $108=(($107+($104<<2))|0);
      var $109=HEAP32[(($108)>>2)];
      FUNCTION_TABLE[$103]($109);
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $112=$parent;
      var $113=$4;
      var $114=$2;
      var $115=(($114+12)|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=(($116+($113<<2))|0);
      HEAP32[(($117)>>2)]=$112;
      var $118=$parentpos;
      $4=$118;
      label = 7; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $121=$4;
      var $122=$2;
      var $123=(($122+12)|0);
      var $124=HEAP32[(($123)>>2)];
      var $125=(($124+($121<<2))|0);
      var $126=HEAP32[(($125)>>2)];
      var $127=(($126)|0);
      var $128=HEAP32[(($127)>>2)];
      var $129=((($128)-(1))|0);
      HEAP32[(($127)>>2)]=$129;
      var $130=(($129)|(0))!=0;
      if ($130) { label = 25; break; } else { label = 26; break; }
    case 25: 
      label = 27; break;
    case 26: 
      var $133=$4;
      var $134=$2;
      var $135=(($134+12)|0);
      var $136=HEAP32[(($135)>>2)];
      var $137=(($136+($133<<2))|0);
      var $138=HEAP32[(($137)>>2)];
      var $139=(($138+4)|0);
      var $140=HEAP32[(($139)>>2)];
      var $141=(($140+24)|0);
      var $142=HEAP32[(($141)>>2)];
      var $143=$4;
      var $144=$2;
      var $145=(($144+12)|0);
      var $146=HEAP32[(($145)>>2)];
      var $147=(($146+($143<<2))|0);
      var $148=HEAP32[(($147)>>2)];
      FUNCTION_TABLE[$142]($148);
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      var $151=$newitem;
      var $152=$4;
      var $153=$2;
      var $154=(($153+12)|0);
      var $155=HEAP32[(($154)>>2)];
      var $156=(($155+($152<<2))|0);
      HEAP32[(($156)>>2)]=$151;
      $1=0;
      label = 29; break;
    case 29: 
      var $158=$1;
      return $158;
    default: assert(0, "bad label: " + label);
  }
}
function __siftup($heap, $pos) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $startpos;
      var $endpos;
      var $childpos;
      var $rightpos;
      var $cmp;
      var $newitem;
      var $tmp;
      var $olditem;
      var $size;
      $2=$heap;
      $3=$pos;
      var $4=$2;
      var $5=$4;
      var $6=(($5+4)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7+84)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=$9 & 33554432;
      var $11=(($10)|(0))!=0;
      if ($11) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      ___assert_func(((__str11)|0), 94, ((___func____siftup)|0), ((__str12)|0));
      throw "Reached an unreachable!";
      label = 4; break;
    case 4: 
      var $16=$2;
      var $17=$16;
      var $18=(($17+8)|0);
      var $19=HEAP32[(($18)>>2)];
      $size=$19;
      var $20=$size;
      $endpos=$20;
      var $21=$3;
      $startpos=$21;
      var $22=$3;
      var $23=$endpos;
      var $24=(($22)|(0)) >= (($23)|(0));
      if ($24) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $26=HEAP32[((_PyExc_IndexError)>>2)];
      _PyErr_SetString($26, ((__str13)|0));
      $1=-1;
      label = 40; break;
    case 6: 
      var $28=$3;
      var $29=$2;
      var $30=(($29+12)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31+($28<<2))|0);
      var $33=HEAP32[(($32)>>2)];
      $newitem=$33;
      var $34=$newitem;
      var $35=(($34)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=((($36)+(1))|0);
      HEAP32[(($35)>>2)]=$37;
      var $38=$3;
      var $39=($38<<1);
      var $40=((($39)+(1))|0);
      $childpos=$40;
      label = 7; break;
    case 7: 
      var $42=$childpos;
      var $43=$endpos;
      var $44=(($42)|(0)) < (($43)|(0));
      if ($44) { label = 8; break; } else { label = 34; break; }
    case 8: 
      var $46=$childpos;
      var $47=((($46)+(1))|0);
      $rightpos=$47;
      var $48=$rightpos;
      var $49=$endpos;
      var $50=(($48)|(0)) < (($49)|(0));
      if ($50) { label = 9; break; } else { label = 19; break; }
    case 9: 
      var $52=$childpos;
      var $53=$2;
      var $54=(($53+12)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=(($55+($52<<2))|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=$rightpos;
      var $59=$2;
      var $60=(($59+12)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=(($61+($58<<2))|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=_cmp_lt($57, $63);
      $cmp=$64;
      var $65=$cmp;
      var $66=(($65)|(0))==-1;
      if ($66) { label = 10; break; } else { label = 16; break; }
    case 10: 
      label = 11; break;
    case 11: 
      var $69=$newitem;
      var $70=(($69)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=((($71)-(1))|0);
      HEAP32[(($70)>>2)]=$72;
      var $73=(($72)|(0))!=0;
      if ($73) { label = 12; break; } else { label = 13; break; }
    case 12: 
      label = 14; break;
    case 13: 
      var $76=$newitem;
      var $77=(($76+4)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=(($78+24)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=$newitem;
      FUNCTION_TABLE[$80]($81);
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      $1=-1;
      label = 40; break;
    case 16: 
      var $85=$cmp;
      var $86=(($85)|(0))==0;
      if ($86) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $88=$rightpos;
      $childpos=$88;
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $91=$size;
      var $92=$2;
      var $93=$92;
      var $94=(($93+8)|0);
      var $95=HEAP32[(($94)>>2)];
      var $96=(($91)|(0))!=(($95)|(0));
      if ($96) { label = 20; break; } else { label = 26; break; }
    case 20: 
      label = 21; break;
    case 21: 
      var $99=$newitem;
      var $100=(($99)|0);
      var $101=HEAP32[(($100)>>2)];
      var $102=((($101)-(1))|0);
      HEAP32[(($100)>>2)]=$102;
      var $103=(($102)|(0))!=0;
      if ($103) { label = 22; break; } else { label = 23; break; }
    case 22: 
      label = 24; break;
    case 23: 
      var $106=$newitem;
      var $107=(($106+4)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=(($108+24)|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=$newitem;
      FUNCTION_TABLE[$110]($111);
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $114=HEAP32[((_PyExc_RuntimeError)>>2)];
      _PyErr_SetString($114, ((__str15)|0));
      $1=-1;
      label = 40; break;
    case 26: 
      var $116=$childpos;
      var $117=$2;
      var $118=(($117+12)|0);
      var $119=HEAP32[(($118)>>2)];
      var $120=(($119+($116<<2))|0);
      var $121=HEAP32[(($120)>>2)];
      $tmp=$121;
      var $122=$tmp;
      var $123=(($122)|0);
      var $124=HEAP32[(($123)>>2)];
      var $125=((($124)+(1))|0);
      HEAP32[(($123)>>2)]=$125;
      var $126=$3;
      var $127=$2;
      var $128=(($127+12)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=(($129+($126<<2))|0);
      var $131=HEAP32[(($130)>>2)];
      $olditem=$131;
      var $132=$tmp;
      var $133=$3;
      var $134=$2;
      var $135=(($134+12)|0);
      var $136=HEAP32[(($135)>>2)];
      var $137=(($136+($133<<2))|0);
      HEAP32[(($137)>>2)]=$132;
      label = 27; break;
    case 27: 
      var $139=$olditem;
      var $140=(($139)|0);
      var $141=HEAP32[(($140)>>2)];
      var $142=((($141)-(1))|0);
      HEAP32[(($140)>>2)]=$142;
      var $143=(($142)|(0))!=0;
      if ($143) { label = 28; break; } else { label = 29; break; }
    case 28: 
      label = 30; break;
    case 29: 
      var $146=$olditem;
      var $147=(($146+4)|0);
      var $148=HEAP32[(($147)>>2)];
      var $149=(($148+24)|0);
      var $150=HEAP32[(($149)>>2)];
      var $151=$olditem;
      FUNCTION_TABLE[$150]($151);
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $154=$childpos;
      $3=$154;
      var $155=$3;
      var $156=($155<<1);
      var $157=((($156)+(1))|0);
      $childpos=$157;
      var $158=$size;
      var $159=$2;
      var $160=$159;
      var $161=(($160+8)|0);
      var $162=HEAP32[(($161)>>2)];
      var $163=(($158)|(0))!=(($162)|(0));
      if ($163) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $165=HEAP32[((_PyExc_RuntimeError)>>2)];
      _PyErr_SetString($165, ((__str15)|0));
      $1=-1;
      label = 40; break;
    case 33: 
      label = 7; break;
    case 34: 
      label = 35; break;
    case 35: 
      var $169=$3;
      var $170=$2;
      var $171=(($170+12)|0);
      var $172=HEAP32[(($171)>>2)];
      var $173=(($172+($169<<2))|0);
      var $174=HEAP32[(($173)>>2)];
      var $175=(($174)|0);
      var $176=HEAP32[(($175)>>2)];
      var $177=((($176)-(1))|0);
      HEAP32[(($175)>>2)]=$177;
      var $178=(($177)|(0))!=0;
      if ($178) { label = 36; break; } else { label = 37; break; }
    case 36: 
      label = 38; break;
    case 37: 
      var $181=$3;
      var $182=$2;
      var $183=(($182+12)|0);
      var $184=HEAP32[(($183)>>2)];
      var $185=(($184+($181<<2))|0);
      var $186=HEAP32[(($185)>>2)];
      var $187=(($186+4)|0);
      var $188=HEAP32[(($187)>>2)];
      var $189=(($188+24)|0);
      var $190=HEAP32[(($189)>>2)];
      var $191=$3;
      var $192=$2;
      var $193=(($192+12)|0);
      var $194=HEAP32[(($193)>>2)];
      var $195=(($194+($191<<2))|0);
      var $196=HEAP32[(($195)>>2)];
      FUNCTION_TABLE[$190]($196);
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      var $199=$newitem;
      var $200=$3;
      var $201=$2;
      var $202=(($201+12)|0);
      var $203=HEAP32[(($202)>>2)];
      var $204=(($203+($200<<2))|0);
      HEAP32[(($204)>>2)]=$199;
      var $205=$2;
      var $206=$startpos;
      var $207=$3;
      var $208=__siftdown($205, $206, $207);
      $1=$208;
      label = 40; break;
    case 40: 
      var $210=$1;
      return $210;
    default: assert(0, "bad label: " + label);
  }
}
function __siftdown($heap, $startpos, $pos) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $newitem;
      var $parent;
      var $olditem;
      var $cmp;
      var $parentpos;
      var $size;
      $2=$heap;
      $3=$startpos;
      $4=$pos;
      var $5=$2;
      var $6=$5;
      var $7=(($6+4)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8+84)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=$10 & 33554432;
      var $12=(($11)|(0))!=0;
      if ($12) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      ___assert_func(((__str11)|0), 43, ((___func____siftdown)|0), ((__str12)|0));
      throw "Reached an unreachable!";
      label = 4; break;
    case 4: 
      var $17=$2;
      var $18=$17;
      var $19=(($18+8)|0);
      var $20=HEAP32[(($19)>>2)];
      $size=$20;
      var $21=$4;
      var $22=$size;
      var $23=(($21)|(0)) >= (($22)|(0));
      if ($23) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $25=HEAP32[((_PyExc_IndexError)>>2)];
      _PyErr_SetString($25, ((__str13)|0));
      $1=-1;
      label = 38; break;
    case 6: 
      var $27=$4;
      var $28=$2;
      var $29=(($28+12)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=(($30+($27<<2))|0);
      var $32=HEAP32[(($31)>>2)];
      $newitem=$32;
      var $33=$newitem;
      var $34=(($33)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=((($35)+(1))|0);
      HEAP32[(($34)>>2)]=$36;
      label = 7; break;
    case 7: 
      var $38=$4;
      var $39=$3;
      var $40=(($38)|(0)) > (($39)|(0));
      if ($40) { label = 8; break; } else { label = 32; break; }
    case 8: 
      var $42=$4;
      var $43=((($42)-(1))|0);
      var $44=$43 >> 1;
      $parentpos=$44;
      var $45=$parentpos;
      var $46=$2;
      var $47=(($46+12)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=(($48+($45<<2))|0);
      var $50=HEAP32[(($49)>>2)];
      $parent=$50;
      var $51=$newitem;
      var $52=$parent;
      var $53=_cmp_lt($51, $52);
      $cmp=$53;
      var $54=$cmp;
      var $55=(($54)|(0))==-1;
      if ($55) { label = 9; break; } else { label = 15; break; }
    case 9: 
      label = 10; break;
    case 10: 
      var $58=$newitem;
      var $59=(($58)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=((($60)-(1))|0);
      HEAP32[(($59)>>2)]=$61;
      var $62=(($61)|(0))!=0;
      if ($62) { label = 11; break; } else { label = 12; break; }
    case 11: 
      label = 13; break;
    case 12: 
      var $65=$newitem;
      var $66=(($65+4)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=(($67+24)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=$newitem;
      FUNCTION_TABLE[$69]($70);
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      $1=-1;
      label = 38; break;
    case 15: 
      var $74=$size;
      var $75=$2;
      var $76=$75;
      var $77=(($76+8)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=(($74)|(0))!=(($78)|(0));
      if ($79) { label = 16; break; } else { label = 22; break; }
    case 16: 
      label = 17; break;
    case 17: 
      var $82=$newitem;
      var $83=(($82)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=((($84)-(1))|0);
      HEAP32[(($83)>>2)]=$85;
      var $86=(($85)|(0))!=0;
      if ($86) { label = 18; break; } else { label = 19; break; }
    case 18: 
      label = 20; break;
    case 19: 
      var $89=$newitem;
      var $90=(($89+4)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=(($91+24)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=$newitem;
      FUNCTION_TABLE[$93]($94);
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $97=HEAP32[((_PyExc_RuntimeError)>>2)];
      _PyErr_SetString($97, ((__str15)|0));
      $1=-1;
      label = 38; break;
    case 22: 
      var $99=$cmp;
      var $100=(($99)|(0))==0;
      if ($100) { label = 23; break; } else { label = 24; break; }
    case 23: 
      label = 32; break;
    case 24: 
      var $103=$parent;
      var $104=(($103)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=((($105)+(1))|0);
      HEAP32[(($104)>>2)]=$106;
      var $107=$4;
      var $108=$2;
      var $109=(($108+12)|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=(($110+($107<<2))|0);
      var $112=HEAP32[(($111)>>2)];
      $olditem=$112;
      var $113=$parent;
      var $114=$4;
      var $115=$2;
      var $116=(($115+12)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=(($117+($114<<2))|0);
      HEAP32[(($118)>>2)]=$113;
      label = 25; break;
    case 25: 
      var $120=$olditem;
      var $121=(($120)|0);
      var $122=HEAP32[(($121)>>2)];
      var $123=((($122)-(1))|0);
      HEAP32[(($121)>>2)]=$123;
      var $124=(($123)|(0))!=0;
      if ($124) { label = 26; break; } else { label = 27; break; }
    case 26: 
      label = 28; break;
    case 27: 
      var $127=$olditem;
      var $128=(($127+4)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=(($129+24)|0);
      var $131=HEAP32[(($130)>>2)];
      var $132=$olditem;
      FUNCTION_TABLE[$131]($132);
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $135=$parentpos;
      $4=$135;
      var $136=$size;
      var $137=$2;
      var $138=$137;
      var $139=(($138+8)|0);
      var $140=HEAP32[(($139)>>2)];
      var $141=(($136)|(0))!=(($140)|(0));
      if ($141) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $143=HEAP32[((_PyExc_RuntimeError)>>2)];
      _PyErr_SetString($143, ((__str15)|0));
      $1=-1;
      label = 38; break;
    case 31: 
      label = 7; break;
    case 32: 
      label = 33; break;
    case 33: 
      var $147=$4;
      var $148=$2;
      var $149=(($148+12)|0);
      var $150=HEAP32[(($149)>>2)];
      var $151=(($150+($147<<2))|0);
      var $152=HEAP32[(($151)>>2)];
      var $153=(($152)|0);
      var $154=HEAP32[(($153)>>2)];
      var $155=((($154)-(1))|0);
      HEAP32[(($153)>>2)]=$155;
      var $156=(($155)|(0))!=0;
      if ($156) { label = 34; break; } else { label = 35; break; }
    case 34: 
      label = 36; break;
    case 35: 
      var $159=$4;
      var $160=$2;
      var $161=(($160+12)|0);
      var $162=HEAP32[(($161)>>2)];
      var $163=(($162+($159<<2))|0);
      var $164=HEAP32[(($163)>>2)];
      var $165=(($164+4)|0);
      var $166=HEAP32[(($165)>>2)];
      var $167=(($166+24)|0);
      var $168=HEAP32[(($167)>>2)];
      var $169=$4;
      var $170=$2;
      var $171=(($170+12)|0);
      var $172=HEAP32[(($171)>>2)];
      var $173=(($172+($169<<2))|0);
      var $174=HEAP32[(($173)>>2)];
      FUNCTION_TABLE[$168]($174);
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      var $177=$newitem;
      var $178=$4;
      var $179=$2;
      var $180=(($179+12)|0);
      var $181=HEAP32[(($180)>>2)];
      var $182=(($181+($178<<2))|0);
      HEAP32[(($182)>>2)]=$177;
      $1=0;
      label = 38; break;
    case 38: 
      var $184=$1;
      return $184;
    default: assert(0, "bad label: " + label);
  }
}
// EMSCRIPTEN_END_FUNCS
// EMSCRIPTEN_END_FUNCS
// Warning: printing of i64 values may be slightly rounded! No deep i64 math used, so precise i64 code not included
var i64Math = null;
// === Auto-generated postamble setup entry stuff ===
function run(args) {
  initRuntime();
}
Module['run'] = run;
// {{PRE_RUN_ADDITIONS}}
run();
// {{POST_RUN_ADDITIONS}}
  // {{MODULE_ADDITIONS}}
  return Module;
});
