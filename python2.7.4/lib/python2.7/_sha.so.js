// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
// Capture the output of this into a variable, if you want
(function(FUNCTION_TABLE_OFFSET, globalScope) {
  var Module = {};
  var args = [];
  Module.arguments = [];
// === Auto-generated preamble library stuff ===
//========================================
// Runtime essentials
//========================================
function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.pop();
    var func = callback.func;
    if (typeof func === 'number') {
      func = FUNCTION_TABLE[func];
    }
    func(callback.arg === undefined ? null : callback.arg);
  }
}
var __ATINIT__ = []; // functions called during startup
function initRuntime() {
  callRuntimeCallbacks(__ATINIT__);
}
// === Body ===
var __str9;
var __str8;
var __str7;
var __str6;
var __str5;
var __str4;
var __str3;
var __str2;
var __str15;
var __str14;
var __str13;
var __str12;
var __str11;
var __str10;
var __str1;
var __str;
var _SHAtype;
var _SHA_update__doc__;
var _SHA_new_kwlist;
var _SHA_new__doc__;
var _SHA_methods;
var _SHA_hexdigest__doc__;
var _SHA_getseters;
var _SHA_functions;
var _SHA_digest__doc__;
var _SHA_copy__doc__;
__str9=allocate([110,97,109,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str8=allocate([98,108,111,99,107,95,115,105,122,101,0,0], "i8", ALLOC_NORMAL);
__str7=allocate([95,115,104,97,46,115,104,97,0,0,0,0], "i8", ALLOC_NORMAL);
__str6=allocate([124,115,42,58,110,101,119,0], "i8", ALLOC_NORMAL);
__str5=allocate([115,116,114,105,110,103,0,0], "i8", ALLOC_NORMAL);
__str4=allocate([110,101,119,0], "i8", ALLOC_NORMAL);
__str3=allocate([100,105,103,101,115,116,95,115,105,122,101,0], "i8", ALLOC_NORMAL);
__str2=allocate([100,105,103,101,115,116,115,105,122,101,0,0], "i8", ALLOC_NORMAL);
__str15=allocate([115,42,58,117,112,100,97,116,101,0,0,0], "i8", ALLOC_NORMAL);
__str14=allocate([117,112,100,97,116,101,0,0], "i8", ALLOC_NORMAL);
__str13=allocate([104,101,120,100,105,103,101,115,116,0,0,0], "i8", ALLOC_NORMAL);
__str12=allocate([100,105,103,101,115,116,0,0], "i8", ALLOC_NORMAL);
__str11=allocate([99,111,112,121,0,0,0,0], "i8", ALLOC_NORMAL);
__str10=allocate([83,72,65,49,0,0,0,0], "i8", ALLOC_NORMAL);
__str1=allocate([98,108,111,99,107,115,105,122,101,0,0,0], "i8", ALLOC_NORMAL);
__str=allocate([95,115,104,97,0,0,0,0], "i8", ALLOC_NORMAL);
_SHAtype=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_SHA_update__doc__=allocate([85,112,100,97,116,101,32,116,104,105,115,32,104,97,115,104,105,110,103,32,111,98,106,101,99,116,39,115,32,115,116,97,116,101,32,119,105,116,104,32,116,104,101,32,112,114,111,118,105,100,101,100,32,115,116,114,105,110,103,46,0,0,0,0], "i8", ALLOC_NORMAL);
_SHA_new_kwlist=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_SHA_new__doc__=allocate([82,101,116,117,114,110,32,97,32,110,101,119,32,83,72,65,32,104,97,115,104,105,110,103,32,111,98,106,101,99,116,46,32,32,65,110,32,111,112,116,105,111,110,97,108,32,115,116,114,105,110,103,32,97,114,103,117,109,101,110,116,10,109,97,121,32,98,101,32,112,114,111,118,105,100,101,100,59,32,105,102,32,112,114,101,115,101,110,116,44,32,116,104,105,115,32,115,116,114,105,110,103,32,119,105,108,108,32,98,101,32,97,117,116,111,109,97,116,105,99,97,108,108,121,10,104,97,115,104,101,100,46,0,0,0,0], "i8", ALLOC_NORMAL);
_SHA_methods=allocate([0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_SHA_hexdigest__doc__=allocate([82,101,116,117,114,110,32,116,104,101,32,100,105,103,101,115,116,32,118,97,108,117,101,32,97,115,32,97,32,115,116,114,105,110,103,32,111,102,32,104,101,120,97,100,101,99,105,109,97,108,32,100,105,103,105,116,115,46,0,0], "i8", ALLOC_NORMAL);
_SHA_getseters=allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_SHA_functions=allocate([0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_SHA_digest__doc__=allocate([82,101,116,117,114,110,32,116,104,101,32,100,105,103,101,115,116,32,118,97,108,117,101,32,97,115,32,97,32,115,116,114,105,110,103,32,111,102,32,98,105,110,97,114,121,32,100,97,116,97,46,0], "i8", ALLOC_NORMAL);
_SHA_copy__doc__=allocate([82,101,116,117,114,110,32,97,32,99,111,112,121,32,111,102,32,116,104,101,32,104,97,115,104,105,110,103,32,111,98,106,101,99,116,46,0,0,0,0], "i8", ALLOC_NORMAL);
/* no memory initializer */
function runPostSets() {
HEAP32[(((_SHAtype)+(12))>>2)]=((__str7)|0);
HEAP32[(((_SHAtype)+(24))>>2)]=(FUNCTION_TABLE_OFFSET + 10);
HEAP32[(((_SHAtype)+(116))>>2)]=((_SHA_methods)|0);
HEAP32[(((_SHAtype)+(124))>>2)]=((_SHA_getseters)|0);
HEAP32[((_SHA_new_kwlist)>>2)]=((__str5)|0);
HEAP32[((_SHA_methods)>>2)]=((__str11)|0);
HEAP32[(((_SHA_methods)+(4))>>2)]=((FUNCTION_TABLE_OFFSET + 14));
HEAP32[(((_SHA_methods)+(12))>>2)]=((_SHA_copy__doc__)|0);
HEAP32[(((_SHA_methods)+(16))>>2)]=((__str12)|0);
HEAP32[(((_SHA_methods)+(20))>>2)]=((FUNCTION_TABLE_OFFSET + 4));
HEAP32[(((_SHA_methods)+(28))>>2)]=((_SHA_digest__doc__)|0);
HEAP32[(((_SHA_methods)+(32))>>2)]=((__str13)|0);
HEAP32[(((_SHA_methods)+(36))>>2)]=((FUNCTION_TABLE_OFFSET + 12));
HEAP32[(((_SHA_methods)+(44))>>2)]=((_SHA_hexdigest__doc__)|0);
HEAP32[(((_SHA_methods)+(48))>>2)]=((__str14)|0);
HEAP32[(((_SHA_methods)+(52))>>2)]=((FUNCTION_TABLE_OFFSET + 6));
HEAP32[(((_SHA_methods)+(60))>>2)]=((_SHA_update__doc__)|0);
HEAP32[((_SHA_getseters)>>2)]=((__str3)|0);
HEAP32[(((_SHA_getseters)+(4))>>2)]=(FUNCTION_TABLE_OFFSET + 16);
HEAP32[(((_SHA_getseters)+(20))>>2)]=((__str8)|0);
HEAP32[(((_SHA_getseters)+(24))>>2)]=(FUNCTION_TABLE_OFFSET + 18);
HEAP32[(((_SHA_getseters)+(40))>>2)]=((__str9)|0);
HEAP32[(((_SHA_getseters)+(44))>>2)]=(FUNCTION_TABLE_OFFSET + 8);
HEAP32[(((_SHA_getseters)+(60))>>2)]=((__str2)|0);
HEAP32[(((_SHA_getseters)+(64))>>2)]=(FUNCTION_TABLE_OFFSET + 16);
HEAP32[((_SHA_functions)>>2)]=((__str4)|0);
HEAP32[(((_SHA_functions)+(4))>>2)]=((FUNCTION_TABLE_OFFSET + 2));
HEAP32[(((_SHA_functions)+(12))>>2)]=((_SHA_new__doc__)|0);
}
if (!awaitingMemoryInitializer) runPostSets();
FUNCTION_TABLE.push.apply(FUNCTION_TABLE, [0,0,_SHA_new,0,_SHA_digest,0,_SHA_update,0,_SHA_get_name,0,_SHA_dealloc,0,_SHA_hexdigest,0,_SHA_copy,0,_SHA_get_digest_size,0,_SHA_get_block_size,0]);
// EMSCRIPTEN_START_FUNCS
function _sha_init($sha_info) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $i=__stackBase__;
      $1=$sha_info;
      HEAP32[(($i)>>2)]=1;
      var $2=$1;
      var $3=(($2+100)|0);
      HEAP32[(($3)>>2)]=0;
      var $4=$i;
      var $5=HEAP8[($4)];
      var $6=(($5 << 24) >> 24);
      var $7=(($6)|(0))==1;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $9=$1;
      var $10=(($9+100)|0);
      HEAP32[(($10)>>2)]=1;
      label = 3; break;
    case 3: 
      var $12=$1;
      var $13=(($12+8)|0);
      var $14=(($13)|0);
      HEAP32[(($14)>>2)]=1732584193;
      var $15=$1;
      var $16=(($15+8)|0);
      var $17=(($16+4)|0);
      HEAP32[(($17)>>2)]=-271733879;
      var $18=$1;
      var $19=(($18+8)|0);
      var $20=(($19+8)|0);
      HEAP32[(($20)>>2)]=-1732584194;
      var $21=$1;
      var $22=(($21+8)|0);
      var $23=(($22+12)|0);
      HEAP32[(($23)>>2)]=271733878;
      var $24=$1;
      var $25=(($24+8)|0);
      var $26=(($25+16)|0);
      HEAP32[(($26)>>2)]=-1009589776;
      var $27=$1;
      var $28=(($27+28)|0);
      HEAP32[(($28)>>2)]=0;
      var $29=$1;
      var $30=(($29+32)|0);
      HEAP32[(($30)>>2)]=0;
      var $31=$1;
      var $32=(($31+104)|0);
      HEAP32[(($32)>>2)]=0;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _init_sha() {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $m;
      HEAP32[((((_SHAtype+4)|0))>>2)]=_PyType_Type;
      var $1=_PyType_Ready(_SHAtype);
      var $2=(($1)|(0)) < 0;
      if ($2) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 6; break;
    case 3: 
      var $5=_Py_InitModule4(((__str)|0), ((_SHA_functions)|0), 0, 0, 1013);
      $m=$5;
      var $6=$m;
      var $7=(($6)|(0))==0;
      if ($7) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 6; break;
    case 5: 
      var $10=$m;
      var $11=_PyModule_AddIntConstant($10, ((__str1)|0), 1);
      var $12=$m;
      var $13=_PyModule_AddIntConstant($12, ((__str2)|0), 20);
      var $14=$m;
      var $15=_PyModule_AddIntConstant($14, ((__str3)|0), 20);
      label = 6; break;
    case 6: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_init_sha"] = _init_sha;
function _SHA_new($self, $args, $kwdict) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 52)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $new;
      var $view=__stackBase__;
      var $n;
      var $buf;
      var $nbytes;
      $2=$self;
      $3=$args;
      $4=$kwdict;
      var $5=$view;
      _memset($5, 0, 52);
      var $6=$3;
      var $7=$4;
      var $8=_PyArg_ParseTupleAndKeywords($6, $7, ((__str6)|0), ((_SHA_new_kwlist)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$view,tempInt));
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 19; break;
    case 3: 
      var $12=_newSHAobject();
      $new=$12;
      var $13=(($12)|(0))==0;
      if ($13) { label = 4; break; } else { label = 5; break; }
    case 4: 
      _PyBuffer_Release($view);
      $1=0;
      label = 19; break;
    case 5: 
      var $16=$new;
      _sha_init($16);
      var $17=_PyErr_Occurred();
      var $18=(($17)|(0))!=0;
      if ($18) { label = 6; break; } else { label = 12; break; }
    case 6: 
      label = 7; break;
    case 7: 
      var $21=$new;
      var $22=$21;
      var $23=(($22)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=((($24)-(1))|0);
      HEAP32[(($23)>>2)]=$25;
      var $26=(($25)|(0))!=0;
      if ($26) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 10; break;
    case 9: 
      var $29=$new;
      var $30=$29;
      var $31=(($30+4)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32+24)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=$new;
      var $36=$35;
      FUNCTION_TABLE[$34]($36);
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      _PyBuffer_Release($view);
      $1=0;
      label = 19; break;
    case 12: 
      var $40=(($view+8)|0);
      var $41=HEAP32[(($40)>>2)];
      $n=$41;
      var $42=(($view)|0);
      var $43=HEAP32[(($42)>>2)];
      $buf=$43;
      label = 13; break;
    case 13: 
      var $45=$n;
      var $46=(($45)|(0)) > 0;
      if ($46) { label = 14; break; } else { label = 18; break; }
    case 14: 
      var $48=$n;
      var $49=(($48)|(0)) > 2147483647;
      if ($49) { label = 15; break; } else { label = 16; break; }
    case 15: 
      $nbytes=2147483647;
      label = 17; break;
    case 16: 
      var $52=$n;
      $nbytes=$52;
      label = 17; break;
    case 17: 
      var $54=$new;
      var $55=$buf;
      var $56=$nbytes;
      _sha_update($54, $55, $56);
      var $57=$nbytes;
      var $58=$buf;
      var $59=(($58+$57)|0);
      $buf=$59;
      var $60=$nbytes;
      var $61=$n;
      var $62=((($61)-($60))|0);
      $n=$62;
      label = 13; break;
    case 18: 
      _PyBuffer_Release($view);
      var $64=$new;
      var $65=$64;
      $1=$65;
      label = 19; break;
    case 19: 
      var $67=$1;
      STACKTOP = __stackBase__;
      return $67;
    default: assert(0, "bad label: " + label);
  }
}
function _newSHAobject() {
  var label = 0;
  var $1=__PyObject_New(_SHAtype);
  var $2=$1;
  return $2;
}
function _sha_update($sha_info, $buffer, $count) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $i;
      var $clo;
      $1=$sha_info;
      $2=$buffer;
      $3=$count;
      var $4=$1;
      var $5=(($4+28)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=$3;
      var $8=$7 << 3;
      var $9=((($6)+($8))|0);
      $clo=$9;
      var $10=$clo;
      var $11=$1;
      var $12=(($11+28)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($10)>>>(0)) < (($13)>>>(0));
      if ($14) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $16=$1;
      var $17=(($16+32)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=((($18)+(1))|0);
      HEAP32[(($17)>>2)]=$19;
      label = 3; break;
    case 3: 
      var $21=$clo;
      var $22=$1;
      var $23=(($22+28)|0);
      HEAP32[(($23)>>2)]=$21;
      var $24=$3;
      var $25=$24 >>> 29;
      var $26=$1;
      var $27=(($26+32)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=((($28)+($25))|0);
      HEAP32[(($27)>>2)]=$29;
      var $30=$1;
      var $31=(($30+104)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32)|(0))!=0;
      if ($33) { label = 4; break; } else { label = 10; break; }
    case 4: 
      var $35=$1;
      var $36=(($35+104)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(((64)-($37))|0);
      $i=$38;
      var $39=$i;
      var $40=$3;
      var $41=(($39)>>>(0)) > (($40)>>>(0));
      if ($41) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $43=$3;
      $i=$43;
      label = 6; break;
    case 6: 
      var $45=$1;
      var $46=(($45+36)|0);
      var $47=(($46)|0);
      var $48=$1;
      var $49=(($48+104)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=(($47+$50)|0);
      var $52=$2;
      var $53=$i;
      assert($53 % 1 === 0);_memcpy($51, $52, $53);
      var $54=$i;
      var $55=$3;
      var $56=((($55)-($54))|0);
      $3=$56;
      var $57=$i;
      var $58=$2;
      var $59=(($58+$57)|0);
      $2=$59;
      var $60=$i;
      var $61=$1;
      var $62=(($61+104)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=((($63)+($60))|0);
      HEAP32[(($62)>>2)]=$64;
      var $65=$1;
      var $66=(($65+104)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=(($67)|(0))==64;
      if ($68) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $70=$1;
      _sha_transform($70);
      label = 9; break;
    case 8: 
      label = 14; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $75=$3;
      var $76=(($75)>>>(0)) >= 64;
      if ($76) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $78=$1;
      var $79=(($78+36)|0);
      var $80=$79;
      var $81=$2;
      assert(64 % 1 === 0);_memcpy($80, $81, 64);
      var $82=$2;
      var $83=(($82+64)|0);
      $2=$83;
      var $84=$3;
      var $85=((($84)-(64))|0);
      $3=$85;
      var $86=$1;
      _sha_transform($86);
      label = 11; break;
    case 13: 
      var $88=$1;
      var $89=(($88+36)|0);
      var $90=$89;
      var $91=$2;
      var $92=$3;
      assert($92 % 1 === 0);_memcpy($90, $91, $92);
      var $93=$3;
      var $94=$1;
      var $95=(($94+104)|0);
      HEAP32[(($95)>>2)]=$93;
      label = 14; break;
    case 14: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _sha_transform($sha_info) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 320)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $i;
      var $T;
      var $A;
      var $B;
      var $C;
      var $D;
      var $E;
      var $W=__stackBase__;
      var $WP;
      $1=$sha_info;
      var $2=$W;
      var $3=$1;
      var $4=(($3+36)|0);
      var $5=$4;
      assert(64 % 1 === 0);_memcpy($2, $5, 64);
      var $6=(($W)|0);
      var $7=$1;
      var $8=(($7+100)|0);
      var $9=HEAP32[(($8)>>2)];
      _longReverse($6, 64, $9);
      $i=16;
      label = 2; break;
    case 2: 
      var $11=$i;
      var $12=(($11)|(0)) < 80;
      if ($12) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $14=$i;
      var $15=((($14)-(3))|0);
      var $16=(($W+($15<<2))|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=$i;
      var $19=((($18)-(8))|0);
      var $20=(($W+($19<<2))|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$17 ^ $21;
      var $23=$i;
      var $24=((($23)-(14))|0);
      var $25=(($W+($24<<2))|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$22 ^ $26;
      var $28=$i;
      var $29=((($28)-(16))|0);
      var $30=(($W+($29<<2))|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=$27 ^ $31;
      var $33=$i;
      var $34=(($W+($33<<2))|0);
      HEAP32[(($34)>>2)]=$32;
      var $35=$i;
      var $36=(($W+($35<<2))|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=$37 << 1;
      var $39=$i;
      var $40=(($W+($39<<2))|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=$41 >>> 31;
      var $43=$38 | $42;
      var $44=$i;
      var $45=(($W+($44<<2))|0);
      HEAP32[(($45)>>2)]=$43;
      label = 4; break;
    case 4: 
      var $47=$i;
      var $48=((($47)+(1))|0);
      $i=$48;
      label = 2; break;
    case 5: 
      var $50=$1;
      var $51=(($50+8)|0);
      var $52=(($51)|0);
      var $53=HEAP32[(($52)>>2)];
      $A=$53;
      var $54=$1;
      var $55=(($54+8)|0);
      var $56=(($55+4)|0);
      var $57=HEAP32[(($56)>>2)];
      $B=$57;
      var $58=$1;
      var $59=(($58+8)|0);
      var $60=(($59+8)|0);
      var $61=HEAP32[(($60)>>2)];
      $C=$61;
      var $62=$1;
      var $63=(($62+8)|0);
      var $64=(($63+12)|0);
      var $65=HEAP32[(($64)>>2)];
      $D=$65;
      var $66=$1;
      var $67=(($66+8)|0);
      var $68=(($67+16)|0);
      var $69=HEAP32[(($68)>>2)];
      $E=$69;
      var $70=(($W)|0);
      $WP=$70;
      var $71=$A;
      var $72=$71 << 5;
      var $73=$A;
      var $74=$73 >>> 27;
      var $75=$72 | $74;
      var $76=$D;
      var $77=$B;
      var $78=$C;
      var $79=$D;
      var $80=$78 ^ $79;
      var $81=$77 & $80;
      var $82=$76 ^ $81;
      var $83=((($75)+($82))|0);
      var $84=$E;
      var $85=((($83)+($84))|0);
      var $86=$WP;
      var $87=(($86+4)|0);
      $WP=$87;
      var $88=HEAP32[(($86)>>2)];
      var $89=((($85)+($88))|0);
      var $90=((($89)+(1518500249))|0);
      $T=$90;
      var $91=$B;
      var $92=$91 << 30;
      var $93=$B;
      var $94=$93 >>> 2;
      var $95=$92 | $94;
      $B=$95;
      var $96=$T;
      var $97=$96 << 5;
      var $98=$T;
      var $99=$98 >>> 27;
      var $100=$97 | $99;
      var $101=$C;
      var $102=$A;
      var $103=$B;
      var $104=$C;
      var $105=$103 ^ $104;
      var $106=$102 & $105;
      var $107=$101 ^ $106;
      var $108=((($100)+($107))|0);
      var $109=$D;
      var $110=((($108)+($109))|0);
      var $111=$WP;
      var $112=(($111+4)|0);
      $WP=$112;
      var $113=HEAP32[(($111)>>2)];
      var $114=((($110)+($113))|0);
      var $115=((($114)+(1518500249))|0);
      $E=$115;
      var $116=$A;
      var $117=$116 << 30;
      var $118=$A;
      var $119=$118 >>> 2;
      var $120=$117 | $119;
      $A=$120;
      var $121=$E;
      var $122=$121 << 5;
      var $123=$E;
      var $124=$123 >>> 27;
      var $125=$122 | $124;
      var $126=$B;
      var $127=$T;
      var $128=$A;
      var $129=$B;
      var $130=$128 ^ $129;
      var $131=$127 & $130;
      var $132=$126 ^ $131;
      var $133=((($125)+($132))|0);
      var $134=$C;
      var $135=((($133)+($134))|0);
      var $136=$WP;
      var $137=(($136+4)|0);
      $WP=$137;
      var $138=HEAP32[(($136)>>2)];
      var $139=((($135)+($138))|0);
      var $140=((($139)+(1518500249))|0);
      $D=$140;
      var $141=$T;
      var $142=$141 << 30;
      var $143=$T;
      var $144=$143 >>> 2;
      var $145=$142 | $144;
      $T=$145;
      var $146=$D;
      var $147=$146 << 5;
      var $148=$D;
      var $149=$148 >>> 27;
      var $150=$147 | $149;
      var $151=$A;
      var $152=$E;
      var $153=$T;
      var $154=$A;
      var $155=$153 ^ $154;
      var $156=$152 & $155;
      var $157=$151 ^ $156;
      var $158=((($150)+($157))|0);
      var $159=$B;
      var $160=((($158)+($159))|0);
      var $161=$WP;
      var $162=(($161+4)|0);
      $WP=$162;
      var $163=HEAP32[(($161)>>2)];
      var $164=((($160)+($163))|0);
      var $165=((($164)+(1518500249))|0);
      $C=$165;
      var $166=$E;
      var $167=$166 << 30;
      var $168=$E;
      var $169=$168 >>> 2;
      var $170=$167 | $169;
      $E=$170;
      var $171=$C;
      var $172=$171 << 5;
      var $173=$C;
      var $174=$173 >>> 27;
      var $175=$172 | $174;
      var $176=$T;
      var $177=$D;
      var $178=$E;
      var $179=$T;
      var $180=$178 ^ $179;
      var $181=$177 & $180;
      var $182=$176 ^ $181;
      var $183=((($175)+($182))|0);
      var $184=$A;
      var $185=((($183)+($184))|0);
      var $186=$WP;
      var $187=(($186+4)|0);
      $WP=$187;
      var $188=HEAP32[(($186)>>2)];
      var $189=((($185)+($188))|0);
      var $190=((($189)+(1518500249))|0);
      $B=$190;
      var $191=$D;
      var $192=$191 << 30;
      var $193=$D;
      var $194=$193 >>> 2;
      var $195=$192 | $194;
      $D=$195;
      var $196=$B;
      var $197=$196 << 5;
      var $198=$B;
      var $199=$198 >>> 27;
      var $200=$197 | $199;
      var $201=$E;
      var $202=$C;
      var $203=$D;
      var $204=$E;
      var $205=$203 ^ $204;
      var $206=$202 & $205;
      var $207=$201 ^ $206;
      var $208=((($200)+($207))|0);
      var $209=$T;
      var $210=((($208)+($209))|0);
      var $211=$WP;
      var $212=(($211+4)|0);
      $WP=$212;
      var $213=HEAP32[(($211)>>2)];
      var $214=((($210)+($213))|0);
      var $215=((($214)+(1518500249))|0);
      $A=$215;
      var $216=$C;
      var $217=$216 << 30;
      var $218=$C;
      var $219=$218 >>> 2;
      var $220=$217 | $219;
      $C=$220;
      var $221=$A;
      var $222=$221 << 5;
      var $223=$A;
      var $224=$223 >>> 27;
      var $225=$222 | $224;
      var $226=$D;
      var $227=$B;
      var $228=$C;
      var $229=$D;
      var $230=$228 ^ $229;
      var $231=$227 & $230;
      var $232=$226 ^ $231;
      var $233=((($225)+($232))|0);
      var $234=$E;
      var $235=((($233)+($234))|0);
      var $236=$WP;
      var $237=(($236+4)|0);
      $WP=$237;
      var $238=HEAP32[(($236)>>2)];
      var $239=((($235)+($238))|0);
      var $240=((($239)+(1518500249))|0);
      $T=$240;
      var $241=$B;
      var $242=$241 << 30;
      var $243=$B;
      var $244=$243 >>> 2;
      var $245=$242 | $244;
      $B=$245;
      var $246=$T;
      var $247=$246 << 5;
      var $248=$T;
      var $249=$248 >>> 27;
      var $250=$247 | $249;
      var $251=$C;
      var $252=$A;
      var $253=$B;
      var $254=$C;
      var $255=$253 ^ $254;
      var $256=$252 & $255;
      var $257=$251 ^ $256;
      var $258=((($250)+($257))|0);
      var $259=$D;
      var $260=((($258)+($259))|0);
      var $261=$WP;
      var $262=(($261+4)|0);
      $WP=$262;
      var $263=HEAP32[(($261)>>2)];
      var $264=((($260)+($263))|0);
      var $265=((($264)+(1518500249))|0);
      $E=$265;
      var $266=$A;
      var $267=$266 << 30;
      var $268=$A;
      var $269=$268 >>> 2;
      var $270=$267 | $269;
      $A=$270;
      var $271=$E;
      var $272=$271 << 5;
      var $273=$E;
      var $274=$273 >>> 27;
      var $275=$272 | $274;
      var $276=$B;
      var $277=$T;
      var $278=$A;
      var $279=$B;
      var $280=$278 ^ $279;
      var $281=$277 & $280;
      var $282=$276 ^ $281;
      var $283=((($275)+($282))|0);
      var $284=$C;
      var $285=((($283)+($284))|0);
      var $286=$WP;
      var $287=(($286+4)|0);
      $WP=$287;
      var $288=HEAP32[(($286)>>2)];
      var $289=((($285)+($288))|0);
      var $290=((($289)+(1518500249))|0);
      $D=$290;
      var $291=$T;
      var $292=$291 << 30;
      var $293=$T;
      var $294=$293 >>> 2;
      var $295=$292 | $294;
      $T=$295;
      var $296=$D;
      var $297=$296 << 5;
      var $298=$D;
      var $299=$298 >>> 27;
      var $300=$297 | $299;
      var $301=$A;
      var $302=$E;
      var $303=$T;
      var $304=$A;
      var $305=$303 ^ $304;
      var $306=$302 & $305;
      var $307=$301 ^ $306;
      var $308=((($300)+($307))|0);
      var $309=$B;
      var $310=((($308)+($309))|0);
      var $311=$WP;
      var $312=(($311+4)|0);
      $WP=$312;
      var $313=HEAP32[(($311)>>2)];
      var $314=((($310)+($313))|0);
      var $315=((($314)+(1518500249))|0);
      $C=$315;
      var $316=$E;
      var $317=$316 << 30;
      var $318=$E;
      var $319=$318 >>> 2;
      var $320=$317 | $319;
      $E=$320;
      var $321=$C;
      var $322=$321 << 5;
      var $323=$C;
      var $324=$323 >>> 27;
      var $325=$322 | $324;
      var $326=$T;
      var $327=$D;
      var $328=$E;
      var $329=$T;
      var $330=$328 ^ $329;
      var $331=$327 & $330;
      var $332=$326 ^ $331;
      var $333=((($325)+($332))|0);
      var $334=$A;
      var $335=((($333)+($334))|0);
      var $336=$WP;
      var $337=(($336+4)|0);
      $WP=$337;
      var $338=HEAP32[(($336)>>2)];
      var $339=((($335)+($338))|0);
      var $340=((($339)+(1518500249))|0);
      $B=$340;
      var $341=$D;
      var $342=$341 << 30;
      var $343=$D;
      var $344=$343 >>> 2;
      var $345=$342 | $344;
      $D=$345;
      var $346=$B;
      var $347=$346 << 5;
      var $348=$B;
      var $349=$348 >>> 27;
      var $350=$347 | $349;
      var $351=$E;
      var $352=$C;
      var $353=$D;
      var $354=$E;
      var $355=$353 ^ $354;
      var $356=$352 & $355;
      var $357=$351 ^ $356;
      var $358=((($350)+($357))|0);
      var $359=$T;
      var $360=((($358)+($359))|0);
      var $361=$WP;
      var $362=(($361+4)|0);
      $WP=$362;
      var $363=HEAP32[(($361)>>2)];
      var $364=((($360)+($363))|0);
      var $365=((($364)+(1518500249))|0);
      $A=$365;
      var $366=$C;
      var $367=$366 << 30;
      var $368=$C;
      var $369=$368 >>> 2;
      var $370=$367 | $369;
      $C=$370;
      var $371=$A;
      var $372=$371 << 5;
      var $373=$A;
      var $374=$373 >>> 27;
      var $375=$372 | $374;
      var $376=$D;
      var $377=$B;
      var $378=$C;
      var $379=$D;
      var $380=$378 ^ $379;
      var $381=$377 & $380;
      var $382=$376 ^ $381;
      var $383=((($375)+($382))|0);
      var $384=$E;
      var $385=((($383)+($384))|0);
      var $386=$WP;
      var $387=(($386+4)|0);
      $WP=$387;
      var $388=HEAP32[(($386)>>2)];
      var $389=((($385)+($388))|0);
      var $390=((($389)+(1518500249))|0);
      $T=$390;
      var $391=$B;
      var $392=$391 << 30;
      var $393=$B;
      var $394=$393 >>> 2;
      var $395=$392 | $394;
      $B=$395;
      var $396=$T;
      var $397=$396 << 5;
      var $398=$T;
      var $399=$398 >>> 27;
      var $400=$397 | $399;
      var $401=$C;
      var $402=$A;
      var $403=$B;
      var $404=$C;
      var $405=$403 ^ $404;
      var $406=$402 & $405;
      var $407=$401 ^ $406;
      var $408=((($400)+($407))|0);
      var $409=$D;
      var $410=((($408)+($409))|0);
      var $411=$WP;
      var $412=(($411+4)|0);
      $WP=$412;
      var $413=HEAP32[(($411)>>2)];
      var $414=((($410)+($413))|0);
      var $415=((($414)+(1518500249))|0);
      $E=$415;
      var $416=$A;
      var $417=$416 << 30;
      var $418=$A;
      var $419=$418 >>> 2;
      var $420=$417 | $419;
      $A=$420;
      var $421=$E;
      var $422=$421 << 5;
      var $423=$E;
      var $424=$423 >>> 27;
      var $425=$422 | $424;
      var $426=$B;
      var $427=$T;
      var $428=$A;
      var $429=$B;
      var $430=$428 ^ $429;
      var $431=$427 & $430;
      var $432=$426 ^ $431;
      var $433=((($425)+($432))|0);
      var $434=$C;
      var $435=((($433)+($434))|0);
      var $436=$WP;
      var $437=(($436+4)|0);
      $WP=$437;
      var $438=HEAP32[(($436)>>2)];
      var $439=((($435)+($438))|0);
      var $440=((($439)+(1518500249))|0);
      $D=$440;
      var $441=$T;
      var $442=$441 << 30;
      var $443=$T;
      var $444=$443 >>> 2;
      var $445=$442 | $444;
      $T=$445;
      var $446=$D;
      var $447=$446 << 5;
      var $448=$D;
      var $449=$448 >>> 27;
      var $450=$447 | $449;
      var $451=$A;
      var $452=$E;
      var $453=$T;
      var $454=$A;
      var $455=$453 ^ $454;
      var $456=$452 & $455;
      var $457=$451 ^ $456;
      var $458=((($450)+($457))|0);
      var $459=$B;
      var $460=((($458)+($459))|0);
      var $461=$WP;
      var $462=(($461+4)|0);
      $WP=$462;
      var $463=HEAP32[(($461)>>2)];
      var $464=((($460)+($463))|0);
      var $465=((($464)+(1518500249))|0);
      $C=$465;
      var $466=$E;
      var $467=$466 << 30;
      var $468=$E;
      var $469=$468 >>> 2;
      var $470=$467 | $469;
      $E=$470;
      var $471=$C;
      var $472=$471 << 5;
      var $473=$C;
      var $474=$473 >>> 27;
      var $475=$472 | $474;
      var $476=$T;
      var $477=$D;
      var $478=$E;
      var $479=$T;
      var $480=$478 ^ $479;
      var $481=$477 & $480;
      var $482=$476 ^ $481;
      var $483=((($475)+($482))|0);
      var $484=$A;
      var $485=((($483)+($484))|0);
      var $486=$WP;
      var $487=(($486+4)|0);
      $WP=$487;
      var $488=HEAP32[(($486)>>2)];
      var $489=((($485)+($488))|0);
      var $490=((($489)+(1518500249))|0);
      $B=$490;
      var $491=$D;
      var $492=$491 << 30;
      var $493=$D;
      var $494=$493 >>> 2;
      var $495=$492 | $494;
      $D=$495;
      var $496=$B;
      var $497=$496 << 5;
      var $498=$B;
      var $499=$498 >>> 27;
      var $500=$497 | $499;
      var $501=$E;
      var $502=$C;
      var $503=$D;
      var $504=$E;
      var $505=$503 ^ $504;
      var $506=$502 & $505;
      var $507=$501 ^ $506;
      var $508=((($500)+($507))|0);
      var $509=$T;
      var $510=((($508)+($509))|0);
      var $511=$WP;
      var $512=(($511+4)|0);
      $WP=$512;
      var $513=HEAP32[(($511)>>2)];
      var $514=((($510)+($513))|0);
      var $515=((($514)+(1518500249))|0);
      $A=$515;
      var $516=$C;
      var $517=$516 << 30;
      var $518=$C;
      var $519=$518 >>> 2;
      var $520=$517 | $519;
      $C=$520;
      var $521=$A;
      var $522=$521 << 5;
      var $523=$A;
      var $524=$523 >>> 27;
      var $525=$522 | $524;
      var $526=$D;
      var $527=$B;
      var $528=$C;
      var $529=$D;
      var $530=$528 ^ $529;
      var $531=$527 & $530;
      var $532=$526 ^ $531;
      var $533=((($525)+($532))|0);
      var $534=$E;
      var $535=((($533)+($534))|0);
      var $536=$WP;
      var $537=(($536+4)|0);
      $WP=$537;
      var $538=HEAP32[(($536)>>2)];
      var $539=((($535)+($538))|0);
      var $540=((($539)+(1518500249))|0);
      $T=$540;
      var $541=$B;
      var $542=$541 << 30;
      var $543=$B;
      var $544=$543 >>> 2;
      var $545=$542 | $544;
      $B=$545;
      var $546=$T;
      var $547=$546 << 5;
      var $548=$T;
      var $549=$548 >>> 27;
      var $550=$547 | $549;
      var $551=$C;
      var $552=$A;
      var $553=$B;
      var $554=$C;
      var $555=$553 ^ $554;
      var $556=$552 & $555;
      var $557=$551 ^ $556;
      var $558=((($550)+($557))|0);
      var $559=$D;
      var $560=((($558)+($559))|0);
      var $561=$WP;
      var $562=(($561+4)|0);
      $WP=$562;
      var $563=HEAP32[(($561)>>2)];
      var $564=((($560)+($563))|0);
      var $565=((($564)+(1518500249))|0);
      $E=$565;
      var $566=$A;
      var $567=$566 << 30;
      var $568=$A;
      var $569=$568 >>> 2;
      var $570=$567 | $569;
      $A=$570;
      var $571=$E;
      var $572=$571 << 5;
      var $573=$E;
      var $574=$573 >>> 27;
      var $575=$572 | $574;
      var $576=$T;
      var $577=$A;
      var $578=$576 ^ $577;
      var $579=$B;
      var $580=$578 ^ $579;
      var $581=((($575)+($580))|0);
      var $582=$C;
      var $583=((($581)+($582))|0);
      var $584=$WP;
      var $585=(($584+4)|0);
      $WP=$585;
      var $586=HEAP32[(($584)>>2)];
      var $587=((($583)+($586))|0);
      var $588=((($587)+(1859775393))|0);
      $D=$588;
      var $589=$T;
      var $590=$589 << 30;
      var $591=$T;
      var $592=$591 >>> 2;
      var $593=$590 | $592;
      $T=$593;
      var $594=$D;
      var $595=$594 << 5;
      var $596=$D;
      var $597=$596 >>> 27;
      var $598=$595 | $597;
      var $599=$E;
      var $600=$T;
      var $601=$599 ^ $600;
      var $602=$A;
      var $603=$601 ^ $602;
      var $604=((($598)+($603))|0);
      var $605=$B;
      var $606=((($604)+($605))|0);
      var $607=$WP;
      var $608=(($607+4)|0);
      $WP=$608;
      var $609=HEAP32[(($607)>>2)];
      var $610=((($606)+($609))|0);
      var $611=((($610)+(1859775393))|0);
      $C=$611;
      var $612=$E;
      var $613=$612 << 30;
      var $614=$E;
      var $615=$614 >>> 2;
      var $616=$613 | $615;
      $E=$616;
      var $617=$C;
      var $618=$617 << 5;
      var $619=$C;
      var $620=$619 >>> 27;
      var $621=$618 | $620;
      var $622=$D;
      var $623=$E;
      var $624=$622 ^ $623;
      var $625=$T;
      var $626=$624 ^ $625;
      var $627=((($621)+($626))|0);
      var $628=$A;
      var $629=((($627)+($628))|0);
      var $630=$WP;
      var $631=(($630+4)|0);
      $WP=$631;
      var $632=HEAP32[(($630)>>2)];
      var $633=((($629)+($632))|0);
      var $634=((($633)+(1859775393))|0);
      $B=$634;
      var $635=$D;
      var $636=$635 << 30;
      var $637=$D;
      var $638=$637 >>> 2;
      var $639=$636 | $638;
      $D=$639;
      var $640=$B;
      var $641=$640 << 5;
      var $642=$B;
      var $643=$642 >>> 27;
      var $644=$641 | $643;
      var $645=$C;
      var $646=$D;
      var $647=$645 ^ $646;
      var $648=$E;
      var $649=$647 ^ $648;
      var $650=((($644)+($649))|0);
      var $651=$T;
      var $652=((($650)+($651))|0);
      var $653=$WP;
      var $654=(($653+4)|0);
      $WP=$654;
      var $655=HEAP32[(($653)>>2)];
      var $656=((($652)+($655))|0);
      var $657=((($656)+(1859775393))|0);
      $A=$657;
      var $658=$C;
      var $659=$658 << 30;
      var $660=$C;
      var $661=$660 >>> 2;
      var $662=$659 | $661;
      $C=$662;
      var $663=$A;
      var $664=$663 << 5;
      var $665=$A;
      var $666=$665 >>> 27;
      var $667=$664 | $666;
      var $668=$B;
      var $669=$C;
      var $670=$668 ^ $669;
      var $671=$D;
      var $672=$670 ^ $671;
      var $673=((($667)+($672))|0);
      var $674=$E;
      var $675=((($673)+($674))|0);
      var $676=$WP;
      var $677=(($676+4)|0);
      $WP=$677;
      var $678=HEAP32[(($676)>>2)];
      var $679=((($675)+($678))|0);
      var $680=((($679)+(1859775393))|0);
      $T=$680;
      var $681=$B;
      var $682=$681 << 30;
      var $683=$B;
      var $684=$683 >>> 2;
      var $685=$682 | $684;
      $B=$685;
      var $686=$T;
      var $687=$686 << 5;
      var $688=$T;
      var $689=$688 >>> 27;
      var $690=$687 | $689;
      var $691=$A;
      var $692=$B;
      var $693=$691 ^ $692;
      var $694=$C;
      var $695=$693 ^ $694;
      var $696=((($690)+($695))|0);
      var $697=$D;
      var $698=((($696)+($697))|0);
      var $699=$WP;
      var $700=(($699+4)|0);
      $WP=$700;
      var $701=HEAP32[(($699)>>2)];
      var $702=((($698)+($701))|0);
      var $703=((($702)+(1859775393))|0);
      $E=$703;
      var $704=$A;
      var $705=$704 << 30;
      var $706=$A;
      var $707=$706 >>> 2;
      var $708=$705 | $707;
      $A=$708;
      var $709=$E;
      var $710=$709 << 5;
      var $711=$E;
      var $712=$711 >>> 27;
      var $713=$710 | $712;
      var $714=$T;
      var $715=$A;
      var $716=$714 ^ $715;
      var $717=$B;
      var $718=$716 ^ $717;
      var $719=((($713)+($718))|0);
      var $720=$C;
      var $721=((($719)+($720))|0);
      var $722=$WP;
      var $723=(($722+4)|0);
      $WP=$723;
      var $724=HEAP32[(($722)>>2)];
      var $725=((($721)+($724))|0);
      var $726=((($725)+(1859775393))|0);
      $D=$726;
      var $727=$T;
      var $728=$727 << 30;
      var $729=$T;
      var $730=$729 >>> 2;
      var $731=$728 | $730;
      $T=$731;
      var $732=$D;
      var $733=$732 << 5;
      var $734=$D;
      var $735=$734 >>> 27;
      var $736=$733 | $735;
      var $737=$E;
      var $738=$T;
      var $739=$737 ^ $738;
      var $740=$A;
      var $741=$739 ^ $740;
      var $742=((($736)+($741))|0);
      var $743=$B;
      var $744=((($742)+($743))|0);
      var $745=$WP;
      var $746=(($745+4)|0);
      $WP=$746;
      var $747=HEAP32[(($745)>>2)];
      var $748=((($744)+($747))|0);
      var $749=((($748)+(1859775393))|0);
      $C=$749;
      var $750=$E;
      var $751=$750 << 30;
      var $752=$E;
      var $753=$752 >>> 2;
      var $754=$751 | $753;
      $E=$754;
      var $755=$C;
      var $756=$755 << 5;
      var $757=$C;
      var $758=$757 >>> 27;
      var $759=$756 | $758;
      var $760=$D;
      var $761=$E;
      var $762=$760 ^ $761;
      var $763=$T;
      var $764=$762 ^ $763;
      var $765=((($759)+($764))|0);
      var $766=$A;
      var $767=((($765)+($766))|0);
      var $768=$WP;
      var $769=(($768+4)|0);
      $WP=$769;
      var $770=HEAP32[(($768)>>2)];
      var $771=((($767)+($770))|0);
      var $772=((($771)+(1859775393))|0);
      $B=$772;
      var $773=$D;
      var $774=$773 << 30;
      var $775=$D;
      var $776=$775 >>> 2;
      var $777=$774 | $776;
      $D=$777;
      var $778=$B;
      var $779=$778 << 5;
      var $780=$B;
      var $781=$780 >>> 27;
      var $782=$779 | $781;
      var $783=$C;
      var $784=$D;
      var $785=$783 ^ $784;
      var $786=$E;
      var $787=$785 ^ $786;
      var $788=((($782)+($787))|0);
      var $789=$T;
      var $790=((($788)+($789))|0);
      var $791=$WP;
      var $792=(($791+4)|0);
      $WP=$792;
      var $793=HEAP32[(($791)>>2)];
      var $794=((($790)+($793))|0);
      var $795=((($794)+(1859775393))|0);
      $A=$795;
      var $796=$C;
      var $797=$796 << 30;
      var $798=$C;
      var $799=$798 >>> 2;
      var $800=$797 | $799;
      $C=$800;
      var $801=$A;
      var $802=$801 << 5;
      var $803=$A;
      var $804=$803 >>> 27;
      var $805=$802 | $804;
      var $806=$B;
      var $807=$C;
      var $808=$806 ^ $807;
      var $809=$D;
      var $810=$808 ^ $809;
      var $811=((($805)+($810))|0);
      var $812=$E;
      var $813=((($811)+($812))|0);
      var $814=$WP;
      var $815=(($814+4)|0);
      $WP=$815;
      var $816=HEAP32[(($814)>>2)];
      var $817=((($813)+($816))|0);
      var $818=((($817)+(1859775393))|0);
      $T=$818;
      var $819=$B;
      var $820=$819 << 30;
      var $821=$B;
      var $822=$821 >>> 2;
      var $823=$820 | $822;
      $B=$823;
      var $824=$T;
      var $825=$824 << 5;
      var $826=$T;
      var $827=$826 >>> 27;
      var $828=$825 | $827;
      var $829=$A;
      var $830=$B;
      var $831=$829 ^ $830;
      var $832=$C;
      var $833=$831 ^ $832;
      var $834=((($828)+($833))|0);
      var $835=$D;
      var $836=((($834)+($835))|0);
      var $837=$WP;
      var $838=(($837+4)|0);
      $WP=$838;
      var $839=HEAP32[(($837)>>2)];
      var $840=((($836)+($839))|0);
      var $841=((($840)+(1859775393))|0);
      $E=$841;
      var $842=$A;
      var $843=$842 << 30;
      var $844=$A;
      var $845=$844 >>> 2;
      var $846=$843 | $845;
      $A=$846;
      var $847=$E;
      var $848=$847 << 5;
      var $849=$E;
      var $850=$849 >>> 27;
      var $851=$848 | $850;
      var $852=$T;
      var $853=$A;
      var $854=$852 ^ $853;
      var $855=$B;
      var $856=$854 ^ $855;
      var $857=((($851)+($856))|0);
      var $858=$C;
      var $859=((($857)+($858))|0);
      var $860=$WP;
      var $861=(($860+4)|0);
      $WP=$861;
      var $862=HEAP32[(($860)>>2)];
      var $863=((($859)+($862))|0);
      var $864=((($863)+(1859775393))|0);
      $D=$864;
      var $865=$T;
      var $866=$865 << 30;
      var $867=$T;
      var $868=$867 >>> 2;
      var $869=$866 | $868;
      $T=$869;
      var $870=$D;
      var $871=$870 << 5;
      var $872=$D;
      var $873=$872 >>> 27;
      var $874=$871 | $873;
      var $875=$E;
      var $876=$T;
      var $877=$875 ^ $876;
      var $878=$A;
      var $879=$877 ^ $878;
      var $880=((($874)+($879))|0);
      var $881=$B;
      var $882=((($880)+($881))|0);
      var $883=$WP;
      var $884=(($883+4)|0);
      $WP=$884;
      var $885=HEAP32[(($883)>>2)];
      var $886=((($882)+($885))|0);
      var $887=((($886)+(1859775393))|0);
      $C=$887;
      var $888=$E;
      var $889=$888 << 30;
      var $890=$E;
      var $891=$890 >>> 2;
      var $892=$889 | $891;
      $E=$892;
      var $893=$C;
      var $894=$893 << 5;
      var $895=$C;
      var $896=$895 >>> 27;
      var $897=$894 | $896;
      var $898=$D;
      var $899=$E;
      var $900=$898 ^ $899;
      var $901=$T;
      var $902=$900 ^ $901;
      var $903=((($897)+($902))|0);
      var $904=$A;
      var $905=((($903)+($904))|0);
      var $906=$WP;
      var $907=(($906+4)|0);
      $WP=$907;
      var $908=HEAP32[(($906)>>2)];
      var $909=((($905)+($908))|0);
      var $910=((($909)+(1859775393))|0);
      $B=$910;
      var $911=$D;
      var $912=$911 << 30;
      var $913=$D;
      var $914=$913 >>> 2;
      var $915=$912 | $914;
      $D=$915;
      var $916=$B;
      var $917=$916 << 5;
      var $918=$B;
      var $919=$918 >>> 27;
      var $920=$917 | $919;
      var $921=$C;
      var $922=$D;
      var $923=$921 ^ $922;
      var $924=$E;
      var $925=$923 ^ $924;
      var $926=((($920)+($925))|0);
      var $927=$T;
      var $928=((($926)+($927))|0);
      var $929=$WP;
      var $930=(($929+4)|0);
      $WP=$930;
      var $931=HEAP32[(($929)>>2)];
      var $932=((($928)+($931))|0);
      var $933=((($932)+(1859775393))|0);
      $A=$933;
      var $934=$C;
      var $935=$934 << 30;
      var $936=$C;
      var $937=$936 >>> 2;
      var $938=$935 | $937;
      $C=$938;
      var $939=$A;
      var $940=$939 << 5;
      var $941=$A;
      var $942=$941 >>> 27;
      var $943=$940 | $942;
      var $944=$B;
      var $945=$C;
      var $946=$944 ^ $945;
      var $947=$D;
      var $948=$946 ^ $947;
      var $949=((($943)+($948))|0);
      var $950=$E;
      var $951=((($949)+($950))|0);
      var $952=$WP;
      var $953=(($952+4)|0);
      $WP=$953;
      var $954=HEAP32[(($952)>>2)];
      var $955=((($951)+($954))|0);
      var $956=((($955)+(1859775393))|0);
      $T=$956;
      var $957=$B;
      var $958=$957 << 30;
      var $959=$B;
      var $960=$959 >>> 2;
      var $961=$958 | $960;
      $B=$961;
      var $962=$T;
      var $963=$962 << 5;
      var $964=$T;
      var $965=$964 >>> 27;
      var $966=$963 | $965;
      var $967=$A;
      var $968=$B;
      var $969=$967 ^ $968;
      var $970=$C;
      var $971=$969 ^ $970;
      var $972=((($966)+($971))|0);
      var $973=$D;
      var $974=((($972)+($973))|0);
      var $975=$WP;
      var $976=(($975+4)|0);
      $WP=$976;
      var $977=HEAP32[(($975)>>2)];
      var $978=((($974)+($977))|0);
      var $979=((($978)+(1859775393))|0);
      $E=$979;
      var $980=$A;
      var $981=$980 << 30;
      var $982=$A;
      var $983=$982 >>> 2;
      var $984=$981 | $983;
      $A=$984;
      var $985=$E;
      var $986=$985 << 5;
      var $987=$E;
      var $988=$987 >>> 27;
      var $989=$986 | $988;
      var $990=$T;
      var $991=$A;
      var $992=$990 ^ $991;
      var $993=$B;
      var $994=$992 ^ $993;
      var $995=((($989)+($994))|0);
      var $996=$C;
      var $997=((($995)+($996))|0);
      var $998=$WP;
      var $999=(($998+4)|0);
      $WP=$999;
      var $1000=HEAP32[(($998)>>2)];
      var $1001=((($997)+($1000))|0);
      var $1002=((($1001)+(1859775393))|0);
      $D=$1002;
      var $1003=$T;
      var $1004=$1003 << 30;
      var $1005=$T;
      var $1006=$1005 >>> 2;
      var $1007=$1004 | $1006;
      $T=$1007;
      var $1008=$D;
      var $1009=$1008 << 5;
      var $1010=$D;
      var $1011=$1010 >>> 27;
      var $1012=$1009 | $1011;
      var $1013=$E;
      var $1014=$T;
      var $1015=$1013 ^ $1014;
      var $1016=$A;
      var $1017=$1015 ^ $1016;
      var $1018=((($1012)+($1017))|0);
      var $1019=$B;
      var $1020=((($1018)+($1019))|0);
      var $1021=$WP;
      var $1022=(($1021+4)|0);
      $WP=$1022;
      var $1023=HEAP32[(($1021)>>2)];
      var $1024=((($1020)+($1023))|0);
      var $1025=((($1024)+(1859775393))|0);
      $C=$1025;
      var $1026=$E;
      var $1027=$1026 << 30;
      var $1028=$E;
      var $1029=$1028 >>> 2;
      var $1030=$1027 | $1029;
      $E=$1030;
      var $1031=$C;
      var $1032=$1031 << 5;
      var $1033=$C;
      var $1034=$1033 >>> 27;
      var $1035=$1032 | $1034;
      var $1036=$D;
      var $1037=$E;
      var $1038=$1036 & $1037;
      var $1039=$T;
      var $1040=$D;
      var $1041=$E;
      var $1042=$1040 | $1041;
      var $1043=$1039 & $1042;
      var $1044=$1038 | $1043;
      var $1045=((($1035)+($1044))|0);
      var $1046=$A;
      var $1047=((($1045)+($1046))|0);
      var $1048=$WP;
      var $1049=(($1048+4)|0);
      $WP=$1049;
      var $1050=HEAP32[(($1048)>>2)];
      var $1051=((($1047)+($1050))|0);
      var $1052=((($1051)-(1894007588))|0);
      $B=$1052;
      var $1053=$D;
      var $1054=$1053 << 30;
      var $1055=$D;
      var $1056=$1055 >>> 2;
      var $1057=$1054 | $1056;
      $D=$1057;
      var $1058=$B;
      var $1059=$1058 << 5;
      var $1060=$B;
      var $1061=$1060 >>> 27;
      var $1062=$1059 | $1061;
      var $1063=$C;
      var $1064=$D;
      var $1065=$1063 & $1064;
      var $1066=$E;
      var $1067=$C;
      var $1068=$D;
      var $1069=$1067 | $1068;
      var $1070=$1066 & $1069;
      var $1071=$1065 | $1070;
      var $1072=((($1062)+($1071))|0);
      var $1073=$T;
      var $1074=((($1072)+($1073))|0);
      var $1075=$WP;
      var $1076=(($1075+4)|0);
      $WP=$1076;
      var $1077=HEAP32[(($1075)>>2)];
      var $1078=((($1074)+($1077))|0);
      var $1079=((($1078)-(1894007588))|0);
      $A=$1079;
      var $1080=$C;
      var $1081=$1080 << 30;
      var $1082=$C;
      var $1083=$1082 >>> 2;
      var $1084=$1081 | $1083;
      $C=$1084;
      var $1085=$A;
      var $1086=$1085 << 5;
      var $1087=$A;
      var $1088=$1087 >>> 27;
      var $1089=$1086 | $1088;
      var $1090=$B;
      var $1091=$C;
      var $1092=$1090 & $1091;
      var $1093=$D;
      var $1094=$B;
      var $1095=$C;
      var $1096=$1094 | $1095;
      var $1097=$1093 & $1096;
      var $1098=$1092 | $1097;
      var $1099=((($1089)+($1098))|0);
      var $1100=$E;
      var $1101=((($1099)+($1100))|0);
      var $1102=$WP;
      var $1103=(($1102+4)|0);
      $WP=$1103;
      var $1104=HEAP32[(($1102)>>2)];
      var $1105=((($1101)+($1104))|0);
      var $1106=((($1105)-(1894007588))|0);
      $T=$1106;
      var $1107=$B;
      var $1108=$1107 << 30;
      var $1109=$B;
      var $1110=$1109 >>> 2;
      var $1111=$1108 | $1110;
      $B=$1111;
      var $1112=$T;
      var $1113=$1112 << 5;
      var $1114=$T;
      var $1115=$1114 >>> 27;
      var $1116=$1113 | $1115;
      var $1117=$A;
      var $1118=$B;
      var $1119=$1117 & $1118;
      var $1120=$C;
      var $1121=$A;
      var $1122=$B;
      var $1123=$1121 | $1122;
      var $1124=$1120 & $1123;
      var $1125=$1119 | $1124;
      var $1126=((($1116)+($1125))|0);
      var $1127=$D;
      var $1128=((($1126)+($1127))|0);
      var $1129=$WP;
      var $1130=(($1129+4)|0);
      $WP=$1130;
      var $1131=HEAP32[(($1129)>>2)];
      var $1132=((($1128)+($1131))|0);
      var $1133=((($1132)-(1894007588))|0);
      $E=$1133;
      var $1134=$A;
      var $1135=$1134 << 30;
      var $1136=$A;
      var $1137=$1136 >>> 2;
      var $1138=$1135 | $1137;
      $A=$1138;
      var $1139=$E;
      var $1140=$1139 << 5;
      var $1141=$E;
      var $1142=$1141 >>> 27;
      var $1143=$1140 | $1142;
      var $1144=$T;
      var $1145=$A;
      var $1146=$1144 & $1145;
      var $1147=$B;
      var $1148=$T;
      var $1149=$A;
      var $1150=$1148 | $1149;
      var $1151=$1147 & $1150;
      var $1152=$1146 | $1151;
      var $1153=((($1143)+($1152))|0);
      var $1154=$C;
      var $1155=((($1153)+($1154))|0);
      var $1156=$WP;
      var $1157=(($1156+4)|0);
      $WP=$1157;
      var $1158=HEAP32[(($1156)>>2)];
      var $1159=((($1155)+($1158))|0);
      var $1160=((($1159)-(1894007588))|0);
      $D=$1160;
      var $1161=$T;
      var $1162=$1161 << 30;
      var $1163=$T;
      var $1164=$1163 >>> 2;
      var $1165=$1162 | $1164;
      $T=$1165;
      var $1166=$D;
      var $1167=$1166 << 5;
      var $1168=$D;
      var $1169=$1168 >>> 27;
      var $1170=$1167 | $1169;
      var $1171=$E;
      var $1172=$T;
      var $1173=$1171 & $1172;
      var $1174=$A;
      var $1175=$E;
      var $1176=$T;
      var $1177=$1175 | $1176;
      var $1178=$1174 & $1177;
      var $1179=$1173 | $1178;
      var $1180=((($1170)+($1179))|0);
      var $1181=$B;
      var $1182=((($1180)+($1181))|0);
      var $1183=$WP;
      var $1184=(($1183+4)|0);
      $WP=$1184;
      var $1185=HEAP32[(($1183)>>2)];
      var $1186=((($1182)+($1185))|0);
      var $1187=((($1186)-(1894007588))|0);
      $C=$1187;
      var $1188=$E;
      var $1189=$1188 << 30;
      var $1190=$E;
      var $1191=$1190 >>> 2;
      var $1192=$1189 | $1191;
      $E=$1192;
      var $1193=$C;
      var $1194=$1193 << 5;
      var $1195=$C;
      var $1196=$1195 >>> 27;
      var $1197=$1194 | $1196;
      var $1198=$D;
      var $1199=$E;
      var $1200=$1198 & $1199;
      var $1201=$T;
      var $1202=$D;
      var $1203=$E;
      var $1204=$1202 | $1203;
      var $1205=$1201 & $1204;
      var $1206=$1200 | $1205;
      var $1207=((($1197)+($1206))|0);
      var $1208=$A;
      var $1209=((($1207)+($1208))|0);
      var $1210=$WP;
      var $1211=(($1210+4)|0);
      $WP=$1211;
      var $1212=HEAP32[(($1210)>>2)];
      var $1213=((($1209)+($1212))|0);
      var $1214=((($1213)-(1894007588))|0);
      $B=$1214;
      var $1215=$D;
      var $1216=$1215 << 30;
      var $1217=$D;
      var $1218=$1217 >>> 2;
      var $1219=$1216 | $1218;
      $D=$1219;
      var $1220=$B;
      var $1221=$1220 << 5;
      var $1222=$B;
      var $1223=$1222 >>> 27;
      var $1224=$1221 | $1223;
      var $1225=$C;
      var $1226=$D;
      var $1227=$1225 & $1226;
      var $1228=$E;
      var $1229=$C;
      var $1230=$D;
      var $1231=$1229 | $1230;
      var $1232=$1228 & $1231;
      var $1233=$1227 | $1232;
      var $1234=((($1224)+($1233))|0);
      var $1235=$T;
      var $1236=((($1234)+($1235))|0);
      var $1237=$WP;
      var $1238=(($1237+4)|0);
      $WP=$1238;
      var $1239=HEAP32[(($1237)>>2)];
      var $1240=((($1236)+($1239))|0);
      var $1241=((($1240)-(1894007588))|0);
      $A=$1241;
      var $1242=$C;
      var $1243=$1242 << 30;
      var $1244=$C;
      var $1245=$1244 >>> 2;
      var $1246=$1243 | $1245;
      $C=$1246;
      var $1247=$A;
      var $1248=$1247 << 5;
      var $1249=$A;
      var $1250=$1249 >>> 27;
      var $1251=$1248 | $1250;
      var $1252=$B;
      var $1253=$C;
      var $1254=$1252 & $1253;
      var $1255=$D;
      var $1256=$B;
      var $1257=$C;
      var $1258=$1256 | $1257;
      var $1259=$1255 & $1258;
      var $1260=$1254 | $1259;
      var $1261=((($1251)+($1260))|0);
      var $1262=$E;
      var $1263=((($1261)+($1262))|0);
      var $1264=$WP;
      var $1265=(($1264+4)|0);
      $WP=$1265;
      var $1266=HEAP32[(($1264)>>2)];
      var $1267=((($1263)+($1266))|0);
      var $1268=((($1267)-(1894007588))|0);
      $T=$1268;
      var $1269=$B;
      var $1270=$1269 << 30;
      var $1271=$B;
      var $1272=$1271 >>> 2;
      var $1273=$1270 | $1272;
      $B=$1273;
      var $1274=$T;
      var $1275=$1274 << 5;
      var $1276=$T;
      var $1277=$1276 >>> 27;
      var $1278=$1275 | $1277;
      var $1279=$A;
      var $1280=$B;
      var $1281=$1279 & $1280;
      var $1282=$C;
      var $1283=$A;
      var $1284=$B;
      var $1285=$1283 | $1284;
      var $1286=$1282 & $1285;
      var $1287=$1281 | $1286;
      var $1288=((($1278)+($1287))|0);
      var $1289=$D;
      var $1290=((($1288)+($1289))|0);
      var $1291=$WP;
      var $1292=(($1291+4)|0);
      $WP=$1292;
      var $1293=HEAP32[(($1291)>>2)];
      var $1294=((($1290)+($1293))|0);
      var $1295=((($1294)-(1894007588))|0);
      $E=$1295;
      var $1296=$A;
      var $1297=$1296 << 30;
      var $1298=$A;
      var $1299=$1298 >>> 2;
      var $1300=$1297 | $1299;
      $A=$1300;
      var $1301=$E;
      var $1302=$1301 << 5;
      var $1303=$E;
      var $1304=$1303 >>> 27;
      var $1305=$1302 | $1304;
      var $1306=$T;
      var $1307=$A;
      var $1308=$1306 & $1307;
      var $1309=$B;
      var $1310=$T;
      var $1311=$A;
      var $1312=$1310 | $1311;
      var $1313=$1309 & $1312;
      var $1314=$1308 | $1313;
      var $1315=((($1305)+($1314))|0);
      var $1316=$C;
      var $1317=((($1315)+($1316))|0);
      var $1318=$WP;
      var $1319=(($1318+4)|0);
      $WP=$1319;
      var $1320=HEAP32[(($1318)>>2)];
      var $1321=((($1317)+($1320))|0);
      var $1322=((($1321)-(1894007588))|0);
      $D=$1322;
      var $1323=$T;
      var $1324=$1323 << 30;
      var $1325=$T;
      var $1326=$1325 >>> 2;
      var $1327=$1324 | $1326;
      $T=$1327;
      var $1328=$D;
      var $1329=$1328 << 5;
      var $1330=$D;
      var $1331=$1330 >>> 27;
      var $1332=$1329 | $1331;
      var $1333=$E;
      var $1334=$T;
      var $1335=$1333 & $1334;
      var $1336=$A;
      var $1337=$E;
      var $1338=$T;
      var $1339=$1337 | $1338;
      var $1340=$1336 & $1339;
      var $1341=$1335 | $1340;
      var $1342=((($1332)+($1341))|0);
      var $1343=$B;
      var $1344=((($1342)+($1343))|0);
      var $1345=$WP;
      var $1346=(($1345+4)|0);
      $WP=$1346;
      var $1347=HEAP32[(($1345)>>2)];
      var $1348=((($1344)+($1347))|0);
      var $1349=((($1348)-(1894007588))|0);
      $C=$1349;
      var $1350=$E;
      var $1351=$1350 << 30;
      var $1352=$E;
      var $1353=$1352 >>> 2;
      var $1354=$1351 | $1353;
      $E=$1354;
      var $1355=$C;
      var $1356=$1355 << 5;
      var $1357=$C;
      var $1358=$1357 >>> 27;
      var $1359=$1356 | $1358;
      var $1360=$D;
      var $1361=$E;
      var $1362=$1360 & $1361;
      var $1363=$T;
      var $1364=$D;
      var $1365=$E;
      var $1366=$1364 | $1365;
      var $1367=$1363 & $1366;
      var $1368=$1362 | $1367;
      var $1369=((($1359)+($1368))|0);
      var $1370=$A;
      var $1371=((($1369)+($1370))|0);
      var $1372=$WP;
      var $1373=(($1372+4)|0);
      $WP=$1373;
      var $1374=HEAP32[(($1372)>>2)];
      var $1375=((($1371)+($1374))|0);
      var $1376=((($1375)-(1894007588))|0);
      $B=$1376;
      var $1377=$D;
      var $1378=$1377 << 30;
      var $1379=$D;
      var $1380=$1379 >>> 2;
      var $1381=$1378 | $1380;
      $D=$1381;
      var $1382=$B;
      var $1383=$1382 << 5;
      var $1384=$B;
      var $1385=$1384 >>> 27;
      var $1386=$1383 | $1385;
      var $1387=$C;
      var $1388=$D;
      var $1389=$1387 & $1388;
      var $1390=$E;
      var $1391=$C;
      var $1392=$D;
      var $1393=$1391 | $1392;
      var $1394=$1390 & $1393;
      var $1395=$1389 | $1394;
      var $1396=((($1386)+($1395))|0);
      var $1397=$T;
      var $1398=((($1396)+($1397))|0);
      var $1399=$WP;
      var $1400=(($1399+4)|0);
      $WP=$1400;
      var $1401=HEAP32[(($1399)>>2)];
      var $1402=((($1398)+($1401))|0);
      var $1403=((($1402)-(1894007588))|0);
      $A=$1403;
      var $1404=$C;
      var $1405=$1404 << 30;
      var $1406=$C;
      var $1407=$1406 >>> 2;
      var $1408=$1405 | $1407;
      $C=$1408;
      var $1409=$A;
      var $1410=$1409 << 5;
      var $1411=$A;
      var $1412=$1411 >>> 27;
      var $1413=$1410 | $1412;
      var $1414=$B;
      var $1415=$C;
      var $1416=$1414 & $1415;
      var $1417=$D;
      var $1418=$B;
      var $1419=$C;
      var $1420=$1418 | $1419;
      var $1421=$1417 & $1420;
      var $1422=$1416 | $1421;
      var $1423=((($1413)+($1422))|0);
      var $1424=$E;
      var $1425=((($1423)+($1424))|0);
      var $1426=$WP;
      var $1427=(($1426+4)|0);
      $WP=$1427;
      var $1428=HEAP32[(($1426)>>2)];
      var $1429=((($1425)+($1428))|0);
      var $1430=((($1429)-(1894007588))|0);
      $T=$1430;
      var $1431=$B;
      var $1432=$1431 << 30;
      var $1433=$B;
      var $1434=$1433 >>> 2;
      var $1435=$1432 | $1434;
      $B=$1435;
      var $1436=$T;
      var $1437=$1436 << 5;
      var $1438=$T;
      var $1439=$1438 >>> 27;
      var $1440=$1437 | $1439;
      var $1441=$A;
      var $1442=$B;
      var $1443=$1441 & $1442;
      var $1444=$C;
      var $1445=$A;
      var $1446=$B;
      var $1447=$1445 | $1446;
      var $1448=$1444 & $1447;
      var $1449=$1443 | $1448;
      var $1450=((($1440)+($1449))|0);
      var $1451=$D;
      var $1452=((($1450)+($1451))|0);
      var $1453=$WP;
      var $1454=(($1453+4)|0);
      $WP=$1454;
      var $1455=HEAP32[(($1453)>>2)];
      var $1456=((($1452)+($1455))|0);
      var $1457=((($1456)-(1894007588))|0);
      $E=$1457;
      var $1458=$A;
      var $1459=$1458 << 30;
      var $1460=$A;
      var $1461=$1460 >>> 2;
      var $1462=$1459 | $1461;
      $A=$1462;
      var $1463=$E;
      var $1464=$1463 << 5;
      var $1465=$E;
      var $1466=$1465 >>> 27;
      var $1467=$1464 | $1466;
      var $1468=$T;
      var $1469=$A;
      var $1470=$1468 & $1469;
      var $1471=$B;
      var $1472=$T;
      var $1473=$A;
      var $1474=$1472 | $1473;
      var $1475=$1471 & $1474;
      var $1476=$1470 | $1475;
      var $1477=((($1467)+($1476))|0);
      var $1478=$C;
      var $1479=((($1477)+($1478))|0);
      var $1480=$WP;
      var $1481=(($1480+4)|0);
      $WP=$1481;
      var $1482=HEAP32[(($1480)>>2)];
      var $1483=((($1479)+($1482))|0);
      var $1484=((($1483)-(1894007588))|0);
      $D=$1484;
      var $1485=$T;
      var $1486=$1485 << 30;
      var $1487=$T;
      var $1488=$1487 >>> 2;
      var $1489=$1486 | $1488;
      $T=$1489;
      var $1490=$D;
      var $1491=$1490 << 5;
      var $1492=$D;
      var $1493=$1492 >>> 27;
      var $1494=$1491 | $1493;
      var $1495=$E;
      var $1496=$T;
      var $1497=$1495 & $1496;
      var $1498=$A;
      var $1499=$E;
      var $1500=$T;
      var $1501=$1499 | $1500;
      var $1502=$1498 & $1501;
      var $1503=$1497 | $1502;
      var $1504=((($1494)+($1503))|0);
      var $1505=$B;
      var $1506=((($1504)+($1505))|0);
      var $1507=$WP;
      var $1508=(($1507+4)|0);
      $WP=$1508;
      var $1509=HEAP32[(($1507)>>2)];
      var $1510=((($1506)+($1509))|0);
      var $1511=((($1510)-(1894007588))|0);
      $C=$1511;
      var $1512=$E;
      var $1513=$1512 << 30;
      var $1514=$E;
      var $1515=$1514 >>> 2;
      var $1516=$1513 | $1515;
      $E=$1516;
      var $1517=$C;
      var $1518=$1517 << 5;
      var $1519=$C;
      var $1520=$1519 >>> 27;
      var $1521=$1518 | $1520;
      var $1522=$D;
      var $1523=$E;
      var $1524=$1522 & $1523;
      var $1525=$T;
      var $1526=$D;
      var $1527=$E;
      var $1528=$1526 | $1527;
      var $1529=$1525 & $1528;
      var $1530=$1524 | $1529;
      var $1531=((($1521)+($1530))|0);
      var $1532=$A;
      var $1533=((($1531)+($1532))|0);
      var $1534=$WP;
      var $1535=(($1534+4)|0);
      $WP=$1535;
      var $1536=HEAP32[(($1534)>>2)];
      var $1537=((($1533)+($1536))|0);
      var $1538=((($1537)-(1894007588))|0);
      $B=$1538;
      var $1539=$D;
      var $1540=$1539 << 30;
      var $1541=$D;
      var $1542=$1541 >>> 2;
      var $1543=$1540 | $1542;
      $D=$1543;
      var $1544=$B;
      var $1545=$1544 << 5;
      var $1546=$B;
      var $1547=$1546 >>> 27;
      var $1548=$1545 | $1547;
      var $1549=$C;
      var $1550=$D;
      var $1551=$1549 & $1550;
      var $1552=$E;
      var $1553=$C;
      var $1554=$D;
      var $1555=$1553 | $1554;
      var $1556=$1552 & $1555;
      var $1557=$1551 | $1556;
      var $1558=((($1548)+($1557))|0);
      var $1559=$T;
      var $1560=((($1558)+($1559))|0);
      var $1561=$WP;
      var $1562=(($1561+4)|0);
      $WP=$1562;
      var $1563=HEAP32[(($1561)>>2)];
      var $1564=((($1560)+($1563))|0);
      var $1565=((($1564)-(1894007588))|0);
      $A=$1565;
      var $1566=$C;
      var $1567=$1566 << 30;
      var $1568=$C;
      var $1569=$1568 >>> 2;
      var $1570=$1567 | $1569;
      $C=$1570;
      var $1571=$A;
      var $1572=$1571 << 5;
      var $1573=$A;
      var $1574=$1573 >>> 27;
      var $1575=$1572 | $1574;
      var $1576=$B;
      var $1577=$C;
      var $1578=$1576 ^ $1577;
      var $1579=$D;
      var $1580=$1578 ^ $1579;
      var $1581=((($1575)+($1580))|0);
      var $1582=$E;
      var $1583=((($1581)+($1582))|0);
      var $1584=$WP;
      var $1585=(($1584+4)|0);
      $WP=$1585;
      var $1586=HEAP32[(($1584)>>2)];
      var $1587=((($1583)+($1586))|0);
      var $1588=((($1587)-(899497514))|0);
      $T=$1588;
      var $1589=$B;
      var $1590=$1589 << 30;
      var $1591=$B;
      var $1592=$1591 >>> 2;
      var $1593=$1590 | $1592;
      $B=$1593;
      var $1594=$T;
      var $1595=$1594 << 5;
      var $1596=$T;
      var $1597=$1596 >>> 27;
      var $1598=$1595 | $1597;
      var $1599=$A;
      var $1600=$B;
      var $1601=$1599 ^ $1600;
      var $1602=$C;
      var $1603=$1601 ^ $1602;
      var $1604=((($1598)+($1603))|0);
      var $1605=$D;
      var $1606=((($1604)+($1605))|0);
      var $1607=$WP;
      var $1608=(($1607+4)|0);
      $WP=$1608;
      var $1609=HEAP32[(($1607)>>2)];
      var $1610=((($1606)+($1609))|0);
      var $1611=((($1610)-(899497514))|0);
      $E=$1611;
      var $1612=$A;
      var $1613=$1612 << 30;
      var $1614=$A;
      var $1615=$1614 >>> 2;
      var $1616=$1613 | $1615;
      $A=$1616;
      var $1617=$E;
      var $1618=$1617 << 5;
      var $1619=$E;
      var $1620=$1619 >>> 27;
      var $1621=$1618 | $1620;
      var $1622=$T;
      var $1623=$A;
      var $1624=$1622 ^ $1623;
      var $1625=$B;
      var $1626=$1624 ^ $1625;
      var $1627=((($1621)+($1626))|0);
      var $1628=$C;
      var $1629=((($1627)+($1628))|0);
      var $1630=$WP;
      var $1631=(($1630+4)|0);
      $WP=$1631;
      var $1632=HEAP32[(($1630)>>2)];
      var $1633=((($1629)+($1632))|0);
      var $1634=((($1633)-(899497514))|0);
      $D=$1634;
      var $1635=$T;
      var $1636=$1635 << 30;
      var $1637=$T;
      var $1638=$1637 >>> 2;
      var $1639=$1636 | $1638;
      $T=$1639;
      var $1640=$D;
      var $1641=$1640 << 5;
      var $1642=$D;
      var $1643=$1642 >>> 27;
      var $1644=$1641 | $1643;
      var $1645=$E;
      var $1646=$T;
      var $1647=$1645 ^ $1646;
      var $1648=$A;
      var $1649=$1647 ^ $1648;
      var $1650=((($1644)+($1649))|0);
      var $1651=$B;
      var $1652=((($1650)+($1651))|0);
      var $1653=$WP;
      var $1654=(($1653+4)|0);
      $WP=$1654;
      var $1655=HEAP32[(($1653)>>2)];
      var $1656=((($1652)+($1655))|0);
      var $1657=((($1656)-(899497514))|0);
      $C=$1657;
      var $1658=$E;
      var $1659=$1658 << 30;
      var $1660=$E;
      var $1661=$1660 >>> 2;
      var $1662=$1659 | $1661;
      $E=$1662;
      var $1663=$C;
      var $1664=$1663 << 5;
      var $1665=$C;
      var $1666=$1665 >>> 27;
      var $1667=$1664 | $1666;
      var $1668=$D;
      var $1669=$E;
      var $1670=$1668 ^ $1669;
      var $1671=$T;
      var $1672=$1670 ^ $1671;
      var $1673=((($1667)+($1672))|0);
      var $1674=$A;
      var $1675=((($1673)+($1674))|0);
      var $1676=$WP;
      var $1677=(($1676+4)|0);
      $WP=$1677;
      var $1678=HEAP32[(($1676)>>2)];
      var $1679=((($1675)+($1678))|0);
      var $1680=((($1679)-(899497514))|0);
      $B=$1680;
      var $1681=$D;
      var $1682=$1681 << 30;
      var $1683=$D;
      var $1684=$1683 >>> 2;
      var $1685=$1682 | $1684;
      $D=$1685;
      var $1686=$B;
      var $1687=$1686 << 5;
      var $1688=$B;
      var $1689=$1688 >>> 27;
      var $1690=$1687 | $1689;
      var $1691=$C;
      var $1692=$D;
      var $1693=$1691 ^ $1692;
      var $1694=$E;
      var $1695=$1693 ^ $1694;
      var $1696=((($1690)+($1695))|0);
      var $1697=$T;
      var $1698=((($1696)+($1697))|0);
      var $1699=$WP;
      var $1700=(($1699+4)|0);
      $WP=$1700;
      var $1701=HEAP32[(($1699)>>2)];
      var $1702=((($1698)+($1701))|0);
      var $1703=((($1702)-(899497514))|0);
      $A=$1703;
      var $1704=$C;
      var $1705=$1704 << 30;
      var $1706=$C;
      var $1707=$1706 >>> 2;
      var $1708=$1705 | $1707;
      $C=$1708;
      var $1709=$A;
      var $1710=$1709 << 5;
      var $1711=$A;
      var $1712=$1711 >>> 27;
      var $1713=$1710 | $1712;
      var $1714=$B;
      var $1715=$C;
      var $1716=$1714 ^ $1715;
      var $1717=$D;
      var $1718=$1716 ^ $1717;
      var $1719=((($1713)+($1718))|0);
      var $1720=$E;
      var $1721=((($1719)+($1720))|0);
      var $1722=$WP;
      var $1723=(($1722+4)|0);
      $WP=$1723;
      var $1724=HEAP32[(($1722)>>2)];
      var $1725=((($1721)+($1724))|0);
      var $1726=((($1725)-(899497514))|0);
      $T=$1726;
      var $1727=$B;
      var $1728=$1727 << 30;
      var $1729=$B;
      var $1730=$1729 >>> 2;
      var $1731=$1728 | $1730;
      $B=$1731;
      var $1732=$T;
      var $1733=$1732 << 5;
      var $1734=$T;
      var $1735=$1734 >>> 27;
      var $1736=$1733 | $1735;
      var $1737=$A;
      var $1738=$B;
      var $1739=$1737 ^ $1738;
      var $1740=$C;
      var $1741=$1739 ^ $1740;
      var $1742=((($1736)+($1741))|0);
      var $1743=$D;
      var $1744=((($1742)+($1743))|0);
      var $1745=$WP;
      var $1746=(($1745+4)|0);
      $WP=$1746;
      var $1747=HEAP32[(($1745)>>2)];
      var $1748=((($1744)+($1747))|0);
      var $1749=((($1748)-(899497514))|0);
      $E=$1749;
      var $1750=$A;
      var $1751=$1750 << 30;
      var $1752=$A;
      var $1753=$1752 >>> 2;
      var $1754=$1751 | $1753;
      $A=$1754;
      var $1755=$E;
      var $1756=$1755 << 5;
      var $1757=$E;
      var $1758=$1757 >>> 27;
      var $1759=$1756 | $1758;
      var $1760=$T;
      var $1761=$A;
      var $1762=$1760 ^ $1761;
      var $1763=$B;
      var $1764=$1762 ^ $1763;
      var $1765=((($1759)+($1764))|0);
      var $1766=$C;
      var $1767=((($1765)+($1766))|0);
      var $1768=$WP;
      var $1769=(($1768+4)|0);
      $WP=$1769;
      var $1770=HEAP32[(($1768)>>2)];
      var $1771=((($1767)+($1770))|0);
      var $1772=((($1771)-(899497514))|0);
      $D=$1772;
      var $1773=$T;
      var $1774=$1773 << 30;
      var $1775=$T;
      var $1776=$1775 >>> 2;
      var $1777=$1774 | $1776;
      $T=$1777;
      var $1778=$D;
      var $1779=$1778 << 5;
      var $1780=$D;
      var $1781=$1780 >>> 27;
      var $1782=$1779 | $1781;
      var $1783=$E;
      var $1784=$T;
      var $1785=$1783 ^ $1784;
      var $1786=$A;
      var $1787=$1785 ^ $1786;
      var $1788=((($1782)+($1787))|0);
      var $1789=$B;
      var $1790=((($1788)+($1789))|0);
      var $1791=$WP;
      var $1792=(($1791+4)|0);
      $WP=$1792;
      var $1793=HEAP32[(($1791)>>2)];
      var $1794=((($1790)+($1793))|0);
      var $1795=((($1794)-(899497514))|0);
      $C=$1795;
      var $1796=$E;
      var $1797=$1796 << 30;
      var $1798=$E;
      var $1799=$1798 >>> 2;
      var $1800=$1797 | $1799;
      $E=$1800;
      var $1801=$C;
      var $1802=$1801 << 5;
      var $1803=$C;
      var $1804=$1803 >>> 27;
      var $1805=$1802 | $1804;
      var $1806=$D;
      var $1807=$E;
      var $1808=$1806 ^ $1807;
      var $1809=$T;
      var $1810=$1808 ^ $1809;
      var $1811=((($1805)+($1810))|0);
      var $1812=$A;
      var $1813=((($1811)+($1812))|0);
      var $1814=$WP;
      var $1815=(($1814+4)|0);
      $WP=$1815;
      var $1816=HEAP32[(($1814)>>2)];
      var $1817=((($1813)+($1816))|0);
      var $1818=((($1817)-(899497514))|0);
      $B=$1818;
      var $1819=$D;
      var $1820=$1819 << 30;
      var $1821=$D;
      var $1822=$1821 >>> 2;
      var $1823=$1820 | $1822;
      $D=$1823;
      var $1824=$B;
      var $1825=$1824 << 5;
      var $1826=$B;
      var $1827=$1826 >>> 27;
      var $1828=$1825 | $1827;
      var $1829=$C;
      var $1830=$D;
      var $1831=$1829 ^ $1830;
      var $1832=$E;
      var $1833=$1831 ^ $1832;
      var $1834=((($1828)+($1833))|0);
      var $1835=$T;
      var $1836=((($1834)+($1835))|0);
      var $1837=$WP;
      var $1838=(($1837+4)|0);
      $WP=$1838;
      var $1839=HEAP32[(($1837)>>2)];
      var $1840=((($1836)+($1839))|0);
      var $1841=((($1840)-(899497514))|0);
      $A=$1841;
      var $1842=$C;
      var $1843=$1842 << 30;
      var $1844=$C;
      var $1845=$1844 >>> 2;
      var $1846=$1843 | $1845;
      $C=$1846;
      var $1847=$A;
      var $1848=$1847 << 5;
      var $1849=$A;
      var $1850=$1849 >>> 27;
      var $1851=$1848 | $1850;
      var $1852=$B;
      var $1853=$C;
      var $1854=$1852 ^ $1853;
      var $1855=$D;
      var $1856=$1854 ^ $1855;
      var $1857=((($1851)+($1856))|0);
      var $1858=$E;
      var $1859=((($1857)+($1858))|0);
      var $1860=$WP;
      var $1861=(($1860+4)|0);
      $WP=$1861;
      var $1862=HEAP32[(($1860)>>2)];
      var $1863=((($1859)+($1862))|0);
      var $1864=((($1863)-(899497514))|0);
      $T=$1864;
      var $1865=$B;
      var $1866=$1865 << 30;
      var $1867=$B;
      var $1868=$1867 >>> 2;
      var $1869=$1866 | $1868;
      $B=$1869;
      var $1870=$T;
      var $1871=$1870 << 5;
      var $1872=$T;
      var $1873=$1872 >>> 27;
      var $1874=$1871 | $1873;
      var $1875=$A;
      var $1876=$B;
      var $1877=$1875 ^ $1876;
      var $1878=$C;
      var $1879=$1877 ^ $1878;
      var $1880=((($1874)+($1879))|0);
      var $1881=$D;
      var $1882=((($1880)+($1881))|0);
      var $1883=$WP;
      var $1884=(($1883+4)|0);
      $WP=$1884;
      var $1885=HEAP32[(($1883)>>2)];
      var $1886=((($1882)+($1885))|0);
      var $1887=((($1886)-(899497514))|0);
      $E=$1887;
      var $1888=$A;
      var $1889=$1888 << 30;
      var $1890=$A;
      var $1891=$1890 >>> 2;
      var $1892=$1889 | $1891;
      $A=$1892;
      var $1893=$E;
      var $1894=$1893 << 5;
      var $1895=$E;
      var $1896=$1895 >>> 27;
      var $1897=$1894 | $1896;
      var $1898=$T;
      var $1899=$A;
      var $1900=$1898 ^ $1899;
      var $1901=$B;
      var $1902=$1900 ^ $1901;
      var $1903=((($1897)+($1902))|0);
      var $1904=$C;
      var $1905=((($1903)+($1904))|0);
      var $1906=$WP;
      var $1907=(($1906+4)|0);
      $WP=$1907;
      var $1908=HEAP32[(($1906)>>2)];
      var $1909=((($1905)+($1908))|0);
      var $1910=((($1909)-(899497514))|0);
      $D=$1910;
      var $1911=$T;
      var $1912=$1911 << 30;
      var $1913=$T;
      var $1914=$1913 >>> 2;
      var $1915=$1912 | $1914;
      $T=$1915;
      var $1916=$D;
      var $1917=$1916 << 5;
      var $1918=$D;
      var $1919=$1918 >>> 27;
      var $1920=$1917 | $1919;
      var $1921=$E;
      var $1922=$T;
      var $1923=$1921 ^ $1922;
      var $1924=$A;
      var $1925=$1923 ^ $1924;
      var $1926=((($1920)+($1925))|0);
      var $1927=$B;
      var $1928=((($1926)+($1927))|0);
      var $1929=$WP;
      var $1930=(($1929+4)|0);
      $WP=$1930;
      var $1931=HEAP32[(($1929)>>2)];
      var $1932=((($1928)+($1931))|0);
      var $1933=((($1932)-(899497514))|0);
      $C=$1933;
      var $1934=$E;
      var $1935=$1934 << 30;
      var $1936=$E;
      var $1937=$1936 >>> 2;
      var $1938=$1935 | $1937;
      $E=$1938;
      var $1939=$C;
      var $1940=$1939 << 5;
      var $1941=$C;
      var $1942=$1941 >>> 27;
      var $1943=$1940 | $1942;
      var $1944=$D;
      var $1945=$E;
      var $1946=$1944 ^ $1945;
      var $1947=$T;
      var $1948=$1946 ^ $1947;
      var $1949=((($1943)+($1948))|0);
      var $1950=$A;
      var $1951=((($1949)+($1950))|0);
      var $1952=$WP;
      var $1953=(($1952+4)|0);
      $WP=$1953;
      var $1954=HEAP32[(($1952)>>2)];
      var $1955=((($1951)+($1954))|0);
      var $1956=((($1955)-(899497514))|0);
      $B=$1956;
      var $1957=$D;
      var $1958=$1957 << 30;
      var $1959=$D;
      var $1960=$1959 >>> 2;
      var $1961=$1958 | $1960;
      $D=$1961;
      var $1962=$B;
      var $1963=$1962 << 5;
      var $1964=$B;
      var $1965=$1964 >>> 27;
      var $1966=$1963 | $1965;
      var $1967=$C;
      var $1968=$D;
      var $1969=$1967 ^ $1968;
      var $1970=$E;
      var $1971=$1969 ^ $1970;
      var $1972=((($1966)+($1971))|0);
      var $1973=$T;
      var $1974=((($1972)+($1973))|0);
      var $1975=$WP;
      var $1976=(($1975+4)|0);
      $WP=$1976;
      var $1977=HEAP32[(($1975)>>2)];
      var $1978=((($1974)+($1977))|0);
      var $1979=((($1978)-(899497514))|0);
      $A=$1979;
      var $1980=$C;
      var $1981=$1980 << 30;
      var $1982=$C;
      var $1983=$1982 >>> 2;
      var $1984=$1981 | $1983;
      $C=$1984;
      var $1985=$A;
      var $1986=$1985 << 5;
      var $1987=$A;
      var $1988=$1987 >>> 27;
      var $1989=$1986 | $1988;
      var $1990=$B;
      var $1991=$C;
      var $1992=$1990 ^ $1991;
      var $1993=$D;
      var $1994=$1992 ^ $1993;
      var $1995=((($1989)+($1994))|0);
      var $1996=$E;
      var $1997=((($1995)+($1996))|0);
      var $1998=$WP;
      var $1999=(($1998+4)|0);
      $WP=$1999;
      var $2000=HEAP32[(($1998)>>2)];
      var $2001=((($1997)+($2000))|0);
      var $2002=((($2001)-(899497514))|0);
      $T=$2002;
      var $2003=$B;
      var $2004=$2003 << 30;
      var $2005=$B;
      var $2006=$2005 >>> 2;
      var $2007=$2004 | $2006;
      $B=$2007;
      var $2008=$T;
      var $2009=$2008 << 5;
      var $2010=$T;
      var $2011=$2010 >>> 27;
      var $2012=$2009 | $2011;
      var $2013=$A;
      var $2014=$B;
      var $2015=$2013 ^ $2014;
      var $2016=$C;
      var $2017=$2015 ^ $2016;
      var $2018=((($2012)+($2017))|0);
      var $2019=$D;
      var $2020=((($2018)+($2019))|0);
      var $2021=$WP;
      var $2022=(($2021+4)|0);
      $WP=$2022;
      var $2023=HEAP32[(($2021)>>2)];
      var $2024=((($2020)+($2023))|0);
      var $2025=((($2024)-(899497514))|0);
      $E=$2025;
      var $2026=$A;
      var $2027=$2026 << 30;
      var $2028=$A;
      var $2029=$2028 >>> 2;
      var $2030=$2027 | $2029;
      $A=$2030;
      var $2031=$E;
      var $2032=$1;
      var $2033=(($2032+8)|0);
      var $2034=(($2033)|0);
      var $2035=HEAP32[(($2034)>>2)];
      var $2036=((($2035)+($2031))|0);
      HEAP32[(($2034)>>2)]=$2036;
      var $2037=$T;
      var $2038=$1;
      var $2039=(($2038+8)|0);
      var $2040=(($2039+4)|0);
      var $2041=HEAP32[(($2040)>>2)];
      var $2042=((($2041)+($2037))|0);
      HEAP32[(($2040)>>2)]=$2042;
      var $2043=$A;
      var $2044=$1;
      var $2045=(($2044+8)|0);
      var $2046=(($2045+8)|0);
      var $2047=HEAP32[(($2046)>>2)];
      var $2048=((($2047)+($2043))|0);
      HEAP32[(($2046)>>2)]=$2048;
      var $2049=$B;
      var $2050=$1;
      var $2051=(($2050+8)|0);
      var $2052=(($2051+12)|0);
      var $2053=HEAP32[(($2052)>>2)];
      var $2054=((($2053)+($2049))|0);
      HEAP32[(($2052)>>2)]=$2054;
      var $2055=$C;
      var $2056=$1;
      var $2057=(($2056+8)|0);
      var $2058=(($2057+16)|0);
      var $2059=HEAP32[(($2058)>>2)];
      var $2060=((($2059)+($2055))|0);
      HEAP32[(($2058)>>2)]=$2060;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _longReverse($buffer, $byteCount, $Endianness) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $value;
      $1=$buffer;
      $2=$byteCount;
      $3=$Endianness;
      var $4=$3;
      var $5=(($4)|(0))==0;
      if ($5) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 6; break;
    case 3: 
      var $8=$2;
      var $9=Math.floor(((($8)>>>(0)))/(4));
      $2=$9;
      label = 4; break;
    case 4: 
      var $11=$2;
      var $12=((($11)-(1))|0);
      $2=$12;
      var $13=(($11)|(0))!=0;
      if ($13) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $15=$1;
      var $16=HEAP32[(($15)>>2)];
      $value=$16;
      var $17=$value;
      var $18=$17 & -16711936;
      var $19=$18 >>> 8;
      var $20=$value;
      var $21=$20 & 16711935;
      var $22=$21 << 8;
      var $23=$19 | $22;
      $value=$23;
      var $24=$value;
      var $25=$24 << 16;
      var $26=$value;
      var $27=$26 >>> 16;
      var $28=$25 | $27;
      var $29=$1;
      var $30=(($29+4)|0);
      $1=$30;
      HEAP32[(($29)>>2)]=$28;
      label = 4; break;
    case 6: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _SHA_dealloc($ptr) {
  var label = 0;
  var $1;
  $1=$ptr;
  var $2=$1;
  var $3=$2;
  _PyObject_Free($3);
  return;
}
function _SHA_get_digest_size($self, $closure) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$closure;
  var $3=_PyInt_FromLong(20);
  return $3;
}
function _SHA_get_block_size($self, $closure) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$closure;
  var $3=_PyInt_FromLong(64);
  return $3;
}
function _SHA_get_name($self, $closure) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$closure;
  var $3=_PyString_FromStringAndSize(((__str10)|0), 4);
  return $3;
}
function _SHA_copy($self, $unused) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $newobj;
      $2=$self;
      $3=$unused;
      var $4=_newSHAobject();
      $newobj=$4;
      var $5=(($4)|(0))==0;
      if ($5) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 4; break;
    case 3: 
      var $8=$2;
      var $9=$newobj;
      _SHAcopy($8, $9);
      var $10=$newobj;
      var $11=$10;
      $1=$11;
      label = 4; break;
    case 4: 
      var $13=$1;
      return $13;
    default: assert(0, "bad label: " + label);
  }
}
function _SHA_digest($self, $unused) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 128)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $digest=__stackBase__;
  var $temp=(__stackBase__)+(20);
  $1=$self;
  $2=$unused;
  var $3=$1;
  _SHAcopy($3, $temp);
  var $4=(($digest)|0);
  _sha_final($4, $temp);
  var $5=(($digest)|0);
  var $6=_PyString_FromStringAndSize($5, 20);
  STACKTOP = __stackBase__;
  return $6;
}
function _SHA_hexdigest($self, $unused) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 128)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $digest=__stackBase__;
      var $temp=(__stackBase__)+(20);
      var $retval;
      var $hex_digest;
      var $i;
      var $j;
      var $c;
      $2=$self;
      $3=$unused;
      var $4=$2;
      _SHAcopy($4, $temp);
      var $5=(($digest)|0);
      _sha_final($5, $temp);
      var $6=_PyString_FromStringAndSize(0, 40);
      $retval=$6;
      var $7=$retval;
      var $8=(($7)|(0))!=0;
      if ($8) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 21; break;
    case 3: 
      var $11=$retval;
      var $12=_PyString_AsString($11);
      $hex_digest=$12;
      var $13=$hex_digest;
      var $14=(($13)|(0))!=0;
      if ($14) { label = 10; break; } else { label = 4; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $17=$retval;
      var $18=(($17)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=((($19)-(1))|0);
      HEAP32[(($18)>>2)]=$20;
      var $21=(($20)|(0))!=0;
      if ($21) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 8; break;
    case 7: 
      var $24=$retval;
      var $25=(($24+4)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26+24)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=$retval;
      FUNCTION_TABLE[$28]($29);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      $1=0;
      label = 21; break;
    case 10: 
      $j=0;
      $i=0;
      label = 11; break;
    case 11: 
      var $34=$i;
      var $35=(($34)>>>(0)) < 20;
      if ($35) { label = 12; break; } else { label = 20; break; }
    case 12: 
      var $37=$i;
      var $38=(($digest+$37)|0);
      var $39=HEAP8[($38)];
      var $40=(($39)&(255));
      var $41=$40 >> 4;
      var $42=$41 & 15;
      var $43=(($42) & 255);
      $c=$43;
      var $44=$c;
      var $45=(($44 << 24) >> 24);
      var $46=(($45)|(0)) > 9;
      if ($46) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $48=$c;
      var $49=(($48 << 24) >> 24);
      var $50=((($49)+(97))|0);
      var $51=((($50)-(10))|0);
      var $57 = $51;label = 15; break;
    case 14: 
      var $53=$c;
      var $54=(($53 << 24) >> 24);
      var $55=((($54)+(48))|0);
      var $57 = $55;label = 15; break;
    case 15: 
      var $57;
      var $58=(($57) & 255);
      $c=$58;
      var $59=$c;
      var $60=$j;
      var $61=((($60)+(1))|0);
      $j=$61;
      var $62=$hex_digest;
      var $63=(($62+$60)|0);
      HEAP8[($63)]=$59;
      var $64=$i;
      var $65=(($digest+$64)|0);
      var $66=HEAP8[($65)];
      var $67=(($66)&(255));
      var $68=$67 & 15;
      var $69=(($68) & 255);
      $c=$69;
      var $70=$c;
      var $71=(($70 << 24) >> 24);
      var $72=(($71)|(0)) > 9;
      if ($72) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $74=$c;
      var $75=(($74 << 24) >> 24);
      var $76=((($75)+(97))|0);
      var $77=((($76)-(10))|0);
      var $83 = $77;label = 18; break;
    case 17: 
      var $79=$c;
      var $80=(($79 << 24) >> 24);
      var $81=((($80)+(48))|0);
      var $83 = $81;label = 18; break;
    case 18: 
      var $83;
      var $84=(($83) & 255);
      $c=$84;
      var $85=$c;
      var $86=$j;
      var $87=((($86)+(1))|0);
      $j=$87;
      var $88=$hex_digest;
      var $89=(($88+$86)|0);
      HEAP8[($89)]=$85;
      label = 19; break;
    case 19: 
      var $91=$i;
      var $92=((($91)+(1))|0);
      $i=$92;
      label = 11; break;
    case 20: 
      var $94=$retval;
      $1=$94;
      label = 21; break;
    case 21: 
      var $96=$1;
      STACKTOP = __stackBase__;
      return $96;
    default: assert(0, "bad label: " + label);
  }
}
function _SHA_update($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 52)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $view=__stackBase__;
      var $n;
      var $buf;
      var $nbytes;
      $2=$self;
      $3=$args;
      var $4=$3;
      var $5=_PyArg_ParseTuple($4, ((__str15)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$view,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 10; break;
    case 3: 
      var $9=(($view+8)|0);
      var $10=HEAP32[(($9)>>2)];
      $n=$10;
      var $11=(($view)|0);
      var $12=HEAP32[(($11)>>2)];
      $buf=$12;
      label = 4; break;
    case 4: 
      var $14=$n;
      var $15=(($14)|(0)) > 0;
      if ($15) { label = 5; break; } else { label = 9; break; }
    case 5: 
      var $17=$n;
      var $18=(($17)|(0)) > 2147483647;
      if ($18) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $nbytes=2147483647;
      label = 8; break;
    case 7: 
      var $21=$n;
      $nbytes=$21;
      label = 8; break;
    case 8: 
      var $23=$2;
      var $24=$buf;
      var $25=$nbytes;
      _sha_update($23, $24, $25);
      var $26=$nbytes;
      var $27=$buf;
      var $28=(($27+$26)|0);
      $buf=$28;
      var $29=$nbytes;
      var $30=$n;
      var $31=((($30)-($29))|0);
      $n=$31;
      label = 4; break;
    case 9: 
      _PyBuffer_Release($view);
      var $33=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $34=((($33)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$34;
      $1=__Py_NoneStruct;
      label = 10; break;
    case 10: 
      var $36=$1;
      STACKTOP = __stackBase__;
      return $36;
    default: assert(0, "bad label: " + label);
  }
}
function _SHAcopy($src, $dest) {
  var label = 0;
  var $1;
  var $2;
  $1=$src;
  $2=$dest;
  var $3=$1;
  var $4=(($3+100)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=$2;
  var $7=(($6+100)|0);
  HEAP32[(($7)>>2)]=$5;
  var $8=$1;
  var $9=(($8+104)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=$2;
  var $12=(($11+104)|0);
  HEAP32[(($12)>>2)]=$10;
  var $13=$1;
  var $14=(($13+28)|0);
  var $15=HEAP32[(($14)>>2)];
  var $16=$2;
  var $17=(($16+28)|0);
  HEAP32[(($17)>>2)]=$15;
  var $18=$1;
  var $19=(($18+32)|0);
  var $20=HEAP32[(($19)>>2)];
  var $21=$2;
  var $22=(($21+32)|0);
  HEAP32[(($22)>>2)]=$20;
  var $23=$2;
  var $24=(($23+8)|0);
  var $25=$24;
  var $26=$1;
  var $27=(($26+8)|0);
  var $28=$27;
  assert(20 % 1 === 0);HEAP32[(($25)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($25)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];HEAP32[((($25)+(8))>>2)]=HEAP32[((($28)+(8))>>2)];HEAP32[((($25)+(12))>>2)]=HEAP32[((($28)+(12))>>2)];HEAP32[((($25)+(16))>>2)]=HEAP32[((($28)+(16))>>2)];
  var $29=$2;
  var $30=(($29+36)|0);
  var $31=$30;
  var $32=$1;
  var $33=(($32+36)|0);
  var $34=$33;
  assert(64 % 1 === 0);_memcpy($31, $34, 64);
  return;
}
function _sha_final($digest, $sha_info) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $count;
      var $lo_bit_count;
      var $hi_bit_count;
      $1=$digest;
      $2=$sha_info;
      var $3=$2;
      var $4=(($3+28)|0);
      var $5=HEAP32[(($4)>>2)];
      $lo_bit_count=$5;
      var $6=$2;
      var $7=(($6+32)|0);
      var $8=HEAP32[(($7)>>2)];
      $hi_bit_count=$8;
      var $9=$lo_bit_count;
      var $10=$9 >>> 3;
      var $11=$10 & 63;
      $count=$11;
      var $12=$count;
      var $13=((($12)+(1))|0);
      $count=$13;
      var $14=$2;
      var $15=(($14+36)|0);
      var $16=(($15)|0);
      var $17=(($16+$12)|0);
      HEAP8[($17)]=-128;
      var $18=$count;
      var $19=(($18)|(0)) > 56;
      if ($19) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $21=$2;
      var $22=(($21+36)|0);
      var $23=(($22)|0);
      var $24=$count;
      var $25=(($23+$24)|0);
      var $26=$count;
      var $27=(((64)-($26))|0);
      _memset($25, 0, $27);
      var $28=$2;
      _sha_transform($28);
      var $29=$2;
      var $30=(($29+36)|0);
      var $31=(($30)|0);
      _memset($31, 0, 56);
      label = 4; break;
    case 3: 
      var $33=$2;
      var $34=(($33+36)|0);
      var $35=(($34)|0);
      var $36=$count;
      var $37=(($35+$36)|0);
      var $38=$count;
      var $39=(((56)-($38))|0);
      _memset($37, 0, $39);
      label = 4; break;
    case 4: 
      var $41=$hi_bit_count;
      var $42=$41 >>> 24;
      var $43=$42 & 255;
      var $44=(($43) & 255);
      var $45=$2;
      var $46=(($45+36)|0);
      var $47=(($46+56)|0);
      HEAP8[($47)]=$44;
      var $48=$hi_bit_count;
      var $49=$48 >>> 16;
      var $50=$49 & 255;
      var $51=(($50) & 255);
      var $52=$2;
      var $53=(($52+36)|0);
      var $54=(($53+57)|0);
      HEAP8[($54)]=$51;
      var $55=$hi_bit_count;
      var $56=$55 >>> 8;
      var $57=$56 & 255;
      var $58=(($57) & 255);
      var $59=$2;
      var $60=(($59+36)|0);
      var $61=(($60+58)|0);
      HEAP8[($61)]=$58;
      var $62=$hi_bit_count;
      var $63=$62 >>> 0;
      var $64=$63 & 255;
      var $65=(($64) & 255);
      var $66=$2;
      var $67=(($66+36)|0);
      var $68=(($67+59)|0);
      HEAP8[($68)]=$65;
      var $69=$lo_bit_count;
      var $70=$69 >>> 24;
      var $71=$70 & 255;
      var $72=(($71) & 255);
      var $73=$2;
      var $74=(($73+36)|0);
      var $75=(($74+60)|0);
      HEAP8[($75)]=$72;
      var $76=$lo_bit_count;
      var $77=$76 >>> 16;
      var $78=$77 & 255;
      var $79=(($78) & 255);
      var $80=$2;
      var $81=(($80+36)|0);
      var $82=(($81+61)|0);
      HEAP8[($82)]=$79;
      var $83=$lo_bit_count;
      var $84=$83 >>> 8;
      var $85=$84 & 255;
      var $86=(($85) & 255);
      var $87=$2;
      var $88=(($87+36)|0);
      var $89=(($88+62)|0);
      HEAP8[($89)]=$86;
      var $90=$lo_bit_count;
      var $91=$90 >>> 0;
      var $92=$91 & 255;
      var $93=(($92) & 255);
      var $94=$2;
      var $95=(($94+36)|0);
      var $96=(($95+63)|0);
      HEAP8[($96)]=$93;
      var $97=$2;
      _sha_transform($97);
      var $98=$2;
      var $99=(($98+8)|0);
      var $100=(($99)|0);
      var $101=HEAP32[(($100)>>2)];
      var $102=$101 >>> 24;
      var $103=$102 & 255;
      var $104=(($103) & 255);
      var $105=$1;
      var $106=(($105)|0);
      HEAP8[($106)]=$104;
      var $107=$2;
      var $108=(($107+8)|0);
      var $109=(($108)|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=$110 >>> 16;
      var $112=$111 & 255;
      var $113=(($112) & 255);
      var $114=$1;
      var $115=(($114+1)|0);
      HEAP8[($115)]=$113;
      var $116=$2;
      var $117=(($116+8)|0);
      var $118=(($117)|0);
      var $119=HEAP32[(($118)>>2)];
      var $120=$119 >>> 8;
      var $121=$120 & 255;
      var $122=(($121) & 255);
      var $123=$1;
      var $124=(($123+2)|0);
      HEAP8[($124)]=$122;
      var $125=$2;
      var $126=(($125+8)|0);
      var $127=(($126)|0);
      var $128=HEAP32[(($127)>>2)];
      var $129=$128 & 255;
      var $130=(($129) & 255);
      var $131=$1;
      var $132=(($131+3)|0);
      HEAP8[($132)]=$130;
      var $133=$2;
      var $134=(($133+8)|0);
      var $135=(($134+4)|0);
      var $136=HEAP32[(($135)>>2)];
      var $137=$136 >>> 24;
      var $138=$137 & 255;
      var $139=(($138) & 255);
      var $140=$1;
      var $141=(($140+4)|0);
      HEAP8[($141)]=$139;
      var $142=$2;
      var $143=(($142+8)|0);
      var $144=(($143+4)|0);
      var $145=HEAP32[(($144)>>2)];
      var $146=$145 >>> 16;
      var $147=$146 & 255;
      var $148=(($147) & 255);
      var $149=$1;
      var $150=(($149+5)|0);
      HEAP8[($150)]=$148;
      var $151=$2;
      var $152=(($151+8)|0);
      var $153=(($152+4)|0);
      var $154=HEAP32[(($153)>>2)];
      var $155=$154 >>> 8;
      var $156=$155 & 255;
      var $157=(($156) & 255);
      var $158=$1;
      var $159=(($158+6)|0);
      HEAP8[($159)]=$157;
      var $160=$2;
      var $161=(($160+8)|0);
      var $162=(($161+4)|0);
      var $163=HEAP32[(($162)>>2)];
      var $164=$163 & 255;
      var $165=(($164) & 255);
      var $166=$1;
      var $167=(($166+7)|0);
      HEAP8[($167)]=$165;
      var $168=$2;
      var $169=(($168+8)|0);
      var $170=(($169+8)|0);
      var $171=HEAP32[(($170)>>2)];
      var $172=$171 >>> 24;
      var $173=$172 & 255;
      var $174=(($173) & 255);
      var $175=$1;
      var $176=(($175+8)|0);
      HEAP8[($176)]=$174;
      var $177=$2;
      var $178=(($177+8)|0);
      var $179=(($178+8)|0);
      var $180=HEAP32[(($179)>>2)];
      var $181=$180 >>> 16;
      var $182=$181 & 255;
      var $183=(($182) & 255);
      var $184=$1;
      var $185=(($184+9)|0);
      HEAP8[($185)]=$183;
      var $186=$2;
      var $187=(($186+8)|0);
      var $188=(($187+8)|0);
      var $189=HEAP32[(($188)>>2)];
      var $190=$189 >>> 8;
      var $191=$190 & 255;
      var $192=(($191) & 255);
      var $193=$1;
      var $194=(($193+10)|0);
      HEAP8[($194)]=$192;
      var $195=$2;
      var $196=(($195+8)|0);
      var $197=(($196+8)|0);
      var $198=HEAP32[(($197)>>2)];
      var $199=$198 & 255;
      var $200=(($199) & 255);
      var $201=$1;
      var $202=(($201+11)|0);
      HEAP8[($202)]=$200;
      var $203=$2;
      var $204=(($203+8)|0);
      var $205=(($204+12)|0);
      var $206=HEAP32[(($205)>>2)];
      var $207=$206 >>> 24;
      var $208=$207 & 255;
      var $209=(($208) & 255);
      var $210=$1;
      var $211=(($210+12)|0);
      HEAP8[($211)]=$209;
      var $212=$2;
      var $213=(($212+8)|0);
      var $214=(($213+12)|0);
      var $215=HEAP32[(($214)>>2)];
      var $216=$215 >>> 16;
      var $217=$216 & 255;
      var $218=(($217) & 255);
      var $219=$1;
      var $220=(($219+13)|0);
      HEAP8[($220)]=$218;
      var $221=$2;
      var $222=(($221+8)|0);
      var $223=(($222+12)|0);
      var $224=HEAP32[(($223)>>2)];
      var $225=$224 >>> 8;
      var $226=$225 & 255;
      var $227=(($226) & 255);
      var $228=$1;
      var $229=(($228+14)|0);
      HEAP8[($229)]=$227;
      var $230=$2;
      var $231=(($230+8)|0);
      var $232=(($231+12)|0);
      var $233=HEAP32[(($232)>>2)];
      var $234=$233 & 255;
      var $235=(($234) & 255);
      var $236=$1;
      var $237=(($236+15)|0);
      HEAP8[($237)]=$235;
      var $238=$2;
      var $239=(($238+8)|0);
      var $240=(($239+16)|0);
      var $241=HEAP32[(($240)>>2)];
      var $242=$241 >>> 24;
      var $243=$242 & 255;
      var $244=(($243) & 255);
      var $245=$1;
      var $246=(($245+16)|0);
      HEAP8[($246)]=$244;
      var $247=$2;
      var $248=(($247+8)|0);
      var $249=(($248+16)|0);
      var $250=HEAP32[(($249)>>2)];
      var $251=$250 >>> 16;
      var $252=$251 & 255;
      var $253=(($252) & 255);
      var $254=$1;
      var $255=(($254+17)|0);
      HEAP8[($255)]=$253;
      var $256=$2;
      var $257=(($256+8)|0);
      var $258=(($257+16)|0);
      var $259=HEAP32[(($258)>>2)];
      var $260=$259 >>> 8;
      var $261=$260 & 255;
      var $262=(($261) & 255);
      var $263=$1;
      var $264=(($263+18)|0);
      HEAP8[($264)]=$262;
      var $265=$2;
      var $266=(($265+8)|0);
      var $267=(($266+16)|0);
      var $268=HEAP32[(($267)>>2)];
      var $269=$268 & 255;
      var $270=(($269) & 255);
      var $271=$1;
      var $272=(($271+19)|0);
      HEAP8[($272)]=$270;
      return;
    default: assert(0, "bad label: " + label);
  }
}
// EMSCRIPTEN_END_FUNCS
// EMSCRIPTEN_END_FUNCS
// Warning: printing of i64 values may be slightly rounded! No deep i64 math used, so precise i64 code not included
var i64Math = null;
// === Auto-generated postamble setup entry stuff ===
function run(args) {
  initRuntime();
}
Module['run'] = run;
// {{PRE_RUN_ADDITIONS}}
run();
// {{POST_RUN_ADDITIONS}}
  // {{MODULE_ADDITIONS}}
  return Module;
});
