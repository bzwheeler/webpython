// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
// Capture the output of this into a variable, if you want
(function(FUNCTION_TABLE_OFFSET, globalScope) {
  var Module = {};
  var args = [];
  Module.arguments = [];
// === Auto-generated preamble library stuff ===
//========================================
// Runtime essentials
//========================================
function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.pop();
    var func = callback.func;
    if (typeof func === 'number') {
      func = FUNCTION_TABLE[func];
    }
    func(callback.arg === undefined ? null : callback.arg);
  }
}
var __ATINIT__ = []; // functions called during startup
function initRuntime() {
  callRuntimeCallbacks(__ATINIT__);
}
// === Body ===
var _xmlparser_methods;
var _xmlparser_memory_handler;
var _xmlparser_kwlist;
var _treebuilder_methods;
var _elementtree_parseerror_obj;
var _elementtree_itertext_obj;
var _elementtree_iter_obj;
var _elementtree_deepcopy_obj;
var _elementtree_copyelement_obj;
var _elementpath_obj;
var _element_methods;
var _element_as_sequence;
var _element_as_mapping;
var __str99;
var __str98;
var __str97;
var __str96;
var __str95;
var __str94;
var __str93;
var __str92;
var __str91;
var __str90;
var __str9;
var __str89;
var __str88;
var __str87;
var __str86;
var __str85;
var __str84;
var __str83;
var __str82;
var __str81;
var __str80;
var __str8;
var __str79;
var __str78;
var __str77;
var __str76;
var __str75;
var __str74;
var __str73;
var __str72;
var __str71;
var __str70;
var __str7;
var __str69;
var __str68;
var __str67;
var __str66;
var __str65;
var __str64;
var __str63;
var __str62;
var __str61;
var __str60;
var __str6;
var __str59;
var __str58;
var __str57;
var __str56;
var __str55;
var __str54;
var __str53;
var __str52;
var __str51;
var __str50;
var __str5;
var __str49;
var __str48;
var __str47;
var __str46;
var __str45;
var __str44;
var __str43;
var __str42;
var __str41;
var __str40;
var __str4;
var __str39;
var __str38;
var __str37;
var __str36;
var __str35;
var __str34;
var __str33;
var __str32;
var __str31;
var __str30;
var __str3;
var __str29;
var __str28;
var __str27;
var __str26;
var __str25;
var __str24;
var __str23;
var __str22;
var __str21;
var __str20;
var __str2;
var __str19;
var __str18;
var __str17;
var __str16;
var __str15;
var __str14;
var __str13;
var __str121;
var __str120;
var __str12;
var __str119;
var __str118;
var __str117;
var __str116;
var __str115;
var __str114;
var __str113;
var __str112;
var __str111;
var __str110;
var __str11;
var __str109;
var __str108;
var __str107;
var __str106;
var __str105;
var __str104;
var __str103;
var __str102;
var __str101;
var __str100;
var __str10;
var __str1;
var __str;
var __functions;
var _XMLParser_Type;
var _TreeBuilder_Type;
var _Element_Type;
_xmlparser_methods=allocate([0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_xmlparser_memory_handler=allocate([0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_xmlparser_kwlist=allocate([0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_treebuilder_methods=allocate([0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_elementtree_parseerror_obj=allocate([0,0,0,0], "i8", ALLOC_NORMAL);
_elementtree_itertext_obj=allocate([0,0,0,0], "i8", ALLOC_NORMAL);
_elementtree_iter_obj=allocate([0,0,0,0], "i8", ALLOC_NORMAL);
_elementtree_deepcopy_obj=allocate([0,0,0,0], "i8", ALLOC_NORMAL);
_elementtree_copyelement_obj=allocate([0,0,0,0], "i8", ALLOC_NORMAL);
_elementpath_obj=allocate([0,0,0,0], "i8", ALLOC_NORMAL);
_element_methods=allocate([0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_element_as_sequence=allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_element_as_mapping=allocate([0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
__str99=allocate([115,116,97,114,116,45,110,115,0,0,0,0], "i8", ALLOC_NORMAL);
__str98=allocate([101,118,101,110,116,32,104,97,110,100,108,105,110,103,32,111,110,108,121,32,115,117,112,112,111,114,116,101,100,32,102,111,114,32,99,69,108,101,109,101,110,116,84,114,101,101,46,84,114,101,101,98,117,105,108,100,101,114,32,116,97,114,103,101,116,115,0,0], "i8", ALLOC_NORMAL);
__str97=allocate([79,33,124,79,58,95,115,101,116,101,118,101,110,116,115,0], "i8", ALLOC_NORMAL);
__str96=allocate([95,115,101,116,101,118,101,110,116,115,0,0], "i8", ALLOC_NORMAL);
__str95=allocate([95,112,97,114,115,101,0,0], "i8", ALLOC_NORMAL);
__str94=allocate([102,101,101,100,0,0,0,0], "i8", ALLOC_NORMAL);
__str93=allocate([69,120,112,97,116,32,37,100,46,37,100,46,37,100,0,0], "i8", ALLOC_NORMAL);
__str92=allocate([118,101,114,115,105,111,110,0], "i8", ALLOC_NORMAL);
__str91=allocate([101,110,116,105,116,121,0,0], "i8", ALLOC_NORMAL);
__str90=allocate([79,124,79,33,58,69,108,101,109,101,110,116,0,0,0,0], "i8", ALLOC_NORMAL);
__str9=allocate([99,69,108,101,109,101,110,116,84,114,101,101,46,80,97,114,115,101,69,114,114,111,114,0], "i8", ALLOC_NORMAL);
__str89=allocate([79,33,79,124,79,33,58,83,117,98,69,108,101,109,101,110,116,0,0,0], "i8", ALLOC_NORMAL);
__str88=allocate([58,84,114,101,101,66,117,105,108,100,101,114,0,0,0,0], "i8", ALLOC_NORMAL);
__str87=allocate([109,117,108,116,105,112,108,101,32,101,108,101,109,101,110,116,115,32,111,110,32,116,111,112,32,108,101,118,101,108,0,0], "i8", ALLOC_NORMAL);
__str86=allocate([112,111,112,32,102,114,111,109,32,101,109,112,116,121,32,115,116,97,99,107,0,0,0,0], "i8", ALLOC_NORMAL);
__str85=allocate([112,111,115,105,116,105,111,110,0,0,0,0], "i8", ALLOC_NORMAL);
__str84=allocate([40,105,105,41,0,0,0,0], "i8", ALLOC_NORMAL);
__str83=allocate([115,0,0,0], "i8", ALLOC_NORMAL);
__str82=allocate([37,115,58,32,108,105,110,101,32,37,100,44,32,99,111,108,117,109,110,32,37,100,0,0], "i8", ALLOC_NORMAL);
__str81=allocate([117,110,100,101,102,105,110,101,100,32,101,110,116,105,116,121,32,38,37,46,49,48,48,115,59,0,0,0], "i8", ALLOC_NORMAL);
__str80=allocate([79,0,0,0], "i8", ALLOC_NORMAL);
__str8=allocate([105,116,101,114,116,101,120,116,0,0,0,0], "i8", ALLOC_NORMAL);
__str79=allocate([115,116,114,105,99,116,0,0], "i8", ALLOC_NORMAL);
__str78=allocate([79,79,0,0], "i8", ALLOC_NORMAL);
__str77=allocate([114,101,112,108,97,99,101,0], "i8", ALLOC_NORMAL);
__str76=allocate([99,108,111,115,101,0,0,0], "i8", ALLOC_NORMAL);
__str75=allocate([112,105,0,0], "i8", ALLOC_NORMAL);
__str74=allocate([99,111,109,109,101,110,116,0], "i8", ALLOC_NORMAL);
__str73=allocate([101,110,100,0], "i8", ALLOC_NORMAL);
__str72=allocate([100,97,116,97,0,0,0,0], "i8", ALLOC_NORMAL);
__str71=allocate([115,116,97,114,116,0,0,0], "i8", ALLOC_NORMAL);
__str70=allocate([120,109,108,0], "i8", ALLOC_NORMAL);
__str7=allocate([105,116,101,114,0,0,0,0], "i8", ALLOC_NORMAL);
__str69=allocate([125,0,0,0], "i8", ALLOC_NORMAL);
__str68=allocate([124,79,122,58,88,77,76,80,97,114,115,101,114,0,0,0], "i8", ALLOC_NORMAL);
__str67=allocate([101,110,99,111,100,105,110,103,0,0,0,0], "i8", ALLOC_NORMAL);
__str66=allocate([116,97,114,103,101,116,0,0], "i8", ALLOC_NORMAL);
__str65=allocate([88,77,76,84,114,101,101,66,117,105,108,100,101,114,0,0], "i8", ALLOC_NORMAL);
__str64=allocate([88,77,76,80,97,114,115,101,114,0,0,0], "i8", ALLOC_NORMAL);
__str63=allocate([84,114,101,101,66,117,105,108,100,101,114,0], "i8", ALLOC_NORMAL);
__str62=allocate([83,117,98,69,108,101,109,101,110,116,0,0], "i8", ALLOC_NORMAL);
__str61=allocate([69,108,101,109,101,110,116,0], "i8", ALLOC_NORMAL);
__str60=allocate([58,99,108,101,97,114,0,0], "i8", ALLOC_NORMAL);
__str6=allocate([100,101,101,112,99,111,112,121,0,0,0,0], "i8", ALLOC_NORMAL);
__str59=allocate([79,124,79,58,103,101,116,0], "i8", ALLOC_NORMAL);
__str58=allocate([79,79,58,115,101,116,0,0], "i8", ALLOC_NORMAL);
__str57=allocate([79,124,79,58,102,105,110,100,0,0,0,0], "i8", ALLOC_NORMAL);
__str56=allocate([106,111,105,110,0,0,0,0], "i8", ALLOC_NORMAL);
__str55=allocate([79,79,79,79,0,0,0,0], "i8", ALLOC_NORMAL);
__str54=allocate([79,124,79,79,58,102,105,110,100,116,101,120,116,0,0,0], "i8", ALLOC_NORMAL);
__str53=allocate([79,124,79,58,102,105,110,100,97,108,108,0], "i8", ALLOC_NORMAL);
__str52=allocate([79,33,58,97,112,112,101,110,100,0,0,0], "i8", ALLOC_NORMAL);
__str51=allocate([101,120,112,101,99,116,101,100,32,115,101,113,117,101,110,99,101,44,32,110,111,116,32,34,37,46,50,48,48,115,34,0], "i8", ALLOC_NORMAL);
__str50=allocate([0,0,0,0], "i8", ALLOC_NORMAL);
__str5=allocate([95,95,114,101,100,117,99,101,95,95,0,0], "i8", ALLOC_NORMAL);
__str49=allocate([79,58,101,120,116,101,110,100,0,0,0,0], "i8", ALLOC_NORMAL);
__str48=allocate([105,79,33,58,105,110,115,101,114,116,0,0], "i8", ALLOC_NORMAL);
__str47=allocate([108,105,115,116,46,114,101,109,111,118,101,40,120,41,58,32,120,32,110,111,116,32,105,110,32,108,105,115,116,0,0,0], "i8", ALLOC_NORMAL);
__str46=allocate([79,33,58,114,101,109,111,118,101,0,0,0], "i8", ALLOC_NORMAL);
__str45=allocate([105,116,101,114,32,104,101,108,112,101,114,32,110,111,116,32,102,111,117,110,100,0,0,0], "i8", ALLOC_NORMAL);
__str44=allocate([124,79,58,105,116,101,114,0], "i8", ALLOC_NORMAL);
__str43=allocate([105,116,101,114,116,101,120,116,32,104,101,108,112,101,114,32,110,111,116,32,102,111,117,110,100,0,0,0], "i8", ALLOC_NORMAL);
__str42=allocate([58,105,116,101,114,116,101,120,116,0,0,0], "i8", ALLOC_NORMAL);
__str41=allocate([79,79,79,0], "i8", ALLOC_NORMAL);
__str40=allocate([79,124,79,58,105,116,101,114,102,105,110,100,0,0,0,0], "i8", ALLOC_NORMAL);
__str4=allocate([99,111,112,121,101,108,101,109,101,110,116,0], "i8", ALLOC_NORMAL);
__str39=allocate([58,103,101,116,99,104,105,108,100,114,101,110,0,0,0,0], "i8", ALLOC_NORMAL);
__str38=allocate([58,105,116,101,109,115,0,0], "i8", ALLOC_NORMAL);
__str37=allocate([58,107,101,121,115,0,0,0], "i8", ALLOC_NORMAL);
__str36=allocate([79,79,58,109,97,107,101,101,108,101,109,101,110,116,0,0], "i8", ALLOC_NORMAL);
__str35=allocate([100,101,101,112,99,111,112,121,32,104,101,108,112,101,114,32,110,111,116,32,102,111,117,110,100,0,0,0], "i8", ALLOC_NORMAL);
__str34=allocate([79,58,95,95,100,101,101,112,99,111,112,121,95,95,0,0], "i8", ALLOC_NORMAL);
__str33=allocate([33,95,95,114,101,100,117,99,101,95,95,0], "i8", ALLOC_NORMAL);
__str32=allocate([95,95,100,101,101,112,99,111,112,121,95,95,0,0,0,0], "i8", ALLOC_NORMAL);
__str31=allocate([95,95,99,111,112,121,95,95,0,0,0,0], "i8", ALLOC_NORMAL);
__str30=allocate([109,97,107,101,101,108,101,109,101,110,116,0], "i8", ALLOC_NORMAL);
__str3=allocate([69,108,101,109,101,110,116,80,97,116,104,0], "i8", ALLOC_NORMAL);
__str29=allocate([107,101,121,115,0,0,0,0], "i8", ALLOC_NORMAL);
__str28=allocate([105,116,101,109,115,0,0,0], "i8", ALLOC_NORMAL);
__str27=allocate([103,101,116,99,104,105,108,100,114,101,110,0], "i8", ALLOC_NORMAL);
__str26=allocate([103,101,116,105,116,101,114,97,116,111,114,0], "i8", ALLOC_NORMAL);
__str25=allocate([105,116,101,114,102,105,110,100,0,0,0,0], "i8", ALLOC_NORMAL);
__str24=allocate([114,101,109,111,118,101,0,0], "i8", ALLOC_NORMAL);
__str23=allocate([105,110,115,101,114,116,0,0], "i8", ALLOC_NORMAL);
__str22=allocate([101,120,116,101,110,100,0,0], "i8", ALLOC_NORMAL);
__str21=allocate([97,112,112,101,110,100,0,0], "i8", ALLOC_NORMAL);
__str20=allocate([102,105,110,100,97,108,108,0], "i8", ALLOC_NORMAL);
__str2=allocate([102,114,111,109,32,99,111,112,121,32,105,109,112,111,114,116,32,99,111,112,121,44,32,100,101,101,112,99,111,112,121,10,116,114,121,58,10,32,32,102,114,111,109,32,120,109,108,46,101,116,114,101,101,32,105,109,112,111,114,116,32,69,108,101,109,101,110,116,84,114,101,101,10,101,120,99,101,112,116,32,73,109,112,111,114,116,69,114,114,111,114,58,10,32,32,105,109,112,111,114,116,32,69,108,101,109,101,110,116,84,114,101,101,10,69,84,32,61,32,69,108,101,109,101,110,116,84,114,101,101,10,100,101,108,32,69,108,101,109,101,110,116,84,114,101,101,10,105,109,112,111,114,116,32,95,101,108,101,109,101,110,116,116,114,101,101,32,97,115,32,99,69,108,101,109,101,110,116,84,114,101,101,10,116,114,121,58,10,32,32,99,111,112,121,40,99,69,108,101,109,101,110,116,84,114,101,101,46,69,108,101,109,101,110,116,40,39,120,39,41,41,10,101,120,99,101,112,116,58,10,32,32,100,101,102,32,99,111,112,121,101,108,101,109,101,110,116,40,101,108,101,109,41,58,10,32,32,32,32,114,101,116,117,114,110,32,101,108,101,109,10,99,108,97,115,115,32,67,111,109,109,101,110,116,80,114,111,120,121,58,10,32,100,101,102,32,95,95,99,97,108,108,95,95,40,115,101,108,102,44,32,116,101,120,116,61,78,111,110,101,41,58,10,32,32,101,108,101,109,101,110,116,32,61,32,99,69,108,101,109,101,110,116,84,114,101,101,46,69,108,101,109,101,110,116,40,69,84,46,67,111,109,109,101,110,116,41,10,32,32,101,108,101,109,101,110,116,46,116,101,120,116,32,61,32,116,101,120,116,10,32,32,114,101,116,117,114,110,32,101,108,101,109,101,110,116,10,32,100,101,102,32,95,95,99,109,112,95,95,40,115,101,108,102,44,32,111,116,104,101,114,41,58,10,32,32,114,101,116,117,114,110,32,99,109,112,40,69,84,46,67,111,109,109,101,110,116,44,32,111,116,104,101,114,41,10,99,69,108,101,109,101,110,116,84,114,101,101,46,67,111,109,109,101,110,116,32,61,32,67,111,109,109,101,110,116,80,114,111,120,121,40,41,10,99,108,97,115,115,32,69,108,101,109,101,110,116,84,114,101,101,40,69,84,46,69,108,101,109,101,110,116,84,114,101,101,41,58,10,32,32,100,101,102,32,112,97,114,115,101,40,115,101,108,102,44,32,115,111,117,114,99,101,44,32,112,97,114,115,101,114,61,78,111,110,101,41,58,10,32,32,32,32,99,108,111,115,101,95,115,111,117,114,99,101,32,61,32,70,97,108,115,101,10,32,32,32,32,105,102,32,110,111,116,32,104,97,115,97,116,116,114,40,115,111,117,114,99,101,44,32,39,114,101,97,100,39,41,58,10,32,32,32,32,32,32,115,111,117,114,99,101,32,61,32,111,112,101,110,40,115,111,117,114,99,101,44,32,39,114,98,39,41,10,32,32,32,32,32,32,99,108,111,115,101,95,115,111,117,114,99,101,32,61,32,70,97,108,115,101,10,32,32,32,32,116,114,121,58,10,32,32,32,32,32,32,105,102,32,112,97,114,115,101,114,32,105,115,32,110,111,116,32,78,111,110,101,58,10,32,32,32,32,32,32,32,32,119,104,105,108,101,32,49,58,10,32,32,32,32,32,32,32,32,32,32,100,97,116,97,32,61,32,115,111,117,114,99,101,46,114,101,97,100,40,54,53,53,51,54,41,10,32,32,32,32,32,32,32,32,32,32,105,102,32,110,111,116,32,100,97,116,97,58,10,32,32,32,32,32,32,32,32,32,32,32,32,98,114,101,97,107,10,32,32,32,32,32,32,32,32,32,32,112,97,114,115,101,114,46,102,101,101,100,40,100,97,116,97,41,10,32,32,32,32,32,32,32,32,115,101,108,102,46,95,114,111,111,116,32,61,32,112,97,114,115,101,114,46,99,108,111,115,101,40,41,10,32,32,32,32,32,32,101,108,115,101,58,10,32,32,32,32,32,32,32,32,112,97,114,115,101,114,32,61,32,99,69,108,101,109,101,110,116,84,114,101,101,46,88,77,76,80,97,114,115,101,114,40,41,10,32,32,32,32,32,32,32,32,115,101,108,102,46,95,114,111,111,116,32,61,32,112,97,114,115,101,114,46,95,112,97,114,115,101,40,115,111,117,114,99,101,41,10,32,32,32,32,32,32,114,101,116,117,114,110,32,115,101,108,102,46,95,114,111,111,116,10,32,32,32,32,102,105,110,97,108,108,121,58,10,32,32,32,32,32,32,105,102,32,99,108,111,115,101,95,115,111,117,114,99,101,58,10,32,32,32,32,32,32,32,32,115,111,117,114,99,101,46,99,108,111,115,101,40,41,10,99,69,108,101,109,101,110,116,84,114,101,101,46,69,108,101,109,101,110,116,84,114,101,101,32,61,32,69,108,101,109,101,110,116,84,114,101,101,10,100,101,102,32,105,116,101,114,40,110,111,100,101,44,32,116,97,103,61,78,111,110,101,41,58,10,32,32,105,102,32,116,97,103,32,61,61,32,39,42,39,58,10,32,32,32,32,116,97,103,32,61,32,78,111,110,101,10,32,32,105,102,32,116,97,103,32,105,115,32,78,111,110,101,32,111,114,32,110,111,100,101,46,116,97,103,32,61,61,32,116,97,103,58,10,32,32,32,32,121,105,101,108,100,32,110,111,100,101,10,32,32,102,111,114,32,110,111,100,101,32,105,110,32,110,111,100,101,58,10,32,32,32,32,102,111,114,32,110,111,100,101,32,105,110,32,105,116,101,114,40,110,111,100,101,44,32,116,97,103,41,58,10,32,32,32,32,32,32,121,105,101,108,100,32,110,111,100,101,10,100,101,102,32,105,116,101,114,116,101,120,116,40,110,111,100,101,41,58,10,32,32,105,102,32,110,111,100,101,46,116,101,120,116,58,10,32,32,32,32,121,105,101,108,100,32,110,111,100,101,46,116,101,120,116,10,32,32,102,111,114,32,101,32,105,110,32,110,111,100,101,58,10,32,32,32,32,102,111,114,32,115,32,105,110,32,101,46,105,116,101,114,116,101,120,116,40,41,58,10,32,32,32,32,32,32,121,105,101,108,100,32,115,10,32,32,32,32,105,102,32,101,46,116,97,105,108,58,10,32,32,32,32,32,32,121,105,101,108,100,32,101,46,116,97,105,108,10,100,101,102,32,112,97,114,115,101,40,115,111,117,114,99,101,44,32,112,97,114,115,101,114,61,78,111,110,101,41,58,10,32,32,116,114,101,101,32,61,32,69,108,101,109,101,110,116,84,114,101,101,40,41,10,32,32,116,114,101,101,46,112,97,114,115,101,40,115,111,117,114,99,101,44,32,112,97,114,115,101,114,41,10,32,32,114,101,116,117,114,110,32,116,114,101,101,10,99,69,108,101,109,101,110,116,84,114,101,101,46,112,97,114,115,101,32,61,32,112,97,114,115,101,10,99,108,97,115,115,32,105,116,101,114,112,97,114,115,101,40,111,98,106,101,99,116,41,58,10,32,114,111,111,116,32,61,32,78,111,110,101,10,32,100,101,102,32,95,95,105,110,105,116,95,95,40,115,101,108,102,44,32,102,105,108,101,44,32,101,118,101,110,116,115,61,78,111,110,101,41,58,10,32,32,115,101,108,102,46,95,99,108,111,115,101,95,102,105,108,101,32,61,32,70,97,108,115,101,10,32,32,105,102,32,110,111,116,32,104,97,115,97,116,116,114,40,102,105,108,101,44,32,39,114,101,97,100,39,41,58,10,32,32,32,32,102,105,108,101,32,61,32,111,112,101,110,40,102,105,108,101,44,32,39,114,98,39,41,10,32,32,32,32,115,101,108,102,46,95,99,108,111,115,101,95,102,105,108,101,32,61,32,84,114,117,101,10,32,32,115,101,108,102,46,95,102,105,108,101,32,61,32,102,105,108,101,10,32,32,115,101,108,102,46,95,101,118,101,110,116,115,32,61,32,91,93,10,32,32,115,101,108,102,46,95,105,110,100,101,120,32,61,32,48,10,32,32,115,101,108,102,46,95,101,114,114,111,114,32,61,32,78,111,110,101,10,32,32,115,101,108,102,46,114,111,111,116,32,61,32,115,101,108,102,46,95,114,111,111,116,32,61,32,78,111,110,101,10,32,32,98,32,61,32,99,69,108,101,109,101,110,116,84,114,101,101,46,84,114,101,101,66,117,105,108,100,101,114,40,41,10,32,32,115,101,108,102,46,95,112,97,114,115,101,114,32,61,32,99,69,108,101,109,101,110,116,84,114,101,101,46,88,77,76,80,97,114,115,101,114,40,98,41,10,32,32,115,101,108,102,46,95,112,97,114,115,101,114,46,95,115,101,116,101,118,101,110,116,115,40,115,101,108,102,46,95,101,118,101,110,116,115,44,32,101,118,101,110,116,115,41,10,32,100,101,102,32,110,101,120,116,40,115,101,108,102,41,58,10,32,32,119,104,105,108,101,32,49,58,10,32,32,32,32,116,114,121,58,10,32,32,32,32,32,32,105,116,101,109,32,61,32,115,101,108,102,46,95,101,118,101,110,116,115,91,115,101,108,102,46,95,105,110,100,101,120,93,10,32,32,32,32,32,32,115,101,108,102,46,95,105,110,100,101,120,32,43,61,32,49,10,32,32,32,32,32,32,114,101,116,117,114,110,32,105,116,101,109,10,32,32,32,32,101,120,99,101,112,116,32,73,110,100,101,120,69,114,114,111,114,58,10,32,32,32,32,32,32,112,97,115,115,10,32,32,32,32,105,102,32,115,101,108,102,46,95,101,114,114,111,114,58,10,32,32,32,32,32,32,101,32,61,32,115,101,108,102,46,95,101,114,114,111,114,10,32,32,32,32,32,32,115,101,108,102,46,95,101,114,114,111,114,32,61,32,78,111,110,101,10,32,32,32,32,32,32,114,97,105,115,101,32,101,10,32,32,32,32,105,102,32,115,101,108,102,46,95,112,97,114,115,101,114,32,105,115,32,78,111,110,101,58,10,32,32,32,32,32,32,115,101,108,102,46,114,111,111,116,32,61,32,115,101,108,102,46,95,114,111,111,116,10,32,32,32,32,32,32,105,102,32,115,101,108,102,46,95,99,108,111,115,101,95,102,105,108,101,58,10,32,32,32,32,32,32,32,32,115,101,108,102,46,95,102,105,108,101,46,99,108,111,115,101,40,41,10,32,32,32,32,32,32,114,97,105,115,101,32,83,116,111,112,73,116,101,114,97,116,105,111,110,10,32,32,32,32,35,32,108,111,97,100,32,101,118,101,110,116,32,98,117,102,102,101,114,10,32,32,32,32,100,101,108,32,115,101,108,102,46,95,101,118,101,110,116,115,91,58,93,10,32,32,32,32,115,101,108,102,46,95,105,110,100,101,120,32,61,32,48,10,32,32,32,32,100,97,116,97,32,61,32,115,101,108,102,46,95,102,105,108,101,46,114,101,97,100,40,49,54,51,56,52,41,10,32,32,32,32,105,102,32,100,97,116,97,58,10,32,32,32,32,32,32,116,114,121,58,10,32,32,32,32,32,32,32,32,115,101,108,102,46,95,112,97,114,115,101,114,46,102,101,101,100,40,100,97,116,97,41,10,32,32,32,32,32,32,101,120,99,101,112,116,32,83,121,110,116,97,120,69,114,114,111,114,32,97,115,32,101,120,99,58,10,32,32,32,32,32,32,32,32,115,101,108,102,46,95,101,114,114,111,114,32,61,32,101,120,99,10,32,32,32,32,101,108,115,101,58,10,32,32,32,32,32,32,115,101,108,102,46,95,114,111,111,116,32,61,32,115,101,108,102,46,95,112,97,114,115,101,114,46,99,108,111,115,101,40,41,10,32,32,32,32,32,32,115,101,108,102,46,95,112,97,114,115,101,114,32,61,32,78,111,110,101,10,32,100,101,102,32,95,95,105,116,101,114,95,95,40,115,101,108,102,41,58,10,32,32,114,101,116,117,114,110,32,115,101,108,102,10,99,69,108,101,109,101,110,116,84,114,101,101,46,105,116,101,114,112,97,114,115,101,32,61,32,105,116,101,114,112,97,114,115,101,10,99,108,97,115,115,32,80,73,80,114,111,120,121,58,10,32,100,101,102,32,95,95,99,97,108,108,95,95,40,115,101,108,102,44,32,116,97,114,103,101,116,44,32,116,101,120,116,61,78,111,110,101,41,58,10,32,32,101,108,101,109,101,110,116,32,61,32,99,69,108,101,109,101,110,116,84,114,101,101,46,69,108,101,109,101,110,116,40,69,84,46,80,73,41,10,32,32,101,108,101,109,101,110,116,46,116,101,120,116,32,61,32,116,97,114,103,101,116,10,32,32,105,102,32,116,101,120,116,58,10,32,32,32,32,101,108,101,109,101,110,116,46,116,101,120,116,32,61,32,101,108,101,109,101,110,116,46,116,101,120,116,32,43,32,39,32,39,32,43,32,116,101,120,116,10,32,32,114,101,116,117,114,110,32,101,108,101,109,101,110,116,10,32,100,101,102,32,95,95,99,109,112,95,95,40,115,101,108,102,44,32,111,116,104,101,114,41,58,10,32,32,114,101,116,117,114,110,32,99,109,112,40,69,84,46,80,73,44,32,111,116,104,101,114,41,10,99,69,108,101,109,101,110,116,84,114,101,101,46,80,73,32,61,32,99,69,108,101,109,101,110,116,84,114,101,101,46,80,114,111,99,101,115,115,105,110,103,73,110,115,116,114,117,99,116,105,111,110,32,61,32,80,73,80,114,111,120,121,40,41,10,100,101,102,32,88,77,76,40,116,101,120,116,41,58,10,32,32,112,97,114,115,101,114,32,61,32,99,69,108,101,109,101,110,116,84,114,101,101,46,88,77,76,80,97,114,115,101,114,40,41,10,32,32,112,97,114,115,101,114,46,102,101,101,100,40,116,101,120,116,41,10,32,32,114,101,116,117,114,110,32,112,97,114,115,101,114,46,99,108,111,115,101,40,41,10,99,69,108,101,109,101,110,116,84,114,101,101,46,88,77,76,32,61,32,99,69,108,101,109,101,110,116,84,114,101,101,46,102,114,111,109,115,116,114,105,110,103,32,61,32,88,77,76,10,100,101,102,32,88,77,76,73,68,40,116,101,120,116,41,58,10,32,32,116,114,101,101,32,61,32,88,77,76,40,116,101,120,116,41,10,32,32,105,100,115,32,61,32,123,125,10,32,32,102,111,114,32,101,108,101,109,32,105,110,32,116,114,101,101,46,105,116,101,114,40,41,58,10,32,32,32,32,105,100,32,61,32,101,108,101,109,46,103,101,116,40,39,105,100,39,41,10,32,32,32,32,105,102,32,105,100,58,10,32,32,32,32,32,32,105,100,115,91,105,100,93,32,61,32,101,108,101,109,10,32,32,114,101,116,117,114,110,32,116,114,101,101,44,32,105,100,115,10,99,69,108,101,109,101,110,116,84,114,101,101,46,88,77,76,73,68,32,61,32,88,77,76,73,68,10,116,114,121,58,10,32,114,101,103,105,115,116,101,114,95,110,97,109,101,115,112,97,99,101,32,61,32,69,84,46,114,101,103,105,115,116,101,114,95,110,97,109,101,115,112,97,99,101,10,101,120,99,101,112,116,32,65,116,116,114,105,98,117,116,101,69,114,114,111,114,58,10,32,100,101,102,32,114,101,103,105,115,116,101,114,95,110,97,109,101,115,112,97,99,101,40,112,114,101,102,105,120,44,32,117,114,105,41,58,10,32,32,69,84,46,95,110,97,109,101,115,112,97,99,101,95,109,97,112,91,117,114,105,93,32,61,32,112,114,101,102,105,120,10,99,69,108,101,109,101,110,116,84,114,101,101,46,114,101,103,105,115,116,101,114,95,110,97,109,101,115,112,97,99,101,32,61,32,114,101,103,105,115,116,101,114,95,110,97,109,101,115,112,97,99,101,10,99,69,108,101,109,101,110,116,84,114,101,101,46,100,117,109,112,32,61,32,69,84,46,100,117,109,112,10,99,69,108,101,109,101,110,116,84,114,101,101,46,69,108,101,109,101,110,116,80,97,116,104,32,61,32,69,108,101,109,101,110,116,80,97,116,104,32,61,32,69,84,46,69,108,101,109,101,110,116,80,97,116,104,10,99,69,108,101,109,101,110,116,84,114,101,101,46,105,115,101,108,101,109,101,110,116,32,61,32,69,84,46,105,115,101,108,101,109,101,110,116,10,99,69,108,101,109,101,110,116,84,114,101,101,46,81,78,97,109,101,32,61,32,69,84,46,81,78,97,109,101,10,99,69,108,101,109,101,110,116,84,114,101,101,46,116,111,115,116,114,105,110,103,32,61,32,69,84,46,116,111,115,116,114,105,110,103,10,99,69,108,101,109,101,110,116,84,114,101,101,46,102,114,111,109,115,116,114,105,110,103,108,105,115,116,32,61,32,69,84,46,102,114,111,109,115,116,114,105,110,103,108,105,115,116,10,99,69,108,101,109,101,110,116,84,114,101,101,46,116,111,115,116,114,105,110,103,108,105,115,116,32,61,32,69,84,46,116,111,115,116,114,105,110,103,108,105,115,116,10,99,69,108,101,109,101,110,116,84,114,101,101,46,86,69,82,83,73,79,78,32,61,32,39,49,46,48,46,54,39,10,99,69,108,101,109,101,110,116,84,114,101,101,46,95,95,118,101,114,115,105,111,110,95,95,32,61,32,39,49,46,48,46,54,39,10,0,0,0,0], "i8", ALLOC_NORMAL);
__str19=allocate([102,105,110,100,116,101,120,116,0,0,0,0], "i8", ALLOC_NORMAL);
__str18=allocate([102,105,110,100,0,0,0,0], "i8", ALLOC_NORMAL);
__str17=allocate([115,101,116,0], "i8", ALLOC_NORMAL);
__str16=allocate([103,101,116,0], "i8", ALLOC_NORMAL);
__str15=allocate([99,108,101,97,114,0,0,0], "i8", ALLOC_NORMAL);
__str14=allocate([58,95,95,99,111,112,121,95,95,0,0,0], "i8", ALLOC_NORMAL);
__str13=allocate([79,40,78,41,0,0,0,0], "i8", ALLOC_NORMAL);
__str121=allocate([79,58,100,97,116,97,0,0], "i8", ALLOC_NORMAL);
__str120=allocate([79,124,79,58,115,116,97,114,116,0,0,0], "i8", ALLOC_NORMAL);
__str12=allocate([99,111,112,121,101,108,101,109,101,110,116,32,104,101,108,112,101,114,32,110,111,116,32,102,111,117,110,100,0,0,0,0], "i8", ALLOC_NORMAL);
__str119=allocate([79,58,101,110,100,0,0,0], "i8", ALLOC_NORMAL);
__str118=allocate([79,79,58,120,109,108,0,0], "i8", ALLOC_NORMAL);
__str117=allocate([97,116,116,114,105,98,0,0], "i8", ALLOC_NORMAL);
__str116=allocate([116,97,105,108,0,0,0,0], "i8", ALLOC_NORMAL);
__str115=allocate([116,101,120,116,0,0,0,0], "i8", ALLOC_NORMAL);
__str114=allocate([116,97,103,0], "i8", ALLOC_NORMAL);
__str113=allocate([99,97,110,39,116,32,100,101,108,101,116,101,32,101,108,101,109,101,110,116,32,97,116,116,114,105,98,117,116,101,115,0], "i8", ALLOC_NORMAL);
__str112=allocate([60,69,108,101,109,101,110,116,32,37,115,32,97,116,32,37,112,62,0,0], "i8", ALLOC_NORMAL);
__str111=allocate([99,104,105,108,100,32,105,110,100,101,120,32,111,117,116,32,111,102,32,114,97,110,103,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str110=allocate([99,104,105,108,100,32,97,115,115,105,103,110,109,101,110,116,32,105,110,100,101,120,32,111,117,116,32,111,102,32,114,97,110,103,101,0], "i8", ALLOC_NORMAL);
__str11=allocate([58,95,95,114,101,100,117,99,101,95,95,0], "i8", ALLOC_NORMAL);
__str109=allocate([101,108,101,109,101,110,116,32,105,110,100,105,99,101,115,32,109,117,115,116,32,98,101,32,105,110,116,101,103,101,114,115,0,0,0,0], "i8", ALLOC_NORMAL);
__str108=allocate([97,116,116,101,109,112,116,32,116,111,32,97,115,115,105,103,110,32,115,101,113,117,101,110,99,101,32,111,102,32,115,105,122,101,32,37,122,100,32,116,111,32,101,120,116,101,110,100,101,100,32,115,108,105,99,101,32,111,102,32,115,105,122,101,32,37,122,100,0,0,0,0], "i8", ALLOC_NORMAL);
__str107=allocate([115,35,58,102,101,101,100,0], "i8", ALLOC_NORMAL);
__str106=allocate([58,99,108,111,115,101,0,0], "i8", ALLOC_NORMAL);
__str105=allocate([105,0,0,0], "i8", ALLOC_NORMAL);
__str104=allocate([114,101,97,100,0,0,0,0], "i8", ALLOC_NORMAL);
__str103=allocate([79,58,95,112,97,114,115,101,0,0,0,0], "i8", ALLOC_NORMAL);
__str102=allocate([105,110,118,97,108,105,100,32,101,118,101,110,116,32,116,117,112,108,101,0], "i8", ALLOC_NORMAL);
__str101=allocate([117,110,107,110,111,119,110,32,101,118,101,110,116,32,39,37,115,39,0,0], "i8", ALLOC_NORMAL);
__str100=allocate([101,110,100,45,110,115,0,0], "i8", ALLOC_NORMAL);
__str10=allocate([80,97,114,115,101,69,114,114,111,114,0,0], "i8", ALLOC_NORMAL);
__str1=allocate([95,95,98,117,105,108,116,105,110,115,95,95,0,0,0,0], "i8", ALLOC_NORMAL);
__str=allocate([95,101,108,101,109,101,110,116,116,114,101,101,0,0,0,0], "i8", ALLOC_NORMAL);
__functions=allocate([0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_XMLParser_Type=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_TreeBuilder_Type=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_Element_Type=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
/* no memory initializer */
function runPostSets() {
HEAP32[((_xmlparser_methods)>>2)]=((__str94)|0);
HEAP32[(((_xmlparser_methods)+(4))>>2)]=((FUNCTION_TABLE_OFFSET + 96));
HEAP32[(((_xmlparser_methods)+(16))>>2)]=((__str76)|0);
HEAP32[(((_xmlparser_methods)+(20))>>2)]=((FUNCTION_TABLE_OFFSET + 40));
HEAP32[(((_xmlparser_methods)+(32))>>2)]=((__str95)|0);
HEAP32[(((_xmlparser_methods)+(36))>>2)]=((FUNCTION_TABLE_OFFSET + 14));
HEAP32[(((_xmlparser_methods)+(48))>>2)]=((__str96)|0);
HEAP32[(((_xmlparser_methods)+(52))>>2)]=((FUNCTION_TABLE_OFFSET + 54));
HEAP32[((_xmlparser_kwlist)>>2)]=((__str66)|0);
HEAP32[(((_xmlparser_kwlist)+(4))>>2)]=((__str67)|0);
HEAP32[((_treebuilder_methods)>>2)]=((__str72)|0);
HEAP32[(((_treebuilder_methods)+(4))>>2)]=((FUNCTION_TABLE_OFFSET + 6));
HEAP32[(((_treebuilder_methods)+(16))>>2)]=((__str71)|0);
HEAP32[(((_treebuilder_methods)+(20))>>2)]=((FUNCTION_TABLE_OFFSET + 26));
HEAP32[(((_treebuilder_methods)+(32))>>2)]=((__str73)|0);
HEAP32[(((_treebuilder_methods)+(36))>>2)]=((FUNCTION_TABLE_OFFSET + 114));
HEAP32[(((_treebuilder_methods)+(48))>>2)]=((__str70)|0);
HEAP32[(((_treebuilder_methods)+(52))>>2)]=((FUNCTION_TABLE_OFFSET + 100));
HEAP32[(((_treebuilder_methods)+(64))>>2)]=((__str76)|0);
HEAP32[(((_treebuilder_methods)+(68))>>2)]=((FUNCTION_TABLE_OFFSET + 22));
HEAP32[((_element_methods)>>2)]=((__str15)|0);
HEAP32[(((_element_methods)+(4))>>2)]=((FUNCTION_TABLE_OFFSET + 20));
HEAP32[(((_element_methods)+(16))>>2)]=((__str16)|0);
HEAP32[(((_element_methods)+(20))>>2)]=((FUNCTION_TABLE_OFFSET + 52));
HEAP32[(((_element_methods)+(32))>>2)]=((__str17)|0);
HEAP32[(((_element_methods)+(36))>>2)]=((FUNCTION_TABLE_OFFSET + 84));
HEAP32[(((_element_methods)+(48))>>2)]=((__str18)|0);
HEAP32[(((_element_methods)+(52))>>2)]=((FUNCTION_TABLE_OFFSET + 4));
HEAP32[(((_element_methods)+(64))>>2)]=((__str19)|0);
HEAP32[(((_element_methods)+(68))>>2)]=((FUNCTION_TABLE_OFFSET + 92));
HEAP32[(((_element_methods)+(80))>>2)]=((__str20)|0);
HEAP32[(((_element_methods)+(84))>>2)]=((FUNCTION_TABLE_OFFSET + 56));
HEAP32[(((_element_methods)+(96))>>2)]=((__str21)|0);
HEAP32[(((_element_methods)+(100))>>2)]=((FUNCTION_TABLE_OFFSET + 8));
HEAP32[(((_element_methods)+(112))>>2)]=((__str22)|0);
HEAP32[(((_element_methods)+(116))>>2)]=((FUNCTION_TABLE_OFFSET + 58));
HEAP32[(((_element_methods)+(128))>>2)]=((__str23)|0);
HEAP32[(((_element_methods)+(132))>>2)]=((FUNCTION_TABLE_OFFSET + 74));
HEAP32[(((_element_methods)+(144))>>2)]=((__str24)|0);
HEAP32[(((_element_methods)+(148))>>2)]=((FUNCTION_TABLE_OFFSET + 94));
HEAP32[(((_element_methods)+(160))>>2)]=((__str7)|0);
HEAP32[(((_element_methods)+(164))>>2)]=((FUNCTION_TABLE_OFFSET + 82));
HEAP32[(((_element_methods)+(176))>>2)]=((__str8)|0);
HEAP32[(((_element_methods)+(180))>>2)]=((FUNCTION_TABLE_OFFSET + 24));
HEAP32[(((_element_methods)+(192))>>2)]=((__str25)|0);
HEAP32[(((_element_methods)+(196))>>2)]=((FUNCTION_TABLE_OFFSET + 38));
HEAP32[(((_element_methods)+(208))>>2)]=((__str26)|0);
HEAP32[(((_element_methods)+(212))>>2)]=((FUNCTION_TABLE_OFFSET + 82));
HEAP32[(((_element_methods)+(224))>>2)]=((__str27)|0);
HEAP32[(((_element_methods)+(228))>>2)]=((FUNCTION_TABLE_OFFSET + 32));
HEAP32[(((_element_methods)+(240))>>2)]=((__str28)|0);
HEAP32[(((_element_methods)+(244))>>2)]=((FUNCTION_TABLE_OFFSET + 106));
HEAP32[(((_element_methods)+(256))>>2)]=((__str29)|0);
HEAP32[(((_element_methods)+(260))>>2)]=((FUNCTION_TABLE_OFFSET + 46));
HEAP32[(((_element_methods)+(272))>>2)]=((__str30)|0);
HEAP32[(((_element_methods)+(276))>>2)]=((FUNCTION_TABLE_OFFSET + 68));
HEAP32[(((_element_methods)+(288))>>2)]=((__str31)|0);
HEAP32[(((_element_methods)+(292))>>2)]=((FUNCTION_TABLE_OFFSET + 62));
HEAP32[(((_element_methods)+(304))>>2)]=((__str32)|0);
HEAP32[(((_element_methods)+(308))>>2)]=((FUNCTION_TABLE_OFFSET + 44));
HEAP32[(((_element_methods)+(320))>>2)]=((__str33)|0);
HEAP32[(((_element_methods)+(324))>>2)]=((FUNCTION_TABLE_OFFSET + 50));
HEAP32[((_element_as_sequence)>>2)]=((FUNCTION_TABLE_OFFSET + 64));
HEAP32[(((_element_as_sequence)+(12))>>2)]=(FUNCTION_TABLE_OFFSET + 30);
HEAP32[(((_element_as_sequence)+(20))>>2)]=(FUNCTION_TABLE_OFFSET + 98);
HEAP32[((_element_as_mapping)>>2)]=((FUNCTION_TABLE_OFFSET + 64));
HEAP32[(((_element_as_mapping)+(4))>>2)]=(FUNCTION_TABLE_OFFSET + 16);
HEAP32[(((_element_as_mapping)+(8))>>2)]=(FUNCTION_TABLE_OFFSET + 18);
HEAP32[((__functions)>>2)]=((__str61)|0);
HEAP32[(((__functions)+(4))>>2)]=((FUNCTION_TABLE_OFFSET + 112));
HEAP32[(((__functions)+(16))>>2)]=((__str62)|0);
HEAP32[(((__functions)+(20))>>2)]=((FUNCTION_TABLE_OFFSET + 102));
HEAP32[(((__functions)+(32))>>2)]=((__str63)|0);
HEAP32[(((__functions)+(36))>>2)]=(FUNCTION_TABLE_OFFSET + 48);
HEAP32[(((__functions)+(48))>>2)]=((__str64)|0);
HEAP32[(((__functions)+(52))>>2)]=((FUNCTION_TABLE_OFFSET + 10));
HEAP32[(((__functions)+(64))>>2)]=((__str65)|0);
HEAP32[(((__functions)+(68))>>2)]=((FUNCTION_TABLE_OFFSET + 10));
HEAP32[(((_XMLParser_Type)+(12))>>2)]=((__str64)|0);
HEAP32[(((_XMLParser_Type)+(24))>>2)]=((FUNCTION_TABLE_OFFSET + 36));
HEAP32[(((_XMLParser_Type)+(32))>>2)]=((FUNCTION_TABLE_OFFSET + 72));
HEAP32[(((_TreeBuilder_Type)+(12))>>2)]=((__str63)|0);
HEAP32[(((_TreeBuilder_Type)+(24))>>2)]=((FUNCTION_TABLE_OFFSET + 110));
HEAP32[(((_TreeBuilder_Type)+(32))>>2)]=((FUNCTION_TABLE_OFFSET + 28));
HEAP32[(((_Element_Type)+(12))>>2)]=((__str61)|0);
HEAP32[(((_Element_Type)+(24))>>2)]=((FUNCTION_TABLE_OFFSET + 104));
HEAP32[(((_Element_Type)+(32))>>2)]=((FUNCTION_TABLE_OFFSET + 116));
HEAP32[(((_Element_Type)+(36))>>2)]=((FUNCTION_TABLE_OFFSET + 60));
HEAP32[(((_Element_Type)+(44))>>2)]=((FUNCTION_TABLE_OFFSET + 78));
HEAP32[(((_Element_Type)+(52))>>2)]=_element_as_sequence;
HEAP32[(((_Element_Type)+(56))>>2)]=_element_as_mapping;
}
if (!awaitingMemoryInitializer) runPostSets();
FUNCTION_TABLE.push.apply(FUNCTION_TABLE, [0,0,_expat_end_handler,0,_element_find,0,_treebuilder_data,0,_element_append,0,_xmlparser
,0,_expat_unknown_encoding_handler,0,_xmlparser_parse,0,_element_subscr,0,_element_ass_subscr,0,_element_clear
,0,_treebuilder_close,0,_element_itertext,0,_treebuilder_start,0,_treebuilder_getattr,0,_element_getitem
,0,_element_getchildren,0,_expat_default_handler,0,_xmlparser_dealloc,0,_element_iterfind,0,_xmlparser_close
,0,_expat_pi_handler,0,_element_deepcopy,0,_element_keys,0,_treebuilder,0,_element_reduce
,0,_element_get,0,_xmlparser_setevents,0,_element_findall,0,_element_extend,0,_element_setattr
,0,_element_copy,0,_element_length,0,_PyObject_Realloc,0,_element_makeelement,0,_expat_comment_handler
,0,_xmlparser_getattr,0,_element_insert,0,_PyObject_Malloc,0,_element_repr,0,_PyObject_Free
,0,_element_iter,0,_element_set,0,_expat_end_ns_handler,0,_expat_start_ns_handler,0,_expat_start_handler
,0,_element_findtext,0,_element_remove,0,_xmlparser_feed,0,_element_setitem,0,_treebuilder_xml
,0,_subelement,0,_element_dealloc,0,_element_items,0,_expat_data_handler,0,_treebuilder_dealloc,0,_element,0,_treebuilder_end,0,_element_getattr,0]);
// EMSCRIPTEN_START_FUNCS
function _init_elementtree() {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $m;
      var $g;
      var $bootstrap;
      var $mp;
      HEAP32[((((_TreeBuilder_Type+4)|0))>>2)]=_PyType_Type;
      HEAP32[((((_Element_Type+4)|0))>>2)]=_PyType_Type;
      HEAP32[((((_XMLParser_Type+4)|0))>>2)]=_PyType_Type;
      var $1=_Py_InitModule4(((__str)|0), ((__functions)|0), 0, 0, 1013);
      $m=$1;
      var $2=$m;
      var $3=(($2)|(0))!=0;
      if ($3) { label = 3; break; } else { label = 2; break; }
    case 2: 
      label = 17; break;
    case 3: 
      var $6=_PyDict_New();
      $g=$6;
      var $7=$g;
      var $8=(($7)|(0))!=0;
      if ($8) { label = 5; break; } else { label = 4; break; }
    case 4: 
      label = 17; break;
    case 5: 
      var $11=$g;
      var $12=_PyEval_GetBuiltins();
      var $13=_PyDict_SetItemString($11, ((__str1)|0), $12);
      $bootstrap=((__str2)|0);
      var $14=$bootstrap;
      var $15=$g;
      var $16=_PyRun_StringFlags($14, 257, $15, 0, 0);
      var $17=(($16)|(0))!=0;
      if ($17) { label = 7; break; } else { label = 6; break; }
    case 6: 
      label = 17; break;
    case 7: 
      var $20=$g;
      var $21=_PyDict_GetItemString($20, ((__str3)|0));
      HEAP32[((_elementpath_obj)>>2)]=$21;
      var $22=$g;
      var $23=_PyDict_GetItemString($22, ((__str4)|0));
      HEAP32[((_elementtree_copyelement_obj)>>2)]=$23;
      var $24=HEAP32[((_elementtree_copyelement_obj)>>2)];
      var $25=(($24)|(0))!=0;
      if ($25) { label = 8; break; } else { label = 15; break; }
    case 8: 
      $mp=((_element_methods)|0);
      label = 9; break;
    case 9: 
      var $28=$mp;
      var $29=(($28)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=(($30)|(0))!=0;
      if ($31) { label = 10; break; } else { label = 14; break; }
    case 10: 
      var $33=$mp;
      var $34=(($33+4)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35)|(0))==(((((FUNCTION_TABLE_OFFSET + 50))))|(0));
      if ($36) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $38=$mp;
      var $39=(($38)|0);
      HEAP32[(($39)>>2)]=((__str5)|0);
      label = 14; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $42=$mp;
      var $43=(($42+16)|0);
      $mp=$43;
      label = 9; break;
    case 14: 
      label = 16; break;
    case 15: 
      _PyErr_Clear();
      label = 16; break;
    case 16: 
      var $47=$g;
      var $48=_PyDict_GetItemString($47, ((__str6)|0));
      HEAP32[((_elementtree_deepcopy_obj)>>2)]=$48;
      var $49=$g;
      var $50=_PyDict_GetItemString($49, ((__str7)|0));
      HEAP32[((_elementtree_iter_obj)>>2)]=$50;
      var $51=$g;
      var $52=_PyDict_GetItemString($51, ((__str8)|0));
      HEAP32[((_elementtree_itertext_obj)>>2)]=$52;
      var $53=HEAP32[((_PyExc_SyntaxError)>>2)];
      var $54=_PyErr_NewException(((__str9)|0), $53, 0);
      HEAP32[((_elementtree_parseerror_obj)>>2)]=$54;
      var $55=HEAP32[((_elementtree_parseerror_obj)>>2)];
      var $56=(($55)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=((($57)+(1))|0);
      HEAP32[(($56)>>2)]=$58;
      var $59=$m;
      var $60=HEAP32[((_elementtree_parseerror_obj)>>2)];
      var $61=_PyModule_AddObject($59, ((__str10)|0), $60);
      label = 17; break;
    case 17: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_init_elementtree"] = _init_elementtree;
function _element_reduce($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$self;
      $3=$args;
      var $4=$3;
      var $5=_PyArg_ParseTuple($4, ((__str11)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 6; break;
    case 3: 
      var $9=HEAP32[((_elementtree_copyelement_obj)>>2)];
      var $10=(($9)|(0))!=0;
      if ($10) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $12=HEAP32[((_PyExc_RuntimeError)>>2)];
      _PyErr_SetString($12, ((__str12)|0));
      $1=0;
      label = 6; break;
    case 5: 
      var $14=HEAP32[((_elementtree_copyelement_obj)>>2)];
      var $15=$2;
      var $16=$3;
      var $17=_element_copy($15, $16);
      var $18=_Py_BuildValue(((__str13)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$14,HEAP32[(((tempInt)+(4))>>2)]=$17,tempInt));
      $1=$18;
      label = 6; break;
    case 6: 
      var $20=$1;
      STACKTOP = __stackBase__;
      return $20;
    default: assert(0, "bad label: " + label);
  }
}
function _element_copy($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $i;
      var $element;
      $2=$self;
      $3=$args;
      var $4=$3;
      var $5=_PyArg_ParseTuple($4, ((__str14)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 32; break;
    case 3: 
      var $9=$2;
      var $10=(($9+8)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=$2;
      var $13=(($12+20)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14)|(0))!=0;
      if ($15) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $17=$2;
      var $18=(($17+20)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19)|0);
      var $21=HEAP32[(($20)>>2)];
      var $24 = $21;label = 6; break;
    case 5: 
      var $24 = __Py_NoneStruct;label = 6; break;
    case 6: 
      var $24;
      var $25=_element_new($11, $24);
      var $26=$25;
      $element=$26;
      var $27=$element;
      var $28=(($27)|(0))!=0;
      if ($28) { label = 8; break; } else { label = 7; break; }
    case 7: 
      $1=0;
      label = 32; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $32=$element;
      var $33=(($32+12)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=$34;
      var $36=$35 & -2;
      var $37=$36;
      var $38=(($37)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=((($39)-(1))|0);
      HEAP32[(($38)>>2)]=$40;
      var $41=(($40)|(0))!=0;
      if ($41) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 12; break;
    case 11: 
      var $44=$element;
      var $45=(($44+12)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=$46;
      var $48=$47 & -2;
      var $49=$48;
      var $50=(($49+4)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=(($51+24)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=$element;
      var $55=(($54+12)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=$56;
      var $58=$57 & -2;
      var $59=$58;
      FUNCTION_TABLE[$53]($59);
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $62=$2;
      var $63=(($62+12)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=$element;
      var $66=(($65+12)|0);
      HEAP32[(($66)>>2)]=$64;
      var $67=$element;
      var $68=(($67+12)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=$69;
      var $71=$70 & -2;
      var $72=$71;
      var $73=(($72)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=((($74)+(1))|0);
      HEAP32[(($73)>>2)]=$75;
      label = 14; break;
    case 14: 
      var $77=$element;
      var $78=(($77+16)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=$79;
      var $81=$80 & -2;
      var $82=$81;
      var $83=(($82)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=((($84)-(1))|0);
      HEAP32[(($83)>>2)]=$85;
      var $86=(($85)|(0))!=0;
      if ($86) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 17; break;
    case 16: 
      var $89=$element;
      var $90=(($89+16)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=$91;
      var $93=$92 & -2;
      var $94=$93;
      var $95=(($94+4)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=(($96+24)|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=$element;
      var $100=(($99+16)|0);
      var $101=HEAP32[(($100)>>2)];
      var $102=$101;
      var $103=$102 & -2;
      var $104=$103;
      FUNCTION_TABLE[$98]($104);
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $107=$2;
      var $108=(($107+16)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=$element;
      var $111=(($110+16)|0);
      HEAP32[(($111)>>2)]=$109;
      var $112=$element;
      var $113=(($112+16)|0);
      var $114=HEAP32[(($113)>>2)];
      var $115=$114;
      var $116=$115 & -2;
      var $117=$116;
      var $118=(($117)|0);
      var $119=HEAP32[(($118)>>2)];
      var $120=((($119)+(1))|0);
      HEAP32[(($118)>>2)]=$120;
      var $121=$2;
      var $122=(($121+20)|0);
      var $123=HEAP32[(($122)>>2)];
      var $124=(($123)|(0))!=0;
      if ($124) { label = 19; break; } else { label = 31; break; }
    case 19: 
      var $126=$element;
      var $127=$2;
      var $128=(($127+20)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=(($129+4)|0);
      var $131=HEAP32[(($130)>>2)];
      var $132=_element_resize($126, $131);
      var $133=(($132)|(0)) < 0;
      if ($133) { label = 20; break; } else { label = 26; break; }
    case 20: 
      label = 21; break;
    case 21: 
      var $136=$element;
      var $137=$136;
      var $138=(($137)|0);
      var $139=HEAP32[(($138)>>2)];
      var $140=((($139)-(1))|0);
      HEAP32[(($138)>>2)]=$140;
      var $141=(($140)|(0))!=0;
      if ($141) { label = 22; break; } else { label = 23; break; }
    case 22: 
      label = 24; break;
    case 23: 
      var $144=$element;
      var $145=$144;
      var $146=(($145+4)|0);
      var $147=HEAP32[(($146)>>2)];
      var $148=(($147+24)|0);
      var $149=HEAP32[(($148)>>2)];
      var $150=$element;
      var $151=$150;
      FUNCTION_TABLE[$149]($151);
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      $1=0;
      label = 32; break;
    case 26: 
      $i=0;
      label = 27; break;
    case 27: 
      var $156=$i;
      var $157=$2;
      var $158=(($157+20)|0);
      var $159=HEAP32[(($158)>>2)];
      var $160=(($159+4)|0);
      var $161=HEAP32[(($160)>>2)];
      var $162=(($156)|(0)) < (($161)|(0));
      if ($162) { label = 28; break; } else { label = 30; break; }
    case 28: 
      var $164=$i;
      var $165=$2;
      var $166=(($165+20)|0);
      var $167=HEAP32[(($166)>>2)];
      var $168=(($167+12)|0);
      var $169=HEAP32[(($168)>>2)];
      var $170=(($169+($164<<2))|0);
      var $171=HEAP32[(($170)>>2)];
      var $172=(($171)|0);
      var $173=HEAP32[(($172)>>2)];
      var $174=((($173)+(1))|0);
      HEAP32[(($172)>>2)]=$174;
      var $175=$i;
      var $176=$2;
      var $177=(($176+20)|0);
      var $178=HEAP32[(($177)>>2)];
      var $179=(($178+12)|0);
      var $180=HEAP32[(($179)>>2)];
      var $181=(($180+($175<<2))|0);
      var $182=HEAP32[(($181)>>2)];
      var $183=$i;
      var $184=$element;
      var $185=(($184+20)|0);
      var $186=HEAP32[(($185)>>2)];
      var $187=(($186+12)|0);
      var $188=HEAP32[(($187)>>2)];
      var $189=(($188+($183<<2))|0);
      HEAP32[(($189)>>2)]=$182;
      label = 29; break;
    case 29: 
      var $191=$i;
      var $192=((($191)+(1))|0);
      $i=$192;
      label = 27; break;
    case 30: 
      var $194=$2;
      var $195=(($194+20)|0);
      var $196=HEAP32[(($195)>>2)];
      var $197=(($196+4)|0);
      var $198=HEAP32[(($197)>>2)];
      var $199=$element;
      var $200=(($199+20)|0);
      var $201=HEAP32[(($200)>>2)];
      var $202=(($201+4)|0);
      HEAP32[(($202)>>2)]=$198;
      label = 31; break;
    case 31: 
      var $204=$element;
      var $205=$204;
      $1=$205;
      label = 32; break;
    case 32: 
      var $207=$1;
      STACKTOP = __stackBase__;
      return $207;
    default: assert(0, "bad label: " + label);
  }
}
function _element_new($tag, $attrib) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $self;
      $2=$tag;
      $3=$attrib;
      var $4=__PyObject_New(_Element_Type);
      var $5=$4;
      $self=$5;
      var $6=$self;
      var $7=(($6)|(0))==0;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 11; break;
    case 3: 
      var $10=$3;
      var $11=(($10+4)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12)|(0))==((_PyDict_Type)|(0));
      if ($13) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $15=$3;
      var $16=_PyDict_Size($15);
      var $17=(($16)|(0))!=0;
      if ($17) { label = 6; break; } else { label = 5; break; }
    case 5: 
      $3=__Py_NoneStruct;
      label = 6; break;
    case 6: 
      var $20=$self;
      var $21=(($20+20)|0);
      HEAP32[(($21)>>2)]=0;
      var $22=$3;
      var $23=(($22)|(0))!=((__Py_NoneStruct)|(0));
      if ($23) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $25=$self;
      var $26=$3;
      var $27=_element_new_extra($25, $26);
      var $28=(($27)|(0)) < 0;
      if ($28) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $30=$self;
      var $31=$30;
      _PyObject_Free($31);
      $1=0;
      label = 11; break;
    case 9: 
      var $33=$self;
      var $34=(($33+20)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35+4)|0);
      HEAP32[(($36)>>2)]=0;
      var $37=$self;
      var $38=(($37+20)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39+8)|0);
      HEAP32[(($40)>>2)]=4;
      var $41=$self;
      var $42=(($41+20)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($43+16)|0);
      var $45=(($44)|0);
      var $46=$self;
      var $47=(($46+20)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=(($48+12)|0);
      HEAP32[(($49)>>2)]=$45;
      label = 10; break;
    case 10: 
      var $51=$2;
      var $52=(($51)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=((($53)+(1))|0);
      HEAP32[(($52)>>2)]=$54;
      var $55=$2;
      var $56=$self;
      var $57=(($56+8)|0);
      HEAP32[(($57)>>2)]=$55;
      var $58=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $59=((($58)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$59;
      var $60=$self;
      var $61=(($60+12)|0);
      HEAP32[(($61)>>2)]=__Py_NoneStruct;
      var $62=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $63=((($62)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$63;
      var $64=$self;
      var $65=(($64+16)|0);
      HEAP32[(($65)>>2)]=__Py_NoneStruct;
      var $66=$self;
      var $67=$66;
      $1=$67;
      label = 11; break;
    case 11: 
      var $69=$1;
      return $69;
    default: assert(0, "bad label: " + label);
  }
}
function _element_resize($self, $extra) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $size;
      var $children;
      $2=$self;
      $3=$extra;
      var $4=$2;
      var $5=(($4+20)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0))!=0;
      if ($7) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $9=$2;
      var $10=_element_new_extra($9, 0);
      label = 3; break;
    case 3: 
      var $12=$2;
      var $13=(($12+20)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14+4)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$3;
      var $18=((($16)+($17))|0);
      $size=$18;
      var $19=$size;
      var $20=$2;
      var $21=(($20+20)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22+8)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($19)|(0)) > (($24)|(0));
      if ($25) { label = 4; break; } else { label = 15; break; }
    case 4: 
      var $27=$size;
      var $28=$27 >> 3;
      var $29=$size;
      var $30=(($29)|(0)) < 9;
      var $31=$30 ? 3 : 6;
      var $32=((($28)+($31))|0);
      var $33=$size;
      var $34=((($32)+($33))|0);
      $size=$34;
      var $35=$size;
      var $36=(($35)|(0))!=0;
      if ($36) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $38=$size;
      var $41 = $38;label = 7; break;
    case 6: 
      var $41 = 1;label = 7; break;
    case 7: 
      var $41;
      $size=$41;
      var $42=$2;
      var $43=(($42+20)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=(($44+12)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=$2;
      var $48=(($47+20)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=(($49+16)|0);
      var $51=(($50)|0);
      var $52=(($46)|(0))!=(($51)|(0));
      if ($52) { label = 8; break; } else { label = 11; break; }
    case 8: 
      var $54=$2;
      var $55=(($54+20)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=(($56+12)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=$58;
      var $60=$size;
      var $61=($60<<2);
      var $62=_PyObject_Realloc($59, $61);
      var $63=$62;
      $children=$63;
      var $64=$children;
      var $65=(($64)|(0))!=0;
      if ($65) { label = 10; break; } else { label = 9; break; }
    case 9: 
      label = 16; break;
    case 10: 
      label = 14; break;
    case 11: 
      var $69=$size;
      var $70=($69<<2);
      var $71=_PyObject_Malloc($70);
      var $72=$71;
      $children=$72;
      var $73=$children;
      var $74=(($73)|(0))!=0;
      if ($74) { label = 13; break; } else { label = 12; break; }
    case 12: 
      label = 16; break;
    case 13: 
      var $77=$children;
      var $78=$77;
      var $79=$2;
      var $80=(($79+20)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=(($81+12)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=$83;
      var $85=$2;
      var $86=(($85+20)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=(($87+4)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=($89<<2);
      assert($90 % 1 === 0);_memcpy($78, $84, $90);
      label = 14; break;
    case 14: 
      var $92=$children;
      var $93=$2;
      var $94=(($93+20)|0);
      var $95=HEAP32[(($94)>>2)];
      var $96=(($95+12)|0);
      HEAP32[(($96)>>2)]=$92;
      var $97=$size;
      var $98=$2;
      var $99=(($98+20)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=(($100+8)|0);
      HEAP32[(($101)>>2)]=$97;
      label = 15; break;
    case 15: 
      $1=0;
      label = 17; break;
    case 16: 
      var $104=_PyErr_NoMemory();
      $1=-1;
      label = 17; break;
    case 17: 
      var $106=$1;
      return $106;
    default: assert(0, "bad label: " + label);
  }
}
function _element_new_extra($self, $attrib) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$self;
      $3=$attrib;
      var $4=_PyObject_Malloc(32);
      var $5=$4;
      var $6=$2;
      var $7=(($6+20)|0);
      HEAP32[(($7)>>2)]=$5;
      var $8=$2;
      var $9=(($8+20)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|(0))!=0;
      if ($11) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=-1;
      label = 6; break;
    case 3: 
      var $14=$3;
      var $15=(($14)|(0))!=0;
      if ($15) { label = 5; break; } else { label = 4; break; }
    case 4: 
      $3=__Py_NoneStruct;
      label = 5; break;
    case 5: 
      var $18=$3;
      var $19=(($18)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=((($20)+(1))|0);
      HEAP32[(($19)>>2)]=$21;
      var $22=$3;
      var $23=$2;
      var $24=(($23+20)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25)|0);
      HEAP32[(($26)>>2)]=$22;
      var $27=$2;
      var $28=(($27+20)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29+4)|0);
      HEAP32[(($30)>>2)]=0;
      var $31=$2;
      var $32=(($31+20)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33+8)|0);
      HEAP32[(($34)>>2)]=4;
      var $35=$2;
      var $36=(($35+20)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37+16)|0);
      var $39=(($38)|0);
      var $40=$2;
      var $41=(($40+20)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($42+12)|0);
      HEAP32[(($43)>>2)]=$39;
      $1=0;
      label = 6; break;
    case 6: 
      var $45=$1;
      return $45;
    default: assert(0, "bad label: " + label);
  }
}
function _element_clear($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$self;
      $3=$args;
      var $4=$3;
      var $5=_PyArg_ParseTuple($4, ((__str60)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 16; break;
    case 3: 
      var $9=$2;
      var $10=(($9+20)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $14=$2;
      _element_dealloc_extra($14);
      var $15=$2;
      var $16=(($15+20)|0);
      HEAP32[(($16)>>2)]=0;
      label = 5; break;
    case 5: 
      var $18=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $19=((($18)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$19;
      label = 6; break;
    case 6: 
      var $21=$2;
      var $22=(($21+12)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=$23;
      var $25=$24 & -2;
      var $26=$25;
      var $27=(($26)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=((($28)-(1))|0);
      HEAP32[(($27)>>2)]=$29;
      var $30=(($29)|(0))!=0;
      if ($30) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 9; break;
    case 8: 
      var $33=$2;
      var $34=(($33+12)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=$35;
      var $37=$36 & -2;
      var $38=$37;
      var $39=(($38+4)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40+24)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=$2;
      var $44=(($43+12)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=$45;
      var $47=$46 & -2;
      var $48=$47;
      FUNCTION_TABLE[$42]($48);
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $51=$2;
      var $52=(($51+12)|0);
      HEAP32[(($52)>>2)]=__Py_NoneStruct;
      var $53=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $54=((($53)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$54;
      label = 11; break;
    case 11: 
      var $56=$2;
      var $57=(($56+16)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=$58;
      var $60=$59 & -2;
      var $61=$60;
      var $62=(($61)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=((($63)-(1))|0);
      HEAP32[(($62)>>2)]=$64;
      var $65=(($64)|(0))!=0;
      if ($65) { label = 12; break; } else { label = 13; break; }
    case 12: 
      label = 14; break;
    case 13: 
      var $68=$2;
      var $69=(($68+16)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=$70;
      var $72=$71 & -2;
      var $73=$72;
      var $74=(($73+4)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=(($75+24)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=$2;
      var $79=(($78+16)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=$80;
      var $82=$81 & -2;
      var $83=$82;
      FUNCTION_TABLE[$77]($83);
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $86=$2;
      var $87=(($86+16)|0);
      HEAP32[(($87)>>2)]=__Py_NoneStruct;
      var $88=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $89=((($88)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$89;
      $1=__Py_NoneStruct;
      label = 16; break;
    case 16: 
      var $91=$1;
      STACKTOP = __stackBase__;
      return $91;
    default: assert(0, "bad label: " + label);
  }
}
function _element_get($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $value;
      var $key=__stackBase__;
      var $default_value=(__stackBase__)+(4);
      $2=$self;
      $3=$args;
      HEAP32[(($default_value)>>2)]=__Py_NoneStruct;
      var $4=$3;
      var $5=_PyArg_ParseTuple($4, ((__str59)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$key,HEAP32[(((tempInt)+(4))>>2)]=$default_value,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 10; break;
    case 3: 
      var $9=$2;
      var $10=(($9+20)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $14=$2;
      var $15=(($14+20)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18)|(0))==((__Py_NoneStruct)|(0));
      if ($19) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $21=HEAP32[(($default_value)>>2)];
      $value=$21;
      label = 9; break;
    case 6: 
      var $23=$2;
      var $24=(($23+20)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=HEAP32[(($key)>>2)];
      var $29=_PyDict_GetItem($27, $28);
      $value=$29;
      var $30=$value;
      var $31=(($30)|(0))!=0;
      if ($31) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $33=HEAP32[(($default_value)>>2)];
      $value=$33;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $36=$value;
      var $37=(($36)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=((($38)+(1))|0);
      HEAP32[(($37)>>2)]=$39;
      var $40=$value;
      $1=$40;
      label = 10; break;
    case 10: 
      var $42=$1;
      STACKTOP = __stackBase__;
      return $42;
    default: assert(0, "bad label: " + label);
  }
}
function _element_set($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $attrib;
      var $key=__stackBase__;
      var $value=(__stackBase__)+(4);
      $2=$self;
      $3=$args;
      var $4=$3;
      var $5=_PyArg_ParseTuple($4, ((__str58)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$key,HEAP32[(((tempInt)+(4))>>2)]=$value,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 10; break;
    case 3: 
      var $9=$2;
      var $10=(($9+20)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $14=$2;
      var $15=_element_new_extra($14, 0);
      label = 5; break;
    case 5: 
      var $17=$2;
      var $18=_element_get_attrib($17);
      $attrib=$18;
      var $19=$attrib;
      var $20=(($19)|(0))!=0;
      if ($20) { label = 7; break; } else { label = 6; break; }
    case 6: 
      $1=0;
      label = 10; break;
    case 7: 
      var $23=$attrib;
      var $24=HEAP32[(($key)>>2)];
      var $25=HEAP32[(($value)>>2)];
      var $26=_PyDict_SetItem($23, $24, $25);
      var $27=(($26)|(0)) < 0;
      if ($27) { label = 8; break; } else { label = 9; break; }
    case 8: 
      $1=0;
      label = 10; break;
    case 9: 
      var $30=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $31=((($30)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$31;
      $1=__Py_NoneStruct;
      label = 10; break;
    case 10: 
      var $33=$1;
      STACKTOP = __stackBase__;
      return $33;
    default: assert(0, "bad label: " + label);
  }
}
function _element_find($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $i;
      var $tag=__stackBase__;
      var $namespaces=(__stackBase__)+(4);
      var $item;
      $2=$self;
      $3=$args;
      HEAP32[(($namespaces)>>2)]=__Py_NoneStruct;
      var $4=$3;
      var $5=_PyArg_ParseTuple($4, ((__str57)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$tag,HEAP32[(((tempInt)+(4))>>2)]=$namespaces,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 16; break;
    case 3: 
      var $9=HEAP32[(($tag)>>2)];
      var $10=_checkpath($9);
      var $11=(($10)|(0))!=0;
      if ($11) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $13=HEAP32[(($namespaces)>>2)];
      var $14=(($13)|(0))!=((__Py_NoneStruct)|(0));
      if ($14) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $16=HEAP32[((_elementpath_obj)>>2)];
      var $17=$2;
      var $18=HEAP32[(($tag)>>2)];
      var $19=HEAP32[(($namespaces)>>2)];
      var $20=_PyObject_CallMethod($16, ((__str18)|0), ((__str41)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$17,HEAP32[(((tempInt)+(4))>>2)]=$18,HEAP32[(((tempInt)+(8))>>2)]=$19,tempInt));
      $1=$20;
      label = 16; break;
    case 6: 
      var $22=$2;
      var $23=(($22+20)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24)|(0))!=0;
      if ($25) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $27=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $28=((($27)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$28;
      $1=__Py_NoneStruct;
      label = 16; break;
    case 8: 
      $i=0;
      label = 9; break;
    case 9: 
      var $31=$i;
      var $32=$2;
      var $33=(($32+20)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($34+4)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($31)|(0)) < (($36)|(0));
      if ($37) { label = 10; break; } else { label = 15; break; }
    case 10: 
      var $39=$i;
      var $40=$2;
      var $41=(($40+20)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($42+12)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=(($44+($39<<2))|0);
      var $46=HEAP32[(($45)>>2)];
      $item=$46;
      var $47=$item;
      var $48=(($47+4)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=(($49)|(0))==((_Element_Type)|(0));
      if ($50) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $52=$item;
      var $53=$52;
      var $54=(($53+8)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=HEAP32[(($tag)>>2)];
      var $57=_PyObject_Compare($55, $56);
      var $58=(($57)|(0))==0;
      if ($58) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $60=$item;
      var $61=(($60)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=((($62)+(1))|0);
      HEAP32[(($61)>>2)]=$63;
      var $64=$item;
      $1=$64;
      label = 16; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $67=$i;
      var $68=((($67)+(1))|0);
      $i=$68;
      label = 9; break;
    case 15: 
      var $70=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $71=((($70)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$71;
      $1=__Py_NoneStruct;
      label = 16; break;
    case 16: 
      var $73=$1;
      STACKTOP = __stackBase__;
      return $73;
    default: assert(0, "bad label: " + label);
  }
}
function _element_findtext($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $i;
      var $tag=__stackBase__;
      var $default_value=(__stackBase__)+(4);
      var $namespaces=(__stackBase__)+(8);
      var $item;
      var $text;
      $2=$self;
      $3=$args;
      HEAP32[(($default_value)>>2)]=__Py_NoneStruct;
      HEAP32[(($namespaces)>>2)]=__Py_NoneStruct;
      var $4=$3;
      var $5=_PyArg_ParseTuple($4, ((__str54)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$tag,HEAP32[(((tempInt)+(4))>>2)]=$default_value,HEAP32[(((tempInt)+(8))>>2)]=$namespaces,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 23; break;
    case 3: 
      var $9=HEAP32[(($tag)>>2)];
      var $10=_checkpath($9);
      var $11=(($10)|(0))!=0;
      if ($11) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $13=HEAP32[(($namespaces)>>2)];
      var $14=(($13)|(0))!=((__Py_NoneStruct)|(0));
      if ($14) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $16=HEAP32[((_elementpath_obj)>>2)];
      var $17=$2;
      var $18=HEAP32[(($tag)>>2)];
      var $19=HEAP32[(($default_value)>>2)];
      var $20=HEAP32[(($namespaces)>>2)];
      var $21=_PyObject_CallMethod($16, ((__str19)|0), ((__str55)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$17,HEAP32[(((tempInt)+(4))>>2)]=$18,HEAP32[(((tempInt)+(8))>>2)]=$19,HEAP32[(((tempInt)+(12))>>2)]=$20,tempInt));
      $1=$21;
      label = 23; break;
    case 6: 
      var $23=$2;
      var $24=(($23+20)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25)|(0))!=0;
      if ($26) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $28=HEAP32[(($default_value)>>2)];
      var $29=(($28)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=((($30)+(1))|0);
      HEAP32[(($29)>>2)]=$31;
      var $32=HEAP32[(($default_value)>>2)];
      $1=$32;
      label = 23; break;
    case 8: 
      $i=0;
      label = 9; break;
    case 9: 
      var $35=$i;
      var $36=$2;
      var $37=(($36+20)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38+4)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($35)|(0)) < (($40)|(0));
      if ($41) { label = 10; break; } else { label = 22; break; }
    case 10: 
      var $43=$i;
      var $44=$2;
      var $45=(($44+20)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46+12)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=(($48+($43<<2))|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=$50;
      $item=$51;
      var $52=$item;
      var $53=$52;
      var $54=(($53+4)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=(($55)|(0))==((_Element_Type)|(0));
      if ($56) { label = 11; break; } else { label = 20; break; }
    case 11: 
      var $58=$item;
      var $59=(($58+8)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=HEAP32[(($tag)>>2)];
      var $62=_PyObject_Compare($60, $61);
      var $63=(($62)|(0))!=0;
      if ($63) { label = 20; break; } else { label = 12; break; }
    case 12: 
      var $65=$item;
      var $66=_element_get_text($65);
      $text=$66;
      var $67=$text;
      var $68=(($67)|(0))==((__Py_NoneStruct)|(0));
      if ($68) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $70=_PyString_FromString(((__str50)|0));
      $1=$70;
      label = 23; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $73=$text;
      var $74=(($73)|(0))==0;
      if ($74) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 18; break;
    case 17: 
      var $77=$text;
      var $78=(($77)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=((($79)+(1))|0);
      HEAP32[(($78)>>2)]=$80;
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $83=$text;
      $1=$83;
      label = 23; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $86=$i;
      var $87=((($86)+(1))|0);
      $i=$87;
      label = 9; break;
    case 22: 
      var $89=HEAP32[(($default_value)>>2)];
      var $90=(($89)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=((($91)+(1))|0);
      HEAP32[(($90)>>2)]=$92;
      var $93=HEAP32[(($default_value)>>2)];
      $1=$93;
      label = 23; break;
    case 23: 
      var $95=$1;
      STACKTOP = __stackBase__;
      return $95;
    default: assert(0, "bad label: " + label);
  }
}
function _element_findall($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $i;
      var $out;
      var $tag=__stackBase__;
      var $namespaces=(__stackBase__)+(4);
      var $item;
      $2=$self;
      $3=$args;
      HEAP32[(($namespaces)>>2)]=__Py_NoneStruct;
      var $4=$3;
      var $5=_PyArg_ParseTuple($4, ((__str53)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$tag,HEAP32[(((tempInt)+(4))>>2)]=$namespaces,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 25; break;
    case 3: 
      var $9=HEAP32[(($tag)>>2)];
      var $10=_checkpath($9);
      var $11=(($10)|(0))!=0;
      if ($11) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $13=HEAP32[(($namespaces)>>2)];
      var $14=(($13)|(0))!=((__Py_NoneStruct)|(0));
      if ($14) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $16=HEAP32[((_elementpath_obj)>>2)];
      var $17=$2;
      var $18=HEAP32[(($tag)>>2)];
      var $19=HEAP32[(($namespaces)>>2)];
      var $20=_PyObject_CallMethod($16, ((__str20)|0), ((__str41)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$17,HEAP32[(((tempInt)+(4))>>2)]=$18,HEAP32[(((tempInt)+(8))>>2)]=$19,tempInt));
      $1=$20;
      label = 25; break;
    case 6: 
      var $22=_PyList_New(0);
      $out=$22;
      var $23=$out;
      var $24=(($23)|(0))!=0;
      if ($24) { label = 8; break; } else { label = 7; break; }
    case 7: 
      $1=0;
      label = 25; break;
    case 8: 
      var $27=$2;
      var $28=(($27+20)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29)|(0))!=0;
      if ($30) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $32=$out;
      $1=$32;
      label = 25; break;
    case 10: 
      $i=0;
      label = 11; break;
    case 11: 
      var $35=$i;
      var $36=$2;
      var $37=(($36+20)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38+4)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($35)|(0)) < (($40)|(0));
      if ($41) { label = 12; break; } else { label = 24; break; }
    case 12: 
      var $43=$i;
      var $44=$2;
      var $45=(($44+20)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46+12)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=(($48+($43<<2))|0);
      var $50=HEAP32[(($49)>>2)];
      $item=$50;
      var $51=$item;
      var $52=(($51+4)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=(($53)|(0))==((_Element_Type)|(0));
      if ($54) { label = 13; break; } else { label = 22; break; }
    case 13: 
      var $56=$item;
      var $57=$56;
      var $58=(($57+8)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=HEAP32[(($tag)>>2)];
      var $61=_PyObject_Compare($59, $60);
      var $62=(($61)|(0))==0;
      if ($62) { label = 14; break; } else { label = 22; break; }
    case 14: 
      var $64=$out;
      var $65=$item;
      var $66=_PyList_Append($64, $65);
      var $67=(($66)|(0)) < 0;
      if ($67) { label = 15; break; } else { label = 21; break; }
    case 15: 
      label = 16; break;
    case 16: 
      var $70=$out;
      var $71=(($70)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=((($72)-(1))|0);
      HEAP32[(($71)>>2)]=$73;
      var $74=(($73)|(0))!=0;
      if ($74) { label = 17; break; } else { label = 18; break; }
    case 17: 
      label = 19; break;
    case 18: 
      var $77=$out;
      var $78=(($77+4)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=(($79+24)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=$out;
      FUNCTION_TABLE[$81]($82);
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      $1=0;
      label = 25; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $88=$i;
      var $89=((($88)+(1))|0);
      $i=$89;
      label = 11; break;
    case 24: 
      var $91=$out;
      $1=$91;
      label = 25; break;
    case 25: 
      var $93=$1;
      STACKTOP = __stackBase__;
      return $93;
    default: assert(0, "bad label: " + label);
  }
}
function _element_append($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $element=__stackBase__;
      $2=$self;
      $3=$args;
      var $4=$3;
      var $5=_PyArg_ParseTuple($4, ((__str52)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=_Element_Type,HEAP32[(((tempInt)+(4))>>2)]=$element,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 6; break;
    case 3: 
      var $9=$2;
      var $10=HEAP32[(($element)>>2)];
      var $11=_element_add_subelement($9, $10);
      var $12=(($11)|(0)) < 0;
      if ($12) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=0;
      label = 6; break;
    case 5: 
      var $15=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $16=((($15)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$16;
      $1=__Py_NoneStruct;
      label = 6; break;
    case 6: 
      var $18=$1;
      STACKTOP = __stackBase__;
      return $18;
    default: assert(0, "bad label: " + label);
  }
}
function _element_extend($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $seq;
      var $i;
      var $seqlen;
      var $seq_in=__stackBase__;
      var $element;
      $2=$self;
      $3=$args;
      $seqlen=0;
      var $4=$3;
      var $5=_PyArg_ParseTuple($4, ((__str49)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$seq_in,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 25; break;
    case 3: 
      var $9=HEAP32[(($seq_in)>>2)];
      var $10=_PySequence_Fast($9, ((__str50)|0));
      $seq=$10;
      var $11=$seq;
      var $12=(($11)|(0))!=0;
      if ($12) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $14=HEAP32[((_PyExc_TypeError)>>2)];
      var $15=HEAP32[(($seq_in)>>2)];
      var $16=(($15+4)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17+12)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=_PyErr_Format($14, ((__str51)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$19,tempInt));
      $1=0;
      label = 25; break;
    case 5: 
      var $22=$seq;
      var $23=_PySequence_Size($22);
      $seqlen=$23;
      $i=0;
      label = 6; break;
    case 6: 
      var $25=$i;
      var $26=$seqlen;
      var $27=(($25)|(0)) < (($26)|(0));
      if ($27) { label = 7; break; } else { label = 19; break; }
    case 7: 
      var $29=$seq;
      var $30=(($29+4)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31+84)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=$33 & 33554432;
      var $35=(($34)|(0))!=0;
      if ($35) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $37=$i;
      var $38=$seq;
      var $39=$38;
      var $40=(($39+12)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($41+($37<<2))|0);
      var $43=HEAP32[(($42)>>2)];
      var $52 = $43;label = 10; break;
    case 9: 
      var $45=$i;
      var $46=$seq;
      var $47=$46;
      var $48=(($47+12)|0);
      var $49=(($48+($45<<2))|0);
      var $50=HEAP32[(($49)>>2)];
      var $52 = $50;label = 10; break;
    case 10: 
      var $52;
      $element=$52;
      var $53=$2;
      var $54=$element;
      var $55=_element_add_subelement($53, $54);
      var $56=(($55)|(0)) < 0;
      if ($56) { label = 11; break; } else { label = 17; break; }
    case 11: 
      label = 12; break;
    case 12: 
      var $59=$seq;
      var $60=(($59)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=((($61)-(1))|0);
      HEAP32[(($60)>>2)]=$62;
      var $63=(($62)|(0))!=0;
      if ($63) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 15; break;
    case 14: 
      var $66=$seq;
      var $67=(($66+4)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=(($68+24)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=$seq;
      FUNCTION_TABLE[$70]($71);
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      $1=0;
      label = 25; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $76=$i;
      var $77=((($76)+(1))|0);
      $i=$77;
      label = 6; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $80=$seq;
      var $81=(($80)|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=((($82)-(1))|0);
      HEAP32[(($81)>>2)]=$83;
      var $84=(($83)|(0))!=0;
      if ($84) { label = 21; break; } else { label = 22; break; }
    case 21: 
      label = 23; break;
    case 22: 
      var $87=$seq;
      var $88=(($87+4)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=(($89+24)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=$seq;
      FUNCTION_TABLE[$91]($92);
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $95=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $96=((($95)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$96;
      $1=__Py_NoneStruct;
      label = 25; break;
    case 25: 
      var $98=$1;
      STACKTOP = __stackBase__;
      return $98;
    default: assert(0, "bad label: " + label);
  }
}
function _element_insert($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $i;
      var $index=__stackBase__;
      var $element=(__stackBase__)+(4);
      $2=$self;
      $3=$args;
      var $4=$3;
      var $5=_PyArg_ParseTuple($4, ((__str48)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$index,HEAP32[(((tempInt)+(4))>>2)]=_Element_Type,HEAP32[(((tempInt)+(8))>>2)]=$element,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 18; break;
    case 3: 
      var $9=$2;
      var $10=(($9+20)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $14=$2;
      var $15=_element_new_extra($14, 0);
      label = 5; break;
    case 5: 
      var $17=HEAP32[(($index)>>2)];
      var $18=(($17)|(0)) < 0;
      if ($18) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $20=$2;
      var $21=(($20+20)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22+4)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=HEAP32[(($index)>>2)];
      var $26=((($25)+($24))|0);
      HEAP32[(($index)>>2)]=$26;
      var $27=HEAP32[(($index)>>2)];
      var $28=(($27)|(0)) < 0;
      if ($28) { label = 7; break; } else { label = 8; break; }
    case 7: 
      HEAP32[(($index)>>2)]=0;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $32=HEAP32[(($index)>>2)];
      var $33=$2;
      var $34=(($33+20)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35+4)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($32)|(0)) > (($37)|(0));
      if ($38) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $40=$2;
      var $41=(($40+20)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($42+4)|0);
      var $44=HEAP32[(($43)>>2)];
      HEAP32[(($index)>>2)]=$44;
      label = 11; break;
    case 11: 
      var $46=$2;
      var $47=_element_resize($46, 1);
      var $48=(($47)|(0)) < 0;
      if ($48) { label = 12; break; } else { label = 13; break; }
    case 12: 
      $1=0;
      label = 18; break;
    case 13: 
      var $51=$2;
      var $52=(($51+20)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=(($53+4)|0);
      var $55=HEAP32[(($54)>>2)];
      $i=$55;
      label = 14; break;
    case 14: 
      var $57=$i;
      var $58=HEAP32[(($index)>>2)];
      var $59=(($57)|(0)) > (($58)|(0));
      if ($59) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $61=$i;
      var $62=((($61)-(1))|0);
      var $63=$2;
      var $64=(($63+20)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=(($65+12)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=(($67+($62<<2))|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=$i;
      var $71=$2;
      var $72=(($71+20)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=(($73+12)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=(($75+($70<<2))|0);
      HEAP32[(($76)>>2)]=$69;
      label = 16; break;
    case 16: 
      var $78=$i;
      var $79=((($78)-(1))|0);
      $i=$79;
      label = 14; break;
    case 17: 
      var $81=HEAP32[(($element)>>2)];
      var $82=(($81)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=((($83)+(1))|0);
      HEAP32[(($82)>>2)]=$84;
      var $85=HEAP32[(($element)>>2)];
      var $86=HEAP32[(($index)>>2)];
      var $87=$2;
      var $88=(($87+20)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=(($89+12)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=(($91+($86<<2))|0);
      HEAP32[(($92)>>2)]=$85;
      var $93=$2;
      var $94=(($93+20)|0);
      var $95=HEAP32[(($94)>>2)];
      var $96=(($95+4)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=((($97)+(1))|0);
      HEAP32[(($96)>>2)]=$98;
      var $99=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $100=((($99)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$100;
      $1=__Py_NoneStruct;
      label = 18; break;
    case 18: 
      var $102=$1;
      STACKTOP = __stackBase__;
      return $102;
    default: assert(0, "bad label: " + label);
  }
}
function _element_remove($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $i;
      var $element=__stackBase__;
      $2=$self;
      $3=$args;
      var $4=$3;
      var $5=_PyArg_ParseTuple($4, ((__str46)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=_Element_Type,HEAP32[(((tempInt)+(4))>>2)]=$element,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 25; break;
    case 3: 
      var $9=$2;
      var $10=(($9+20)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $14=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($14, ((__str47)|0));
      $1=0;
      label = 25; break;
    case 5: 
      $i=0;
      label = 6; break;
    case 6: 
      var $17=$i;
      var $18=$2;
      var $19=(($18+20)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20+4)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($17)|(0)) < (($22)|(0));
      if ($23) { label = 7; break; } else { label = 13; break; }
    case 7: 
      var $25=$i;
      var $26=$2;
      var $27=(($26+20)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28+12)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=(($30+($25<<2))|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=HEAP32[(($element)>>2)];
      var $34=(($32)|(0))==(($33)|(0));
      if ($34) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 13; break;
    case 9: 
      var $37=$i;
      var $38=$2;
      var $39=(($38+20)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40+12)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($42+($37<<2))|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=HEAP32[(($element)>>2)];
      var $46=_PyObject_Compare($44, $45);
      var $47=(($46)|(0))==0;
      if ($47) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 13; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $51=$i;
      var $52=((($51)+(1))|0);
      $i=$52;
      label = 6; break;
    case 13: 
      var $54=$i;
      var $55=$2;
      var $56=(($55+20)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=(($57+4)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=(($54)|(0))==(($59)|(0));
      if ($60) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $62=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($62, ((__str47)|0));
      $1=0;
      label = 25; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $65=$i;
      var $66=$2;
      var $67=(($66+20)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=(($68+12)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=(($70+($65<<2))|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=(($72)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=((($74)-(1))|0);
      HEAP32[(($73)>>2)]=$75;
      var $76=(($75)|(0))!=0;
      if ($76) { label = 17; break; } else { label = 18; break; }
    case 17: 
      label = 19; break;
    case 18: 
      var $79=$i;
      var $80=$2;
      var $81=(($80+20)|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=(($82+12)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=(($84+($79<<2))|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=(($86+4)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=(($88+24)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=$i;
      var $92=$2;
      var $93=(($92+20)|0);
      var $94=HEAP32[(($93)>>2)];
      var $95=(($94+12)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=(($96+($91<<2))|0);
      var $98=HEAP32[(($97)>>2)];
      FUNCTION_TABLE[$90]($98);
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $101=$2;
      var $102=(($101+20)|0);
      var $103=HEAP32[(($102)>>2)];
      var $104=(($103+4)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=((($105)-(1))|0);
      HEAP32[(($104)>>2)]=$106;
      label = 21; break;
    case 21: 
      var $108=$i;
      var $109=$2;
      var $110=(($109+20)|0);
      var $111=HEAP32[(($110)>>2)];
      var $112=(($111+4)|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=(($108)|(0)) < (($113)|(0));
      if ($114) { label = 22; break; } else { label = 24; break; }
    case 22: 
      var $116=$i;
      var $117=((($116)+(1))|0);
      var $118=$2;
      var $119=(($118+20)|0);
      var $120=HEAP32[(($119)>>2)];
      var $121=(($120+12)|0);
      var $122=HEAP32[(($121)>>2)];
      var $123=(($122+($117<<2))|0);
      var $124=HEAP32[(($123)>>2)];
      var $125=$i;
      var $126=$2;
      var $127=(($126+20)|0);
      var $128=HEAP32[(($127)>>2)];
      var $129=(($128+12)|0);
      var $130=HEAP32[(($129)>>2)];
      var $131=(($130+($125<<2))|0);
      HEAP32[(($131)>>2)]=$124;
      label = 23; break;
    case 23: 
      var $133=$i;
      var $134=((($133)+(1))|0);
      $i=$134;
      label = 21; break;
    case 24: 
      var $136=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $137=((($136)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$137;
      $1=__Py_NoneStruct;
      label = 25; break;
    case 25: 
      var $139=$1;
      STACKTOP = __stackBase__;
      return $139;
    default: assert(0, "bad label: " + label);
  }
}
function _element_iter($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $result;
      var $tag=__stackBase__;
      $2=$self;
      $3=$args;
      HEAP32[(($tag)>>2)]=__Py_NoneStruct;
      var $4=$3;
      var $5=_PyArg_ParseTuple($4, ((__str44)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$tag,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 13; break;
    case 3: 
      var $9=HEAP32[((_elementtree_iter_obj)>>2)];
      var $10=(($9)|(0))!=0;
      if ($10) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $12=HEAP32[((_PyExc_RuntimeError)>>2)];
      _PyErr_SetString($12, ((__str45)|0));
      $1=0;
      label = 13; break;
    case 5: 
      var $14=_PyTuple_New(2);
      $3=$14;
      var $15=$3;
      var $16=(($15)|(0))!=0;
      if ($16) { label = 7; break; } else { label = 6; break; }
    case 6: 
      $1=0;
      label = 13; break;
    case 7: 
      var $19=$2;
      var $20=$19;
      var $21=(($20)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=((($22)+(1))|0);
      HEAP32[(($21)>>2)]=$23;
      var $24=$2;
      var $25=$24;
      var $26=$3;
      var $27=$26;
      var $28=(($27+12)|0);
      var $29=(($28)|0);
      HEAP32[(($29)>>2)]=$25;
      var $30=HEAP32[(($tag)>>2)];
      var $31=(($30)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=((($32)+(1))|0);
      HEAP32[(($31)>>2)]=$33;
      var $34=HEAP32[(($tag)>>2)];
      var $35=$3;
      var $36=$35;
      var $37=(($36+12)|0);
      var $38=(($37+4)|0);
      HEAP32[(($38)>>2)]=$34;
      var $39=HEAP32[((_elementtree_iter_obj)>>2)];
      var $40=$3;
      var $41=_PyObject_CallObject($39, $40);
      $result=$41;
      label = 8; break;
    case 8: 
      var $43=$3;
      var $44=(($43)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=((($45)-(1))|0);
      HEAP32[(($44)>>2)]=$46;
      var $47=(($46)|(0))!=0;
      if ($47) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 11; break;
    case 10: 
      var $50=$3;
      var $51=(($50+4)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=(($52+24)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=$3;
      FUNCTION_TABLE[$54]($55);
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $58=$result;
      $1=$58;
      label = 13; break;
    case 13: 
      var $60=$1;
      STACKTOP = __stackBase__;
      return $60;
    default: assert(0, "bad label: " + label);
  }
}
function _element_itertext($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $result;
      $2=$self;
      $3=$args;
      var $4=$3;
      var $5=_PyArg_ParseTuple($4, ((__str42)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 13; break;
    case 3: 
      var $9=HEAP32[((_elementtree_itertext_obj)>>2)];
      var $10=(($9)|(0))!=0;
      if ($10) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $12=HEAP32[((_PyExc_RuntimeError)>>2)];
      _PyErr_SetString($12, ((__str43)|0));
      $1=0;
      label = 13; break;
    case 5: 
      var $14=_PyTuple_New(1);
      $3=$14;
      var $15=$3;
      var $16=(($15)|(0))!=0;
      if ($16) { label = 7; break; } else { label = 6; break; }
    case 6: 
      $1=0;
      label = 13; break;
    case 7: 
      var $19=$2;
      var $20=$19;
      var $21=(($20)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=((($22)+(1))|0);
      HEAP32[(($21)>>2)]=$23;
      var $24=$2;
      var $25=$24;
      var $26=$3;
      var $27=$26;
      var $28=(($27+12)|0);
      var $29=(($28)|0);
      HEAP32[(($29)>>2)]=$25;
      var $30=HEAP32[((_elementtree_itertext_obj)>>2)];
      var $31=$3;
      var $32=_PyObject_CallObject($30, $31);
      $result=$32;
      label = 8; break;
    case 8: 
      var $34=$3;
      var $35=(($34)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=((($36)-(1))|0);
      HEAP32[(($35)>>2)]=$37;
      var $38=(($37)|(0))!=0;
      if ($38) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 11; break;
    case 10: 
      var $41=$3;
      var $42=(($41+4)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($43+24)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=$3;
      FUNCTION_TABLE[$45]($46);
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $49=$result;
      $1=$49;
      label = 13; break;
    case 13: 
      var $51=$1;
      STACKTOP = __stackBase__;
      return $51;
    default: assert(0, "bad label: " + label);
  }
}
function _element_iterfind($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $tag=__stackBase__;
      var $namespaces=(__stackBase__)+(4);
      $2=$self;
      $3=$args;
      HEAP32[(($namespaces)>>2)]=__Py_NoneStruct;
      var $4=$3;
      var $5=_PyArg_ParseTuple($4, ((__str40)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$tag,HEAP32[(((tempInt)+(4))>>2)]=$namespaces,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 4; break;
    case 3: 
      var $9=HEAP32[((_elementpath_obj)>>2)];
      var $10=$2;
      var $11=HEAP32[(($tag)>>2)];
      var $12=HEAP32[(($namespaces)>>2)];
      var $13=_PyObject_CallMethod($9, ((__str25)|0), ((__str41)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$10,HEAP32[(((tempInt)+(4))>>2)]=$11,HEAP32[(((tempInt)+(8))>>2)]=$12,tempInt));
      $1=$13;
      label = 4; break;
    case 4: 
      var $15=$1;
      STACKTOP = __stackBase__;
      return $15;
    default: assert(0, "bad label: " + label);
  }
}
function _element_getchildren($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $i;
      var $list;
      var $item;
      $2=$self;
      $3=$args;
      var $4=$3;
      var $5=_PyArg_ParseTuple($4, ((__str39)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 12; break;
    case 3: 
      var $9=$2;
      var $10=(($9+20)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $14=_PyList_New(0);
      $1=$14;
      label = 12; break;
    case 5: 
      var $16=$2;
      var $17=(($16+20)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18+4)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=_PyList_New($20);
      $list=$21;
      var $22=$list;
      var $23=(($22)|(0))!=0;
      if ($23) { label = 7; break; } else { label = 6; break; }
    case 6: 
      $1=0;
      label = 12; break;
    case 7: 
      $i=0;
      label = 8; break;
    case 8: 
      var $27=$i;
      var $28=$2;
      var $29=(($28+20)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=(($30+4)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($27)|(0)) < (($32)|(0));
      if ($33) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $35=$i;
      var $36=$2;
      var $37=(($36+20)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38+12)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40+($35<<2))|0);
      var $42=HEAP32[(($41)>>2)];
      $item=$42;
      var $43=$item;
      var $44=(($43)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=((($45)+(1))|0);
      HEAP32[(($44)>>2)]=$46;
      var $47=$item;
      var $48=$i;
      var $49=$list;
      var $50=$49;
      var $51=(($50+12)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=(($52+($48<<2))|0);
      HEAP32[(($53)>>2)]=$47;
      label = 10; break;
    case 10: 
      var $55=$i;
      var $56=((($55)+(1))|0);
      $i=$56;
      label = 8; break;
    case 11: 
      var $58=$list;
      $1=$58;
      label = 12; break;
    case 12: 
      var $60=$1;
      STACKTOP = __stackBase__;
      return $60;
    default: assert(0, "bad label: " + label);
  }
}
function _element_items($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$self;
      $3=$args;
      var $4=$3;
      var $5=_PyArg_ParseTuple($4, ((__str38)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 7; break;
    case 3: 
      var $9=$2;
      var $10=(($9+20)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $14=$2;
      var $15=(($14+20)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18)|(0))==((__Py_NoneStruct)|(0));
      if ($19) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $21=_PyList_New(0);
      $1=$21;
      label = 7; break;
    case 6: 
      var $23=$2;
      var $24=(($23+20)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=_PyDict_Items($27);
      $1=$28;
      label = 7; break;
    case 7: 
      var $30=$1;
      STACKTOP = __stackBase__;
      return $30;
    default: assert(0, "bad label: " + label);
  }
}
function _element_keys($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$self;
      $3=$args;
      var $4=$3;
      var $5=_PyArg_ParseTuple($4, ((__str37)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 7; break;
    case 3: 
      var $9=$2;
      var $10=(($9+20)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $14=$2;
      var $15=(($14+20)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18)|(0))==((__Py_NoneStruct)|(0));
      if ($19) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $21=_PyList_New(0);
      $1=$21;
      label = 7; break;
    case 6: 
      var $23=$2;
      var $24=(($23+20)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=_PyDict_Keys($27);
      $1=$28;
      label = 7; break;
    case 7: 
      var $30=$1;
      STACKTOP = __stackBase__;
      return $30;
    default: assert(0, "bad label: " + label);
  }
}
function _element_makeelement($self, $args, $kw) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $elem;
      var $tag=__stackBase__;
      var $attrib=(__stackBase__)+(4);
      $2=$self;
      $3=$args;
      $4=$kw;
      var $5=$3;
      var $6=_PyArg_ParseTuple($5, ((__str36)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$tag,HEAP32[(((tempInt)+(4))>>2)]=$attrib,tempInt));
      var $7=(($6)|(0))!=0;
      if ($7) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 11; break;
    case 3: 
      var $10=HEAP32[(($attrib)>>2)];
      var $11=_PyDict_Copy($10);
      HEAP32[(($attrib)>>2)]=$11;
      var $12=HEAP32[(($attrib)>>2)];
      var $13=(($12)|(0))!=0;
      if ($13) { label = 5; break; } else { label = 4; break; }
    case 4: 
      $1=0;
      label = 11; break;
    case 5: 
      var $16=HEAP32[(($tag)>>2)];
      var $17=HEAP32[(($attrib)>>2)];
      var $18=_element_new($16, $17);
      $elem=$18;
      label = 6; break;
    case 6: 
      var $20=HEAP32[(($attrib)>>2)];
      var $21=(($20)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=((($22)-(1))|0);
      HEAP32[(($21)>>2)]=$23;
      var $24=(($23)|(0))!=0;
      if ($24) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 9; break;
    case 8: 
      var $27=HEAP32[(($attrib)>>2)];
      var $28=(($27+4)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29+24)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=HEAP32[(($attrib)>>2)];
      FUNCTION_TABLE[$31]($32);
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $35=$elem;
      $1=$35;
      label = 11; break;
    case 11: 
      var $37=$1;
      STACKTOP = __stackBase__;
      return $37;
    default: assert(0, "bad label: " + label);
  }
}
function _checkpath($tag) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $i;
      var $check;
      var $p;
      var $p1;
      $2=$tag;
      $check=1;
      var $3=$2;
      var $4=(($3+4)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5+84)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=$7 & 268435456;
      var $9=(($8)|(0))!=0;
      if ($9) { label = 2; break; } else { label = 20; break; }
    case 2: 
      var $11=$2;
      var $12=$11;
      var $13=(($12+12)|0);
      var $14=HEAP32[(($13)>>2)];
      $p=$14;
      $i=0;
      label = 3; break;
    case 3: 
      var $16=$i;
      var $17=$2;
      var $18=$17;
      var $19=(($18+8)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($16)|(0)) < (($20)|(0));
      if ($21) { label = 4; break; } else { label = 19; break; }
    case 4: 
      var $23=$i;
      var $24=$p;
      var $25=(($24+($23<<1))|0);
      var $26=HEAP16[(($25)>>1)];
      var $27=(($26)&(65535));
      var $28=(($27)|(0))==123;
      if ($28) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $check=0;
      label = 17; break;
    case 6: 
      var $31=$i;
      var $32=$p;
      var $33=(($32+($31<<1))|0);
      var $34=HEAP16[(($33)>>1)];
      var $35=(($34)&(65535));
      var $36=(($35)|(0))==125;
      if ($36) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $check=1;
      label = 16; break;
    case 8: 
      var $39=$check;
      var $40=(($39)|(0))!=0;
      if ($40) { label = 9; break; } else { label = 15; break; }
    case 9: 
      var $42=$i;
      var $43=$p;
      var $44=(($43+($42<<1))|0);
      var $45=HEAP16[(($44)>>1)];
      var $46=(($45)&(65535));
      var $47=(($46)|(0))==47;
      if ($47) { label = 14; break; } else { label = 10; break; }
    case 10: 
      var $49=$i;
      var $50=$p;
      var $51=(($50+($49<<1))|0);
      var $52=HEAP16[(($51)>>1)];
      var $53=(($52)&(65535));
      var $54=(($53)|(0))==42;
      if ($54) { label = 14; break; } else { label = 11; break; }
    case 11: 
      var $56=$i;
      var $57=$p;
      var $58=(($57+($56<<1))|0);
      var $59=HEAP16[(($58)>>1)];
      var $60=(($59)&(65535));
      var $61=(($60)|(0))==91;
      if ($61) { label = 14; break; } else { label = 12; break; }
    case 12: 
      var $63=$i;
      var $64=$p;
      var $65=(($64+($63<<1))|0);
      var $66=HEAP16[(($65)>>1)];
      var $67=(($66)&(65535));
      var $68=(($67)|(0))==64;
      if ($68) { label = 14; break; } else { label = 13; break; }
    case 13: 
      var $70=$i;
      var $71=$p;
      var $72=(($71+($70<<1))|0);
      var $73=HEAP16[(($72)>>1)];
      var $74=(($73)&(65535));
      var $75=(($74)|(0))==46;
      if ($75) { label = 14; break; } else { label = 15; break; }
    case 14: 
      $1=1;
      label = 40; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $81=$i;
      var $82=((($81)+(1))|0);
      $i=$82;
      label = 3; break;
    case 19: 
      $1=0;
      label = 40; break;
    case 20: 
      var $85=$2;
      var $86=(($85+4)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=(($87+84)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=$89 & 134217728;
      var $91=(($90)|(0))!=0;
      if ($91) { label = 21; break; } else { label = 39; break; }
    case 21: 
      var $93=$2;
      var $94=$93;
      var $95=(($94+20)|0);
      var $96=(($95)|0);
      $p1=$96;
      $i=0;
      label = 22; break;
    case 22: 
      var $98=$i;
      var $99=$2;
      var $100=$99;
      var $101=(($100+8)|0);
      var $102=HEAP32[(($101)>>2)];
      var $103=(($98)|(0)) < (($102)|(0));
      if ($103) { label = 23; break; } else { label = 38; break; }
    case 23: 
      var $105=$i;
      var $106=$p1;
      var $107=(($106+$105)|0);
      var $108=HEAP8[($107)];
      var $109=(($108 << 24) >> 24);
      var $110=(($109)|(0))==123;
      if ($110) { label = 24; break; } else { label = 25; break; }
    case 24: 
      $check=0;
      label = 36; break;
    case 25: 
      var $113=$i;
      var $114=$p1;
      var $115=(($114+$113)|0);
      var $116=HEAP8[($115)];
      var $117=(($116 << 24) >> 24);
      var $118=(($117)|(0))==125;
      if ($118) { label = 26; break; } else { label = 27; break; }
    case 26: 
      $check=1;
      label = 35; break;
    case 27: 
      var $121=$check;
      var $122=(($121)|(0))!=0;
      if ($122) { label = 28; break; } else { label = 34; break; }
    case 28: 
      var $124=$i;
      var $125=$p1;
      var $126=(($125+$124)|0);
      var $127=HEAP8[($126)];
      var $128=(($127 << 24) >> 24);
      var $129=(($128)|(0))==47;
      if ($129) { label = 33; break; } else { label = 29; break; }
    case 29: 
      var $131=$i;
      var $132=$p1;
      var $133=(($132+$131)|0);
      var $134=HEAP8[($133)];
      var $135=(($134 << 24) >> 24);
      var $136=(($135)|(0))==42;
      if ($136) { label = 33; break; } else { label = 30; break; }
    case 30: 
      var $138=$i;
      var $139=$p1;
      var $140=(($139+$138)|0);
      var $141=HEAP8[($140)];
      var $142=(($141 << 24) >> 24);
      var $143=(($142)|(0))==91;
      if ($143) { label = 33; break; } else { label = 31; break; }
    case 31: 
      var $145=$i;
      var $146=$p1;
      var $147=(($146+$145)|0);
      var $148=HEAP8[($147)];
      var $149=(($148 << 24) >> 24);
      var $150=(($149)|(0))==64;
      if ($150) { label = 33; break; } else { label = 32; break; }
    case 32: 
      var $152=$i;
      var $153=$p1;
      var $154=(($153+$152)|0);
      var $155=HEAP8[($154)];
      var $156=(($155 << 24) >> 24);
      var $157=(($156)|(0))==46;
      if ($157) { label = 33; break; } else { label = 34; break; }
    case 33: 
      $1=1;
      label = 40; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      var $163=$i;
      var $164=((($163)+(1))|0);
      $i=$164;
      label = 22; break;
    case 38: 
      $1=0;
      label = 40; break;
    case 39: 
      $1=1;
      label = 40; break;
    case 40: 
      var $168=$1;
      return $168;
    default: assert(0, "bad label: " + label);
  }
}
function _element_deepcopy($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $i;
      var $element;
      var $tag;
      var $attrib;
      var $text;
      var $tail;
      var $id;
      var $memo=__stackBase__;
      var $child;
      $2=$self;
      $3=$args;
      var $4=$3;
      var $5=_PyArg_ParseTuple($4, ((__str34)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$memo,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 67; break;
    case 3: 
      var $9=$2;
      var $10=(($9+8)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=HEAP32[(($memo)>>2)];
      var $13=_deepcopy($11, $12);
      $tag=$13;
      var $14=$tag;
      var $15=(($14)|(0))!=0;
      if ($15) { label = 5; break; } else { label = 4; break; }
    case 4: 
      $1=0;
      label = 67; break;
    case 5: 
      var $18=$2;
      var $19=(($18+20)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20)|(0))!=0;
      if ($21) { label = 6; break; } else { label = 14; break; }
    case 6: 
      var $23=$2;
      var $24=(($23+20)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=HEAP32[(($memo)>>2)];
      var $29=_deepcopy($27, $28);
      $attrib=$29;
      var $30=$attrib;
      var $31=(($30)|(0))!=0;
      if ($31) { label = 13; break; } else { label = 7; break; }
    case 7: 
      label = 8; break;
    case 8: 
      var $34=$tag;
      var $35=(($34)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=((($36)-(1))|0);
      HEAP32[(($35)>>2)]=$37;
      var $38=(($37)|(0))!=0;
      if ($38) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 11; break;
    case 10: 
      var $41=$tag;
      var $42=(($41+4)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($43+24)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=$tag;
      FUNCTION_TABLE[$45]($46);
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      $1=0;
      label = 67; break;
    case 13: 
      label = 15; break;
    case 14: 
      var $51=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $52=((($51)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$52;
      $attrib=__Py_NoneStruct;
      label = 15; break;
    case 15: 
      var $54=$tag;
      var $55=$attrib;
      var $56=_element_new($54, $55);
      var $57=$56;
      $element=$57;
      label = 16; break;
    case 16: 
      var $59=$tag;
      var $60=(($59)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=((($61)-(1))|0);
      HEAP32[(($60)>>2)]=$62;
      var $63=(($62)|(0))!=0;
      if ($63) { label = 17; break; } else { label = 18; break; }
    case 17: 
      label = 19; break;
    case 18: 
      var $66=$tag;
      var $67=(($66+4)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=(($68+24)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=$tag;
      FUNCTION_TABLE[$70]($71);
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $75=$attrib;
      var $76=(($75)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=((($77)-(1))|0);
      HEAP32[(($76)>>2)]=$78;
      var $79=(($78)|(0))!=0;
      if ($79) { label = 22; break; } else { label = 23; break; }
    case 22: 
      label = 24; break;
    case 23: 
      var $82=$attrib;
      var $83=(($82+4)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=(($84+24)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=$attrib;
      FUNCTION_TABLE[$86]($87);
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $90=$element;
      var $91=(($90)|(0))!=0;
      if ($91) { label = 27; break; } else { label = 26; break; }
    case 26: 
      $1=0;
      label = 67; break;
    case 27: 
      var $94=$2;
      var $95=(($94+12)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=$96;
      var $98=$97 & -2;
      var $99=$98;
      var $100=HEAP32[(($memo)>>2)];
      var $101=_deepcopy($99, $100);
      $text=$101;
      var $102=$text;
      var $103=(($102)|(0))!=0;
      if ($103) { label = 29; break; } else { label = 28; break; }
    case 28: 
      label = 61; break;
    case 29: 
      label = 30; break;
    case 30: 
      var $107=$element;
      var $108=(($107+12)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=(($109)|0);
      var $111=HEAP32[(($110)>>2)];
      var $112=((($111)-(1))|0);
      HEAP32[(($110)>>2)]=$112;
      var $113=(($112)|(0))!=0;
      if ($113) { label = 31; break; } else { label = 32; break; }
    case 31: 
      label = 33; break;
    case 32: 
      var $116=$element;
      var $117=(($116+12)|0);
      var $118=HEAP32[(($117)>>2)];
      var $119=(($118+4)|0);
      var $120=HEAP32[(($119)>>2)];
      var $121=(($120+24)|0);
      var $122=HEAP32[(($121)>>2)];
      var $123=$element;
      var $124=(($123+12)|0);
      var $125=HEAP32[(($124)>>2)];
      FUNCTION_TABLE[$122]($125);
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      var $128=$text;
      var $129=$128;
      var $130=$129 & -2;
      var $131=$130;
      var $132=$131;
      var $133=$2;
      var $134=(($133+12)|0);
      var $135=HEAP32[(($134)>>2)];
      var $136=$135;
      var $137=$136 & 1;
      var $138=$132 | $137;
      var $139=$138;
      var $140=$139;
      var $141=$element;
      var $142=(($141+12)|0);
      HEAP32[(($142)>>2)]=$140;
      var $143=$2;
      var $144=(($143+16)|0);
      var $145=HEAP32[(($144)>>2)];
      var $146=$145;
      var $147=$146 & -2;
      var $148=$147;
      var $149=HEAP32[(($memo)>>2)];
      var $150=_deepcopy($148, $149);
      $tail=$150;
      var $151=$tail;
      var $152=(($151)|(0))!=0;
      if ($152) { label = 36; break; } else { label = 35; break; }
    case 35: 
      label = 61; break;
    case 36: 
      label = 37; break;
    case 37: 
      var $156=$element;
      var $157=(($156+16)|0);
      var $158=HEAP32[(($157)>>2)];
      var $159=(($158)|0);
      var $160=HEAP32[(($159)>>2)];
      var $161=((($160)-(1))|0);
      HEAP32[(($159)>>2)]=$161;
      var $162=(($161)|(0))!=0;
      if ($162) { label = 38; break; } else { label = 39; break; }
    case 38: 
      label = 40; break;
    case 39: 
      var $165=$element;
      var $166=(($165+16)|0);
      var $167=HEAP32[(($166)>>2)];
      var $168=(($167+4)|0);
      var $169=HEAP32[(($168)>>2)];
      var $170=(($169+24)|0);
      var $171=HEAP32[(($170)>>2)];
      var $172=$element;
      var $173=(($172+16)|0);
      var $174=HEAP32[(($173)>>2)];
      FUNCTION_TABLE[$171]($174);
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      var $177=$tail;
      var $178=$177;
      var $179=$178 & -2;
      var $180=$179;
      var $181=$180;
      var $182=$2;
      var $183=(($182+16)|0);
      var $184=HEAP32[(($183)>>2)];
      var $185=$184;
      var $186=$185 & 1;
      var $187=$181 | $186;
      var $188=$187;
      var $189=$188;
      var $190=$element;
      var $191=(($190+16)|0);
      HEAP32[(($191)>>2)]=$189;
      var $192=$2;
      var $193=(($192+20)|0);
      var $194=HEAP32[(($193)>>2)];
      var $195=(($194)|(0))!=0;
      if ($195) { label = 42; break; } else { label = 51; break; }
    case 42: 
      var $197=$element;
      var $198=$2;
      var $199=(($198+20)|0);
      var $200=HEAP32[(($199)>>2)];
      var $201=(($200+4)|0);
      var $202=HEAP32[(($201)>>2)];
      var $203=_element_resize($197, $202);
      var $204=(($203)|(0)) < 0;
      if ($204) { label = 43; break; } else { label = 44; break; }
    case 43: 
      label = 61; break;
    case 44: 
      $i=0;
      label = 45; break;
    case 45: 
      var $208=$i;
      var $209=$2;
      var $210=(($209+20)|0);
      var $211=HEAP32[(($210)>>2)];
      var $212=(($211+4)|0);
      var $213=HEAP32[(($212)>>2)];
      var $214=(($208)|(0)) < (($213)|(0));
      if ($214) { label = 46; break; } else { label = 50; break; }
    case 46: 
      var $216=$i;
      var $217=$2;
      var $218=(($217+20)|0);
      var $219=HEAP32[(($218)>>2)];
      var $220=(($219+12)|0);
      var $221=HEAP32[(($220)>>2)];
      var $222=(($221+($216<<2))|0);
      var $223=HEAP32[(($222)>>2)];
      var $224=HEAP32[(($memo)>>2)];
      var $225=_deepcopy($223, $224);
      $child=$225;
      var $226=$child;
      var $227=(($226)|(0))!=0;
      if ($227) { label = 48; break; } else { label = 47; break; }
    case 47: 
      var $229=$i;
      var $230=$element;
      var $231=(($230+20)|0);
      var $232=HEAP32[(($231)>>2)];
      var $233=(($232+4)|0);
      HEAP32[(($233)>>2)]=$229;
      label = 61; break;
    case 48: 
      var $235=$child;
      var $236=$i;
      var $237=$element;
      var $238=(($237+20)|0);
      var $239=HEAP32[(($238)>>2)];
      var $240=(($239+12)|0);
      var $241=HEAP32[(($240)>>2)];
      var $242=(($241+($236<<2))|0);
      HEAP32[(($242)>>2)]=$235;
      label = 49; break;
    case 49: 
      var $244=$i;
      var $245=((($244)+(1))|0);
      $i=$245;
      label = 45; break;
    case 50: 
      var $247=$2;
      var $248=(($247+20)|0);
      var $249=HEAP32[(($248)>>2)];
      var $250=(($249+4)|0);
      var $251=HEAP32[(($250)>>2)];
      var $252=$element;
      var $253=(($252+20)|0);
      var $254=HEAP32[(($253)>>2)];
      var $255=(($254+4)|0);
      HEAP32[(($255)>>2)]=$251;
      label = 51; break;
    case 51: 
      var $257=$2;
      var $258=$257;
      var $259=_PyInt_FromLong($258);
      $id=$259;
      var $260=$id;
      var $261=(($260)|(0))!=0;
      if ($261) { label = 53; break; } else { label = 52; break; }
    case 52: 
      label = 61; break;
    case 53: 
      var $264=HEAP32[(($memo)>>2)];
      var $265=$id;
      var $266=$element;
      var $267=$266;
      var $268=_PyDict_SetItem($264, $265, $267);
      $i=$268;
      label = 54; break;
    case 54: 
      var $270=$id;
      var $271=(($270)|0);
      var $272=HEAP32[(($271)>>2)];
      var $273=((($272)-(1))|0);
      HEAP32[(($271)>>2)]=$273;
      var $274=(($273)|(0))!=0;
      if ($274) { label = 55; break; } else { label = 56; break; }
    case 55: 
      label = 57; break;
    case 56: 
      var $277=$id;
      var $278=(($277+4)|0);
      var $279=HEAP32[(($278)>>2)];
      var $280=(($279+24)|0);
      var $281=HEAP32[(($280)>>2)];
      var $282=$id;
      FUNCTION_TABLE[$281]($282);
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      var $285=$i;
      var $286=(($285)|(0)) < 0;
      if ($286) { label = 59; break; } else { label = 60; break; }
    case 59: 
      label = 61; break;
    case 60: 
      var $289=$element;
      var $290=$289;
      $1=$290;
      label = 67; break;
    case 61: 
      label = 62; break;
    case 62: 
      var $293=$element;
      var $294=$293;
      var $295=(($294)|0);
      var $296=HEAP32[(($295)>>2)];
      var $297=((($296)-(1))|0);
      HEAP32[(($295)>>2)]=$297;
      var $298=(($297)|(0))!=0;
      if ($298) { label = 63; break; } else { label = 64; break; }
    case 63: 
      label = 65; break;
    case 64: 
      var $301=$element;
      var $302=$301;
      var $303=(($302+4)|0);
      var $304=HEAP32[(($303)>>2)];
      var $305=(($304+24)|0);
      var $306=HEAP32[(($305)>>2)];
      var $307=$element;
      var $308=$307;
      FUNCTION_TABLE[$306]($308);
      label = 65; break;
    case 65: 
      label = 66; break;
    case 66: 
      $1=0;
      label = 67; break;
    case 67: 
      var $312=$1;
      STACKTOP = __stackBase__;
      return $312;
    default: assert(0, "bad label: " + label);
  }
}
function _deepcopy($object, $memo) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $args;
      var $result;
      $2=$object;
      $3=$memo;
      var $4=HEAP32[((_elementtree_deepcopy_obj)>>2)];
      var $5=(($4)|(0))!=0;
      if ($5) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $7=HEAP32[((_PyExc_RuntimeError)>>2)];
      _PyErr_SetString($7, ((__str35)|0));
      $1=0;
      label = 11; break;
    case 3: 
      var $9=_PyTuple_New(2);
      $args=$9;
      var $10=$args;
      var $11=(($10)|(0))!=0;
      if ($11) { label = 5; break; } else { label = 4; break; }
    case 4: 
      $1=0;
      label = 11; break;
    case 5: 
      var $14=$2;
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=((($16)+(1))|0);
      HEAP32[(($15)>>2)]=$17;
      var $18=$2;
      var $19=$args;
      var $20=$19;
      var $21=(($20+12)|0);
      var $22=(($21)|0);
      HEAP32[(($22)>>2)]=$18;
      var $23=$3;
      var $24=(($23)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=((($25)+(1))|0);
      HEAP32[(($24)>>2)]=$26;
      var $27=$3;
      var $28=$args;
      var $29=$28;
      var $30=(($29+12)|0);
      var $31=(($30+4)|0);
      HEAP32[(($31)>>2)]=$27;
      var $32=HEAP32[((_elementtree_deepcopy_obj)>>2)];
      var $33=$args;
      var $34=_PyObject_CallObject($32, $33);
      $result=$34;
      label = 6; break;
    case 6: 
      var $36=$args;
      var $37=(($36)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=((($38)-(1))|0);
      HEAP32[(($37)>>2)]=$39;
      var $40=(($39)|(0))!=0;
      if ($40) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 9; break;
    case 8: 
      var $43=$args;
      var $44=(($43+4)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=(($45+24)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=$args;
      FUNCTION_TABLE[$47]($48);
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $51=$result;
      $1=$51;
      label = 11; break;
    case 11: 
      var $53=$1;
      return $53;
    default: assert(0, "bad label: " + label);
  }
}
function _element_add_subelement($self, $element) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$self;
      $3=$element;
      var $4=$2;
      var $5=_element_resize($4, 1);
      var $6=(($5)|(0)) < 0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=-1;
      label = 4; break;
    case 3: 
      var $9=$3;
      var $10=(($9)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=((($11)+(1))|0);
      HEAP32[(($10)>>2)]=$12;
      var $13=$3;
      var $14=$2;
      var $15=(($14+20)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16+4)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=$2;
      var $20=(($19+20)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21+12)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+($18<<2))|0);
      HEAP32[(($24)>>2)]=$13;
      var $25=$2;
      var $26=(($25+20)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27+4)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=((($29)+(1))|0);
      HEAP32[(($28)>>2)]=$30;
      $1=0;
      label = 4; break;
    case 4: 
      var $32=$1;
      return $32;
    default: assert(0, "bad label: " + label);
  }
}
function _element_get_text($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $res;
      $2=$self;
      var $3=$2;
      var $4=(($3+12)|0);
      var $5=HEAP32[(($4)>>2)];
      $res=$5;
      var $6=$res;
      var $7=$6;
      var $8=$7 & 1;
      var $9=(($8)|(0))!=0;
      if ($9) { label = 2; break; } else { label = 7; break; }
    case 2: 
      var $11=$res;
      var $12=$11;
      var $13=$12 & -2;
      var $14=$13;
      $res=$14;
      var $15=$res;
      var $16=(($15+4)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17)|(0))==((_PyList_Type)|(0));
      if ($18) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $20=$res;
      var $21=_list_join($20);
      $res=$21;
      var $22=$res;
      var $23=(($22)|(0))!=0;
      if ($23) { label = 5; break; } else { label = 4; break; }
    case 4: 
      $1=0;
      label = 8; break;
    case 5: 
      var $26=$res;
      var $27=$2;
      var $28=(($27+12)|0);
      HEAP32[(($28)>>2)]=$26;
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $31=$res;
      $1=$31;
      label = 8; break;
    case 8: 
      var $33=$1;
      return $33;
    default: assert(0, "bad label: " + label);
  }
}
function _list_join($list) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $joiner;
      var $function;
      var $args;
      var $result;
      $2=$list;
      var $3=$2;
      var $4=$3;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      if ((($6)|(0))==0) {
        label = 2; break;
      }
      else if ((($6)|(0))==1) {
        label = 8; break;
      }
      else {
      label = 14; break;
      }
    case 2: 
      label = 3; break;
    case 3: 
      var $9=$2;
      var $10=(($9)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=((($11)-(1))|0);
      HEAP32[(($10)>>2)]=$12;
      var $13=(($12)|(0))!=0;
      if ($13) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 6; break;
    case 5: 
      var $16=$2;
      var $17=(($16+4)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18+24)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=$2;
      FUNCTION_TABLE[$20]($21);
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $24=_PyString_FromString(((__str50)|0));
      $1=$24;
      label = 41; break;
    case 8: 
      var $26=$2;
      var $27=$26;
      var $28=(($27+12)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29)|0);
      var $31=HEAP32[(($30)>>2)];
      $result=$31;
      var $32=$result;
      var $33=(($32)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=((($34)+(1))|0);
      HEAP32[(($33)>>2)]=$35;
      label = 9; break;
    case 9: 
      var $37=$2;
      var $38=(($37)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=((($39)-(1))|0);
      HEAP32[(($38)>>2)]=$40;
      var $41=(($40)|(0))!=0;
      if ($41) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 12; break;
    case 11: 
      var $44=$2;
      var $45=(($44+4)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46+24)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=$2;
      FUNCTION_TABLE[$48]($49);
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $52=$result;
      $1=$52;
      label = 41; break;
    case 14: 
      var $54=$2;
      var $55=$54;
      var $56=(($55+12)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=(($57)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=_PySequence_GetSlice($59, 0, 0);
      $joiner=$60;
      var $61=$joiner;
      var $62=(($61)|(0))!=0;
      if ($62) { label = 16; break; } else { label = 15; break; }
    case 15: 
      $1=0;
      label = 41; break;
    case 16: 
      var $65=$joiner;
      var $66=_PyObject_GetAttrString($65, ((__str56)|0));
      $function=$66;
      var $67=$function;
      var $68=(($67)|(0))!=0;
      if ($68) { label = 23; break; } else { label = 17; break; }
    case 17: 
      label = 18; break;
    case 18: 
      var $71=$joiner;
      var $72=(($71)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=((($73)-(1))|0);
      HEAP32[(($72)>>2)]=$74;
      var $75=(($74)|(0))!=0;
      if ($75) { label = 19; break; } else { label = 20; break; }
    case 19: 
      label = 21; break;
    case 20: 
      var $78=$joiner;
      var $79=(($78+4)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=(($80+24)|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=$joiner;
      FUNCTION_TABLE[$82]($83);
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      $1=0;
      label = 41; break;
    case 23: 
      var $87=_PyTuple_New(1);
      $args=$87;
      var $88=$args;
      var $89=(($88)|(0))!=0;
      if ($89) { label = 25; break; } else { label = 24; break; }
    case 24: 
      $1=0;
      label = 41; break;
    case 25: 
      var $92=$2;
      var $93=$args;
      var $94=$93;
      var $95=(($94+12)|0);
      var $96=(($95)|0);
      HEAP32[(($96)>>2)]=$92;
      var $97=$function;
      var $98=$args;
      var $99=_PyObject_CallObject($97, $98);
      $result=$99;
      label = 26; break;
    case 26: 
      var $101=$args;
      var $102=(($101)|0);
      var $103=HEAP32[(($102)>>2)];
      var $104=((($103)-(1))|0);
      HEAP32[(($102)>>2)]=$104;
      var $105=(($104)|(0))!=0;
      if ($105) { label = 27; break; } else { label = 28; break; }
    case 27: 
      label = 29; break;
    case 28: 
      var $108=$args;
      var $109=(($108+4)|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=(($110+24)|0);
      var $112=HEAP32[(($111)>>2)];
      var $113=$args;
      FUNCTION_TABLE[$112]($113);
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $117=$function;
      var $118=(($117)|0);
      var $119=HEAP32[(($118)>>2)];
      var $120=((($119)-(1))|0);
      HEAP32[(($118)>>2)]=$120;
      var $121=(($120)|(0))!=0;
      if ($121) { label = 32; break; } else { label = 33; break; }
    case 32: 
      label = 34; break;
    case 33: 
      var $124=$function;
      var $125=(($124+4)|0);
      var $126=HEAP32[(($125)>>2)];
      var $127=(($126+24)|0);
      var $128=HEAP32[(($127)>>2)];
      var $129=$function;
      FUNCTION_TABLE[$128]($129);
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $133=$joiner;
      var $134=(($133)|0);
      var $135=HEAP32[(($134)>>2)];
      var $136=((($135)-(1))|0);
      HEAP32[(($134)>>2)]=$136;
      var $137=(($136)|(0))!=0;
      if ($137) { label = 37; break; } else { label = 38; break; }
    case 37: 
      label = 39; break;
    case 38: 
      var $140=$joiner;
      var $141=(($140+4)|0);
      var $142=HEAP32[(($141)>>2)];
      var $143=(($142+24)|0);
      var $144=HEAP32[(($143)>>2)];
      var $145=$joiner;
      FUNCTION_TABLE[$144]($145);
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      var $148=$result;
      $1=$148;
      label = 41; break;
    case 41: 
      var $150=$1;
      return $150;
    default: assert(0, "bad label: " + label);
  }
}
function _element_get_attrib($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $res;
      $2=$self;
      var $3=$2;
      var $4=(($3+20)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|0);
      var $7=HEAP32[(($6)>>2)];
      $res=$7;
      var $8=$res;
      var $9=(($8)|(0))==((__Py_NoneStruct)|(0));
      if ($9) { label = 2; break; } else { label = 10; break; }
    case 2: 
      label = 3; break;
    case 3: 
      var $12=$res;
      var $13=(($12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=((($14)-(1))|0);
      HEAP32[(($13)>>2)]=$15;
      var $16=(($15)|(0))!=0;
      if ($16) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 6; break;
    case 5: 
      var $19=$res;
      var $20=(($19+4)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21+24)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=$res;
      FUNCTION_TABLE[$23]($24);
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $27=_PyDict_New();
      $res=$27;
      var $28=$res;
      var $29=(($28)|(0))!=0;
      if ($29) { label = 9; break; } else { label = 8; break; }
    case 8: 
      $1=0;
      label = 11; break;
    case 9: 
      var $32=$res;
      var $33=$2;
      var $34=(($33+20)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35)|0);
      HEAP32[(($36)>>2)]=$32;
      label = 10; break;
    case 10: 
      var $38=$res;
      $1=$38;
      label = 11; break;
    case 11: 
      var $40=$1;
      return $40;
    default: assert(0, "bad label: " + label);
  }
}
function _element_dealloc_extra($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $i;
      $1=$self;
      label = 2; break;
    case 2: 
      var $3=$1;
      var $4=(($3+20)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=((($9)-(1))|0);
      HEAP32[(($8)>>2)]=$10;
      var $11=(($10)|(0))!=0;
      if ($11) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 5; break;
    case 4: 
      var $14=$1;
      var $15=(($14+20)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18+4)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20+24)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=$1;
      var $24=(($23+20)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25)|0);
      var $27=HEAP32[(($26)>>2)];
      FUNCTION_TABLE[$22]($27);
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      $i=0;
      label = 7; break;
    case 7: 
      var $31=$i;
      var $32=$1;
      var $33=(($32+20)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($34+4)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($31)|(0)) < (($36)|(0));
      if ($37) { label = 8; break; } else { label = 15; break; }
    case 8: 
      label = 9; break;
    case 9: 
      var $40=$i;
      var $41=$1;
      var $42=(($41+20)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($43+12)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=(($45+($40<<2))|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=(($47)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=((($49)-(1))|0);
      HEAP32[(($48)>>2)]=$50;
      var $51=(($50)|(0))!=0;
      if ($51) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 12; break;
    case 11: 
      var $54=$i;
      var $55=$1;
      var $56=(($55+20)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=(($57+12)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=(($59+($54<<2))|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=(($61+4)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=(($63+24)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=$i;
      var $67=$1;
      var $68=(($67+20)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=(($69+12)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=(($71+($66<<2))|0);
      var $73=HEAP32[(($72)>>2)];
      FUNCTION_TABLE[$65]($73);
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $77=$i;
      var $78=((($77)+(1))|0);
      $i=$78;
      label = 7; break;
    case 15: 
      var $80=$1;
      var $81=(($80+20)|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=(($82+12)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=$1;
      var $86=(($85+20)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=(($87+16)|0);
      var $89=(($88)|0);
      var $90=(($84)|(0))!=(($89)|(0));
      if ($90) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $92=$1;
      var $93=(($92+20)|0);
      var $94=HEAP32[(($93)>>2)];
      var $95=(($94+12)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=$96;
      _PyObject_Free($97);
      label = 17; break;
    case 17: 
      var $99=$1;
      var $100=(($99+20)|0);
      var $101=HEAP32[(($100)>>2)];
      var $102=$101;
      _PyObject_Free($102);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _element($self, $args, $kw) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $elem;
      var $tag=__stackBase__;
      var $attrib=(__stackBase__)+(4);
      $2=$self;
      $3=$args;
      $4=$kw;
      HEAP32[(($attrib)>>2)]=0;
      var $5=$3;
      var $6=_PyArg_ParseTuple($5, ((__str90)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$tag,HEAP32[(((tempInt)+(4))>>2)]=_PyDict_Type,HEAP32[(((tempInt)+(8))>>2)]=$attrib,tempInt));
      var $7=(($6)|(0))!=0;
      if ($7) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 20; break;
    case 3: 
      var $10=HEAP32[(($attrib)>>2)];
      var $11=(($10)|(0))!=0;
      if ($11) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $13=$4;
      var $14=(($13)|(0))!=0;
      if ($14) { label = 5; break; } else { label = 13; break; }
    case 5: 
      var $16=HEAP32[(($attrib)>>2)];
      var $17=(($16)|(0))!=0;
      if ($17) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $19=HEAP32[(($attrib)>>2)];
      var $20=_PyDict_Copy($19);
      var $24 = $20;label = 8; break;
    case 7: 
      var $22=_PyDict_New();
      var $24 = $22;label = 8; break;
    case 8: 
      var $24;
      HEAP32[(($attrib)>>2)]=$24;
      var $25=HEAP32[(($attrib)>>2)];
      var $26=(($25)|(0))!=0;
      if ($26) { label = 10; break; } else { label = 9; break; }
    case 9: 
      $1=0;
      label = 20; break;
    case 10: 
      var $29=$4;
      var $30=(($29)|(0))!=0;
      if ($30) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $32=HEAP32[(($attrib)>>2)];
      var $33=$4;
      var $34=_PyDict_Update($32, $33);
      label = 12; break;
    case 12: 
      label = 14; break;
    case 13: 
      var $37=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $38=((($37)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$38;
      HEAP32[(($attrib)>>2)]=__Py_NoneStruct;
      label = 14; break;
    case 14: 
      var $40=HEAP32[(($tag)>>2)];
      var $41=HEAP32[(($attrib)>>2)];
      var $42=_element_new($40, $41);
      $elem=$42;
      label = 15; break;
    case 15: 
      var $44=HEAP32[(($attrib)>>2)];
      var $45=(($44)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=((($46)-(1))|0);
      HEAP32[(($45)>>2)]=$47;
      var $48=(($47)|(0))!=0;
      if ($48) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 18; break;
    case 17: 
      var $51=HEAP32[(($attrib)>>2)];
      var $52=(($51+4)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=(($53+24)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=HEAP32[(($attrib)>>2)];
      FUNCTION_TABLE[$55]($56);
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $59=$elem;
      $1=$59;
      label = 20; break;
    case 20: 
      var $61=$1;
      STACKTOP = __stackBase__;
      return $61;
    default: assert(0, "bad label: " + label);
  }
}
function _subelement($self, $args, $kw) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $elem;
      var $parent=__stackBase__;
      var $tag=(__stackBase__)+(4);
      var $attrib=(__stackBase__)+(8);
      $2=$self;
      $3=$args;
      $4=$kw;
      HEAP32[(($attrib)>>2)]=0;
      var $5=$3;
      var $6=_PyArg_ParseTuple($5, ((__str89)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=_Element_Type,HEAP32[(((tempInt)+(4))>>2)]=$parent,HEAP32[(((tempInt)+(8))>>2)]=$tag,HEAP32[(((tempInt)+(12))>>2)]=_PyDict_Type,HEAP32[(((tempInt)+(16))>>2)]=$attrib,tempInt));
      var $7=(($6)|(0))!=0;
      if ($7) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 27; break;
    case 3: 
      var $10=HEAP32[(($attrib)>>2)];
      var $11=(($10)|(0))!=0;
      if ($11) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $13=$4;
      var $14=(($13)|(0))!=0;
      if ($14) { label = 5; break; } else { label = 13; break; }
    case 5: 
      var $16=HEAP32[(($attrib)>>2)];
      var $17=(($16)|(0))!=0;
      if ($17) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $19=HEAP32[(($attrib)>>2)];
      var $20=_PyDict_Copy($19);
      var $24 = $20;label = 8; break;
    case 7: 
      var $22=_PyDict_New();
      var $24 = $22;label = 8; break;
    case 8: 
      var $24;
      HEAP32[(($attrib)>>2)]=$24;
      var $25=HEAP32[(($attrib)>>2)];
      var $26=(($25)|(0))!=0;
      if ($26) { label = 10; break; } else { label = 9; break; }
    case 9: 
      $1=0;
      label = 27; break;
    case 10: 
      var $29=$4;
      var $30=(($29)|(0))!=0;
      if ($30) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $32=HEAP32[(($attrib)>>2)];
      var $33=$4;
      var $34=_PyDict_Update($32, $33);
      label = 12; break;
    case 12: 
      label = 14; break;
    case 13: 
      var $37=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $38=((($37)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$38;
      HEAP32[(($attrib)>>2)]=__Py_NoneStruct;
      label = 14; break;
    case 14: 
      var $40=HEAP32[(($tag)>>2)];
      var $41=HEAP32[(($attrib)>>2)];
      var $42=_element_new($40, $41);
      $elem=$42;
      label = 15; break;
    case 15: 
      var $44=HEAP32[(($attrib)>>2)];
      var $45=(($44)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=((($46)-(1))|0);
      HEAP32[(($45)>>2)]=$47;
      var $48=(($47)|(0))!=0;
      if ($48) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 18; break;
    case 17: 
      var $51=HEAP32[(($attrib)>>2)];
      var $52=(($51+4)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=(($53+24)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=HEAP32[(($attrib)>>2)];
      FUNCTION_TABLE[$55]($56);
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $59=HEAP32[(($parent)>>2)];
      var $60=$elem;
      var $61=_element_add_subelement($59, $60);
      var $62=(($61)|(0)) < 0;
      if ($62) { label = 20; break; } else { label = 26; break; }
    case 20: 
      label = 21; break;
    case 21: 
      var $65=$elem;
      var $66=(($65)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=((($67)-(1))|0);
      HEAP32[(($66)>>2)]=$68;
      var $69=(($68)|(0))!=0;
      if ($69) { label = 22; break; } else { label = 23; break; }
    case 22: 
      label = 24; break;
    case 23: 
      var $72=$elem;
      var $73=(($72+4)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=(($74+24)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=$elem;
      FUNCTION_TABLE[$76]($77);
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      $1=0;
      label = 27; break;
    case 26: 
      var $81=$elem;
      $1=$81;
      label = 27; break;
    case 27: 
      var $83=$1;
      STACKTOP = __stackBase__;
      return $83;
    default: assert(0, "bad label: " + label);
  }
}
function _treebuilder($self_, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$self_;
      $3=$args;
      var $4=$3;
      var $5=_PyArg_ParseTuple($4, ((__str88)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 4; break;
    case 3: 
      var $9=_treebuilder_new();
      $1=$9;
      label = 4; break;
    case 4: 
      var $11=$1;
      STACKTOP = __stackBase__;
      return $11;
    default: assert(0, "bad label: " + label);
  }
}
function _xmlparser($self_, $args, $kw) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $self;
      var $target=__stackBase__;
      var $encoding=(__stackBase__)+(4);
      $2=$self_;
      $3=$args;
      $4=$kw;
      HEAP32[(($target)>>2)]=0;
      HEAP32[(($encoding)>>2)]=0;
      var $5=$3;
      var $6=$4;
      var $7=_PyArg_ParseTupleAndKeywords($5, $6, ((__str68)|0), ((_xmlparser_kwlist)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$target,HEAP32[(((tempInt)+(4))>>2)]=$encoding,tempInt));
      var $8=(($7)|(0))!=0;
      if ($8) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 21; break;
    case 3: 
      var $11=__PyObject_New(_XMLParser_Type);
      var $12=$11;
      $self=$12;
      var $13=$self;
      var $14=(($13)|(0))==0;
      if ($14) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=0;
      label = 21; break;
    case 5: 
      var $17=_PyDict_New();
      var $18=$self;
      var $19=(($18+16)|0);
      HEAP32[(($19)>>2)]=$17;
      var $20=$self;
      var $21=(($20+16)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22)|(0))!=0;
      if ($23) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $25=$self;
      var $26=$25;
      _PyObject_Free($26);
      $1=0;
      label = 21; break;
    case 7: 
      var $28=_PyDict_New();
      var $29=$self;
      var $30=(($29+20)|0);
      HEAP32[(($30)>>2)]=$28;
      var $31=$self;
      var $32=(($31+20)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33)|(0))!=0;
      if ($34) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $36=$self;
      var $37=(($36+16)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=$38;
      _PyObject_Free($39);
      var $40=$self;
      var $41=$40;
      _PyObject_Free($41);
      $1=0;
      label = 21; break;
    case 9: 
      HEAP32[((((_xmlparser_memory_handler)|0))>>2)]=(FUNCTION_TABLE_OFFSET + 76);
      HEAP32[((((_xmlparser_memory_handler+4)|0))>>2)]=(FUNCTION_TABLE_OFFSET + 66);
      HEAP32[((((_xmlparser_memory_handler+8)|0))>>2)]=(FUNCTION_TABLE_OFFSET + 80);
      var $43=HEAP32[(($encoding)>>2)];
      var $44=_PyExpat_XML_ParserCreate_MM($43, _xmlparser_memory_handler, ((__str69)|0));
      var $45=$self;
      var $46=(($45+8)|0);
      HEAP32[(($46)>>2)]=$44;
      var $47=$self;
      var $48=(($47+8)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=(($49)|(0))!=0;
      if ($50) { label = 11; break; } else { label = 10; break; }
    case 10: 
      var $52=$self;
      var $53=(($52+20)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=$54;
      _PyObject_Free($55);
      var $56=$self;
      var $57=(($56+16)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=$58;
      _PyObject_Free($59);
      var $60=$self;
      var $61=$60;
      _PyObject_Free($61);
      var $62=_PyErr_NoMemory();
      $1=0;
      label = 21; break;
    case 11: 
      var $64=HEAP32[(($target)>>2)];
      var $65=(($64)|(0))!=0;
      if ($65) { label = 15; break; } else { label = 12; break; }
    case 12: 
      var $67=_treebuilder_new();
      HEAP32[(($target)>>2)]=$67;
      var $68=HEAP32[(($target)>>2)];
      var $69=(($68)|(0))!=0;
      if ($69) { label = 14; break; } else { label = 13; break; }
    case 13: 
      var $71=$self;
      var $72=(($71+8)|0);
      var $73=HEAP32[(($72)>>2)];
      _PyExpat_XML_ParserFree($73);
      var $74=$self;
      var $75=(($74+20)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=$76;
      _PyObject_Free($77);
      var $78=$self;
      var $79=(($78+16)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=$80;
      _PyObject_Free($81);
      var $82=$self;
      var $83=$82;
      _PyObject_Free($83);
      $1=0;
      label = 21; break;
    case 14: 
      label = 16; break;
    case 15: 
      var $86=HEAP32[(($target)>>2)];
      var $87=(($86)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=((($88)+(1))|0);
      HEAP32[(($87)>>2)]=$89;
      label = 16; break;
    case 16: 
      var $91=HEAP32[(($target)>>2)];
      var $92=$self;
      var $93=(($92+12)|0);
      HEAP32[(($93)>>2)]=$91;
      var $94=HEAP32[(($target)>>2)];
      var $95=_PyObject_GetAttrString($94, ((__str70)|0));
      var $96=$self;
      var $97=(($96+24)|0);
      HEAP32[(($97)>>2)]=$95;
      var $98=HEAP32[(($target)>>2)];
      var $99=_PyObject_GetAttrString($98, ((__str71)|0));
      var $100=$self;
      var $101=(($100+28)|0);
      HEAP32[(($101)>>2)]=$99;
      var $102=HEAP32[(($target)>>2)];
      var $103=_PyObject_GetAttrString($102, ((__str72)|0));
      var $104=$self;
      var $105=(($104+32)|0);
      HEAP32[(($105)>>2)]=$103;
      var $106=HEAP32[(($target)>>2)];
      var $107=_PyObject_GetAttrString($106, ((__str73)|0));
      var $108=$self;
      var $109=(($108+36)|0);
      HEAP32[(($109)>>2)]=$107;
      var $110=HEAP32[(($target)>>2)];
      var $111=_PyObject_GetAttrString($110, ((__str74)|0));
      var $112=$self;
      var $113=(($112+40)|0);
      HEAP32[(($113)>>2)]=$111;
      var $114=HEAP32[(($target)>>2)];
      var $115=_PyObject_GetAttrString($114, ((__str75)|0));
      var $116=$self;
      var $117=(($116+44)|0);
      HEAP32[(($117)>>2)]=$115;
      var $118=HEAP32[(($target)>>2)];
      var $119=_PyObject_GetAttrString($118, ((__str76)|0));
      var $120=$self;
      var $121=(($120+48)|0);
      HEAP32[(($121)>>2)]=$119;
      _PyErr_Clear();
      var $122=$self;
      var $123=(($122+8)|0);
      var $124=HEAP32[(($123)>>2)];
      var $125=$self;
      var $126=$125;
      _PyExpat_XML_SetUserData($124, $126);
      var $127=$self;
      var $128=(($127+8)|0);
      var $129=HEAP32[(($128)>>2)];
      _PyExpat_XML_SetElementHandler($129, ((FUNCTION_TABLE_OFFSET + 90)), ((FUNCTION_TABLE_OFFSET + 2)));
      var $130=$self;
      var $131=(($130+8)|0);
      var $132=HEAP32[(($131)>>2)];
      _PyExpat_XML_SetDefaultHandlerExpand($132, ((FUNCTION_TABLE_OFFSET + 34)));
      var $133=$self;
      var $134=(($133+8)|0);
      var $135=HEAP32[(($134)>>2)];
      _PyExpat_XML_SetCharacterDataHandler($135, ((FUNCTION_TABLE_OFFSET + 108)));
      var $136=$self;
      var $137=(($136+40)|0);
      var $138=HEAP32[(($137)>>2)];
      var $139=(($138)|(0))!=0;
      if ($139) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $141=$self;
      var $142=(($141+8)|0);
      var $143=HEAP32[(($142)>>2)];
      _PyExpat_XML_SetCommentHandler($143, ((FUNCTION_TABLE_OFFSET + 70)));
      label = 18; break;
    case 18: 
      var $145=$self;
      var $146=(($145+44)|0);
      var $147=HEAP32[(($146)>>2)];
      var $148=(($147)|(0))!=0;
      if ($148) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $150=$self;
      var $151=(($150+8)|0);
      var $152=HEAP32[(($151)>>2)];
      _PyExpat_XML_SetProcessingInstructionHandler($152, ((FUNCTION_TABLE_OFFSET + 42)));
      label = 20; break;
    case 20: 
      var $154=$self;
      var $155=(($154+8)|0);
      var $156=HEAP32[(($155)>>2)];
      _PyExpat_XML_SetUnknownEncodingHandler($156, ((FUNCTION_TABLE_OFFSET + 12)), 0);
      var $157=$self;
      var $158=$157;
      $1=$158;
      label = 21; break;
    case 21: 
      var $160=$1;
      STACKTOP = __stackBase__;
      return $160;
    default: assert(0, "bad label: " + label);
  }
}
function _treebuilder_new() {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $self;
      var $2=__PyObject_New(_TreeBuilder_Type);
      var $3=$2;
      $self=$3;
      var $4=$self;
      var $5=(($4)|(0))==0;
      if ($5) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 4; break;
    case 3: 
      var $8=$self;
      var $9=(($8+8)|0);
      HEAP32[(($9)>>2)]=0;
      var $10=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $11=((($10)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$11;
      var $12=$self;
      var $13=(($12+12)|0);
      HEAP32[(($13)>>2)]=__Py_NoneStruct;
      var $14=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $15=((($14)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$15;
      var $16=$self;
      var $17=(($16+16)|0);
      HEAP32[(($17)>>2)]=__Py_NoneStruct;
      var $18=$self;
      var $19=(($18+20)|0);
      HEAP32[(($19)>>2)]=0;
      var $20=_PyList_New(20);
      var $21=$self;
      var $22=(($21+24)|0);
      HEAP32[(($22)>>2)]=$20;
      var $23=$self;
      var $24=(($23+28)|0);
      HEAP32[(($24)>>2)]=0;
      var $25=$self;
      var $26=(($25+32)|0);
      HEAP32[(($26)>>2)]=0;
      var $27=$self;
      var $28=(($27+40)|0);
      HEAP32[(($28)>>2)]=0;
      var $29=$self;
      var $30=(($29+36)|0);
      HEAP32[(($30)>>2)]=0;
      var $31=$self;
      var $32=(($31+48)|0);
      HEAP32[(($32)>>2)]=0;
      var $33=$self;
      var $34=(($33+44)|0);
      HEAP32[(($34)>>2)]=0;
      var $35=$self;
      var $36=$35;
      $1=$36;
      label = 4; break;
    case 4: 
      var $38=$1;
      return $38;
    default: assert(0, "bad label: " + label);
  }
}
function _expat_start_handler($self, $tag_in, $attrib_in) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $res;
      var $tag;
      var $attrib;
      var $ok;
      var $key;
      var $value;
      $1=$self;
      $2=$tag_in;
      $3=$attrib_in;
      var $4=$1;
      var $5=$2;
      var $6=_makeuniversal($4, $5);
      $tag=$6;
      var $7=$tag;
      var $8=(($7)|(0))!=0;
      if ($8) { label = 3; break; } else { label = 2; break; }
    case 2: 
      label = 93; break;
    case 3: 
      var $11=$3;
      var $12=(($11)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13)|(0))!=0;
      if ($14) { label = 4; break; } else { label = 57; break; }
    case 4: 
      var $16=_PyDict_New();
      $attrib=$16;
      var $17=$attrib;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 6; break; } else { label = 5; break; }
    case 5: 
      label = 93; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $22=$3;
      var $23=(($22)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24)|(0))!=0;
      if ($25) { label = 8; break; } else { var $32 = 0;label = 9; break; }
    case 8: 
      var $27=$3;
      var $28=(($27+4)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29)|(0))!=0;
      var $32 = $30;label = 9; break;
    case 9: 
      var $32;
      if ($32) { label = 10; break; } else { label = 56; break; }
    case 10: 
      var $34=$1;
      var $35=$3;
      var $36=(($35)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=_makeuniversal($34, $37);
      $key=$38;
      var $39=$3;
      var $40=(($39+4)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=$3;
      var $43=(($42+4)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=_strlen($44);
      var $46=_makestring($41, $45);
      $value=$46;
      var $47=$key;
      var $48=(($47)|(0))!=0;
      if ($48) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $50=$value;
      var $51=(($50)|(0))!=0;
      if ($51) { label = 38; break; } else { label = 12; break; }
    case 12: 
      label = 13; break;
    case 13: 
      var $54=$value;
      var $55=(($54)|(0))==0;
      if ($55) { label = 14; break; } else { label = 15; break; }
    case 14: 
      label = 21; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $59=$value;
      var $60=(($59)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=((($61)-(1))|0);
      HEAP32[(($60)>>2)]=$62;
      var $63=(($62)|(0))!=0;
      if ($63) { label = 17; break; } else { label = 18; break; }
    case 17: 
      label = 19; break;
    case 18: 
      var $66=$value;
      var $67=(($66+4)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=(($68+24)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=$value;
      FUNCTION_TABLE[$70]($71);
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $77=$key;
      var $78=(($77)|(0))==0;
      if ($78) { label = 24; break; } else { label = 25; break; }
    case 24: 
      label = 31; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $82=$key;
      var $83=(($82)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=((($84)-(1))|0);
      HEAP32[(($83)>>2)]=$85;
      var $86=(($85)|(0))!=0;
      if ($86) { label = 27; break; } else { label = 28; break; }
    case 27: 
      label = 29; break;
    case 28: 
      var $89=$key;
      var $90=(($89+4)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=(($91+24)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=$key;
      FUNCTION_TABLE[$93]($94);
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      var $100=$attrib;
      var $101=(($100)|0);
      var $102=HEAP32[(($101)>>2)];
      var $103=((($102)-(1))|0);
      HEAP32[(($101)>>2)]=$103;
      var $104=(($103)|(0))!=0;
      if ($104) { label = 34; break; } else { label = 35; break; }
    case 34: 
      label = 36; break;
    case 35: 
      var $107=$attrib;
      var $108=(($107+4)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=(($109+24)|0);
      var $111=HEAP32[(($110)>>2)];
      var $112=$attrib;
      FUNCTION_TABLE[$111]($112);
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 93; break;
    case 38: 
      var $116=$attrib;
      var $117=$key;
      var $118=$value;
      var $119=_PyDict_SetItem($116, $117, $118);
      $ok=$119;
      label = 39; break;
    case 39: 
      var $121=$value;
      var $122=(($121)|0);
      var $123=HEAP32[(($122)>>2)];
      var $124=((($123)-(1))|0);
      HEAP32[(($122)>>2)]=$124;
      var $125=(($124)|(0))!=0;
      if ($125) { label = 40; break; } else { label = 41; break; }
    case 40: 
      label = 42; break;
    case 41: 
      var $128=$value;
      var $129=(($128+4)|0);
      var $130=HEAP32[(($129)>>2)];
      var $131=(($130+24)|0);
      var $132=HEAP32[(($131)>>2)];
      var $133=$value;
      FUNCTION_TABLE[$132]($133);
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      var $137=$key;
      var $138=(($137)|0);
      var $139=HEAP32[(($138)>>2)];
      var $140=((($139)-(1))|0);
      HEAP32[(($138)>>2)]=$140;
      var $141=(($140)|(0))!=0;
      if ($141) { label = 45; break; } else { label = 46; break; }
    case 45: 
      label = 47; break;
    case 46: 
      var $144=$key;
      var $145=(($144+4)|0);
      var $146=HEAP32[(($145)>>2)];
      var $147=(($146+24)|0);
      var $148=HEAP32[(($147)>>2)];
      var $149=$key;
      FUNCTION_TABLE[$148]($149);
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      var $152=$ok;
      var $153=(($152)|(0)) < 0;
      if ($153) { label = 49; break; } else { label = 55; break; }
    case 49: 
      label = 50; break;
    case 50: 
      var $156=$attrib;
      var $157=(($156)|0);
      var $158=HEAP32[(($157)>>2)];
      var $159=((($158)-(1))|0);
      HEAP32[(($157)>>2)]=$159;
      var $160=(($159)|(0))!=0;
      if ($160) { label = 51; break; } else { label = 52; break; }
    case 51: 
      label = 53; break;
    case 52: 
      var $163=$attrib;
      var $164=(($163+4)|0);
      var $165=HEAP32[(($164)>>2)];
      var $166=(($165+24)|0);
      var $167=HEAP32[(($166)>>2)];
      var $168=$attrib;
      FUNCTION_TABLE[$167]($168);
      label = 53; break;
    case 53: 
      label = 54; break;
    case 54: 
      label = 93; break;
    case 55: 
      var $172=$3;
      var $173=(($172+8)|0);
      $3=$173;
      label = 7; break;
    case 56: 
      label = 58; break;
    case 57: 
      var $176=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $177=((($176)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$177;
      $attrib=__Py_NoneStruct;
      label = 58; break;
    case 58: 
      var $179=$1;
      var $180=(($179+12)|0);
      var $181=HEAP32[(($180)>>2)];
      var $182=(($181+4)|0);
      var $183=HEAP32[(($182)>>2)];
      var $184=(($183)|(0))==((_TreeBuilder_Type)|(0));
      if ($184) { label = 59; break; } else { label = 60; break; }
    case 59: 
      var $186=$1;
      var $187=(($186+12)|0);
      var $188=HEAP32[(($187)>>2)];
      var $189=$188;
      var $190=$tag;
      var $191=$attrib;
      var $192=_treebuilder_handle_start($189, $190, $191);
      $res=$192;
      label = 73; break;
    case 60: 
      var $194=$1;
      var $195=(($194+28)|0);
      var $196=HEAP32[(($195)>>2)];
      var $197=(($196)|(0))!=0;
      if ($197) { label = 61; break; } else { label = 71; break; }
    case 61: 
      var $199=$attrib;
      var $200=(($199)|(0))==((__Py_NoneStruct)|(0));
      if ($200) { label = 62; break; } else { label = 70; break; }
    case 62: 
      label = 63; break;
    case 63: 
      var $203=$attrib;
      var $204=(($203)|0);
      var $205=HEAP32[(($204)>>2)];
      var $206=((($205)-(1))|0);
      HEAP32[(($204)>>2)]=$206;
      var $207=(($206)|(0))!=0;
      if ($207) { label = 64; break; } else { label = 65; break; }
    case 64: 
      label = 66; break;
    case 65: 
      var $210=$attrib;
      var $211=(($210+4)|0);
      var $212=HEAP32[(($211)>>2)];
      var $213=(($212+24)|0);
      var $214=HEAP32[(($213)>>2)];
      var $215=$attrib;
      FUNCTION_TABLE[$214]($215);
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      var $218=_PyDict_New();
      $attrib=$218;
      var $219=$attrib;
      var $220=(($219)|(0))!=0;
      if ($220) { label = 69; break; } else { label = 68; break; }
    case 68: 
      label = 93; break;
    case 69: 
      label = 70; break;
    case 70: 
      var $224=$1;
      var $225=(($224+28)|0);
      var $226=HEAP32[(($225)>>2)];
      var $227=$tag;
      var $228=$attrib;
      var $229=_PyObject_CallFunction($226, ((__str78)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$227,HEAP32[(((tempInt)+(4))>>2)]=$228,tempInt));
      $res=$229;
      label = 72; break;
    case 71: 
      $res=0;
      label = 72; break;
    case 72: 
      label = 73; break;
    case 73: 
      label = 74; break;
    case 74: 
      var $234=$tag;
      var $235=(($234)|0);
      var $236=HEAP32[(($235)>>2)];
      var $237=((($236)-(1))|0);
      HEAP32[(($235)>>2)]=$237;
      var $238=(($237)|(0))!=0;
      if ($238) { label = 75; break; } else { label = 76; break; }
    case 75: 
      label = 77; break;
    case 76: 
      var $241=$tag;
      var $242=(($241+4)|0);
      var $243=HEAP32[(($242)>>2)];
      var $244=(($243+24)|0);
      var $245=HEAP32[(($244)>>2)];
      var $246=$tag;
      FUNCTION_TABLE[$245]($246);
      label = 77; break;
    case 77: 
      label = 78; break;
    case 78: 
      label = 79; break;
    case 79: 
      var $250=$attrib;
      var $251=(($250)|0);
      var $252=HEAP32[(($251)>>2)];
      var $253=((($252)-(1))|0);
      HEAP32[(($251)>>2)]=$253;
      var $254=(($253)|(0))!=0;
      if ($254) { label = 80; break; } else { label = 81; break; }
    case 80: 
      label = 82; break;
    case 81: 
      var $257=$attrib;
      var $258=(($257+4)|0);
      var $259=HEAP32[(($258)>>2)];
      var $260=(($259+24)|0);
      var $261=HEAP32[(($260)>>2)];
      var $262=$attrib;
      FUNCTION_TABLE[$261]($262);
      label = 82; break;
    case 82: 
      label = 83; break;
    case 83: 
      label = 84; break;
    case 84: 
      var $266=$res;
      var $267=(($266)|(0))==0;
      if ($267) { label = 85; break; } else { label = 86; break; }
    case 85: 
      label = 92; break;
    case 86: 
      label = 87; break;
    case 87: 
      var $271=$res;
      var $272=(($271)|0);
      var $273=HEAP32[(($272)>>2)];
      var $274=((($273)-(1))|0);
      HEAP32[(($272)>>2)]=$274;
      var $275=(($274)|(0))!=0;
      if ($275) { label = 88; break; } else { label = 89; break; }
    case 88: 
      label = 90; break;
    case 89: 
      var $278=$res;
      var $279=(($278+4)|0);
      var $280=HEAP32[(($279)>>2)];
      var $281=(($280+24)|0);
      var $282=HEAP32[(($281)>>2)];
      var $283=$res;
      FUNCTION_TABLE[$282]($283);
      label = 90; break;
    case 90: 
      label = 91; break;
    case 91: 
      label = 92; break;
    case 92: 
      label = 93; break;
    case 93: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _expat_end_handler($self, $tag_in) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $tag;
      var $res;
      $1=$self;
      $2=$tag_in;
      $res=0;
      var $3=$1;
      var $4=(($3+12)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5+4)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|(0))==((_TreeBuilder_Type)|(0));
      if ($8) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $10=$1;
      var $11=(($10+12)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=$12;
      var $14=_treebuilder_handle_end($13, __Py_NoneStruct);
      $res=$14;
      label = 13; break;
    case 3: 
      var $16=$1;
      var $17=(($16+36)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18)|(0))!=0;
      if ($19) { label = 4; break; } else { label = 12; break; }
    case 4: 
      var $21=$1;
      var $22=$2;
      var $23=_makeuniversal($21, $22);
      $tag=$23;
      var $24=$tag;
      var $25=(($24)|(0))!=0;
      if ($25) { label = 5; break; } else { label = 11; break; }
    case 5: 
      var $27=$1;
      var $28=(($27+36)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=$tag;
      var $31=_PyObject_CallFunction($29, ((__str80)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$30,tempInt));
      $res=$31;
      label = 6; break;
    case 6: 
      var $33=$tag;
      var $34=(($33)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=((($35)-(1))|0);
      HEAP32[(($34)>>2)]=$36;
      var $37=(($36)|(0))!=0;
      if ($37) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 9; break;
    case 8: 
      var $40=$tag;
      var $41=(($40+4)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($42+24)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=$tag;
      FUNCTION_TABLE[$44]($45);
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $52=$res;
      var $53=(($52)|(0))==0;
      if ($53) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 22; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $57=$res;
      var $58=(($57)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=((($59)-(1))|0);
      HEAP32[(($58)>>2)]=$60;
      var $61=(($60)|(0))!=0;
      if ($61) { label = 18; break; } else { label = 19; break; }
    case 18: 
      label = 20; break;
    case 19: 
      var $64=$res;
      var $65=(($64+4)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66+24)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=$res;
      FUNCTION_TABLE[$68]($69);
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _checkstring($string, $size) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $i;
      $2=$string;
      $3=$size;
      $i=0;
      label = 2; break;
    case 2: 
      var $5=$i;
      var $6=$3;
      var $7=(($5)|(0)) < (($6)|(0));
      if ($7) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $9=$i;
      var $10=$2;
      var $11=(($10+$9)|0);
      var $12=HEAP8[($11)];
      var $13=(($12 << 24) >> 24);
      var $14=$13 & 128;
      var $15=(($14)|(0))!=0;
      if ($15) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=1;
      label = 8; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $19=$i;
      var $20=((($19)+(1))|0);
      $i=$20;
      label = 2; break;
    case 7: 
      $1=0;
      label = 8; break;
    case 8: 
      var $23=$1;
      return $23;
    default: assert(0, "bad label: " + label);
  }
}
function _expat_default_handler($self, $data_in, $data_len) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 128)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $key;
      var $value;
      var $res;
      var $message=__stackBase__;
      $1=$self;
      $2=$data_in;
      $3=$data_len;
      var $4=$3;
      var $5=(($4)|(0)) < 2;
      if ($5) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $7=$2;
      var $8=(($7)|0);
      var $9=HEAP8[($8)];
      var $10=(($9 << 24) >> 24);
      var $11=(($10)|(0))!=38;
      if ($11) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 32; break;
    case 4: 
      var $14=$2;
      var $15=(($14+1)|0);
      var $16=$3;
      var $17=((($16)-(2))|0);
      var $18=_makestring($15, $17);
      $key=$18;
      var $19=$key;
      var $20=(($19)|(0))!=0;
      if ($20) { label = 6; break; } else { label = 5; break; }
    case 5: 
      label = 32; break;
    case 6: 
      var $23=$1;
      var $24=(($23+16)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=$key;
      var $27=_PyDict_GetItem($25, $26);
      $value=$27;
      var $28=$value;
      var $29=(($28)|(0))!=0;
      if ($29) { label = 7; break; } else { label = 24; break; }
    case 7: 
      var $31=$1;
      var $32=(($31+12)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33+4)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35)|(0))==((_TreeBuilder_Type)|(0));
      if ($36) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $38=$1;
      var $39=(($38+12)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=$40;
      var $42=$value;
      var $43=_treebuilder_handle_data($41, $42);
      $res=$43;
      label = 13; break;
    case 9: 
      var $45=$1;
      var $46=(($45+32)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=(($47)|(0))!=0;
      if ($48) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $50=$1;
      var $51=(($50+32)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=$value;
      var $54=_PyObject_CallFunction($52, ((__str80)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$53,tempInt));
      $res=$54;
      label = 12; break;
    case 11: 
      $res=0;
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $59=$res;
      var $60=(($59)|(0))==0;
      if ($60) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 22; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $64=$res;
      var $65=(($64)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=((($66)-(1))|0);
      HEAP32[(($65)>>2)]=$67;
      var $68=(($67)|(0))!=0;
      if ($68) { label = 18; break; } else { label = 19; break; }
    case 18: 
      label = 20; break;
    case 19: 
      var $71=$res;
      var $72=(($71+4)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=(($73+24)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=$res;
      FUNCTION_TABLE[$75]($76);
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      label = 27; break;
    case 24: 
      var $82=_PyErr_Occurred();
      var $83=(($82)|(0))!=0;
      if ($83) { label = 26; break; } else { label = 25; break; }
    case 25: 
      var $85=(($message)|0);
      var $86=$key;
      var $87=$86;
      var $88=(($87+20)|0);
      var $89=(($88)|0);
      var $90=_sprintf($85, ((__str81)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$89,tempInt));
      var $91=(($message)|0);
      var $92=$1;
      var $93=(($92+8)|0);
      var $94=HEAP32[(($93)>>2)];
      var $95=_PyExpat_XML_GetCurrentLineNumber($94);
      var $96=$1;
      var $97=(($96+8)|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=_PyExpat_XML_GetCurrentColumnNumber($98);
      _expat_set_error($91, $95, $99);
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      var $103=$key;
      var $104=(($103)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=((($105)-(1))|0);
      HEAP32[(($104)>>2)]=$106;
      var $107=(($106)|(0))!=0;
      if ($107) { label = 29; break; } else { label = 30; break; }
    case 29: 
      label = 31; break;
    case 30: 
      var $110=$key;
      var $111=(($110+4)|0);
      var $112=HEAP32[(($111)>>2)];
      var $113=(($112+24)|0);
      var $114=HEAP32[(($113)>>2)];
      var $115=$key;
      FUNCTION_TABLE[$114]($115);
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _expat_data_handler($self, $data_in, $data_len) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $data;
      var $res;
      $1=$self;
      $2=$data_in;
      $3=$data_len;
      var $4=$2;
      var $5=$3;
      var $6=_makestring($4, $5);
      $data=$6;
      var $7=$data;
      var $8=(($7)|(0))!=0;
      if ($8) { label = 3; break; } else { label = 2; break; }
    case 2: 
      label = 24; break;
    case 3: 
      var $11=$1;
      var $12=(($11+12)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13+4)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15)|(0))==((_TreeBuilder_Type)|(0));
      if ($16) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $18=$1;
      var $19=(($18+12)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=$20;
      var $22=$data;
      var $23=_treebuilder_handle_data($21, $22);
      $res=$23;
      label = 9; break;
    case 5: 
      var $25=$1;
      var $26=(($25+32)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27)|(0))!=0;
      if ($28) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $30=$1;
      var $31=(($30+32)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=$data;
      var $34=_PyObject_CallFunction($32, ((__str80)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$33,tempInt));
      $res=$34;
      label = 8; break;
    case 7: 
      $res=0;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $39=$data;
      var $40=(($39)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=((($41)-(1))|0);
      HEAP32[(($40)>>2)]=$42;
      var $43=(($42)|(0))!=0;
      if ($43) { label = 11; break; } else { label = 12; break; }
    case 11: 
      label = 13; break;
    case 12: 
      var $46=$data;
      var $47=(($46+4)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=(($48+24)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=$data;
      FUNCTION_TABLE[$50]($51);
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $55=$res;
      var $56=(($55)|(0))==0;
      if ($56) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 23; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $60=$res;
      var $61=(($60)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=((($62)-(1))|0);
      HEAP32[(($61)>>2)]=$63;
      var $64=(($63)|(0))!=0;
      if ($64) { label = 19; break; } else { label = 20; break; }
    case 19: 
      label = 21; break;
    case 20: 
      var $67=$res;
      var $68=(($67+4)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=(($69+24)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=$res;
      FUNCTION_TABLE[$71]($72);
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _expat_comment_handler($self, $comment_in) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $comment;
      var $res;
      $1=$self;
      $2=$comment_in;
      var $3=$1;
      var $4=(($3+40)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))!=0;
      if ($6) { label = 2; break; } else { label = 20; break; }
    case 2: 
      var $8=$2;
      var $9=$2;
      var $10=_strlen($9);
      var $11=_makestring($8, $10);
      $comment=$11;
      var $12=$comment;
      var $13=(($12)|(0))!=0;
      if ($13) { label = 3; break; } else { label = 19; break; }
    case 3: 
      var $15=$1;
      var $16=(($15+40)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=$comment;
      var $19=_PyObject_CallFunction($17, ((__str80)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$18,tempInt));
      $res=$19;
      label = 4; break;
    case 4: 
      var $21=$res;
      var $22=(($21)|(0))==0;
      if ($22) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 12; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $26=$res;
      var $27=(($26)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=((($28)-(1))|0);
      HEAP32[(($27)>>2)]=$29;
      var $30=(($29)|(0))!=0;
      if ($30) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 10; break;
    case 9: 
      var $33=$res;
      var $34=(($33+4)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35+24)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=$res;
      FUNCTION_TABLE[$37]($38);
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $44=$comment;
      var $45=(($44)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=((($46)-(1))|0);
      HEAP32[(($45)>>2)]=$47;
      var $48=(($47)|(0))!=0;
      if ($48) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 17; break;
    case 16: 
      var $51=$comment;
      var $52=(($51+4)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=(($53+24)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=$comment;
      FUNCTION_TABLE[$55]($56);
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _expat_pi_handler($self, $target_in, $data_in) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $target;
      var $data;
      var $res;
      $1=$self;
      $2=$target_in;
      $3=$data_in;
      var $4=$1;
      var $5=(($4+44)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0))!=0;
      if ($7) { label = 2; break; } else { label = 47; break; }
    case 2: 
      var $9=$2;
      var $10=$2;
      var $11=_strlen($10);
      var $12=_makestring($9, $11);
      $target=$12;
      var $13=$3;
      var $14=$3;
      var $15=_strlen($14);
      var $16=_makestring($13, $15);
      $data=$16;
      var $17=$target;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 3; break; } else { label = 25; break; }
    case 3: 
      var $20=$data;
      var $21=(($20)|(0))!=0;
      if ($21) { label = 4; break; } else { label = 25; break; }
    case 4: 
      var $23=$1;
      var $24=(($23+44)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=$target;
      var $27=$data;
      var $28=_PyObject_CallFunction($25, ((__str78)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$26,HEAP32[(((tempInt)+(4))>>2)]=$27,tempInt));
      $res=$28;
      label = 5; break;
    case 5: 
      var $30=$res;
      var $31=(($30)|(0))==0;
      if ($31) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 13; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $35=$res;
      var $36=(($35)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=((($37)-(1))|0);
      HEAP32[(($36)>>2)]=$38;
      var $39=(($38)|(0))!=0;
      if ($39) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 11; break;
    case 10: 
      var $42=$res;
      var $43=(($42+4)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=(($44+24)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=$res;
      FUNCTION_TABLE[$46]($47);
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $53=$data;
      var $54=(($53)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=((($55)-(1))|0);
      HEAP32[(($54)>>2)]=$56;
      var $57=(($56)|(0))!=0;
      if ($57) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 18; break;
    case 17: 
      var $60=$data;
      var $61=(($60+4)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=(($62+24)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=$data;
      FUNCTION_TABLE[$64]($65);
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $69=$target;
      var $70=(($69)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=((($71)-(1))|0);
      HEAP32[(($70)>>2)]=$72;
      var $73=(($72)|(0))!=0;
      if ($73) { label = 21; break; } else { label = 22; break; }
    case 21: 
      label = 23; break;
    case 22: 
      var $76=$target;
      var $77=(($76+4)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=(($78+24)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=$target;
      FUNCTION_TABLE[$80]($81);
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      label = 46; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $86=$data;
      var $87=(($86)|(0))==0;
      if ($87) { label = 27; break; } else { label = 28; break; }
    case 27: 
      label = 34; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $91=$data;
      var $92=(($91)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=((($93)-(1))|0);
      HEAP32[(($92)>>2)]=$94;
      var $95=(($94)|(0))!=0;
      if ($95) { label = 30; break; } else { label = 31; break; }
    case 30: 
      label = 32; break;
    case 31: 
      var $98=$data;
      var $99=(($98+4)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=(($100+24)|0);
      var $102=HEAP32[(($101)>>2)];
      var $103=$data;
      FUNCTION_TABLE[$102]($103);
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $109=$target;
      var $110=(($109)|(0))==0;
      if ($110) { label = 37; break; } else { label = 38; break; }
    case 37: 
      label = 44; break;
    case 38: 
      label = 39; break;
    case 39: 
      var $114=$target;
      var $115=(($114)|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=((($116)-(1))|0);
      HEAP32[(($115)>>2)]=$117;
      var $118=(($117)|(0))!=0;
      if ($118) { label = 40; break; } else { label = 41; break; }
    case 40: 
      label = 42; break;
    case 41: 
      var $121=$target;
      var $122=(($121+4)|0);
      var $123=HEAP32[(($122)>>2)];
      var $124=(($123+24)|0);
      var $125=HEAP32[(($124)>>2)];
      var $126=$target;
      FUNCTION_TABLE[$125]($126);
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _expat_unknown_encoding_handler($self, $name, $info) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 256)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $u;
      var $p;
      var $s=__stackBase__;
      var $i;
      $2=$self;
      $3=$name;
      $4=$info;
      var $5=$4;
      var $6=$5;
      _memset($6, 0, 1036);
      $i=0;
      label = 2; break;
    case 2: 
      var $8=$i;
      var $9=(($8)|(0)) < 256;
      if ($9) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $11=$i;
      var $12=(($11) & 255);
      var $13=$i;
      var $14=(($s+$13)|0);
      HEAP8[($14)]=$12;
      label = 4; break;
    case 4: 
      var $16=$i;
      var $17=((($16)+(1))|0);
      $i=$17;
      label = 2; break;
    case 5: 
      var $19=(($s)|0);
      var $20=$3;
      var $21=_PyUnicodeUCS2_Decode($19, 256, $20, ((__str77)|0));
      $u=$21;
      var $22=$u;
      var $23=(($22)|(0))!=0;
      if ($23) { label = 7; break; } else { label = 6; break; }
    case 6: 
      $1=0;
      label = 27; break;
    case 7: 
      var $26=$u;
      var $27=$26;
      var $28=(($27+8)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29)|(0))!=256;
      if ($30) { label = 8; break; } else { label = 14; break; }
    case 8: 
      label = 9; break;
    case 9: 
      var $33=$u;
      var $34=(($33)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=((($35)-(1))|0);
      HEAP32[(($34)>>2)]=$36;
      var $37=(($36)|(0))!=0;
      if ($37) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 12; break;
    case 11: 
      var $40=$u;
      var $41=(($40+4)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($42+24)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=$u;
      FUNCTION_TABLE[$44]($45);
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      $1=0;
      label = 27; break;
    case 14: 
      var $49=$u;
      var $50=$49;
      var $51=(($50+12)|0);
      var $52=HEAP32[(($51)>>2)];
      $p=$52;
      $i=0;
      label = 15; break;
    case 15: 
      var $54=$i;
      var $55=(($54)|(0)) < 256;
      if ($55) { label = 16; break; } else { label = 21; break; }
    case 16: 
      var $57=$i;
      var $58=$p;
      var $59=(($58+($57<<1))|0);
      var $60=HEAP16[(($59)>>1)];
      var $61=(($60)&(65535));
      var $62=(($61)|(0))!=65533;
      if ($62) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $64=$i;
      var $65=$p;
      var $66=(($65+($64<<1))|0);
      var $67=HEAP16[(($66)>>1)];
      var $68=(($67)&(65535));
      var $69=$i;
      var $70=$4;
      var $71=(($70)|0);
      var $72=(($71+($69<<2))|0);
      HEAP32[(($72)>>2)]=$68;
      label = 19; break;
    case 18: 
      var $74=$i;
      var $75=$4;
      var $76=(($75)|0);
      var $77=(($76+($74<<2))|0);
      HEAP32[(($77)>>2)]=-1;
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $80=$i;
      var $81=((($80)+(1))|0);
      $i=$81;
      label = 15; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $84=$u;
      var $85=(($84)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=((($86)-(1))|0);
      HEAP32[(($85)>>2)]=$87;
      var $88=(($87)|(0))!=0;
      if ($88) { label = 23; break; } else { label = 24; break; }
    case 23: 
      label = 25; break;
    case 24: 
      var $91=$u;
      var $92=(($91+4)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=(($93+24)|0);
      var $95=HEAP32[(($94)>>2)];
      var $96=$u;
      FUNCTION_TABLE[$95]($96);
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      $1=1;
      label = 27; break;
    case 27: 
      var $100=$1;
      STACKTOP = __stackBase__;
      return $100;
    default: assert(0, "bad label: " + label);
  }
}
function _makestring($string, $size) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$string;
      $3=$size;
      var $4=$2;
      var $5=$3;
      var $6=_checkstring($4, $5);
      var $7=(($6)|(0))!=0;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $9=$2;
      var $10=$3;
      var $11=_PyUnicodeUCS2_DecodeUTF8($9, $10, ((__str79)|0));
      $1=$11;
      label = 4; break;
    case 3: 
      var $13=$2;
      var $14=$3;
      var $15=_PyString_FromStringAndSize($13, $14);
      $1=$15;
      label = 4; break;
    case 4: 
      var $17=$1;
      return $17;
    default: assert(0, "bad label: " + label);
  }
}
function _treebuilder_handle_data($self, $data) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $size;
      var $list;
      $2=$self;
      $3=$data;
      var $4=$2;
      var $5=(($4+20)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0))!=0;
      if ($7) { label = 5; break; } else { label = 2; break; }
    case 2: 
      var $9=$2;
      var $10=(($9+16)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))==((__Py_NoneStruct)|(0));
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $15=((($14)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$15;
      $1=__Py_NoneStruct;
      label = 22; break;
    case 4: 
      var $17=$3;
      var $18=(($17)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=((($19)+(1))|0);
      HEAP32[(($18)>>2)]=$20;
      var $21=$3;
      var $22=$2;
      var $23=(($22+20)|0);
      HEAP32[(($23)>>2)]=$21;
      label = 21; break;
    case 5: 
      var $25=$2;
      var $26=(($25+20)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27+4)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29)|(0))==((_PyString_Type)|(0));
      if ($30) { label = 6; break; } else { label = 12; break; }
    case 6: 
      var $32=$2;
      var $33=(($32+20)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($34)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36)|(0))==1;
      if ($37) { label = 7; break; } else { label = 12; break; }
    case 7: 
      var $39=$3;
      var $40=(($39+4)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($41)|(0))==((_PyString_Type)|(0));
      if ($42) { label = 8; break; } else { label = 12; break; }
    case 8: 
      var $44=$3;
      var $45=$44;
      var $46=(($45+8)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=(($47)|(0))==1;
      if ($48) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $50=$2;
      var $51=(($50+20)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=$52;
      var $54=(($53+8)|0);
      var $55=HEAP32[(($54)>>2)];
      $size=$55;
      var $56=$2;
      var $57=(($56+20)|0);
      var $58=$size;
      var $59=((($58)+(1))|0);
      var $60=__PyString_Resize($57, $59);
      var $61=(($60)|(0)) < 0;
      if ($61) { label = 10; break; } else { label = 11; break; }
    case 10: 
      $1=0;
      label = 22; break;
    case 11: 
      var $64=$3;
      var $65=$64;
      var $66=(($65+20)|0);
      var $67=(($66)|0);
      var $68=HEAP8[($67)];
      var $69=$size;
      var $70=$2;
      var $71=(($70+20)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=$72;
      var $74=(($73+20)|0);
      var $75=(($74+$69)|0);
      HEAP8[($75)]=$68;
      label = 20; break;
    case 12: 
      var $77=$2;
      var $78=(($77+20)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=(($79+4)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=(($81)|(0))==((_PyList_Type)|(0));
      if ($82) { label = 13; break; } else { label = 16; break; }
    case 13: 
      var $84=$2;
      var $85=(($84+20)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=$3;
      var $88=_PyList_Append($86, $87);
      var $89=(($88)|(0)) < 0;
      if ($89) { label = 14; break; } else { label = 15; break; }
    case 14: 
      $1=0;
      label = 22; break;
    case 15: 
      label = 19; break;
    case 16: 
      var $93=_PyList_New(2);
      $list=$93;
      var $94=$list;
      var $95=(($94)|(0))!=0;
      if ($95) { label = 18; break; } else { label = 17; break; }
    case 17: 
      $1=0;
      label = 22; break;
    case 18: 
      var $98=$2;
      var $99=(($98+20)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=$list;
      var $102=$101;
      var $103=(($102+12)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=(($104)|0);
      HEAP32[(($105)>>2)]=$100;
      var $106=$3;
      var $107=(($106)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=((($108)+(1))|0);
      HEAP32[(($107)>>2)]=$109;
      var $110=$3;
      var $111=$list;
      var $112=$111;
      var $113=(($112+12)|0);
      var $114=HEAP32[(($113)>>2)];
      var $115=(($114+4)|0);
      HEAP32[(($115)>>2)]=$110;
      var $116=$list;
      var $117=$2;
      var $118=(($117+20)|0);
      HEAP32[(($118)>>2)]=$116;
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $122=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $123=((($122)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$123;
      $1=__Py_NoneStruct;
      label = 22; break;
    case 22: 
      var $125=$1;
      return $125;
    default: assert(0, "bad label: " + label);
  }
}
function _expat_set_error($message, $line, $column) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 256)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $error;
      var $position;
      var $buffer=__stackBase__;
      $1=$message;
      $2=$line;
      $3=$column;
      var $4=(($buffer)|0);
      var $5=$1;
      var $6=$2;
      var $7=$3;
      var $8=_sprintf($4, ((__str82)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$5,HEAP32[(((tempInt)+(4))>>2)]=$6,HEAP32[(((tempInt)+(8))>>2)]=$7,tempInt));
      var $9=HEAP32[((_elementtree_parseerror_obj)>>2)];
      var $10=(($buffer)|0);
      var $11=_PyObject_CallFunction($9, ((__str83)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$10,tempInt));
      $error=$11;
      var $12=$error;
      var $13=(($12)|(0))!=0;
      if ($13) { label = 3; break; } else { label = 2; break; }
    case 2: 
      label = 32; break;
    case 3: 
      var $16=$2;
      var $17=$3;
      var $18=_Py_BuildValue(((__str84)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$16,HEAP32[(((tempInt)+(4))>>2)]=$17,tempInt));
      $position=$18;
      var $19=$position;
      var $20=(($19)|(0))!=0;
      if ($20) { label = 10; break; } else { label = 4; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $23=$error;
      var $24=(($23)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=((($25)-(1))|0);
      HEAP32[(($24)>>2)]=$26;
      var $27=(($26)|(0))!=0;
      if ($27) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 8; break;
    case 7: 
      var $30=$error;
      var $31=(($30+4)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32+24)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=$error;
      FUNCTION_TABLE[$34]($35);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 32; break;
    case 10: 
      var $39=$error;
      var $40=$position;
      var $41=_PyObject_SetAttrString($39, ((__str85)|0), $40);
      var $42=(($41)|(0))==-1;
      if ($42) { label = 11; break; } else { label = 22; break; }
    case 11: 
      label = 12; break;
    case 12: 
      var $45=$error;
      var $46=(($45)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=((($47)-(1))|0);
      HEAP32[(($46)>>2)]=$48;
      var $49=(($48)|(0))!=0;
      if ($49) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 15; break;
    case 14: 
      var $52=$error;
      var $53=(($52+4)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54+24)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=$error;
      FUNCTION_TABLE[$56]($57);
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $61=$position;
      var $62=(($61)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=((($63)-(1))|0);
      HEAP32[(($62)>>2)]=$64;
      var $65=(($64)|(0))!=0;
      if ($65) { label = 18; break; } else { label = 19; break; }
    case 18: 
      label = 20; break;
    case 19: 
      var $68=$position;
      var $69=(($68+4)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=(($70+24)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=$position;
      FUNCTION_TABLE[$72]($73);
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 32; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $78=$position;
      var $79=(($78)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=((($80)-(1))|0);
      HEAP32[(($79)>>2)]=$81;
      var $82=(($81)|(0))!=0;
      if ($82) { label = 24; break; } else { label = 25; break; }
    case 24: 
      label = 26; break;
    case 25: 
      var $85=$position;
      var $86=(($85+4)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=(($87+24)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=$position;
      FUNCTION_TABLE[$89]($90);
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $93=HEAP32[((_elementtree_parseerror_obj)>>2)];
      var $94=$error;
      _PyErr_SetObject($93, $94);
      label = 28; break;
    case 28: 
      var $96=$error;
      var $97=(($96)|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=((($98)-(1))|0);
      HEAP32[(($97)>>2)]=$99;
      var $100=(($99)|(0))!=0;
      if ($100) { label = 29; break; } else { label = 30; break; }
    case 29: 
      label = 31; break;
    case 30: 
      var $103=$error;
      var $104=(($103+4)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=(($105+24)|0);
      var $107=HEAP32[(($106)>>2)];
      var $108=$error;
      FUNCTION_TABLE[$107]($108);
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _treebuilder_handle_end($self, $tag) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $item;
      var $res;
      var $action;
      var $node;
      $2=$self;
      $3=$tag;
      var $4=$2;
      var $5=(($4+20)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0))!=0;
      if ($7) { label = 2; break; } else { label = 16; break; }
    case 2: 
      var $9=$2;
      var $10=(($9+12)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=$2;
      var $13=(($12+16)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($11)|(0))==(($14)|(0));
      if ($15) { label = 3; break; } else { label = 9; break; }
    case 3: 
      label = 4; break;
    case 4: 
      var $18=$2;
      var $19=(($18+16)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20+12)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=$22;
      var $24=$23 & -2;
      var $25=$24;
      var $26=(($25)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=((($27)-(1))|0);
      HEAP32[(($26)>>2)]=$28;
      var $29=(($28)|(0))!=0;
      if ($29) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 7; break;
    case 6: 
      var $32=$2;
      var $33=(($32+16)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($34+12)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=$36;
      var $38=$37 & -2;
      var $39=$38;
      var $40=(($39+4)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($41+24)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=$2;
      var $45=(($44+16)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46+12)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=$48;
      var $50=$49 & -2;
      var $51=$50;
      FUNCTION_TABLE[$43]($51);
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $54=$2;
      var $55=(($54+20)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=$56;
      var $58=$57 & -2;
      var $59=$58;
      var $60=$59;
      var $61=$2;
      var $62=(($61+20)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=(($63+4)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=(($65)|(0))==((_PyList_Type)|(0));
      var $67=(($66)&(1));
      var $68=$60 | $67;
      var $69=$68;
      var $70=$69;
      var $71=$2;
      var $72=(($71+16)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=(($73+12)|0);
      HEAP32[(($74)>>2)]=$70;
      label = 15; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $77=$2;
      var $78=(($77+16)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=(($79+16)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=$81;
      var $83=$82 & -2;
      var $84=$83;
      var $85=(($84)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=((($86)-(1))|0);
      HEAP32[(($85)>>2)]=$87;
      var $88=(($87)|(0))!=0;
      if ($88) { label = 11; break; } else { label = 12; break; }
    case 11: 
      label = 13; break;
    case 12: 
      var $91=$2;
      var $92=(($91+16)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=(($93+16)|0);
      var $95=HEAP32[(($94)>>2)];
      var $96=$95;
      var $97=$96 & -2;
      var $98=$97;
      var $99=(($98+4)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=(($100+24)|0);
      var $102=HEAP32[(($101)>>2)];
      var $103=$2;
      var $104=(($103+16)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=(($105+16)|0);
      var $107=HEAP32[(($106)>>2)];
      var $108=$107;
      var $109=$108 & -2;
      var $110=$109;
      FUNCTION_TABLE[$102]($110);
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $113=$2;
      var $114=(($113+20)|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=$115;
      var $117=$116 & -2;
      var $118=$117;
      var $119=$118;
      var $120=$2;
      var $121=(($120+20)|0);
      var $122=HEAP32[(($121)>>2)];
      var $123=(($122+4)|0);
      var $124=HEAP32[(($123)>>2)];
      var $125=(($124)|(0))==((_PyList_Type)|(0));
      var $126=(($125)&(1));
      var $127=$119 | $126;
      var $128=$127;
      var $129=$128;
      var $130=$2;
      var $131=(($130+16)|0);
      var $132=HEAP32[(($131)>>2)];
      var $133=(($132+16)|0);
      HEAP32[(($133)>>2)]=$129;
      label = 15; break;
    case 15: 
      var $135=$2;
      var $136=(($135+20)|0);
      HEAP32[(($136)>>2)]=0;
      label = 16; break;
    case 16: 
      var $138=$2;
      var $139=(($138+28)|0);
      var $140=HEAP32[(($139)>>2)];
      var $141=(($140)|(0))==0;
      if ($141) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $143=HEAP32[((_PyExc_IndexError)>>2)];
      _PyErr_SetString($143, ((__str86)|0));
      $1=0;
      label = 34; break;
    case 18: 
      var $145=$2;
      var $146=(($145+28)|0);
      var $147=HEAP32[(($146)>>2)];
      var $148=((($147)-(1))|0);
      HEAP32[(($146)>>2)]=$148;
      var $149=$2;
      var $150=(($149+28)|0);
      var $151=HEAP32[(($150)>>2)];
      var $152=$2;
      var $153=(($152+24)|0);
      var $154=HEAP32[(($153)>>2)];
      var $155=$154;
      var $156=(($155+12)|0);
      var $157=HEAP32[(($156)>>2)];
      var $158=(($157+($151<<2))|0);
      var $159=HEAP32[(($158)>>2)];
      $item=$159;
      var $160=$item;
      var $161=(($160)|0);
      var $162=HEAP32[(($161)>>2)];
      var $163=((($162)+(1))|0);
      HEAP32[(($161)>>2)]=$163;
      label = 19; break;
    case 19: 
      var $165=$2;
      var $166=(($165+16)|0);
      var $167=HEAP32[(($166)>>2)];
      var $168=$167;
      var $169=(($168)|0);
      var $170=HEAP32[(($169)>>2)];
      var $171=((($170)-(1))|0);
      HEAP32[(($169)>>2)]=$171;
      var $172=(($171)|(0))!=0;
      if ($172) { label = 20; break; } else { label = 21; break; }
    case 20: 
      label = 22; break;
    case 21: 
      var $175=$2;
      var $176=(($175+16)|0);
      var $177=HEAP32[(($176)>>2)];
      var $178=$177;
      var $179=(($178+4)|0);
      var $180=HEAP32[(($179)>>2)];
      var $181=(($180+24)|0);
      var $182=HEAP32[(($181)>>2)];
      var $183=$2;
      var $184=(($183+16)|0);
      var $185=HEAP32[(($184)>>2)];
      var $186=$185;
      FUNCTION_TABLE[$182]($186);
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $189=$2;
      var $190=(($189+12)|0);
      var $191=HEAP32[(($190)>>2)];
      var $192=$2;
      var $193=(($192+16)|0);
      HEAP32[(($193)>>2)]=$191;
      var $194=$item;
      var $195=$194;
      var $196=$2;
      var $197=(($196+12)|0);
      HEAP32[(($197)>>2)]=$195;
      var $198=$2;
      var $199=(($198+40)|0);
      var $200=HEAP32[(($199)>>2)];
      var $201=(($200)|(0))!=0;
      if ($201) { label = 24; break; } else { label = 33; break; }
    case 24: 
      var $203=$2;
      var $204=(($203+40)|0);
      var $205=HEAP32[(($204)>>2)];
      $action=$205;
      var $206=$2;
      var $207=(($206+16)|0);
      var $208=HEAP32[(($207)>>2)];
      var $209=$208;
      $node=$209;
      var $210=_PyTuple_New(2);
      $res=$210;
      var $211=$res;
      var $212=(($211)|(0))!=0;
      if ($212) { label = 25; break; } else { label = 31; break; }
    case 25: 
      var $214=$action;
      var $215=(($214)|0);
      var $216=HEAP32[(($215)>>2)];
      var $217=((($216)+(1))|0);
      HEAP32[(($215)>>2)]=$217;
      var $218=$action;
      var $219=$res;
      var $220=$219;
      var $221=(($220+12)|0);
      var $222=(($221)|0);
      HEAP32[(($222)>>2)]=$218;
      var $223=$node;
      var $224=(($223)|0);
      var $225=HEAP32[(($224)>>2)];
      var $226=((($225)+(1))|0);
      HEAP32[(($224)>>2)]=$226;
      var $227=$node;
      var $228=$res;
      var $229=$228;
      var $230=(($229+12)|0);
      var $231=(($230+4)|0);
      HEAP32[(($231)>>2)]=$227;
      var $232=$2;
      var $233=(($232+32)|0);
      var $234=HEAP32[(($233)>>2)];
      var $235=$res;
      var $236=_PyList_Append($234, $235);
      label = 26; break;
    case 26: 
      var $238=$res;
      var $239=(($238)|0);
      var $240=HEAP32[(($239)>>2)];
      var $241=((($240)-(1))|0);
      HEAP32[(($239)>>2)]=$241;
      var $242=(($241)|(0))!=0;
      if ($242) { label = 27; break; } else { label = 28; break; }
    case 27: 
      label = 29; break;
    case 28: 
      var $245=$res;
      var $246=(($245+4)|0);
      var $247=HEAP32[(($246)>>2)];
      var $248=(($247+24)|0);
      var $249=HEAP32[(($248)>>2)];
      var $250=$res;
      FUNCTION_TABLE[$249]($250);
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 32; break;
    case 31: 
      _PyErr_Clear();
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      var $256=$2;
      var $257=(($256+16)|0);
      var $258=HEAP32[(($257)>>2)];
      var $259=$258;
      var $260=(($259)|0);
      var $261=HEAP32[(($260)>>2)];
      var $262=((($261)+(1))|0);
      HEAP32[(($260)>>2)]=$262;
      var $263=$2;
      var $264=(($263+16)|0);
      var $265=HEAP32[(($264)>>2)];
      var $266=$265;
      $1=$266;
      label = 34; break;
    case 34: 
      var $268=$1;
      return $268;
    default: assert(0, "bad label: " + label);
  }
}
function _makeuniversal($self, $string) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $size;
      var $key;
      var $value;
      var $tag;
      var $p;
      var $i;
      $2=$self;
      $3=$string;
      var $4=$3;
      var $5=_strlen($4);
      $size=$5;
      var $6=$3;
      var $7=$size;
      var $8=_PyString_FromStringAndSize($6, $7);
      $key=$8;
      var $9=$key;
      var $10=(($9)|(0))!=0;
      if ($10) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 48; break;
    case 3: 
      var $13=$2;
      var $14=(($13+20)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=$key;
      var $17=_PyDict_GetItem($15, $16);
      $value=$17;
      var $18=$value;
      var $19=(($18)|(0))!=0;
      if ($19) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $21=$value;
      var $22=(($21)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=((($23)+(1))|0);
      HEAP32[(($22)>>2)]=$24;
      label = 42; break;
    case 5: 
      $i=0;
      label = 6; break;
    case 6: 
      var $27=$i;
      var $28=$size;
      var $29=(($27)|(0)) < (($28)|(0));
      if ($29) { label = 7; break; } else { label = 11; break; }
    case 7: 
      var $31=$i;
      var $32=$3;
      var $33=(($32+$31)|0);
      var $34=HEAP8[($33)];
      var $35=(($34 << 24) >> 24);
      var $36=(($35)|(0))==125;
      if ($36) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 11; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $40=$i;
      var $41=((($40)+(1))|0);
      $i=$41;
      label = 6; break;
    case 11: 
      var $43=$i;
      var $44=$size;
      var $45=(($43)|(0))!=(($44)|(0));
      if ($45) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $47=$size;
      var $48=((($47)+(1))|0);
      var $49=_PyString_FromStringAndSize(0, $48);
      $tag=$49;
      var $50=$tag;
      var $51=$50;
      var $52=(($51+20)|0);
      var $53=(($52)|0);
      $p=$53;
      var $54=$p;
      var $55=(($54)|0);
      HEAP8[($55)]=123;
      var $56=$p;
      var $57=(($56+1)|0);
      var $58=$3;
      var $59=$size;
      assert($59 % 1 === 0);_memcpy($57, $58, $59);
      var $60=$size;
      var $61=((($60)+(1))|0);
      $size=$61;
      label = 14; break;
    case 13: 
      var $63=$key;
      var $64=(($63)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=((($65)+(1))|0);
      HEAP32[(($64)>>2)]=$66;
      var $67=$key;
      $tag=$67;
      label = 14; break;
    case 14: 
      var $69=$tag;
      var $70=$69;
      var $71=(($70+20)|0);
      var $72=(($71)|0);
      $p=$72;
      var $73=$p;
      var $74=$size;
      var $75=_checkstring($73, $74);
      var $76=(($75)|(0))!=0;
      if ($76) { label = 15; break; } else { label = 28; break; }
    case 15: 
      var $78=$p;
      var $79=$size;
      var $80=_PyUnicodeUCS2_DecodeUTF8($78, $79, ((__str79)|0));
      $value=$80;
      label = 16; break;
    case 16: 
      var $82=$tag;
      var $83=(($82)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=((($84)-(1))|0);
      HEAP32[(($83)>>2)]=$85;
      var $86=(($85)|(0))!=0;
      if ($86) { label = 17; break; } else { label = 18; break; }
    case 17: 
      label = 19; break;
    case 18: 
      var $89=$tag;
      var $90=(($89+4)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=(($91+24)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=$tag;
      FUNCTION_TABLE[$93]($94);
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $97=$value;
      var $98=(($97)|(0))!=0;
      if ($98) { label = 27; break; } else { label = 21; break; }
    case 21: 
      label = 22; break;
    case 22: 
      var $101=$key;
      var $102=(($101)|0);
      var $103=HEAP32[(($102)>>2)];
      var $104=((($103)-(1))|0);
      HEAP32[(($102)>>2)]=$104;
      var $105=(($104)|(0))!=0;
      if ($105) { label = 23; break; } else { label = 24; break; }
    case 23: 
      label = 25; break;
    case 24: 
      var $108=$key;
      var $109=(($108+4)|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=(($110+24)|0);
      var $112=HEAP32[(($111)>>2)];
      var $113=$key;
      FUNCTION_TABLE[$112]($113);
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      $1=0;
      label = 48; break;
    case 27: 
      label = 29; break;
    case 28: 
      var $118=$tag;
      $value=$118;
      label = 29; break;
    case 29: 
      var $120=$2;
      var $121=(($120+20)|0);
      var $122=HEAP32[(($121)>>2)];
      var $123=$key;
      var $124=$value;
      var $125=_PyDict_SetItem($122, $123, $124);
      var $126=(($125)|(0)) < 0;
      if ($126) { label = 30; break; } else { label = 41; break; }
    case 30: 
      label = 31; break;
    case 31: 
      var $129=$key;
      var $130=(($129)|0);
      var $131=HEAP32[(($130)>>2)];
      var $132=((($131)-(1))|0);
      HEAP32[(($130)>>2)]=$132;
      var $133=(($132)|(0))!=0;
      if ($133) { label = 32; break; } else { label = 33; break; }
    case 32: 
      label = 34; break;
    case 33: 
      var $136=$key;
      var $137=(($136+4)|0);
      var $138=HEAP32[(($137)>>2)];
      var $139=(($138+24)|0);
      var $140=HEAP32[(($139)>>2)];
      var $141=$key;
      FUNCTION_TABLE[$140]($141);
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $145=$value;
      var $146=(($145)|0);
      var $147=HEAP32[(($146)>>2)];
      var $148=((($147)-(1))|0);
      HEAP32[(($146)>>2)]=$148;
      var $149=(($148)|(0))!=0;
      if ($149) { label = 37; break; } else { label = 38; break; }
    case 37: 
      label = 39; break;
    case 38: 
      var $152=$value;
      var $153=(($152+4)|0);
      var $154=HEAP32[(($153)>>2)];
      var $155=(($154+24)|0);
      var $156=HEAP32[(($155)>>2)];
      var $157=$value;
      FUNCTION_TABLE[$156]($157);
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      $1=0;
      label = 48; break;
    case 41: 
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      var $163=$key;
      var $164=(($163)|0);
      var $165=HEAP32[(($164)>>2)];
      var $166=((($165)-(1))|0);
      HEAP32[(($164)>>2)]=$166;
      var $167=(($166)|(0))!=0;
      if ($167) { label = 44; break; } else { label = 45; break; }
    case 44: 
      label = 46; break;
    case 45: 
      var $170=$key;
      var $171=(($170+4)|0);
      var $172=HEAP32[(($171)>>2)];
      var $173=(($172+24)|0);
      var $174=HEAP32[(($173)>>2)];
      var $175=$key;
      FUNCTION_TABLE[$174]($175);
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      var $178=$value;
      $1=$178;
      label = 48; break;
    case 48: 
      var $180=$1;
      return $180;
    default: assert(0, "bad label: " + label);
  }
}
function _treebuilder_handle_start($self, $tag, $attrib) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $node;
      var $this;
      var $res;
      var $action;
      $2=$self;
      $3=$tag;
      $4=$attrib;
      var $5=$2;
      var $6=(($5+20)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|(0))!=0;
      if ($8) { label = 2; break; } else { label = 16; break; }
    case 2: 
      var $10=$2;
      var $11=(($10+12)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=$2;
      var $14=(($13+16)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($12)|(0))==(($15)|(0));
      if ($16) { label = 3; break; } else { label = 9; break; }
    case 3: 
      label = 4; break;
    case 4: 
      var $19=$2;
      var $20=(($19+16)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21+12)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=$23;
      var $25=$24 & -2;
      var $26=$25;
      var $27=(($26)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=((($28)-(1))|0);
      HEAP32[(($27)>>2)]=$29;
      var $30=(($29)|(0))!=0;
      if ($30) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 7; break;
    case 6: 
      var $33=$2;
      var $34=(($33+16)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35+12)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=$37;
      var $39=$38 & -2;
      var $40=$39;
      var $41=(($40+4)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($42+24)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=$2;
      var $46=(($45+16)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=(($47+12)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=$49;
      var $51=$50 & -2;
      var $52=$51;
      FUNCTION_TABLE[$44]($52);
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $55=$2;
      var $56=(($55+20)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=$57;
      var $59=$58 & -2;
      var $60=$59;
      var $61=$60;
      var $62=$2;
      var $63=(($62+20)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=(($64+4)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66)|(0))==((_PyList_Type)|(0));
      var $68=(($67)&(1));
      var $69=$61 | $68;
      var $70=$69;
      var $71=$70;
      var $72=$2;
      var $73=(($72+16)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=(($74+12)|0);
      HEAP32[(($75)>>2)]=$71;
      label = 15; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $78=$2;
      var $79=(($78+16)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=(($80+16)|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=$82;
      var $84=$83 & -2;
      var $85=$84;
      var $86=(($85)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=((($87)-(1))|0);
      HEAP32[(($86)>>2)]=$88;
      var $89=(($88)|(0))!=0;
      if ($89) { label = 11; break; } else { label = 12; break; }
    case 11: 
      label = 13; break;
    case 12: 
      var $92=$2;
      var $93=(($92+16)|0);
      var $94=HEAP32[(($93)>>2)];
      var $95=(($94+16)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=$96;
      var $98=$97 & -2;
      var $99=$98;
      var $100=(($99+4)|0);
      var $101=HEAP32[(($100)>>2)];
      var $102=(($101+24)|0);
      var $103=HEAP32[(($102)>>2)];
      var $104=$2;
      var $105=(($104+16)|0);
      var $106=HEAP32[(($105)>>2)];
      var $107=(($106+16)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=$108;
      var $110=$109 & -2;
      var $111=$110;
      FUNCTION_TABLE[$103]($111);
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $114=$2;
      var $115=(($114+20)|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=$116;
      var $118=$117 & -2;
      var $119=$118;
      var $120=$119;
      var $121=$2;
      var $122=(($121+20)|0);
      var $123=HEAP32[(($122)>>2)];
      var $124=(($123+4)|0);
      var $125=HEAP32[(($124)>>2)];
      var $126=(($125)|(0))==((_PyList_Type)|(0));
      var $127=(($126)&(1));
      var $128=$120 | $127;
      var $129=$128;
      var $130=$129;
      var $131=$2;
      var $132=(($131+16)|0);
      var $133=HEAP32[(($132)>>2)];
      var $134=(($133+16)|0);
      HEAP32[(($134)>>2)]=$130;
      label = 15; break;
    case 15: 
      var $136=$2;
      var $137=(($136+20)|0);
      HEAP32[(($137)>>2)]=0;
      label = 16; break;
    case 16: 
      var $139=$3;
      var $140=$4;
      var $141=_element_new($139, $140);
      $node=$141;
      var $142=$node;
      var $143=(($142)|(0))!=0;
      if ($143) { label = 18; break; } else { label = 17; break; }
    case 17: 
      $1=0;
      label = 59; break;
    case 18: 
      var $146=$2;
      var $147=(($146+12)|0);
      var $148=HEAP32[(($147)>>2)];
      var $149=$148;
      $this=$149;
      var $150=$this;
      var $151=(($150)|(0))!=((__Py_NoneStruct)|(0));
      if ($151) { label = 19; break; } else { label = 22; break; }
    case 19: 
      var $153=$this;
      var $154=$153;
      var $155=$node;
      var $156=_element_add_subelement($154, $155);
      var $157=(($156)|(0)) < 0;
      if ($157) { label = 20; break; } else { label = 21; break; }
    case 20: 
      label = 53; break;
    case 21: 
      label = 25; break;
    case 22: 
      var $161=$2;
      var $162=(($161+8)|0);
      var $163=HEAP32[(($162)>>2)];
      var $164=(($163)|(0))!=0;
      if ($164) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $166=HEAP32[((_elementtree_parseerror_obj)>>2)];
      _PyErr_SetString($166, ((__str87)|0));
      label = 53; break;
    case 24: 
      var $168=$node;
      var $169=(($168)|0);
      var $170=HEAP32[(($169)>>2)];
      var $171=((($170)+(1))|0);
      HEAP32[(($169)>>2)]=$171;
      var $172=$node;
      var $173=$2;
      var $174=(($173+8)|0);
      HEAP32[(($174)>>2)]=$172;
      label = 25; break;
    case 25: 
      var $176=$2;
      var $177=(($176+28)|0);
      var $178=HEAP32[(($177)>>2)];
      var $179=$2;
      var $180=(($179+24)|0);
      var $181=HEAP32[(($180)>>2)];
      var $182=$181;
      var $183=(($182+8)|0);
      var $184=HEAP32[(($183)>>2)];
      var $185=(($178)|(0)) < (($184)|(0));
      if ($185) { label = 26; break; } else { label = 29; break; }
    case 26: 
      var $187=$2;
      var $188=(($187+24)|0);
      var $189=HEAP32[(($188)>>2)];
      var $190=$2;
      var $191=(($190+28)|0);
      var $192=HEAP32[(($191)>>2)];
      var $193=$this;
      var $194=_PyList_SetItem($189, $192, $193);
      var $195=(($194)|(0)) < 0;
      if ($195) { label = 27; break; } else { label = 28; break; }
    case 27: 
      label = 53; break;
    case 28: 
      var $198=$this;
      var $199=(($198)|0);
      var $200=HEAP32[(($199)>>2)];
      var $201=((($200)+(1))|0);
      HEAP32[(($199)>>2)]=$201;
      label = 32; break;
    case 29: 
      var $203=$2;
      var $204=(($203+24)|0);
      var $205=HEAP32[(($204)>>2)];
      var $206=$this;
      var $207=_PyList_Append($205, $206);
      var $208=(($207)|(0)) < 0;
      if ($208) { label = 30; break; } else { label = 31; break; }
    case 30: 
      label = 53; break;
    case 31: 
      label = 32; break;
    case 32: 
      var $212=$2;
      var $213=(($212+28)|0);
      var $214=HEAP32[(($213)>>2)];
      var $215=((($214)+(1))|0);
      HEAP32[(($213)>>2)]=$215;
      label = 33; break;
    case 33: 
      var $217=$this;
      var $218=(($217)|0);
      var $219=HEAP32[(($218)>>2)];
      var $220=((($219)-(1))|0);
      HEAP32[(($218)>>2)]=$220;
      var $221=(($220)|(0))!=0;
      if ($221) { label = 34; break; } else { label = 35; break; }
    case 34: 
      label = 36; break;
    case 35: 
      var $224=$this;
      var $225=(($224+4)|0);
      var $226=HEAP32[(($225)>>2)];
      var $227=(($226+24)|0);
      var $228=HEAP32[(($227)>>2)];
      var $229=$this;
      FUNCTION_TABLE[$228]($229);
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      var $232=$node;
      var $233=(($232)|0);
      var $234=HEAP32[(($233)>>2)];
      var $235=((($234)+(1))|0);
      HEAP32[(($233)>>2)]=$235;
      var $236=$node;
      var $237=$236;
      var $238=$2;
      var $239=(($238+12)|0);
      HEAP32[(($239)>>2)]=$237;
      label = 38; break;
    case 38: 
      var $241=$2;
      var $242=(($241+16)|0);
      var $243=HEAP32[(($242)>>2)];
      var $244=$243;
      var $245=(($244)|0);
      var $246=HEAP32[(($245)>>2)];
      var $247=((($246)-(1))|0);
      HEAP32[(($245)>>2)]=$247;
      var $248=(($247)|(0))!=0;
      if ($248) { label = 39; break; } else { label = 40; break; }
    case 39: 
      label = 41; break;
    case 40: 
      var $251=$2;
      var $252=(($251+16)|0);
      var $253=HEAP32[(($252)>>2)];
      var $254=$253;
      var $255=(($254+4)|0);
      var $256=HEAP32[(($255)>>2)];
      var $257=(($256+24)|0);
      var $258=HEAP32[(($257)>>2)];
      var $259=$2;
      var $260=(($259+16)|0);
      var $261=HEAP32[(($260)>>2)];
      var $262=$261;
      FUNCTION_TABLE[$258]($262);
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      var $265=$node;
      var $266=(($265)|0);
      var $267=HEAP32[(($266)>>2)];
      var $268=((($267)+(1))|0);
      HEAP32[(($266)>>2)]=$268;
      var $269=$node;
      var $270=$269;
      var $271=$2;
      var $272=(($271+16)|0);
      HEAP32[(($272)>>2)]=$270;
      var $273=$2;
      var $274=(($273+36)|0);
      var $275=HEAP32[(($274)>>2)];
      var $276=(($275)|(0))!=0;
      if ($276) { label = 43; break; } else { label = 52; break; }
    case 43: 
      var $278=$2;
      var $279=(($278+36)|0);
      var $280=HEAP32[(($279)>>2)];
      $action=$280;
      var $281=_PyTuple_New(2);
      $res=$281;
      var $282=$res;
      var $283=(($282)|(0))!=0;
      if ($283) { label = 44; break; } else { label = 50; break; }
    case 44: 
      var $285=$action;
      var $286=(($285)|0);
      var $287=HEAP32[(($286)>>2)];
      var $288=((($287)+(1))|0);
      HEAP32[(($286)>>2)]=$288;
      var $289=$action;
      var $290=$res;
      var $291=$290;
      var $292=(($291+12)|0);
      var $293=(($292)|0);
      HEAP32[(($293)>>2)]=$289;
      var $294=$node;
      var $295=(($294)|0);
      var $296=HEAP32[(($295)>>2)];
      var $297=((($296)+(1))|0);
      HEAP32[(($295)>>2)]=$297;
      var $298=$node;
      var $299=$res;
      var $300=$299;
      var $301=(($300+12)|0);
      var $302=(($301+4)|0);
      HEAP32[(($302)>>2)]=$298;
      var $303=$2;
      var $304=(($303+32)|0);
      var $305=HEAP32[(($304)>>2)];
      var $306=$res;
      var $307=_PyList_Append($305, $306);
      label = 45; break;
    case 45: 
      var $309=$res;
      var $310=(($309)|0);
      var $311=HEAP32[(($310)>>2)];
      var $312=((($311)-(1))|0);
      HEAP32[(($310)>>2)]=$312;
      var $313=(($312)|(0))!=0;
      if ($313) { label = 46; break; } else { label = 47; break; }
    case 46: 
      label = 48; break;
    case 47: 
      var $316=$res;
      var $317=(($316+4)|0);
      var $318=HEAP32[(($317)>>2)];
      var $319=(($318+24)|0);
      var $320=HEAP32[(($319)>>2)];
      var $321=$res;
      FUNCTION_TABLE[$320]($321);
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      label = 51; break;
    case 50: 
      _PyErr_Clear();
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      var $327=$node;
      $1=$327;
      label = 59; break;
    case 53: 
      label = 54; break;
    case 54: 
      var $330=$node;
      var $331=(($330)|0);
      var $332=HEAP32[(($331)>>2)];
      var $333=((($332)-(1))|0);
      HEAP32[(($331)>>2)]=$333;
      var $334=(($333)|(0))!=0;
      if ($334) { label = 55; break; } else { label = 56; break; }
    case 55: 
      label = 57; break;
    case 56: 
      var $337=$node;
      var $338=(($337+4)|0);
      var $339=HEAP32[(($338)>>2)];
      var $340=(($339+24)|0);
      var $341=HEAP32[(($340)>>2)];
      var $342=$node;
      FUNCTION_TABLE[$341]($342);
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      $1=0;
      label = 59; break;
    case 59: 
      var $346=$1;
      return $346;
    default: assert(0, "bad label: " + label);
  }
}
function _xmlparser_dealloc($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2+8)|0);
      var $4=HEAP32[(($3)>>2)];
      _PyExpat_XML_ParserFree($4);
      label = 2; break;
    case 2: 
      var $6=$1;
      var $7=(($6+48)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))==0;
      if ($9) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 10; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $13=$1;
      var $14=(($13+48)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=((($17)-(1))|0);
      HEAP32[(($16)>>2)]=$18;
      var $19=(($18)|(0))!=0;
      if ($19) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 8; break;
    case 7: 
      var $22=$1;
      var $23=(($22+48)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24+4)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26+24)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=$1;
      var $30=(($29+48)|0);
      var $31=HEAP32[(($30)>>2)];
      FUNCTION_TABLE[$28]($31);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $37=$1;
      var $38=(($37+44)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39)|(0))==0;
      if ($40) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 20; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $44=$1;
      var $45=(($44+44)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=((($48)-(1))|0);
      HEAP32[(($47)>>2)]=$49;
      var $50=(($49)|(0))!=0;
      if ($50) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 18; break;
    case 17: 
      var $53=$1;
      var $54=(($53+44)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=(($55+4)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=(($57+24)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=$1;
      var $61=(($60+44)|0);
      var $62=HEAP32[(($61)>>2)];
      FUNCTION_TABLE[$59]($62);
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $68=$1;
      var $69=(($68+40)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=(($70)|(0))==0;
      if ($71) { label = 23; break; } else { label = 24; break; }
    case 23: 
      label = 30; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $75=$1;
      var $76=(($75+40)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=(($77)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=((($79)-(1))|0);
      HEAP32[(($78)>>2)]=$80;
      var $81=(($80)|(0))!=0;
      if ($81) { label = 26; break; } else { label = 27; break; }
    case 26: 
      label = 28; break;
    case 27: 
      var $84=$1;
      var $85=(($84+40)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=(($86+4)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=(($88+24)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=$1;
      var $92=(($91+40)|0);
      var $93=HEAP32[(($92)>>2)];
      FUNCTION_TABLE[$90]($93);
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      var $99=$1;
      var $100=(($99+36)|0);
      var $101=HEAP32[(($100)>>2)];
      var $102=(($101)|(0))==0;
      if ($102) { label = 33; break; } else { label = 34; break; }
    case 33: 
      label = 40; break;
    case 34: 
      label = 35; break;
    case 35: 
      var $106=$1;
      var $107=(($106+36)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=(($108)|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=((($110)-(1))|0);
      HEAP32[(($109)>>2)]=$111;
      var $112=(($111)|(0))!=0;
      if ($112) { label = 36; break; } else { label = 37; break; }
    case 36: 
      label = 38; break;
    case 37: 
      var $115=$1;
      var $116=(($115+36)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=(($117+4)|0);
      var $119=HEAP32[(($118)>>2)];
      var $120=(($119+24)|0);
      var $121=HEAP32[(($120)>>2)];
      var $122=$1;
      var $123=(($122+36)|0);
      var $124=HEAP32[(($123)>>2)];
      FUNCTION_TABLE[$121]($124);
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      var $130=$1;
      var $131=(($130+32)|0);
      var $132=HEAP32[(($131)>>2)];
      var $133=(($132)|(0))==0;
      if ($133) { label = 43; break; } else { label = 44; break; }
    case 43: 
      label = 50; break;
    case 44: 
      label = 45; break;
    case 45: 
      var $137=$1;
      var $138=(($137+32)|0);
      var $139=HEAP32[(($138)>>2)];
      var $140=(($139)|0);
      var $141=HEAP32[(($140)>>2)];
      var $142=((($141)-(1))|0);
      HEAP32[(($140)>>2)]=$142;
      var $143=(($142)|(0))!=0;
      if ($143) { label = 46; break; } else { label = 47; break; }
    case 46: 
      label = 48; break;
    case 47: 
      var $146=$1;
      var $147=(($146+32)|0);
      var $148=HEAP32[(($147)>>2)];
      var $149=(($148+4)|0);
      var $150=HEAP32[(($149)>>2)];
      var $151=(($150+24)|0);
      var $152=HEAP32[(($151)>>2)];
      var $153=$1;
      var $154=(($153+32)|0);
      var $155=HEAP32[(($154)>>2)];
      FUNCTION_TABLE[$152]($155);
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      var $161=$1;
      var $162=(($161+28)|0);
      var $163=HEAP32[(($162)>>2)];
      var $164=(($163)|(0))==0;
      if ($164) { label = 53; break; } else { label = 54; break; }
    case 53: 
      label = 60; break;
    case 54: 
      label = 55; break;
    case 55: 
      var $168=$1;
      var $169=(($168+28)|0);
      var $170=HEAP32[(($169)>>2)];
      var $171=(($170)|0);
      var $172=HEAP32[(($171)>>2)];
      var $173=((($172)-(1))|0);
      HEAP32[(($171)>>2)]=$173;
      var $174=(($173)|(0))!=0;
      if ($174) { label = 56; break; } else { label = 57; break; }
    case 56: 
      label = 58; break;
    case 57: 
      var $177=$1;
      var $178=(($177+28)|0);
      var $179=HEAP32[(($178)>>2)];
      var $180=(($179+4)|0);
      var $181=HEAP32[(($180)>>2)];
      var $182=(($181+24)|0);
      var $183=HEAP32[(($182)>>2)];
      var $184=$1;
      var $185=(($184+28)|0);
      var $186=HEAP32[(($185)>>2)];
      FUNCTION_TABLE[$183]($186);
      label = 58; break;
    case 58: 
      label = 59; break;
    case 59: 
      label = 60; break;
    case 60: 
      label = 61; break;
    case 61: 
      label = 62; break;
    case 62: 
      var $192=$1;
      var $193=(($192+24)|0);
      var $194=HEAP32[(($193)>>2)];
      var $195=(($194)|(0))==0;
      if ($195) { label = 63; break; } else { label = 64; break; }
    case 63: 
      label = 70; break;
    case 64: 
      label = 65; break;
    case 65: 
      var $199=$1;
      var $200=(($199+24)|0);
      var $201=HEAP32[(($200)>>2)];
      var $202=(($201)|0);
      var $203=HEAP32[(($202)>>2)];
      var $204=((($203)-(1))|0);
      HEAP32[(($202)>>2)]=$204;
      var $205=(($204)|(0))!=0;
      if ($205) { label = 66; break; } else { label = 67; break; }
    case 66: 
      label = 68; break;
    case 67: 
      var $208=$1;
      var $209=(($208+24)|0);
      var $210=HEAP32[(($209)>>2)];
      var $211=(($210+4)|0);
      var $212=HEAP32[(($211)>>2)];
      var $213=(($212+24)|0);
      var $214=HEAP32[(($213)>>2)];
      var $215=$1;
      var $216=(($215+24)|0);
      var $217=HEAP32[(($216)>>2)];
      FUNCTION_TABLE[$214]($217);
      label = 68; break;
    case 68: 
      label = 69; break;
    case 69: 
      label = 70; break;
    case 70: 
      label = 71; break;
    case 71: 
      label = 72; break;
    case 72: 
      var $223=$1;
      var $224=(($223+12)|0);
      var $225=HEAP32[(($224)>>2)];
      var $226=(($225)|0);
      var $227=HEAP32[(($226)>>2)];
      var $228=((($227)-(1))|0);
      HEAP32[(($226)>>2)]=$228;
      var $229=(($228)|(0))!=0;
      if ($229) { label = 73; break; } else { label = 74; break; }
    case 73: 
      label = 75; break;
    case 74: 
      var $232=$1;
      var $233=(($232+12)|0);
      var $234=HEAP32[(($233)>>2)];
      var $235=(($234+4)|0);
      var $236=HEAP32[(($235)>>2)];
      var $237=(($236+24)|0);
      var $238=HEAP32[(($237)>>2)];
      var $239=$1;
      var $240=(($239+12)|0);
      var $241=HEAP32[(($240)>>2)];
      FUNCTION_TABLE[$238]($241);
      label = 75; break;
    case 75: 
      label = 76; break;
    case 76: 
      label = 77; break;
    case 77: 
      var $245=$1;
      var $246=(($245+16)|0);
      var $247=HEAP32[(($246)>>2)];
      var $248=(($247)|0);
      var $249=HEAP32[(($248)>>2)];
      var $250=((($249)-(1))|0);
      HEAP32[(($248)>>2)]=$250;
      var $251=(($250)|(0))!=0;
      if ($251) { label = 78; break; } else { label = 79; break; }
    case 78: 
      label = 80; break;
    case 79: 
      var $254=$1;
      var $255=(($254+16)|0);
      var $256=HEAP32[(($255)>>2)];
      var $257=(($256+4)|0);
      var $258=HEAP32[(($257)>>2)];
      var $259=(($258+24)|0);
      var $260=HEAP32[(($259)>>2)];
      var $261=$1;
      var $262=(($261+16)|0);
      var $263=HEAP32[(($262)>>2)];
      FUNCTION_TABLE[$260]($263);
      label = 80; break;
    case 80: 
      label = 81; break;
    case 81: 
      label = 82; break;
    case 82: 
      var $267=$1;
      var $268=(($267+20)|0);
      var $269=HEAP32[(($268)>>2)];
      var $270=(($269)|0);
      var $271=HEAP32[(($270)>>2)];
      var $272=((($271)-(1))|0);
      HEAP32[(($270)>>2)]=$272;
      var $273=(($272)|(0))!=0;
      if ($273) { label = 83; break; } else { label = 84; break; }
    case 83: 
      label = 85; break;
    case 84: 
      var $276=$1;
      var $277=(($276+20)|0);
      var $278=HEAP32[(($277)>>2)];
      var $279=(($278+4)|0);
      var $280=HEAP32[(($279)>>2)];
      var $281=(($280+24)|0);
      var $282=HEAP32[(($281)>>2)];
      var $283=$1;
      var $284=(($283+20)|0);
      var $285=HEAP32[(($284)>>2)];
      FUNCTION_TABLE[$282]($285);
      label = 85; break;
    case 85: 
      label = 86; break;
    case 86: 
      var $288=$1;
      var $289=$288;
      _PyObject_Free($289);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _xmlparser_getattr($self, $name) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 100)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $res;
      var $buffer=__stackBase__;
      $2=$self;
      $3=$name;
      var $4=$2;
      var $5=$4;
      var $6=$3;
      var $7=_Py_FindMethod(((_xmlparser_methods)|0), $5, $6);
      $res=$7;
      var $8=$res;
      var $9=(($8)|(0))!=0;
      if ($9) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $11=$res;
      $1=$11;
      label = 12; break;
    case 3: 
      _PyErr_Clear();
      var $13=$3;
      var $14=_strcmp($13, ((__str91)|0));
      var $15=(($14)|(0))==0;
      if ($15) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $17=$2;
      var $18=(($17+16)|0);
      var $19=HEAP32[(($18)>>2)];
      $res=$19;
      label = 11; break;
    case 5: 
      var $21=$3;
      var $22=_strcmp($21, ((__str66)|0));
      var $23=(($22)|(0))==0;
      if ($23) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $25=$2;
      var $26=(($25+12)|0);
      var $27=HEAP32[(($26)>>2)];
      $res=$27;
      label = 10; break;
    case 7: 
      var $29=$3;
      var $30=_strcmp($29, ((__str92)|0));
      var $31=(($30)|(0))==0;
      if ($31) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $33=(($buffer)|0);
      var $34=_sprintf($33, ((__str93)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=2,HEAP32[(((tempInt)+(4))>>2)]=1,HEAP32[(((tempInt)+(8))>>2)]=0,tempInt));
      var $35=(($buffer)|0);
      var $36=_PyString_FromString($35);
      $1=$36;
      label = 12; break;
    case 9: 
      var $38=HEAP32[((_PyExc_AttributeError)>>2)];
      var $39=$3;
      _PyErr_SetString($38, $39);
      $1=0;
      label = 12; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $42=$res;
      var $43=(($42)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=((($44)+(1))|0);
      HEAP32[(($43)>>2)]=$45;
      var $46=$res;
      $1=$46;
      label = 12; break;
    case 12: 
      var $48=$1;
      STACKTOP = __stackBase__;
      return $48;
    default: assert(0, "bad label: " + label);
  }
}
function _xmlparser_feed($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $data=__stackBase__;
      var $data_len=(__stackBase__)+(4);
      $2=$self;
      $3=$args;
      var $4=$3;
      var $5=_PyArg_ParseTuple($4, ((__str107)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$data,HEAP32[(((tempInt)+(4))>>2)]=$data_len,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 4; break;
    case 3: 
      var $9=$2;
      var $10=HEAP32[(($data)>>2)];
      var $11=HEAP32[(($data_len)>>2)];
      var $12=_expat_parse($9, $10, $11, 0);
      $1=$12;
      label = 4; break;
    case 4: 
      var $14=$1;
      STACKTOP = __stackBase__;
      return $14;
    default: assert(0, "bad label: " + label);
  }
}
function _xmlparser_close($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $res;
      $2=$self;
      $3=$args;
      var $4=$3;
      var $5=_PyArg_ParseTuple($4, ((__str106)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 20; break;
    case 3: 
      var $9=$2;
      var $10=_expat_parse($9, ((__str50)|0), 0, 1);
      $res=$10;
      var $11=$res;
      var $12=(($11)|(0))!=0;
      if ($12) { label = 5; break; } else { label = 4; break; }
    case 4: 
      $1=0;
      label = 20; break;
    case 5: 
      var $15=$2;
      var $16=(($15+12)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17+4)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19)|(0))==((_TreeBuilder_Type)|(0));
      if ($20) { label = 6; break; } else { label = 12; break; }
    case 6: 
      label = 7; break;
    case 7: 
      var $23=$res;
      var $24=(($23)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=((($25)-(1))|0);
      HEAP32[(($24)>>2)]=$26;
      var $27=(($26)|(0))!=0;
      if ($27) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 10; break;
    case 9: 
      var $30=$res;
      var $31=(($30+4)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32+24)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=$res;
      FUNCTION_TABLE[$34]($35);
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $38=$2;
      var $39=(($38+12)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=$40;
      var $42=_treebuilder_done($41);
      $1=$42;
      label = 20; break;
    case 12: 
      var $44=$2;
      var $45=(($44+48)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46)|(0))!=0;
      if ($47) { label = 13; break; } else { label = 19; break; }
    case 13: 
      label = 14; break;
    case 14: 
      var $50=$res;
      var $51=(($50)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=((($52)-(1))|0);
      HEAP32[(($51)>>2)]=$53;
      var $54=(($53)|(0))!=0;
      if ($54) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 17; break;
    case 16: 
      var $57=$res;
      var $58=(($57+4)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=(($59+24)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=$res;
      FUNCTION_TABLE[$61]($62);
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $65=$2;
      var $66=(($65+48)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=_PyObject_CallFunction($67, ((__str50)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=$68;
      label = 20; break;
    case 19: 
      var $70=$res;
      $1=$70;
      label = 20; break;
    case 20: 
      var $72=$1;
      STACKTOP = __stackBase__;
      return $72;
    default: assert(0, "bad label: " + label);
  }
}
function _xmlparser_parse($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $reader;
      var $buffer;
      var $res;
      var $fileobj=__stackBase__;
      $2=$self;
      $3=$args;
      var $4=$3;
      var $5=_PyArg_ParseTuple($4, ((__str103)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$fileobj,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 53; break;
    case 3: 
      var $9=HEAP32[(($fileobj)>>2)];
      var $10=_PyObject_GetAttrString($9, ((__str104)|0));
      $reader=$10;
      var $11=$reader;
      var $12=(($11)|(0))!=0;
      if ($12) { label = 5; break; } else { label = 4; break; }
    case 4: 
      $1=0;
      label = 53; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $16=$reader;
      var $17=_PyObject_CallFunction($16, ((__str105)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=65536,tempInt));
      $buffer=$17;
      var $18=$buffer;
      var $19=(($18)|(0))!=0;
      if ($19) { label = 13; break; } else { label = 7; break; }
    case 7: 
      label = 8; break;
    case 8: 
      var $22=$reader;
      var $23=(($22)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=((($24)-(1))|0);
      HEAP32[(($23)>>2)]=$25;
      var $26=(($25)|(0))!=0;
      if ($26) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 11; break;
    case 10: 
      var $29=$reader;
      var $30=(($29+4)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31+24)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=$reader;
      FUNCTION_TABLE[$33]($34);
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      $1=0;
      label = 53; break;
    case 13: 
      var $38=$buffer;
      var $39=(($38+4)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40)|(0))==((_PyString_Type)|(0));
      if ($41) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $43=$buffer;
      var $44=$43;
      var $45=(($44+8)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46)|(0))==0;
      if ($47) { label = 15; break; } else { label = 21; break; }
    case 15: 
      label = 16; break;
    case 16: 
      var $50=$buffer;
      var $51=(($50)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=((($52)-(1))|0);
      HEAP32[(($51)>>2)]=$53;
      var $54=(($53)|(0))!=0;
      if ($54) { label = 17; break; } else { label = 18; break; }
    case 17: 
      label = 19; break;
    case 18: 
      var $57=$buffer;
      var $58=(($57+4)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=(($59+24)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=$buffer;
      FUNCTION_TABLE[$61]($62);
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 39; break;
    case 21: 
      var $66=$2;
      var $67=$buffer;
      var $68=$67;
      var $69=(($68+20)|0);
      var $70=(($69)|0);
      var $71=$buffer;
      var $72=$71;
      var $73=(($72+8)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=_expat_parse($66, $70, $74, 0);
      $res=$75;
      label = 22; break;
    case 22: 
      var $77=$buffer;
      var $78=(($77)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=((($79)-(1))|0);
      HEAP32[(($78)>>2)]=$80;
      var $81=(($80)|(0))!=0;
      if ($81) { label = 23; break; } else { label = 24; break; }
    case 23: 
      label = 25; break;
    case 24: 
      var $84=$buffer;
      var $85=(($84+4)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=(($86+24)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=$buffer;
      FUNCTION_TABLE[$88]($89);
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $92=$res;
      var $93=(($92)|(0))!=0;
      if ($93) { label = 33; break; } else { label = 27; break; }
    case 27: 
      label = 28; break;
    case 28: 
      var $96=$reader;
      var $97=(($96)|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=((($98)-(1))|0);
      HEAP32[(($97)>>2)]=$99;
      var $100=(($99)|(0))!=0;
      if ($100) { label = 29; break; } else { label = 30; break; }
    case 29: 
      label = 31; break;
    case 30: 
      var $103=$reader;
      var $104=(($103+4)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=(($105+24)|0);
      var $107=HEAP32[(($106)>>2)];
      var $108=$reader;
      FUNCTION_TABLE[$107]($108);
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      $1=0;
      label = 53; break;
    case 33: 
      label = 34; break;
    case 34: 
      var $113=$res;
      var $114=(($113)|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=((($115)-(1))|0);
      HEAP32[(($114)>>2)]=$116;
      var $117=(($116)|(0))!=0;
      if ($117) { label = 35; break; } else { label = 36; break; }
    case 35: 
      label = 37; break;
    case 36: 
      var $120=$res;
      var $121=(($120+4)|0);
      var $122=HEAP32[(($121)>>2)];
      var $123=(($122+24)|0);
      var $124=HEAP32[(($123)>>2)];
      var $125=$res;
      FUNCTION_TABLE[$124]($125);
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      label = 6; break;
    case 39: 
      label = 40; break;
    case 40: 
      var $130=$reader;
      var $131=(($130)|0);
      var $132=HEAP32[(($131)>>2)];
      var $133=((($132)-(1))|0);
      HEAP32[(($131)>>2)]=$133;
      var $134=(($133)|(0))!=0;
      if ($134) { label = 41; break; } else { label = 42; break; }
    case 41: 
      label = 43; break;
    case 42: 
      var $137=$reader;
      var $138=(($137+4)|0);
      var $139=HEAP32[(($138)>>2)];
      var $140=(($139+24)|0);
      var $141=HEAP32[(($140)>>2)];
      var $142=$reader;
      FUNCTION_TABLE[$141]($142);
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      var $145=$2;
      var $146=_expat_parse($145, ((__str50)|0), 0, 1);
      $res=$146;
      var $147=$res;
      var $148=(($147)|(0))!=0;
      if ($148) { label = 45; break; } else { label = 52; break; }
    case 45: 
      var $150=$2;
      var $151=(($150+12)|0);
      var $152=HEAP32[(($151)>>2)];
      var $153=(($152+4)|0);
      var $154=HEAP32[(($153)>>2)];
      var $155=(($154)|(0))==((_TreeBuilder_Type)|(0));
      if ($155) { label = 46; break; } else { label = 52; break; }
    case 46: 
      label = 47; break;
    case 47: 
      var $158=$res;
      var $159=(($158)|0);
      var $160=HEAP32[(($159)>>2)];
      var $161=((($160)-(1))|0);
      HEAP32[(($159)>>2)]=$161;
      var $162=(($161)|(0))!=0;
      if ($162) { label = 48; break; } else { label = 49; break; }
    case 48: 
      label = 50; break;
    case 49: 
      var $165=$res;
      var $166=(($165+4)|0);
      var $167=HEAP32[(($166)>>2)];
      var $168=(($167+24)|0);
      var $169=HEAP32[(($168)>>2)];
      var $170=$res;
      FUNCTION_TABLE[$169]($170);
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      var $173=$2;
      var $174=(($173+12)|0);
      var $175=HEAP32[(($174)>>2)];
      var $176=$175;
      var $177=_treebuilder_done($176);
      $1=$177;
      label = 53; break;
    case 52: 
      var $179=$res;
      $1=$179;
      label = 53; break;
    case 53: 
      var $181=$1;
      STACKTOP = __stackBase__;
      return $181;
    default: assert(0, "bad label: " + label);
  }
}
function _xmlparser_setevents($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $i;
      var $target;
      var $events=__stackBase__;
      var $event_set=(__stackBase__)+(4);
      var $item;
      var $event;
      $2=$self;
      $3=$args;
      HEAP32[(($event_set)>>2)]=__Py_NoneStruct;
      var $4=$3;
      var $5=_PyArg_ParseTuple($4, ((__str97)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=_PyList_Type,HEAP32[(((tempInt)+(4))>>2)]=$events,HEAP32[(((tempInt)+(8))>>2)]=$event_set,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 109; break;
    case 3: 
      var $9=$2;
      var $10=(($9+12)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11+4)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13)|(0))==((_TreeBuilder_Type)|(0));
      if ($14) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $16=HEAP32[((_PyExc_TypeError)>>2)];
      _PyErr_SetString($16, ((__str98)|0));
      $1=0;
      label = 109; break;
    case 5: 
      var $18=$2;
      var $19=(($18+12)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=$20;
      $target=$21;
      var $22=HEAP32[(($events)>>2)];
      var $23=(($22)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=((($24)+(1))|0);
      HEAP32[(($23)>>2)]=$25;
      label = 6; break;
    case 6: 
      var $27=$target;
      var $28=(($27+32)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29)|(0))==0;
      if ($30) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 14; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $34=$target;
      var $35=(($34+32)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=((($38)-(1))|0);
      HEAP32[(($37)>>2)]=$39;
      var $40=(($39)|(0))!=0;
      if ($40) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 12; break;
    case 11: 
      var $43=$target;
      var $44=(($43+32)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=(($45+4)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=(($47+24)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=$target;
      var $51=(($50+32)|0);
      var $52=HEAP32[(($51)>>2)];
      FUNCTION_TABLE[$49]($52);
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $57=HEAP32[(($events)>>2)];
      var $58=$target;
      var $59=(($58+32)|0);
      HEAP32[(($59)>>2)]=$57;
      label = 16; break;
    case 16: 
      var $61=$target;
      var $62=(($61+36)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=(($63)|(0))==0;
      if ($64) { label = 17; break; } else { label = 18; break; }
    case 17: 
      label = 24; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $68=$target;
      var $69=(($68+36)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=(($70)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=((($72)-(1))|0);
      HEAP32[(($71)>>2)]=$73;
      var $74=(($73)|(0))!=0;
      if ($74) { label = 20; break; } else { label = 21; break; }
    case 20: 
      label = 22; break;
    case 21: 
      var $77=$target;
      var $78=(($77+36)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=(($79+4)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=(($81+24)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=$target;
      var $85=(($84+36)|0);
      var $86=HEAP32[(($85)>>2)];
      FUNCTION_TABLE[$83]($86);
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $91=$target;
      var $92=(($91+36)|0);
      HEAP32[(($92)>>2)]=0;
      label = 26; break;
    case 26: 
      var $94=$target;
      var $95=(($94+40)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=(($96)|(0))==0;
      if ($97) { label = 27; break; } else { label = 28; break; }
    case 27: 
      label = 34; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $101=$target;
      var $102=(($101+40)|0);
      var $103=HEAP32[(($102)>>2)];
      var $104=(($103)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=((($105)-(1))|0);
      HEAP32[(($104)>>2)]=$106;
      var $107=(($106)|(0))!=0;
      if ($107) { label = 30; break; } else { label = 31; break; }
    case 30: 
      label = 32; break;
    case 31: 
      var $110=$target;
      var $111=(($110+40)|0);
      var $112=HEAP32[(($111)>>2)];
      var $113=(($112+4)|0);
      var $114=HEAP32[(($113)>>2)];
      var $115=(($114+24)|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=$target;
      var $118=(($117+40)|0);
      var $119=HEAP32[(($118)>>2)];
      FUNCTION_TABLE[$116]($119);
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      var $124=$target;
      var $125=(($124+40)|0);
      HEAP32[(($125)>>2)]=0;
      label = 36; break;
    case 36: 
      var $127=$target;
      var $128=(($127+44)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=(($129)|(0))==0;
      if ($130) { label = 37; break; } else { label = 38; break; }
    case 37: 
      label = 44; break;
    case 38: 
      label = 39; break;
    case 39: 
      var $134=$target;
      var $135=(($134+44)|0);
      var $136=HEAP32[(($135)>>2)];
      var $137=(($136)|0);
      var $138=HEAP32[(($137)>>2)];
      var $139=((($138)-(1))|0);
      HEAP32[(($137)>>2)]=$139;
      var $140=(($139)|(0))!=0;
      if ($140) { label = 40; break; } else { label = 41; break; }
    case 40: 
      label = 42; break;
    case 41: 
      var $143=$target;
      var $144=(($143+44)|0);
      var $145=HEAP32[(($144)>>2)];
      var $146=(($145+4)|0);
      var $147=HEAP32[(($146)>>2)];
      var $148=(($147+24)|0);
      var $149=HEAP32[(($148)>>2)];
      var $150=$target;
      var $151=(($150+44)|0);
      var $152=HEAP32[(($151)>>2)];
      FUNCTION_TABLE[$149]($152);
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      var $157=$target;
      var $158=(($157+44)|0);
      HEAP32[(($158)>>2)]=0;
      label = 46; break;
    case 46: 
      var $160=$target;
      var $161=(($160+48)|0);
      var $162=HEAP32[(($161)>>2)];
      var $163=(($162)|(0))==0;
      if ($163) { label = 47; break; } else { label = 48; break; }
    case 47: 
      label = 54; break;
    case 48: 
      label = 49; break;
    case 49: 
      var $167=$target;
      var $168=(($167+48)|0);
      var $169=HEAP32[(($168)>>2)];
      var $170=(($169)|0);
      var $171=HEAP32[(($170)>>2)];
      var $172=((($171)-(1))|0);
      HEAP32[(($170)>>2)]=$172;
      var $173=(($172)|(0))!=0;
      if ($173) { label = 50; break; } else { label = 51; break; }
    case 50: 
      label = 52; break;
    case 51: 
      var $176=$target;
      var $177=(($176+48)|0);
      var $178=HEAP32[(($177)>>2)];
      var $179=(($178+4)|0);
      var $180=HEAP32[(($179)>>2)];
      var $181=(($180+24)|0);
      var $182=HEAP32[(($181)>>2)];
      var $183=$target;
      var $184=(($183+48)|0);
      var $185=HEAP32[(($184)>>2)];
      FUNCTION_TABLE[$182]($185);
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      var $190=$target;
      var $191=(($190+48)|0);
      HEAP32[(($191)>>2)]=0;
      var $192=HEAP32[(($event_set)>>2)];
      var $193=(($192)|(0))==((__Py_NoneStruct)|(0));
      if ($193) { label = 56; break; } else { label = 57; break; }
    case 56: 
      var $195=_PyString_FromString(((__str73)|0));
      var $196=$target;
      var $197=(($196+40)|0);
      HEAP32[(($197)>>2)]=$195;
      var $198=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $199=((($198)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$199;
      $1=__Py_NoneStruct;
      label = 109; break;
    case 57: 
      var $201=HEAP32[(($event_set)>>2)];
      var $202=(($201+4)|0);
      var $203=HEAP32[(($202)>>2)];
      var $204=(($203+84)|0);
      var $205=HEAP32[(($204)>>2)];
      var $206=$205 & 67108864;
      var $207=(($206)|(0))!=0;
      if ($207) { label = 59; break; } else { label = 58; break; }
    case 58: 
      label = 108; break;
    case 59: 
      $i=0;
      label = 60; break;
    case 60: 
      var $211=$i;
      var $212=HEAP32[(($event_set)>>2)];
      var $213=$212;
      var $214=(($213+8)|0);
      var $215=HEAP32[(($214)>>2)];
      var $216=(($211)|(0)) < (($215)|(0));
      if ($216) { label = 61; break; } else { label = 107; break; }
    case 61: 
      var $218=$i;
      var $219=HEAP32[(($event_set)>>2)];
      var $220=$219;
      var $221=(($220+12)|0);
      var $222=(($221+($218<<2))|0);
      var $223=HEAP32[(($222)>>2)];
      $item=$223;
      var $224=$item;
      var $225=(($224+4)|0);
      var $226=HEAP32[(($225)>>2)];
      var $227=(($226+84)|0);
      var $228=HEAP32[(($227)>>2)];
      var $229=$228 & 134217728;
      var $230=(($229)|(0))!=0;
      if ($230) { label = 63; break; } else { label = 62; break; }
    case 62: 
      label = 108; break;
    case 63: 
      var $233=$item;
      var $234=$233;
      var $235=(($234+20)|0);
      var $236=(($235)|0);
      $event=$236;
      var $237=$event;
      var $238=_strcmp($237, ((__str71)|0));
      var $239=(($238)|(0))==0;
      if ($239) { label = 64; break; } else { label = 65; break; }
    case 64: 
      var $241=$item;
      var $242=(($241)|0);
      var $243=HEAP32[(($242)>>2)];
      var $244=((($243)+(1))|0);
      HEAP32[(($242)>>2)]=$244;
      var $245=$item;
      var $246=$target;
      var $247=(($246+36)|0);
      HEAP32[(($247)>>2)]=$245;
      label = 105; break;
    case 65: 
      var $249=$event;
      var $250=_strcmp($249, ((__str73)|0));
      var $251=(($250)|(0))==0;
      if ($251) { label = 66; break; } else { label = 77; break; }
    case 66: 
      var $253=$item;
      var $254=(($253)|0);
      var $255=HEAP32[(($254)>>2)];
      var $256=((($255)+(1))|0);
      HEAP32[(($254)>>2)]=$256;
      label = 67; break;
    case 67: 
      var $258=$target;
      var $259=(($258+40)|0);
      var $260=HEAP32[(($259)>>2)];
      var $261=(($260)|(0))==0;
      if ($261) { label = 68; break; } else { label = 69; break; }
    case 68: 
      label = 75; break;
    case 69: 
      label = 70; break;
    case 70: 
      var $265=$target;
      var $266=(($265+40)|0);
      var $267=HEAP32[(($266)>>2)];
      var $268=(($267)|0);
      var $269=HEAP32[(($268)>>2)];
      var $270=((($269)-(1))|0);
      HEAP32[(($268)>>2)]=$270;
      var $271=(($270)|(0))!=0;
      if ($271) { label = 71; break; } else { label = 72; break; }
    case 71: 
      label = 73; break;
    case 72: 
      var $274=$target;
      var $275=(($274+40)|0);
      var $276=HEAP32[(($275)>>2)];
      var $277=(($276+4)|0);
      var $278=HEAP32[(($277)>>2)];
      var $279=(($278+24)|0);
      var $280=HEAP32[(($279)>>2)];
      var $281=$target;
      var $282=(($281+40)|0);
      var $283=HEAP32[(($282)>>2)];
      FUNCTION_TABLE[$280]($283);
      label = 73; break;
    case 73: 
      label = 74; break;
    case 74: 
      label = 75; break;
    case 75: 
      label = 76; break;
    case 76: 
      var $288=$item;
      var $289=$target;
      var $290=(($289+40)|0);
      HEAP32[(($290)>>2)]=$288;
      label = 104; break;
    case 77: 
      var $292=$event;
      var $293=_strcmp($292, ((__str99)|0));
      var $294=(($293)|(0))==0;
      if ($294) { label = 78; break; } else { label = 89; break; }
    case 78: 
      var $296=$item;
      var $297=(($296)|0);
      var $298=HEAP32[(($297)>>2)];
      var $299=((($298)+(1))|0);
      HEAP32[(($297)>>2)]=$299;
      label = 79; break;
    case 79: 
      var $301=$target;
      var $302=(($301+44)|0);
      var $303=HEAP32[(($302)>>2)];
      var $304=(($303)|(0))==0;
      if ($304) { label = 80; break; } else { label = 81; break; }
    case 80: 
      label = 87; break;
    case 81: 
      label = 82; break;
    case 82: 
      var $308=$target;
      var $309=(($308+44)|0);
      var $310=HEAP32[(($309)>>2)];
      var $311=(($310)|0);
      var $312=HEAP32[(($311)>>2)];
      var $313=((($312)-(1))|0);
      HEAP32[(($311)>>2)]=$313;
      var $314=(($313)|(0))!=0;
      if ($314) { label = 83; break; } else { label = 84; break; }
    case 83: 
      label = 85; break;
    case 84: 
      var $317=$target;
      var $318=(($317+44)|0);
      var $319=HEAP32[(($318)>>2)];
      var $320=(($319+4)|0);
      var $321=HEAP32[(($320)>>2)];
      var $322=(($321+24)|0);
      var $323=HEAP32[(($322)>>2)];
      var $324=$target;
      var $325=(($324+44)|0);
      var $326=HEAP32[(($325)>>2)];
      FUNCTION_TABLE[$323]($326);
      label = 85; break;
    case 85: 
      label = 86; break;
    case 86: 
      label = 87; break;
    case 87: 
      label = 88; break;
    case 88: 
      var $331=$item;
      var $332=$target;
      var $333=(($332+44)|0);
      HEAP32[(($333)>>2)]=$331;
      var $334=$2;
      var $335=(($334+8)|0);
      var $336=HEAP32[(($335)>>2)];
      _PyExpat_XML_SetNamespaceDeclHandler($336, ((FUNCTION_TABLE_OFFSET + 88)), ((FUNCTION_TABLE_OFFSET + 86)));
      label = 103; break;
    case 89: 
      var $338=$event;
      var $339=_strcmp($338, ((__str100)|0));
      var $340=(($339)|(0))==0;
      if ($340) { label = 90; break; } else { label = 101; break; }
    case 90: 
      var $342=$item;
      var $343=(($342)|0);
      var $344=HEAP32[(($343)>>2)];
      var $345=((($344)+(1))|0);
      HEAP32[(($343)>>2)]=$345;
      label = 91; break;
    case 91: 
      var $347=$target;
      var $348=(($347+48)|0);
      var $349=HEAP32[(($348)>>2)];
      var $350=(($349)|(0))==0;
      if ($350) { label = 92; break; } else { label = 93; break; }
    case 92: 
      label = 99; break;
    case 93: 
      label = 94; break;
    case 94: 
      var $354=$target;
      var $355=(($354+48)|0);
      var $356=HEAP32[(($355)>>2)];
      var $357=(($356)|0);
      var $358=HEAP32[(($357)>>2)];
      var $359=((($358)-(1))|0);
      HEAP32[(($357)>>2)]=$359;
      var $360=(($359)|(0))!=0;
      if ($360) { label = 95; break; } else { label = 96; break; }
    case 95: 
      label = 97; break;
    case 96: 
      var $363=$target;
      var $364=(($363+48)|0);
      var $365=HEAP32[(($364)>>2)];
      var $366=(($365+4)|0);
      var $367=HEAP32[(($366)>>2)];
      var $368=(($367+24)|0);
      var $369=HEAP32[(($368)>>2)];
      var $370=$target;
      var $371=(($370+48)|0);
      var $372=HEAP32[(($371)>>2)];
      FUNCTION_TABLE[$369]($372);
      label = 97; break;
    case 97: 
      label = 98; break;
    case 98: 
      label = 99; break;
    case 99: 
      label = 100; break;
    case 100: 
      var $377=$item;
      var $378=$target;
      var $379=(($378+48)|0);
      HEAP32[(($379)>>2)]=$377;
      var $380=$2;
      var $381=(($380+8)|0);
      var $382=HEAP32[(($381)>>2)];
      _PyExpat_XML_SetNamespaceDeclHandler($382, ((FUNCTION_TABLE_OFFSET + 88)), ((FUNCTION_TABLE_OFFSET + 86)));
      label = 102; break;
    case 101: 
      var $384=HEAP32[((_PyExc_ValueError)>>2)];
      var $385=$event;
      var $386=_PyErr_Format($384, ((__str101)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$385,tempInt));
      $1=0;
      label = 109; break;
    case 102: 
      label = 103; break;
    case 103: 
      label = 104; break;
    case 104: 
      label = 105; break;
    case 105: 
      label = 106; break;
    case 106: 
      var $392=$i;
      var $393=((($392)+(1))|0);
      $i=$393;
      label = 60; break;
    case 107: 
      var $395=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $396=((($395)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$396;
      $1=__Py_NoneStruct;
      label = 109; break;
    case 108: 
      var $398=HEAP32[((_PyExc_TypeError)>>2)];
      _PyErr_SetString($398, ((__str102)|0));
      $1=0;
      label = 109; break;
    case 109: 
      var $400=$1;
      STACKTOP = __stackBase__;
      return $400;
    default: assert(0, "bad label: " + label);
  }
}
function _treebuilder_done($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $res;
      $1=$self;
      var $2=$1;
      var $3=(($2+8)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=(($4)|(0))!=0;
      if ($5) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $7=$1;
      var $8=(($7+8)|0);
      var $9=HEAP32[(($8)>>2)];
      $res=$9;
      label = 4; break;
    case 3: 
      $res=__Py_NoneStruct;
      label = 4; break;
    case 4: 
      var $12=$res;
      var $13=(($12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=((($14)+(1))|0);
      HEAP32[(($13)>>2)]=$15;
      var $16=$res;
      return $16;
    default: assert(0, "bad label: " + label);
  }
}
function _expat_start_ns_handler($self, $prefix, $uri) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $sprefix;
      var $suri;
      $1=$self;
      $2=$prefix;
      $3=$uri;
      $sprefix=0;
      $suri=0;
      var $4=$3;
      var $5=$3;
      var $6=_strlen($5);
      var $7=_makestring($4, $6);
      $suri=$7;
      var $8=$suri;
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 2; break; }
    case 2: 
      label = 23; break;
    case 3: 
      var $12=$2;
      var $13=(($12)|(0))!=0;
      if ($13) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $15=$2;
      var $16=$2;
      var $17=_strlen($16);
      var $18=_makestring($15, $17);
      $sprefix=$18;
      label = 6; break;
    case 5: 
      var $20=_PyString_FromStringAndSize(((__str50)|0), 0);
      $sprefix=$20;
      label = 6; break;
    case 6: 
      var $22=$sprefix;
      var $23=(($22)|(0))!=0;
      if ($23) { label = 13; break; } else { label = 7; break; }
    case 7: 
      label = 8; break;
    case 8: 
      var $26=$suri;
      var $27=(($26)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=((($28)-(1))|0);
      HEAP32[(($27)>>2)]=$29;
      var $30=(($29)|(0))!=0;
      if ($30) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 11; break;
    case 10: 
      var $33=$suri;
      var $34=(($33+4)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35+24)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=$suri;
      FUNCTION_TABLE[$37]($38);
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 23; break;
    case 13: 
      var $42=$1;
      var $43=(($42+12)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=$44;
      var $46=$sprefix;
      var $47=$suri;
      _treebuilder_handle_namespace($45, 1, $46, $47);
      label = 14; break;
    case 14: 
      var $49=$sprefix;
      var $50=(($49)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=((($51)-(1))|0);
      HEAP32[(($50)>>2)]=$52;
      var $53=(($52)|(0))!=0;
      if ($53) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 17; break;
    case 16: 
      var $56=$sprefix;
      var $57=(($56+4)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=(($58+24)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=$sprefix;
      FUNCTION_TABLE[$60]($61);
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $65=$suri;
      var $66=(($65)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=((($67)-(1))|0);
      HEAP32[(($66)>>2)]=$68;
      var $69=(($68)|(0))!=0;
      if ($69) { label = 20; break; } else { label = 21; break; }
    case 20: 
      label = 22; break;
    case 21: 
      var $72=$suri;
      var $73=(($72+4)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=(($74+24)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=$suri;
      FUNCTION_TABLE[$76]($77);
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _expat_end_ns_handler($self, $prefix_in) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$prefix_in;
  var $3=$1;
  var $4=(($3+12)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=$5;
  _treebuilder_handle_namespace($6, 0, 0, 0);
  return;
}
function _treebuilder_handle_namespace($self, $start, $prefix, $uri) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $res;
      var $action;
      var $parcel;
      $1=$self;
      $2=$start;
      $3=$prefix;
      $4=$uri;
      var $5=$1;
      var $6=(($5+32)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|(0))!=0;
      if ($8) { label = 3; break; } else { label = 2; break; }
    case 2: 
      label = 20; break;
    case 3: 
      var $11=$2;
      var $12=(($11)|(0))!=0;
      if ($12) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $14=$1;
      var $15=(($14+44)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16)|(0))!=0;
      if ($17) { label = 6; break; } else { label = 5; break; }
    case 5: 
      label = 20; break;
    case 6: 
      var $20=$1;
      var $21=(($20+44)|0);
      var $22=HEAP32[(($21)>>2)];
      $action=$22;
      var $23=$3;
      var $24=$4;
      var $25=_Py_BuildValue(((__str78)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$23,HEAP32[(((tempInt)+(4))>>2)]=$24,tempInt));
      $parcel=$25;
      var $26=$parcel;
      var $27=(($26)|(0))!=0;
      if ($27) { label = 8; break; } else { label = 7; break; }
    case 7: 
      label = 20; break;
    case 8: 
      var $30=$action;
      var $31=(($30)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=((($32)+(1))|0);
      HEAP32[(($31)>>2)]=$33;
      label = 12; break;
    case 9: 
      var $35=$1;
      var $36=(($35+48)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37)|(0))!=0;
      if ($38) { label = 11; break; } else { label = 10; break; }
    case 10: 
      label = 20; break;
    case 11: 
      var $41=$1;
      var $42=(($41+48)|0);
      var $43=HEAP32[(($42)>>2)];
      $action=$43;
      var $44=$action;
      var $45=(($44)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=((($46)+(1))|0);
      HEAP32[(($45)>>2)]=$47;
      $parcel=__Py_NoneStruct;
      var $48=$parcel;
      var $49=(($48)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=((($50)+(1))|0);
      HEAP32[(($49)>>2)]=$51;
      label = 12; break;
    case 12: 
      var $53=_PyTuple_New(2);
      $res=$53;
      var $54=$res;
      var $55=(($54)|(0))!=0;
      if ($55) { label = 13; break; } else { label = 19; break; }
    case 13: 
      var $57=$action;
      var $58=$res;
      var $59=$58;
      var $60=(($59+12)|0);
      var $61=(($60)|0);
      HEAP32[(($61)>>2)]=$57;
      var $62=$parcel;
      var $63=$res;
      var $64=$63;
      var $65=(($64+12)|0);
      var $66=(($65+4)|0);
      HEAP32[(($66)>>2)]=$62;
      var $67=$1;
      var $68=(($67+32)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=$res;
      var $71=_PyList_Append($69, $70);
      label = 14; break;
    case 14: 
      var $73=$res;
      var $74=(($73)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=((($75)-(1))|0);
      HEAP32[(($74)>>2)]=$76;
      var $77=(($76)|(0))!=0;
      if ($77) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 17; break;
    case 16: 
      var $80=$res;
      var $81=(($80+4)|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=(($82+24)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=$res;
      FUNCTION_TABLE[$84]($85);
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 20; break;
    case 19: 
      _PyErr_Clear();
      label = 20; break;
    case 20: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _expat_parse($self, $data, $data_len, $final) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $ok;
      $2=$self;
      $3=$data;
      $4=$data_len;
      $5=$final;
      var $6=$2;
      var $7=(($6+8)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=$3;
      var $10=$4;
      var $11=$5;
      var $12=_PyExpat_XML_Parse($8, $9, $10, $11);
      $ok=$12;
      var $13=_PyErr_Occurred();
      var $14=(($13)|(0))!=0;
      if ($14) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 6; break;
    case 3: 
      var $17=$ok;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $20=$2;
      var $21=(($20+8)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=_PyExpat_XML_GetErrorCode($22);
      var $24=_PyExpat_XML_ErrorString($23);
      var $25=$2;
      var $26=(($25+8)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=_PyExpat_XML_GetCurrentLineNumber($27);
      var $29=$2;
      var $30=(($29+8)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=_PyExpat_XML_GetCurrentColumnNumber($31);
      _expat_set_error($24, $28, $32);
      $1=0;
      label = 6; break;
    case 5: 
      var $34=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $35=((($34)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$35;
      $1=__Py_NoneStruct;
      label = 6; break;
    case 6: 
      var $37=$1;
      return $37;
    default: assert(0, "bad label: " + label);
  }
}
function _element_dealloc($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$self;
      var $2=$1;
      var $3=(($2+20)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=(($4)|(0))!=0;
      if ($5) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $7=$1;
      _element_dealloc_extra($7);
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $10=$1;
      var $11=(($10+8)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=((($14)-(1))|0);
      HEAP32[(($13)>>2)]=$15;
      var $16=(($15)|(0))!=0;
      if ($16) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 7; break;
    case 6: 
      var $19=$1;
      var $20=(($19+8)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21+4)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+24)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=$1;
      var $27=(($26+8)|0);
      var $28=HEAP32[(($27)>>2)];
      FUNCTION_TABLE[$25]($28);
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $32=$1;
      var $33=(($32+12)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=$34;
      var $36=$35 & -2;
      var $37=$36;
      var $38=(($37)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=((($39)-(1))|0);
      HEAP32[(($38)>>2)]=$40;
      var $41=(($40)|(0))!=0;
      if ($41) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 12; break;
    case 11: 
      var $44=$1;
      var $45=(($44+12)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=$46;
      var $48=$47 & -2;
      var $49=$48;
      var $50=(($49+4)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=(($51+24)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=$1;
      var $55=(($54+12)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=$56;
      var $58=$57 & -2;
      var $59=$58;
      FUNCTION_TABLE[$53]($59);
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $63=$1;
      var $64=(($63+16)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=$65;
      var $67=$66 & -2;
      var $68=$67;
      var $69=(($68)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=((($70)-(1))|0);
      HEAP32[(($69)>>2)]=$71;
      var $72=(($71)|(0))!=0;
      if ($72) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 17; break;
    case 16: 
      var $75=$1;
      var $76=(($75+16)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=$77;
      var $79=$78 & -2;
      var $80=$79;
      var $81=(($80+4)|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=(($82+24)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=$1;
      var $86=(($85+16)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=$87;
      var $89=$88 & -2;
      var $90=$89;
      FUNCTION_TABLE[$84]($90);
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $93=$1;
      var $94=$93;
      _PyObject_Free($94);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _element_getattr($self, $name) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $res;
      $2=$self;
      $3=$name;
      var $4=$3;
      var $5=_strcmp($4, ((__str114)|0));
      var $6=(($5)|(0))==0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=$2;
      var $9=(($8+8)|0);
      var $10=HEAP32[(($9)>>2)];
      $res=$10;
      var $11=$res;
      var $12=(($11)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=((($13)+(1))|0);
      HEAP32[(($12)>>2)]=$14;
      var $15=$res;
      $1=$15;
      label = 19; break;
    case 3: 
      var $17=$3;
      var $18=_strcmp($17, ((__str115)|0));
      var $19=(($18)|(0))==0;
      if ($19) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $21=$2;
      var $22=_element_get_text($21);
      $res=$22;
      var $23=$res;
      var $24=(($23)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=((($25)+(1))|0);
      HEAP32[(($24)>>2)]=$26;
      var $27=$res;
      $1=$27;
      label = 19; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $30=$2;
      var $31=$30;
      var $32=$3;
      var $33=_Py_FindMethod(((_element_methods)|0), $31, $32);
      $res=$33;
      var $34=$res;
      var $35=(($34)|(0))!=0;
      if ($35) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $37=$res;
      $1=$37;
      label = 19; break;
    case 8: 
      _PyErr_Clear();
      var $39=$3;
      var $40=_strcmp($39, ((__str116)|0));
      var $41=(($40)|(0))==0;
      if ($41) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $43=$2;
      var $44=_element_get_tail($43);
      $res=$44;
      label = 16; break;
    case 10: 
      var $46=$3;
      var $47=_strcmp($46, ((__str117)|0));
      var $48=(($47)|(0))==0;
      if ($48) { label = 11; break; } else { label = 14; break; }
    case 11: 
      var $50=$2;
      var $51=(($50+20)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=(($52)|(0))!=0;
      if ($53) { label = 13; break; } else { label = 12; break; }
    case 12: 
      var $55=$2;
      var $56=_element_new_extra($55, 0);
      label = 13; break;
    case 13: 
      var $58=$2;
      var $59=_element_get_attrib($58);
      $res=$59;
      label = 15; break;
    case 14: 
      var $61=HEAP32[((_PyExc_AttributeError)>>2)];
      var $62=$3;
      _PyErr_SetString($61, $62);
      $1=0;
      label = 19; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $65=$res;
      var $66=(($65)|(0))!=0;
      if ($66) { label = 18; break; } else { label = 17; break; }
    case 17: 
      $1=0;
      label = 19; break;
    case 18: 
      var $69=$res;
      var $70=(($69)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=((($71)+(1))|0);
      HEAP32[(($70)>>2)]=$72;
      var $73=$res;
      $1=$73;
      label = 19; break;
    case 19: 
      var $75=$1;
      return $75;
    default: assert(0, "bad label: " + label);
  }
}
function _element_setattr($self, $name, $value) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $2=$self;
      $3=$name;
      $4=$value;
      var $5=$4;
      var $6=(($5)|(0))==0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=HEAP32[((_PyExc_AttributeError)>>2)];
      _PyErr_SetString($8, ((__str113)|0));
      $1=-1;
      label = 38; break;
    case 3: 
      var $10=$3;
      var $11=_strcmp($10, ((__str114)|0));
      var $12=(($11)|(0))==0;
      if ($12) { label = 4; break; } else { label = 10; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $15=$2;
      var $16=(($15+8)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=((($19)-(1))|0);
      HEAP32[(($18)>>2)]=$20;
      var $21=(($20)|(0))!=0;
      if ($21) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 8; break;
    case 7: 
      var $24=$2;
      var $25=(($24+8)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26+4)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28+24)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=$2;
      var $32=(($31+8)|0);
      var $33=HEAP32[(($32)>>2)];
      FUNCTION_TABLE[$30]($33);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $36=$4;
      var $37=$2;
      var $38=(($37+8)|0);
      HEAP32[(($38)>>2)]=$36;
      var $39=$2;
      var $40=(($39+8)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($41)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=((($43)+(1))|0);
      HEAP32[(($42)>>2)]=$44;
      label = 37; break;
    case 10: 
      var $46=$3;
      var $47=_strcmp($46, ((__str115)|0));
      var $48=(($47)|(0))==0;
      if ($48) { label = 11; break; } else { label = 17; break; }
    case 11: 
      label = 12; break;
    case 12: 
      var $51=$2;
      var $52=(($51+12)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=$53;
      var $55=$54 & -2;
      var $56=$55;
      var $57=(($56)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=((($58)-(1))|0);
      HEAP32[(($57)>>2)]=$59;
      var $60=(($59)|(0))!=0;
      if ($60) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 15; break;
    case 14: 
      var $63=$2;
      var $64=(($63+12)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=$65;
      var $67=$66 & -2;
      var $68=$67;
      var $69=(($68+4)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=(($70+24)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=$2;
      var $74=(($73+12)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=$75;
      var $77=$76 & -2;
      var $78=$77;
      FUNCTION_TABLE[$72]($78);
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $81=$4;
      var $82=$2;
      var $83=(($82+12)|0);
      HEAP32[(($83)>>2)]=$81;
      var $84=$2;
      var $85=(($84+12)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=(($86)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=((($88)+(1))|0);
      HEAP32[(($87)>>2)]=$89;
      label = 36; break;
    case 17: 
      var $91=$3;
      var $92=_strcmp($91, ((__str116)|0));
      var $93=(($92)|(0))==0;
      if ($93) { label = 18; break; } else { label = 24; break; }
    case 18: 
      label = 19; break;
    case 19: 
      var $96=$2;
      var $97=(($96+16)|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=$98;
      var $100=$99 & -2;
      var $101=$100;
      var $102=(($101)|0);
      var $103=HEAP32[(($102)>>2)];
      var $104=((($103)-(1))|0);
      HEAP32[(($102)>>2)]=$104;
      var $105=(($104)|(0))!=0;
      if ($105) { label = 20; break; } else { label = 21; break; }
    case 20: 
      label = 22; break;
    case 21: 
      var $108=$2;
      var $109=(($108+16)|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=$110;
      var $112=$111 & -2;
      var $113=$112;
      var $114=(($113+4)|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=(($115+24)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=$2;
      var $119=(($118+16)|0);
      var $120=HEAP32[(($119)>>2)];
      var $121=$120;
      var $122=$121 & -2;
      var $123=$122;
      FUNCTION_TABLE[$117]($123);
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $126=$4;
      var $127=$2;
      var $128=(($127+16)|0);
      HEAP32[(($128)>>2)]=$126;
      var $129=$2;
      var $130=(($129+16)|0);
      var $131=HEAP32[(($130)>>2)];
      var $132=(($131)|0);
      var $133=HEAP32[(($132)>>2)];
      var $134=((($133)+(1))|0);
      HEAP32[(($132)>>2)]=$134;
      label = 35; break;
    case 24: 
      var $136=$3;
      var $137=_strcmp($136, ((__str117)|0));
      var $138=(($137)|(0))==0;
      if ($138) { label = 25; break; } else { label = 33; break; }
    case 25: 
      var $140=$2;
      var $141=(($140+20)|0);
      var $142=HEAP32[(($141)>>2)];
      var $143=(($142)|(0))!=0;
      if ($143) { label = 27; break; } else { label = 26; break; }
    case 26: 
      var $145=$2;
      var $146=_element_new_extra($145, 0);
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      var $149=$2;
      var $150=(($149+20)|0);
      var $151=HEAP32[(($150)>>2)];
      var $152=(($151)|0);
      var $153=HEAP32[(($152)>>2)];
      var $154=(($153)|0);
      var $155=HEAP32[(($154)>>2)];
      var $156=((($155)-(1))|0);
      HEAP32[(($154)>>2)]=$156;
      var $157=(($156)|(0))!=0;
      if ($157) { label = 29; break; } else { label = 30; break; }
    case 29: 
      label = 31; break;
    case 30: 
      var $160=$2;
      var $161=(($160+20)|0);
      var $162=HEAP32[(($161)>>2)];
      var $163=(($162)|0);
      var $164=HEAP32[(($163)>>2)];
      var $165=(($164+4)|0);
      var $166=HEAP32[(($165)>>2)];
      var $167=(($166+24)|0);
      var $168=HEAP32[(($167)>>2)];
      var $169=$2;
      var $170=(($169+20)|0);
      var $171=HEAP32[(($170)>>2)];
      var $172=(($171)|0);
      var $173=HEAP32[(($172)>>2)];
      FUNCTION_TABLE[$168]($173);
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      var $176=$4;
      var $177=$2;
      var $178=(($177+20)|0);
      var $179=HEAP32[(($178)>>2)];
      var $180=(($179)|0);
      HEAP32[(($180)>>2)]=$176;
      var $181=$2;
      var $182=(($181+20)|0);
      var $183=HEAP32[(($182)>>2)];
      var $184=(($183)|0);
      var $185=HEAP32[(($184)>>2)];
      var $186=(($185)|0);
      var $187=HEAP32[(($186)>>2)];
      var $188=((($187)+(1))|0);
      HEAP32[(($186)>>2)]=$188;
      label = 34; break;
    case 33: 
      var $190=HEAP32[((_PyExc_AttributeError)>>2)];
      var $191=$3;
      _PyErr_SetString($190, $191);
      $1=-1;
      label = 38; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      $1=0;
      label = 38; break;
    case 38: 
      var $197=$1;
      return $197;
    default: assert(0, "bad label: " + label);
  }
}
function _element_length($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $2=$self;
      var $3=$2;
      var $4=(($3+20)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 4; break;
    case 3: 
      var $9=$2;
      var $10=(($9+20)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11+4)|0);
      var $13=HEAP32[(($12)>>2)];
      $1=$13;
      label = 4; break;
    case 4: 
      var $15=$1;
      return $15;
    default: assert(0, "bad label: " + label);
  }
}
function _element_repr($self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $repr;
      var $tag;
      $2=$self;
      var $3=$2;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=_PyObject_Repr($5);
      $tag=$6;
      var $7=$tag;
      var $8=(($7)|(0))!=0;
      if ($8) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 9; break;
    case 3: 
      var $11=$tag;
      var $12=$11;
      var $13=(($12+20)|0);
      var $14=(($13)|0);
      var $15=$2;
      var $16=_PyString_FromFormat(((__str112)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$14,HEAP32[(((tempInt)+(4))>>2)]=$15,tempInt));
      $repr=$16;
      label = 4; break;
    case 4: 
      var $18=$tag;
      var $19=(($18)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=((($20)-(1))|0);
      HEAP32[(($19)>>2)]=$21;
      var $22=(($21)|(0))!=0;
      if ($22) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 7; break;
    case 6: 
      var $25=$tag;
      var $26=(($25+4)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27+24)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=$tag;
      FUNCTION_TABLE[$29]($30);
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $33=$repr;
      $1=$33;
      label = 9; break;
    case 9: 
      var $35=$1;
      STACKTOP = __stackBase__;
      return $35;
    default: assert(0, "bad label: " + label);
  }
}
function _element_subscr($self_, $item) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $self;
      var $i;
      var $start=__stackBase__;
      var $stop=(__stackBase__)+(4);
      var $step=(__stackBase__)+(8);
      var $slicelen=(__stackBase__)+(12);
      var $cur;
      var $i1;
      var $list;
      var $item2;
      $2=$self_;
      $3=$item;
      var $4=$2;
      var $5=$4;
      $self=$5;
      var $6=$3;
      var $7=(($6+4)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8+48)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|(0))!=0;
      if ($11) { label = 2; break; } else { label = 11; break; }
    case 2: 
      var $13=$3;
      var $14=(($13+4)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15+84)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=$17 & 131072;
      var $19=(($18)|(0))!=0;
      if ($19) { label = 3; break; } else { label = 11; break; }
    case 3: 
      var $21=$3;
      var $22=(($21+4)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+48)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25+152)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27)|(0))!=0;
      if ($28) { label = 4; break; } else { label = 11; break; }
    case 4: 
      var $30=$3;
      var $31=HEAP32[((_PyExc_IndexError)>>2)];
      var $32=_PyNumber_AsSsize_t($30, $31);
      $i=$32;
      var $33=$i;
      var $34=(($33)|(0))==-1;
      if ($34) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $36=_PyErr_Occurred();
      var $37=(($36)|(0))!=0;
      if ($37) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $1=0;
      label = 26; break;
    case 7: 
      var $40=$i;
      var $41=(($40)|(0)) < 0;
      if ($41) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $43=$self;
      var $44=(($43+20)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=(($45)|(0))!=0;
      if ($46) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $48=$self;
      var $49=(($48+20)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=(($50+4)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=$i;
      var $54=((($53)+($52))|0);
      $i=$54;
      label = 10; break;
    case 10: 
      var $56=$2;
      var $57=$i;
      var $58=_element_getitem($56, $57);
      $1=$58;
      label = 26; break;
    case 11: 
      var $60=$3;
      var $61=(($60+4)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=(($62)|(0))==((_PySlice_Type)|(0));
      if ($63) { label = 12; break; } else { label = 25; break; }
    case 12: 
      var $65=$self;
      var $66=(($65+20)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=(($67)|(0))!=0;
      if ($68) { label = 14; break; } else { label = 13; break; }
    case 13: 
      var $70=_PyList_New(0);
      $1=$70;
      label = 26; break;
    case 14: 
      var $72=$3;
      var $73=$72;
      var $74=$self;
      var $75=(($74+20)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=(($76+4)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=_PySlice_GetIndicesEx($73, $78, $start, $stop, $step, $slicelen);
      var $80=(($79)|(0)) < 0;
      if ($80) { label = 15; break; } else { label = 16; break; }
    case 15: 
      $1=0;
      label = 26; break;
    case 16: 
      var $83=HEAP32[(($slicelen)>>2)];
      var $84=(($83)|(0)) <= 0;
      if ($84) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $86=_PyList_New(0);
      $1=$86;
      label = 26; break;
    case 18: 
      var $88=HEAP32[(($slicelen)>>2)];
      var $89=_PyList_New($88);
      $list=$89;
      var $90=$list;
      var $91=(($90)|(0))!=0;
      if ($91) { label = 20; break; } else { label = 19; break; }
    case 19: 
      $1=0;
      label = 26; break;
    case 20: 
      var $94=HEAP32[(($start)>>2)];
      $cur=$94;
      $i1=0;
      label = 21; break;
    case 21: 
      var $96=$i1;
      var $97=HEAP32[(($slicelen)>>2)];
      var $98=(($96)|(0)) < (($97)|(0));
      if ($98) { label = 22; break; } else { label = 24; break; }
    case 22: 
      var $100=$cur;
      var $101=$self;
      var $102=(($101+20)|0);
      var $103=HEAP32[(($102)>>2)];
      var $104=(($103+12)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=(($105+($100<<2))|0);
      var $107=HEAP32[(($106)>>2)];
      $item2=$107;
      var $108=$item2;
      var $109=(($108)|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=((($110)+(1))|0);
      HEAP32[(($109)>>2)]=$111;
      var $112=$item2;
      var $113=$i1;
      var $114=$list;
      var $115=$114;
      var $116=(($115+12)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=(($117+($113<<2))|0);
      HEAP32[(($118)>>2)]=$112;
      label = 23; break;
    case 23: 
      var $120=HEAP32[(($step)>>2)];
      var $121=$cur;
      var $122=((($121)+($120))|0);
      $cur=$122;
      var $123=$i1;
      var $124=((($123)+(1))|0);
      $i1=$124;
      label = 21; break;
    case 24: 
      var $126=$list;
      $1=$126;
      label = 26; break;
    case 25: 
      var $128=HEAP32[((_PyExc_TypeError)>>2)];
      _PyErr_SetString($128, ((__str109)|0));
      $1=0;
      label = 26; break;
    case 26: 
      var $130=$1;
      STACKTOP = __stackBase__;
      return $130;
    default: assert(0, "bad label: " + label);
  }
}
function _element_ass_subscr($self_, $item, $value) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $self;
      var $i;
      var $start=__stackBase__;
      var $stop=(__stackBase__)+(4);
      var $step=(__stackBase__)+(8);
      var $slicelen=(__stackBase__)+(12);
      var $newlen;
      var $cur;
      var $i1;
      var $recycle;
      var $seq;
      var $element;
      $2=$self_;
      $3=$item;
      $4=$value;
      var $5=$2;
      var $6=$5;
      $self=$6;
      var $7=$3;
      var $8=(($7+4)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9+48)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 2; break; } else { label = 11; break; }
    case 2: 
      var $14=$3;
      var $15=(($14+4)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16+84)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=$18 & 131072;
      var $20=(($19)|(0))!=0;
      if ($20) { label = 3; break; } else { label = 11; break; }
    case 3: 
      var $22=$3;
      var $23=(($22+4)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24+48)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26+152)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28)|(0))!=0;
      if ($29) { label = 4; break; } else { label = 11; break; }
    case 4: 
      var $31=$3;
      var $32=HEAP32[((_PyExc_IndexError)>>2)];
      var $33=_PyNumber_AsSsize_t($31, $32);
      $i=$33;
      var $34=$i;
      var $35=(($34)|(0))==-1;
      if ($35) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $37=_PyErr_Occurred();
      var $38=(($37)|(0))!=0;
      if ($38) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $1=-1;
      label = 89; break;
    case 7: 
      var $41=$i;
      var $42=(($41)|(0)) < 0;
      if ($42) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $44=$self;
      var $45=(($44+20)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46)|(0))!=0;
      if ($47) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $49=$self;
      var $50=(($49+20)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=(($51+4)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=$i;
      var $55=((($54)+($53))|0);
      $i=$55;
      label = 10; break;
    case 10: 
      var $57=$2;
      var $58=$i;
      var $59=$4;
      var $60=_element_setitem($57, $58, $59);
      $1=$60;
      label = 89; break;
    case 11: 
      var $62=$3;
      var $63=(($62+4)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=(($64)|(0))==((_PySlice_Type)|(0));
      if ($65) { label = 12; break; } else { label = 88; break; }
    case 12: 
      $recycle=0;
      $seq=0;
      var $67=$self;
      var $68=(($67+20)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=(($69)|(0))!=0;
      if ($70) { label = 14; break; } else { label = 13; break; }
    case 13: 
      var $72=$self;
      var $73=_element_new_extra($72, 0);
      label = 14; break;
    case 14: 
      var $75=$3;
      var $76=$75;
      var $77=$self;
      var $78=(($77+20)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=(($79+4)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=_PySlice_GetIndicesEx($76, $81, $start, $stop, $step, $slicelen);
      var $83=(($82)|(0)) < 0;
      if ($83) { label = 15; break; } else { label = 16; break; }
    case 15: 
      $1=-1;
      label = 89; break;
    case 16: 
      var $86=$4;
      var $87=(($86)|(0))==0;
      if ($87) { label = 17; break; } else { label = 18; break; }
    case 17: 
      $newlen=0;
      label = 21; break;
    case 18: 
      var $90=$4;
      var $91=_PySequence_Fast($90, ((__str50)|0));
      $seq=$91;
      var $92=$seq;
      var $93=(($92)|(0))!=0;
      if ($93) { label = 20; break; } else { label = 19; break; }
    case 19: 
      var $95=HEAP32[((_PyExc_TypeError)>>2)];
      var $96=$4;
      var $97=(($96+4)|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=(($98+12)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=_PyErr_Format($95, ((__str51)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$100,tempInt));
      $1=-1;
      label = 89; break;
    case 20: 
      var $103=$seq;
      var $104=_PySequence_Size($103);
      $newlen=$104;
      label = 21; break;
    case 21: 
      var $106=HEAP32[(($step)>>2)];
      var $107=(($106)|(0))!=1;
      if ($107) { label = 22; break; } else { label = 24; break; }
    case 22: 
      var $109=$newlen;
      var $110=HEAP32[(($slicelen)>>2)];
      var $111=(($109)|(0))!=(($110)|(0));
      if ($111) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $113=HEAP32[((_PyExc_ValueError)>>2)];
      var $114=$newlen;
      var $115=HEAP32[(($slicelen)>>2)];
      var $116=_PyErr_Format($113, ((__str108)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$114,HEAP32[(((tempInt)+(4))>>2)]=$115,tempInt));
      $1=-1;
      label = 89; break;
    case 24: 
      var $118=$newlen;
      var $119=HEAP32[(($slicelen)>>2)];
      var $120=(($118)|(0)) > (($119)|(0));
      if ($120) { label = 25; break; } else { label = 35; break; }
    case 25: 
      var $122=$self;
      var $123=$newlen;
      var $124=HEAP32[(($slicelen)>>2)];
      var $125=((($123)-($124))|0);
      var $126=_element_resize($122, $125);
      var $127=(($126)|(0)) < 0;
      if ($127) { label = 26; break; } else { label = 34; break; }
    case 26: 
      var $129=$seq;
      var $130=(($129)|(0))!=0;
      if ($130) { label = 27; break; } else { label = 33; break; }
    case 27: 
      label = 28; break;
    case 28: 
      var $133=$seq;
      var $134=(($133)|0);
      var $135=HEAP32[(($134)>>2)];
      var $136=((($135)-(1))|0);
      HEAP32[(($134)>>2)]=$136;
      var $137=(($136)|(0))!=0;
      if ($137) { label = 29; break; } else { label = 30; break; }
    case 29: 
      label = 31; break;
    case 30: 
      var $140=$seq;
      var $141=(($140+4)|0);
      var $142=HEAP32[(($141)>>2)];
      var $143=(($142+24)|0);
      var $144=HEAP32[(($143)>>2)];
      var $145=$seq;
      FUNCTION_TABLE[$144]($145);
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      $1=-1;
      label = 89; break;
    case 34: 
      label = 35; break;
    case 35: 
      var $151=HEAP32[(($slicelen)>>2)];
      var $152=(($151)|(0)) > 0;
      if ($152) { label = 36; break; } else { label = 50; break; }
    case 36: 
      var $154=HEAP32[(($slicelen)>>2)];
      var $155=_PyList_New($154);
      $recycle=$155;
      var $156=$recycle;
      var $157=(($156)|(0))!=0;
      if ($157) { label = 45; break; } else { label = 37; break; }
    case 37: 
      var $159=$seq;
      var $160=(($159)|(0))!=0;
      if ($160) { label = 38; break; } else { label = 44; break; }
    case 38: 
      label = 39; break;
    case 39: 
      var $163=$seq;
      var $164=(($163)|0);
      var $165=HEAP32[(($164)>>2)];
      var $166=((($165)-(1))|0);
      HEAP32[(($164)>>2)]=$166;
      var $167=(($166)|(0))!=0;
      if ($167) { label = 40; break; } else { label = 41; break; }
    case 40: 
      label = 42; break;
    case 41: 
      var $170=$seq;
      var $171=(($170+4)|0);
      var $172=HEAP32[(($171)>>2)];
      var $173=(($172+24)|0);
      var $174=HEAP32[(($173)>>2)];
      var $175=$seq;
      FUNCTION_TABLE[$174]($175);
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      $1=-1;
      label = 89; break;
    case 45: 
      var $180=HEAP32[(($start)>>2)];
      $cur=$180;
      $i1=0;
      label = 46; break;
    case 46: 
      var $182=$i1;
      var $183=HEAP32[(($slicelen)>>2)];
      var $184=(($182)|(0)) < (($183)|(0));
      if ($184) { label = 47; break; } else { label = 49; break; }
    case 47: 
      var $186=$cur;
      var $187=$self;
      var $188=(($187+20)|0);
      var $189=HEAP32[(($188)>>2)];
      var $190=(($189+12)|0);
      var $191=HEAP32[(($190)>>2)];
      var $192=(($191+($186<<2))|0);
      var $193=HEAP32[(($192)>>2)];
      var $194=$i1;
      var $195=$recycle;
      var $196=$195;
      var $197=(($196+12)|0);
      var $198=HEAP32[(($197)>>2)];
      var $199=(($198+($194<<2))|0);
      HEAP32[(($199)>>2)]=$193;
      label = 48; break;
    case 48: 
      var $201=HEAP32[(($step)>>2)];
      var $202=$cur;
      var $203=((($202)+($201))|0);
      $cur=$203;
      var $204=$i1;
      var $205=((($204)+(1))|0);
      $i1=$205;
      label = 46; break;
    case 49: 
      label = 50; break;
    case 50: 
      var $208=$newlen;
      var $209=HEAP32[(($slicelen)>>2)];
      var $210=(($208)|(0)) < (($209)|(0));
      if ($210) { label = 51; break; } else { label = 56; break; }
    case 51: 
      var $212=HEAP32[(($stop)>>2)];
      $i1=$212;
      label = 52; break;
    case 52: 
      var $214=$i1;
      var $215=$self;
      var $216=(($215+20)|0);
      var $217=HEAP32[(($216)>>2)];
      var $218=(($217+4)|0);
      var $219=HEAP32[(($218)>>2)];
      var $220=(($214)|(0)) < (($219)|(0));
      if ($220) { label = 53; break; } else { label = 55; break; }
    case 53: 
      var $222=$i1;
      var $223=$self;
      var $224=(($223+20)|0);
      var $225=HEAP32[(($224)>>2)];
      var $226=(($225+12)|0);
      var $227=HEAP32[(($226)>>2)];
      var $228=(($227+($222<<2))|0);
      var $229=HEAP32[(($228)>>2)];
      var $230=$i1;
      var $231=$newlen;
      var $232=((($230)+($231))|0);
      var $233=HEAP32[(($slicelen)>>2)];
      var $234=((($232)-($233))|0);
      var $235=$self;
      var $236=(($235+20)|0);
      var $237=HEAP32[(($236)>>2)];
      var $238=(($237+12)|0);
      var $239=HEAP32[(($238)>>2)];
      var $240=(($239+($234<<2))|0);
      HEAP32[(($240)>>2)]=$229;
      label = 54; break;
    case 54: 
      var $242=$i1;
      var $243=((($242)+(1))|0);
      $i1=$243;
      label = 52; break;
    case 55: 
      label = 63; break;
    case 56: 
      var $246=$newlen;
      var $247=HEAP32[(($slicelen)>>2)];
      var $248=(($246)|(0)) > (($247)|(0));
      if ($248) { label = 57; break; } else { label = 62; break; }
    case 57: 
      var $250=$self;
      var $251=(($250+20)|0);
      var $252=HEAP32[(($251)>>2)];
      var $253=(($252+4)|0);
      var $254=HEAP32[(($253)>>2)];
      var $255=((($254)-(1))|0);
      $i1=$255;
      label = 58; break;
    case 58: 
      var $257=$i1;
      var $258=HEAP32[(($stop)>>2)];
      var $259=(($257)|(0)) >= (($258)|(0));
      if ($259) { label = 59; break; } else { label = 61; break; }
    case 59: 
      var $261=$i1;
      var $262=$self;
      var $263=(($262+20)|0);
      var $264=HEAP32[(($263)>>2)];
      var $265=(($264+12)|0);
      var $266=HEAP32[(($265)>>2)];
      var $267=(($266+($261<<2))|0);
      var $268=HEAP32[(($267)>>2)];
      var $269=$i1;
      var $270=$newlen;
      var $271=((($269)+($270))|0);
      var $272=HEAP32[(($slicelen)>>2)];
      var $273=((($271)-($272))|0);
      var $274=$self;
      var $275=(($274+20)|0);
      var $276=HEAP32[(($275)>>2)];
      var $277=(($276+12)|0);
      var $278=HEAP32[(($277)>>2)];
      var $279=(($278+($273<<2))|0);
      HEAP32[(($279)>>2)]=$268;
      label = 60; break;
    case 60: 
      var $281=$i1;
      var $282=((($281)-(1))|0);
      $i1=$282;
      label = 58; break;
    case 61: 
      label = 62; break;
    case 62: 
      label = 63; break;
    case 63: 
      var $286=HEAP32[(($start)>>2)];
      $cur=$286;
      $i1=0;
      label = 64; break;
    case 64: 
      var $288=$i1;
      var $289=$newlen;
      var $290=(($288)|(0)) < (($289)|(0));
      if ($290) { label = 65; break; } else { label = 70; break; }
    case 65: 
      var $292=$seq;
      var $293=(($292+4)|0);
      var $294=HEAP32[(($293)>>2)];
      var $295=(($294+84)|0);
      var $296=HEAP32[(($295)>>2)];
      var $297=$296 & 33554432;
      var $298=(($297)|(0))!=0;
      if ($298) { label = 66; break; } else { label = 67; break; }
    case 66: 
      var $300=$i1;
      var $301=$seq;
      var $302=$301;
      var $303=(($302+12)|0);
      var $304=HEAP32[(($303)>>2)];
      var $305=(($304+($300<<2))|0);
      var $306=HEAP32[(($305)>>2)];
      var $315 = $306;label = 68; break;
    case 67: 
      var $308=$i1;
      var $309=$seq;
      var $310=$309;
      var $311=(($310+12)|0);
      var $312=(($311+($308<<2))|0);
      var $313=HEAP32[(($312)>>2)];
      var $315 = $313;label = 68; break;
    case 68: 
      var $315;
      $element=$315;
      var $316=$element;
      var $317=(($316)|0);
      var $318=HEAP32[(($317)>>2)];
      var $319=((($318)+(1))|0);
      HEAP32[(($317)>>2)]=$319;
      var $320=$element;
      var $321=$cur;
      var $322=$self;
      var $323=(($322+20)|0);
      var $324=HEAP32[(($323)>>2)];
      var $325=(($324+12)|0);
      var $326=HEAP32[(($325)>>2)];
      var $327=(($326+($321<<2))|0);
      HEAP32[(($327)>>2)]=$320;
      label = 69; break;
    case 69: 
      var $329=HEAP32[(($step)>>2)];
      var $330=$cur;
      var $331=((($330)+($329))|0);
      $cur=$331;
      var $332=$i1;
      var $333=((($332)+(1))|0);
      $i1=$333;
      label = 64; break;
    case 70: 
      var $335=$newlen;
      var $336=HEAP32[(($slicelen)>>2)];
      var $337=((($335)-($336))|0);
      var $338=$self;
      var $339=(($338+20)|0);
      var $340=HEAP32[(($339)>>2)];
      var $341=(($340+4)|0);
      var $342=HEAP32[(($341)>>2)];
      var $343=((($342)+($337))|0);
      HEAP32[(($341)>>2)]=$343;
      var $344=$seq;
      var $345=(($344)|(0))!=0;
      if ($345) { label = 71; break; } else { label = 77; break; }
    case 71: 
      label = 72; break;
    case 72: 
      var $348=$seq;
      var $349=(($348)|0);
      var $350=HEAP32[(($349)>>2)];
      var $351=((($350)-(1))|0);
      HEAP32[(($349)>>2)]=$351;
      var $352=(($351)|(0))!=0;
      if ($352) { label = 73; break; } else { label = 74; break; }
    case 73: 
      label = 75; break;
    case 74: 
      var $355=$seq;
      var $356=(($355+4)|0);
      var $357=HEAP32[(($356)>>2)];
      var $358=(($357+24)|0);
      var $359=HEAP32[(($358)>>2)];
      var $360=$seq;
      FUNCTION_TABLE[$359]($360);
      label = 75; break;
    case 75: 
      label = 76; break;
    case 76: 
      label = 77; break;
    case 77: 
      label = 78; break;
    case 78: 
      var $365=$recycle;
      var $366=(($365)|(0))==0;
      if ($366) { label = 79; break; } else { label = 80; break; }
    case 79: 
      label = 86; break;
    case 80: 
      label = 81; break;
    case 81: 
      var $370=$recycle;
      var $371=(($370)|0);
      var $372=HEAP32[(($371)>>2)];
      var $373=((($372)-(1))|0);
      HEAP32[(($371)>>2)]=$373;
      var $374=(($373)|(0))!=0;
      if ($374) { label = 82; break; } else { label = 83; break; }
    case 82: 
      label = 84; break;
    case 83: 
      var $377=$recycle;
      var $378=(($377+4)|0);
      var $379=HEAP32[(($378)>>2)];
      var $380=(($379+24)|0);
      var $381=HEAP32[(($380)>>2)];
      var $382=$recycle;
      FUNCTION_TABLE[$381]($382);
      label = 84; break;
    case 84: 
      label = 85; break;
    case 85: 
      label = 86; break;
    case 86: 
      label = 87; break;
    case 87: 
      $1=0;
      label = 89; break;
    case 88: 
      var $388=HEAP32[((_PyExc_TypeError)>>2)];
      _PyErr_SetString($388, ((__str109)|0));
      $1=-1;
      label = 89; break;
    case 89: 
      var $390=$1;
      STACKTOP = __stackBase__;
      return $390;
    default: assert(0, "bad label: " + label);
  }
}
function _treebuilder_handle_xml($self, $encoding, $standalone) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$self;
  $2=$encoding;
  $3=$standalone;
  var $4=HEAP32[((((__Py_NoneStruct)|0))>>2)];
  var $5=((($4)+(1))|0);
  HEAP32[((((__Py_NoneStruct)|0))>>2)]=$5;
  return __Py_NoneStruct;
}
function _element_setitem($self_, $index, $item) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $self;
      var $i;
      var $old;
      $2=$self_;
      $3=$index;
      $4=$item;
      var $5=$2;
      var $6=$5;
      $self=$6;
      var $7=$self;
      var $8=(($7+20)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9)|(0))!=0;
      if ($10) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $12=$3;
      var $13=(($12)|(0)) < 0;
      if ($13) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $15=$3;
      var $16=$self;
      var $17=(($16+20)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18+4)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($15)|(0)) >= (($20)|(0));
      if ($21) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $23=HEAP32[((_PyExc_IndexError)>>2)];
      _PyErr_SetString($23, ((__str110)|0));
      $1=-1;
      label = 18; break;
    case 5: 
      var $25=$3;
      var $26=$self;
      var $27=(($26+20)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28+12)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=(($30+($25<<2))|0);
      var $32=HEAP32[(($31)>>2)];
      $old=$32;
      var $33=$4;
      var $34=(($33)|(0))!=0;
      if ($34) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $36=$4;
      var $37=(($36)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=((($38)+(1))|0);
      HEAP32[(($37)>>2)]=$39;
      var $40=$4;
      var $41=$3;
      var $42=$self;
      var $43=(($42+20)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=(($44+12)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46+($41<<2))|0);
      HEAP32[(($47)>>2)]=$40;
      label = 12; break;
    case 7: 
      var $49=$self;
      var $50=(($49+20)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=(($51+4)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=((($53)-(1))|0);
      HEAP32[(($52)>>2)]=$54;
      var $55=$3;
      $i=$55;
      label = 8; break;
    case 8: 
      var $57=$i;
      var $58=$self;
      var $59=(($58+20)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=(($60+4)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=(($57)|(0)) < (($62)|(0));
      if ($63) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $65=$i;
      var $66=((($65)+(1))|0);
      var $67=$self;
      var $68=(($67+20)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=(($69+12)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=(($71+($66<<2))|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=$i;
      var $75=$self;
      var $76=(($75+20)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=(($77+12)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=(($79+($74<<2))|0);
      HEAP32[(($80)>>2)]=$73;
      label = 10; break;
    case 10: 
      var $82=$i;
      var $83=((($82)+(1))|0);
      $i=$83;
      label = 8; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $87=$old;
      var $88=(($87)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=((($89)-(1))|0);
      HEAP32[(($88)>>2)]=$90;
      var $91=(($90)|(0))!=0;
      if ($91) { label = 14; break; } else { label = 15; break; }
    case 14: 
      label = 16; break;
    case 15: 
      var $94=$old;
      var $95=(($94+4)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=(($96+24)|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=$old;
      FUNCTION_TABLE[$98]($99);
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      $1=0;
      label = 18; break;
    case 18: 
      var $103=$1;
      return $103;
    default: assert(0, "bad label: " + label);
  }
}
function _element_getitem($self_, $index) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $self;
      $2=$self_;
      $3=$index;
      var $4=$2;
      var $5=$4;
      $self=$5;
      var $6=$self;
      var $7=(($6+20)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))!=0;
      if ($9) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $11=$3;
      var $12=(($11)|(0)) < 0;
      if ($12) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $14=$3;
      var $15=$self;
      var $16=(($15+20)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17+4)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($14)|(0)) >= (($19)|(0));
      if ($20) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $22=HEAP32[((_PyExc_IndexError)>>2)];
      _PyErr_SetString($22, ((__str111)|0));
      $1=0;
      label = 6; break;
    case 5: 
      var $24=$3;
      var $25=$self;
      var $26=(($25+20)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27+12)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29+($24<<2))|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=((($33)+(1))|0);
      HEAP32[(($32)>>2)]=$34;
      var $35=$3;
      var $36=$self;
      var $37=(($36+20)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38+12)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40+($35<<2))|0);
      var $42=HEAP32[(($41)>>2)];
      $1=$42;
      label = 6; break;
    case 6: 
      var $44=$1;
      return $44;
    default: assert(0, "bad label: " + label);
  }
}
function _element_get_tail($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $res;
      $2=$self;
      var $3=$2;
      var $4=(($3+16)|0);
      var $5=HEAP32[(($4)>>2)];
      $res=$5;
      var $6=$res;
      var $7=$6;
      var $8=$7 & 1;
      var $9=(($8)|(0))!=0;
      if ($9) { label = 2; break; } else { label = 7; break; }
    case 2: 
      var $11=$res;
      var $12=$11;
      var $13=$12 & -2;
      var $14=$13;
      $res=$14;
      var $15=$res;
      var $16=(($15+4)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17)|(0))==((_PyList_Type)|(0));
      if ($18) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $20=$res;
      var $21=_list_join($20);
      $res=$21;
      var $22=$res;
      var $23=(($22)|(0))!=0;
      if ($23) { label = 5; break; } else { label = 4; break; }
    case 4: 
      $1=0;
      label = 8; break;
    case 5: 
      var $26=$res;
      var $27=$2;
      var $28=(($27+16)|0);
      HEAP32[(($28)>>2)]=$26;
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $31=$res;
      $1=$31;
      label = 8; break;
    case 8: 
      var $33=$1;
      return $33;
    default: assert(0, "bad label: " + label);
  }
}
function _treebuilder_dealloc($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$self;
      label = 2; break;
    case 2: 
      var $3=$1;
      var $4=(($3+48)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))==0;
      if ($6) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 10; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $10=$1;
      var $11=(($10+48)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=((($14)-(1))|0);
      HEAP32[(($13)>>2)]=$15;
      var $16=(($15)|(0))!=0;
      if ($16) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 8; break;
    case 7: 
      var $19=$1;
      var $20=(($19+48)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21+4)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+24)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=$1;
      var $27=(($26+48)|0);
      var $28=HEAP32[(($27)>>2)];
      FUNCTION_TABLE[$25]($28);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $34=$1;
      var $35=(($34+44)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36)|(0))==0;
      if ($37) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 20; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $41=$1;
      var $42=(($41+44)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($43)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=((($45)-(1))|0);
      HEAP32[(($44)>>2)]=$46;
      var $47=(($46)|(0))!=0;
      if ($47) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 18; break;
    case 17: 
      var $50=$1;
      var $51=(($50+44)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=(($52+4)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54+24)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=$1;
      var $58=(($57+44)|0);
      var $59=HEAP32[(($58)>>2)];
      FUNCTION_TABLE[$56]($59);
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $65=$1;
      var $66=(($65+40)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=(($67)|(0))==0;
      if ($68) { label = 23; break; } else { label = 24; break; }
    case 23: 
      label = 30; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $72=$1;
      var $73=(($72+40)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=(($74)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=((($76)-(1))|0);
      HEAP32[(($75)>>2)]=$77;
      var $78=(($77)|(0))!=0;
      if ($78) { label = 26; break; } else { label = 27; break; }
    case 26: 
      label = 28; break;
    case 27: 
      var $81=$1;
      var $82=(($81+40)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=(($83+4)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=(($85+24)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=$1;
      var $89=(($88+40)|0);
      var $90=HEAP32[(($89)>>2)];
      FUNCTION_TABLE[$87]($90);
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      var $96=$1;
      var $97=(($96+36)|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=(($98)|(0))==0;
      if ($99) { label = 33; break; } else { label = 34; break; }
    case 33: 
      label = 40; break;
    case 34: 
      label = 35; break;
    case 35: 
      var $103=$1;
      var $104=(($103+36)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=(($105)|0);
      var $107=HEAP32[(($106)>>2)];
      var $108=((($107)-(1))|0);
      HEAP32[(($106)>>2)]=$108;
      var $109=(($108)|(0))!=0;
      if ($109) { label = 36; break; } else { label = 37; break; }
    case 36: 
      label = 38; break;
    case 37: 
      var $112=$1;
      var $113=(($112+36)|0);
      var $114=HEAP32[(($113)>>2)];
      var $115=(($114+4)|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=(($116+24)|0);
      var $118=HEAP32[(($117)>>2)];
      var $119=$1;
      var $120=(($119+36)|0);
      var $121=HEAP32[(($120)>>2)];
      FUNCTION_TABLE[$118]($121);
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      var $127=$1;
      var $128=(($127+32)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=(($129)|(0))==0;
      if ($130) { label = 43; break; } else { label = 44; break; }
    case 43: 
      label = 50; break;
    case 44: 
      label = 45; break;
    case 45: 
      var $134=$1;
      var $135=(($134+32)|0);
      var $136=HEAP32[(($135)>>2)];
      var $137=(($136)|0);
      var $138=HEAP32[(($137)>>2)];
      var $139=((($138)-(1))|0);
      HEAP32[(($137)>>2)]=$139;
      var $140=(($139)|(0))!=0;
      if ($140) { label = 46; break; } else { label = 47; break; }
    case 46: 
      label = 48; break;
    case 47: 
      var $143=$1;
      var $144=(($143+32)|0);
      var $145=HEAP32[(($144)>>2)];
      var $146=(($145+4)|0);
      var $147=HEAP32[(($146)>>2)];
      var $148=(($147+24)|0);
      var $149=HEAP32[(($148)>>2)];
      var $150=$1;
      var $151=(($150+32)|0);
      var $152=HEAP32[(($151)>>2)];
      FUNCTION_TABLE[$149]($152);
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      var $158=$1;
      var $159=(($158+24)|0);
      var $160=HEAP32[(($159)>>2)];
      var $161=(($160)|0);
      var $162=HEAP32[(($161)>>2)];
      var $163=((($162)-(1))|0);
      HEAP32[(($161)>>2)]=$163;
      var $164=(($163)|(0))!=0;
      if ($164) { label = 53; break; } else { label = 54; break; }
    case 53: 
      label = 55; break;
    case 54: 
      var $167=$1;
      var $168=(($167+24)|0);
      var $169=HEAP32[(($168)>>2)];
      var $170=(($169+4)|0);
      var $171=HEAP32[(($170)>>2)];
      var $172=(($171+24)|0);
      var $173=HEAP32[(($172)>>2)];
      var $174=$1;
      var $175=(($174+24)|0);
      var $176=HEAP32[(($175)>>2)];
      FUNCTION_TABLE[$173]($176);
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      label = 57; break;
    case 57: 
      var $180=$1;
      var $181=(($180+20)|0);
      var $182=HEAP32[(($181)>>2)];
      var $183=(($182)|(0))==0;
      if ($183) { label = 58; break; } else { label = 59; break; }
    case 58: 
      label = 65; break;
    case 59: 
      label = 60; break;
    case 60: 
      var $187=$1;
      var $188=(($187+20)|0);
      var $189=HEAP32[(($188)>>2)];
      var $190=(($189)|0);
      var $191=HEAP32[(($190)>>2)];
      var $192=((($191)-(1))|0);
      HEAP32[(($190)>>2)]=$192;
      var $193=(($192)|(0))!=0;
      if ($193) { label = 61; break; } else { label = 62; break; }
    case 61: 
      label = 63; break;
    case 62: 
      var $196=$1;
      var $197=(($196+20)|0);
      var $198=HEAP32[(($197)>>2)];
      var $199=(($198+4)|0);
      var $200=HEAP32[(($199)>>2)];
      var $201=(($200+24)|0);
      var $202=HEAP32[(($201)>>2)];
      var $203=$1;
      var $204=(($203+20)|0);
      var $205=HEAP32[(($204)>>2)];
      FUNCTION_TABLE[$202]($205);
      label = 63; break;
    case 63: 
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      var $211=$1;
      var $212=(($211+16)|0);
      var $213=HEAP32[(($212)>>2)];
      var $214=$213;
      var $215=(($214)|0);
      var $216=HEAP32[(($215)>>2)];
      var $217=((($216)-(1))|0);
      HEAP32[(($215)>>2)]=$217;
      var $218=(($217)|(0))!=0;
      if ($218) { label = 68; break; } else { label = 69; break; }
    case 68: 
      label = 70; break;
    case 69: 
      var $221=$1;
      var $222=(($221+16)|0);
      var $223=HEAP32[(($222)>>2)];
      var $224=$223;
      var $225=(($224+4)|0);
      var $226=HEAP32[(($225)>>2)];
      var $227=(($226+24)|0);
      var $228=HEAP32[(($227)>>2)];
      var $229=$1;
      var $230=(($229+16)|0);
      var $231=HEAP32[(($230)>>2)];
      var $232=$231;
      FUNCTION_TABLE[$228]($232);
      label = 70; break;
    case 70: 
      label = 71; break;
    case 71: 
      label = 72; break;
    case 72: 
      var $236=$1;
      var $237=(($236+12)|0);
      var $238=HEAP32[(($237)>>2)];
      var $239=$238;
      var $240=(($239)|0);
      var $241=HEAP32[(($240)>>2)];
      var $242=((($241)-(1))|0);
      HEAP32[(($240)>>2)]=$242;
      var $243=(($242)|(0))!=0;
      if ($243) { label = 73; break; } else { label = 74; break; }
    case 73: 
      label = 75; break;
    case 74: 
      var $246=$1;
      var $247=(($246+12)|0);
      var $248=HEAP32[(($247)>>2)];
      var $249=$248;
      var $250=(($249+4)|0);
      var $251=HEAP32[(($250)>>2)];
      var $252=(($251+24)|0);
      var $253=HEAP32[(($252)>>2)];
      var $254=$1;
      var $255=(($254+12)|0);
      var $256=HEAP32[(($255)>>2)];
      var $257=$256;
      FUNCTION_TABLE[$253]($257);
      label = 75; break;
    case 75: 
      label = 76; break;
    case 76: 
      label = 77; break;
    case 77: 
      var $261=$1;
      var $262=(($261+8)|0);
      var $263=HEAP32[(($262)>>2)];
      var $264=(($263)|(0))==0;
      if ($264) { label = 78; break; } else { label = 79; break; }
    case 78: 
      label = 85; break;
    case 79: 
      label = 80; break;
    case 80: 
      var $268=$1;
      var $269=(($268+8)|0);
      var $270=HEAP32[(($269)>>2)];
      var $271=(($270)|0);
      var $272=HEAP32[(($271)>>2)];
      var $273=((($272)-(1))|0);
      HEAP32[(($271)>>2)]=$273;
      var $274=(($273)|(0))!=0;
      if ($274) { label = 81; break; } else { label = 82; break; }
    case 81: 
      label = 83; break;
    case 82: 
      var $277=$1;
      var $278=(($277+8)|0);
      var $279=HEAP32[(($278)>>2)];
      var $280=(($279+4)|0);
      var $281=HEAP32[(($280)>>2)];
      var $282=(($281+24)|0);
      var $283=HEAP32[(($282)>>2)];
      var $284=$1;
      var $285=(($284+8)|0);
      var $286=HEAP32[(($285)>>2)];
      FUNCTION_TABLE[$283]($286);
      label = 83; break;
    case 83: 
      label = 84; break;
    case 84: 
      label = 85; break;
    case 85: 
      label = 86; break;
    case 86: 
      var $291=$1;
      var $292=$291;
      _PyObject_Free($292);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _treebuilder_getattr($self, $name) {
  var label = 0;
  var $1;
  var $2;
  $1=$self;
  $2=$name;
  var $3=$1;
  var $4=$3;
  var $5=$2;
  var $6=_Py_FindMethod(((_treebuilder_methods)|0), $4, $5);
  return $6;
}
function _treebuilder_data($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $data=__stackBase__;
      $2=$self;
      $3=$args;
      var $4=$3;
      var $5=_PyArg_ParseTuple($4, ((__str121)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$data,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 4; break;
    case 3: 
      var $9=$2;
      var $10=HEAP32[(($data)>>2)];
      var $11=_treebuilder_handle_data($9, $10);
      $1=$11;
      label = 4; break;
    case 4: 
      var $13=$1;
      STACKTOP = __stackBase__;
      return $13;
    default: assert(0, "bad label: " + label);
  }
}
function _treebuilder_start($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $tag=__stackBase__;
      var $attrib=(__stackBase__)+(4);
      $2=$self;
      $3=$args;
      HEAP32[(($attrib)>>2)]=__Py_NoneStruct;
      var $4=$3;
      var $5=_PyArg_ParseTuple($4, ((__str120)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$tag,HEAP32[(((tempInt)+(4))>>2)]=$attrib,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 4; break;
    case 3: 
      var $9=$2;
      var $10=HEAP32[(($tag)>>2)];
      var $11=HEAP32[(($attrib)>>2)];
      var $12=_treebuilder_handle_start($9, $10, $11);
      $1=$12;
      label = 4; break;
    case 4: 
      var $14=$1;
      STACKTOP = __stackBase__;
      return $14;
    default: assert(0, "bad label: " + label);
  }
}
function _treebuilder_end($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $tag=__stackBase__;
      $2=$self;
      $3=$args;
      var $4=$3;
      var $5=_PyArg_ParseTuple($4, ((__str119)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$tag,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 4; break;
    case 3: 
      var $9=$2;
      var $10=HEAP32[(($tag)>>2)];
      var $11=_treebuilder_handle_end($9, $10);
      $1=$11;
      label = 4; break;
    case 4: 
      var $13=$1;
      STACKTOP = __stackBase__;
      return $13;
    default: assert(0, "bad label: " + label);
  }
}
function _treebuilder_xml($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $encoding=__stackBase__;
      var $standalone=(__stackBase__)+(4);
      $2=$self;
      $3=$args;
      var $4=$3;
      var $5=_PyArg_ParseTuple($4, ((__str118)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$encoding,HEAP32[(((tempInt)+(4))>>2)]=$standalone,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 4; break;
    case 3: 
      var $9=$2;
      var $10=HEAP32[(($encoding)>>2)];
      var $11=HEAP32[(($standalone)>>2)];
      var $12=_treebuilder_handle_xml($9, $10, $11);
      $1=$12;
      label = 4; break;
    case 4: 
      var $14=$1;
      STACKTOP = __stackBase__;
      return $14;
    default: assert(0, "bad label: " + label);
  }
}
function _treebuilder_close($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$self;
      $3=$args;
      var $4=$3;
      var $5=_PyArg_ParseTuple($4, ((__str106)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 4; break;
    case 3: 
      var $9=$2;
      var $10=_treebuilder_done($9);
      $1=$10;
      label = 4; break;
    case 4: 
      var $12=$1;
      STACKTOP = __stackBase__;
      return $12;
    default: assert(0, "bad label: " + label);
  }
}
// EMSCRIPTEN_END_FUNCS
// EMSCRIPTEN_END_FUNCS
// Warning: printing of i64 values may be slightly rounded! No deep i64 math used, so precise i64 code not included
var i64Math = null;
// === Auto-generated postamble setup entry stuff ===
function run(args) {
  initRuntime();
}
Module['run'] = run;
// {{PRE_RUN_ADDITIONS}}
run();
// {{POST_RUN_ADDITIONS}}
  // {{MODULE_ADDITIONS}}
  return Module;
});
