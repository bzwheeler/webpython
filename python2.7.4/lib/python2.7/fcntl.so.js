// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
// Capture the output of this into a variable, if you want
(function(FUNCTION_TABLE_OFFSET, globalScope) {
  var Module = {};
  var args = [];
  Module.arguments = [];
// === Auto-generated preamble library stuff ===
//========================================
// Runtime essentials
//========================================
function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.pop();
    var func = callback.func;
    if (typeof func === 'number') {
      func = FUNCTION_TABLE[func];
    }
    func(callback.arg === undefined ? null : callback.arg);
  }
}
var __ATINIT__ = []; // functions called during startup
function initRuntime() {
  callRuntimeCallbacks(__ATINIT__);
}
// === Body ===
var _module_doc;
var _lockf_doc;
var _ioctl_doc;
var _flock_doc;
var _fcntl_methods;
var _fcntl_doc;
var __str9;
var __str8;
var __str7;
var __str6;
var __str5;
var __str4;
var __str35;
var __str34;
var __str33;
var __str32;
var __str31;
var __str30;
var __str3;
var __str29;
var __str28;
var __str27;
var __str26;
var __str25;
var __str24;
var __str23;
var __str22;
var __str21;
var __str20;
var __str2;
var __str19;
var __str18;
var __str17;
var __str16;
var __str15;
var __str14;
var __str13;
var __str12;
var __str11;
var __str10;
var __str1;
var __str;
_module_doc=allocate([84,104,105,115,32,109,111,100,117,108,101,32,112,101,114,102,111,114,109,115,32,102,105,108,101,32,99,111,110,116,114,111,108,32,97,110,100,32,73,47,79,32,99,111,110,116,114,111,108,32,111,110,32,102,105,108,101,32,10,100,101,115,99,114,105,112,116,111,114,115,46,32,32,73,116,32,105,115,32,97,110,32,105,110,116,101,114,102,97,99,101,32,116,111,32,116,104,101,32,102,99,110,116,108,40,41,32,97,110,100,32,105,111,99,116,108,40,41,32,85,110,105,120,10,114,111,117,116,105,110,101,115,46,32,32,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,99,97,110,32,98,101,32,111,98,116,97,105,110,101,100,32,119,105,116,104,32,116,104,101,32,102,105,108,101,110,111,40,41,32,109,101,116,104,111,100,32,111,102,10,97,32,102,105,108,101,32,111,114,32,115,111,99,107,101,116,32,111,98,106,101,99,116,46,0,0,0,0], "i8", ALLOC_NORMAL);
_lockf_doc=allocate([108,111,99,107,102,32,40,102,100,44,32,111,112,101,114,97,116,105,111,110,44,32,108,101,110,103,116,104,61,48,44,32,115,116,97,114,116,61,48,44,32,119,104,101,110,99,101,61,48,41,10,10,84,104,105,115,32,105,115,32,101,115,115,101,110,116,105,97,108,108,121,32,97,32,119,114,97,112,112,101,114,32,97,114,111,117,110,100,32,116,104,101,32,102,99,110,116,108,40,41,32,108,111,99,107,105,110,103,32,99,97,108,108,115,46,32,32,102,100,32,105,115,32,116,104,101,10,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,111,102,32,116,104,101,32,102,105,108,101,32,116,111,32,108,111,99,107,32,111,114,32,117,110,108,111,99,107,44,32,97,110,100,32,111,112,101,114,97,116,105,111,110,32,105,115,32,111,110,101,32,111,102,32,116,104,101,10,102,111,108,108,111,119,105,110,103,32,118,97,108,117,101,115,58,10,10,32,32,32,32,76,79,67,75,95,85,78,32,45,32,117,110,108,111,99,107,10,32,32,32,32,76,79,67,75,95,83,72,32,45,32,97,99,113,117,105,114,101,32,97,32,115,104,97,114,101,100,32,108,111,99,107,10,32,32,32,32,76,79,67,75,95,69,88,32,45,32,97,99,113,117,105,114,101,32,97,110,32,101,120,99,108,117,115,105,118,101,32,108,111,99,107,10,10,87,104,101,110,32,111,112,101,114,97,116,105,111,110,32,105,115,32,76,79,67,75,95,83,72,32,111,114,32,76,79,67,75,95,69,88,44,32,105,116,32,99,97,110,32,97,108,115,111,32,98,101,32,98,105,116,119,105,115,101,32,79,82,101,100,32,119,105,116,104,10,76,79,67,75,95,78,66,32,116,111,32,97,118,111,105,100,32,98,108,111,99,107,105,110,103,32,111,110,32,108,111,99,107,32,97,99,113,117,105,115,105,116,105,111,110,46,32,32,73,102,32,76,79,67,75,95,78,66,32,105,115,32,117,115,101,100,32,97,110,100,32,116,104,101,10,108,111,99,107,32,99,97,110,110,111,116,32,98,101,32,97,99,113,117,105,114,101,100,44,32,97,110,32,73,79,69,114,114,111,114,32,119,105,108,108,32,98,101,32,114,97,105,115,101,100,32,97,110,100,32,116,104,101,32,101,120,99,101,112,116,105,111,110,32,119,105,108,108,10,104,97,118,101,32,97,110,32,101,114,114,110,111,32,97,116,116,114,105,98,117,116,101,32,115,101,116,32,116,111,32,69,65,67,67,69,83,32,111,114,32,69,65,71,65,73,78,32,40,100,101,112,101,110,100,105,110,103,32,111,110,32,116,104,101,32,111,112,101,114,97,116,105,110,103,10,115,121,115,116,101,109,32,45,45,32,102,111,114,32,112,111,114,116,97,98,105,108,105,116,121,44,32,99,104,101,99,107,32,102,111,114,32,101,105,116,104,101,114,32,118,97,108,117,101,41,46,10,10,108,101,110,103,116,104,32,105,115,32,116,104,101,32,110,117,109,98,101,114,32,111,102,32,98,121,116,101,115,32,116,111,32,108,111,99,107,44,32,119,105,116,104,32,116,104,101,32,100,101,102,97,117,108,116,32,109,101,97,110,105,110,103,32,116,111,32,108,111,99,107,32,116,111,10,69,79,70,46,32,32,115,116,97,114,116,32,105,115,32,116,104,101,32,98,121,116,101,32,111,102,102,115,101,116,44,32,114,101,108,97,116,105,118,101,32,116,111,32,119,104,101,110,99,101,44,32,116,111,32,116,104,97,116,32,116,104,101,32,108,111,99,107,10,115,116,97,114,116,115,46,32,32,119,104,101,110,99,101,32,105,115,32,97,115,32,119,105,116,104,32,102,105,108,101,111,98,106,46,115,101,101,107,40,41,44,32,115,112,101,99,105,102,105,99,97,108,108,121,58,10,10,32,32,32,32,48,32,45,32,114,101,108,97,116,105,118,101,32,116,111,32,116,104,101,32,115,116,97,114,116,32,111,102,32,116,104,101,32,102,105,108,101,32,40,83,69,69,75,95,83,69,84,41,10,32,32,32,32,49,32,45,32,114,101,108,97,116,105,118,101,32,116,111,32,116,104,101,32,99,117,114,114,101,110,116,32,98,117,102,102,101,114,32,112,111,115,105,116,105,111,110,32,40,83,69,69,75,95,67,85,82,41,10,32,32,32,32,50,32,45,32,114,101,108,97,116,105,118,101,32,116,111,32,116,104,101,32,101,110,100,32,111,102,32,116,104,101,32,102,105,108,101,32,40,83,69,69,75,95,69,78,68,41,0,0,0,0], "i8", ALLOC_NORMAL);
_ioctl_doc=allocate([105,111,99,116,108,40,102,100,44,32,111,112,116,91,44,32,97,114,103,91,44,32,109,117,116,97,116,101,95,102,108,97,103,93,93,41,10,10,80,101,114,102,111,114,109,32,116,104,101,32,114,101,113,117,101,115,116,101,100,32,111,112,101,114,97,116,105,111,110,32,111,110,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,102,100,46,32,32,84,104,101,32,111,112,101,114,97,116,105,111,110,32,105,115,10,100,101,102,105,110,101,100,32,98,121,32,111,112,116,32,97,110,100,32,105,115,32,111,112,101,114,97,116,105,110,103,32,115,121,115,116,101,109,32,100,101,112,101,110,100,101,110,116,46,32,32,84,121,112,105,99,97,108,108,121,32,116,104,101,115,101,32,99,111,100,101,115,32,97,114,101,10,114,101,116,114,105,101,118,101,100,32,102,114,111,109,32,116,104,101,32,102,99,110,116,108,32,111,114,32,116,101,114,109,105,111,115,32,108,105,98,114,97,114,121,32,109,111,100,117,108,101,115,46,10,10,84,104,101,32,97,114,103,117,109,101,110,116,32,97,114,103,32,105,115,32,111,112,116,105,111,110,97,108,44,32,97,110,100,32,100,101,102,97,117,108,116,115,32,116,111,32,48,59,32,105,116,32,109,97,121,32,98,101,32,97,110,32,105,110,116,32,111,114,32,97,10,98,117,102,102,101,114,32,99,111,110,116,97,105,110,105,110,103,32,99,104,97,114,97,99,116,101,114,32,100,97,116,97,32,40,109,111,115,116,32,108,105,107,101,108,121,32,97,32,115,116,114,105,110,103,32,111,114,32,97,110,32,97,114,114,97,121,41,46,32,10,10,73,102,32,116,104,101,32,97,114,103,117,109,101,110,116,32,105,115,32,97,32,109,117,116,97,98,108,101,32,98,117,102,102,101,114,32,40,115,117,99,104,32,97,115,32,97,110,32,97,114,114,97,121,41,32,97,110,100,32,105,102,32,116,104,101,10,109,117,116,97,116,101,95,102,108,97,103,32,97,114,103,117,109,101,110,116,32,40,119,104,105,99,104,32,105,115,32,111,110,108,121,32,97,108,108,111,119,101,100,32,105,110,32,116,104,105,115,32,99,97,115,101,41,32,105,115,32,116,114,117,101,32,116,104,101,110,32,116,104,101,10,98,117,102,102,101,114,32,105,115,32,40,105,110,32,101,102,102,101,99,116,41,32,112,97,115,115,101,100,32,116,111,32,116,104,101,32,111,112,101,114,97,116,105,110,103,32,115,121,115,116,101,109,32,97,110,100,32,99,104,97,110,103,101,115,32,109,97,100,101,32,98,121,10,116,104,101,32,79,83,32,119,105,108,108,32,98,101,32,114,101,102,108,101,99,116,101,100,32,105,110,32,116,104,101,32,99,111,110,116,101,110,116,115,32,111,102,32,116,104,101,32,98,117,102,102,101,114,32,97,102,116,101,114,32,116,104,101,32,99,97,108,108,32,104,97,115,10,114,101,116,117,114,110,101,100,46,32,32,84,104,101,32,114,101,116,117,114,110,32,118,97,108,117,101,32,105,115,32,116,104,101,32,105,110,116,101,103,101,114,32,114,101,116,117,114,110,101,100,32,98,121,32,116,104,101,32,105,111,99,116,108,32,115,121,115,116,101,109,10,99,97,108,108,46,10,10,73,102,32,116,104,101,32,97,114,103,117,109,101,110,116,32,105,115,32,97,32,109,117,116,97,98,108,101,32,98,117,102,102,101,114,32,97,110,100,32,116,104,101,32,109,117,116,97,98,108,101,95,102,108,97,103,32,97,114,103,117,109,101,110,116,32,105,115,32,110,111,116,10,112,97,115,115,101,100,32,111,114,32,105,115,32,102,97,108,115,101,44,32,116,104,101,32,98,101,104,97,118,105,111,114,32,105,115,32,97,115,32,105,102,32,97,32,115,116,114,105,110,103,32,104,97,100,32,98,101,101,110,32,112,97,115,115,101,100,46,32,32,84,104,105,115,10,98,101,104,97,118,105,111,114,32,119,105,108,108,32,99,104,97,110,103,101,32,105,110,32,102,117,116,117,114,101,32,114,101,108,101,97,115,101,115,32,111,102,32,80,121,116,104,111,110,46,10,10,73,102,32,116,104,101,32,97,114,103,117,109,101,110,116,32,105,115,32,97,110,32,105,109,109,117,116,97,98,108,101,32,98,117,102,102,101,114,32,40,109,111,115,116,32,108,105,107,101,108,121,32,97,32,115,116,114,105,110,103,41,32,116,104,101,110,32,97,32,99,111,112,121,10,111,102,32,116,104,101,32,98,117,102,102,101,114,32,105,115,32,112,97,115,115,101,100,32,116,111,32,116,104,101,32,111,112,101,114,97,116,105,110,103,32,115,121,115,116,101,109,32,97,110,100,32,116,104,101,32,114,101,116,117,114,110,32,118,97,108,117,101,32,105,115,32,97,10,115,116,114,105,110,103,32,111,102,32,116,104,101,32,115,97,109,101,32,108,101,110,103,116,104,32,99,111,110,116,97,105,110,105,110,103,32,119,104,97,116,101,118,101,114,32,116,104,101,32,111,112,101,114,97,116,105,110,103,32,115,121,115,116,101,109,32,112,117,116,32,105,110,10,116,104,101,32,98,117,102,102,101,114,46,32,32,84,104,101,32,108,101,110,103,116,104,32,111,102,32,116,104,101,32,97,114,103,32,98,117,102,102,101,114,32,105,110,32,116,104,105,115,32,99,97,115,101,32,105,115,32,110,111,116,32,97,108,108,111,119,101,100,32,116,111,10,101,120,99,101,101,100,32,49,48,50,52,32,98,121,116,101,115,46,10,10,73,102,32,116,104,101,32,97,114,103,32,103,105,118,101,110,32,105,115,32,97,110,32,105,110,116,101,103,101,114,32,111,114,32,105,102,32,110,111,110,101,32,105,115,32,115,112,101,99,105,102,105,101,100,44,32,116,104,101,32,114,101,115,117,108,116,32,118,97,108,117,101,32,105,115,10,97,110,32,105,110,116,101,103,101,114,32,99,111,114,114,101,115,112,111,110,100,105,110,103,32,116,111,32,116,104,101,32,114,101,116,117,114,110,32,118,97,108,117,101,32,111,102,32,116,104,101,32,105,111,99,116,108,32,99,97,108,108,32,105,110,32,116,104,101,32,67,10,99,111,100,101,46,0,0], "i8", ALLOC_NORMAL);
_flock_doc=allocate([102,108,111,99,107,40,102,100,44,32,111,112,101,114,97,116,105,111,110,41,10,10,80,101,114,102,111,114,109,32,116,104,101,32,108,111,99,107,32,111,112,101,114,97,116,105,111,110,32,111,112,32,111,110,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,102,100,46,32,32,83,101,101,32,116,104,101,32,85,110,105,120,32,10,109,97,110,117,97,108,32,112,97,103,101,32,102,111,114,32,102,108,111,99,107,40,51,41,32,102,111,114,32,100,101,116,97,105,108,115,46,32,32,40,79,110,32,115,111,109,101,32,115,121,115,116,101,109,115,44,32,116,104,105,115,32,102,117,110,99,116,105,111,110,32,105,115,10,101,109,117,108,97,116,101,100,32,117,115,105,110,103,32,102,99,110,116,108,40,41,46,41,0,0,0,0], "i8", ALLOC_NORMAL);
_fcntl_methods=allocate([0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NORMAL);
_fcntl_doc=allocate([102,99,110,116,108,40,102,100,44,32,111,112,116,44,32,91,97,114,103,93,41,10,10,80,101,114,102,111,114,109,32,116,104,101,32,114,101,113,117,101,115,116,101,100,32,111,112,101,114,97,116,105,111,110,32,111,110,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,102,100,46,32,32,84,104,101,32,111,112,101,114,97,116,105,111,110,10,105,115,32,100,101,102,105,110,101,100,32,98,121,32,111,112,32,97,110,100,32,105,115,32,111,112,101,114,97,116,105,110,103,32,115,121,115,116,101,109,32,100,101,112,101,110,100,101,110,116,46,32,32,84,104,101,115,101,32,99,111,110,115,116,97,110,116,115,32,97,114,101,10,97,118,97,105,108,97,98,108,101,32,102,114,111,109,32,116,104,101,32,102,99,110,116,108,32,109,111,100,117,108,101,46,32,32,84,104,101,32,97,114,103,117,109,101,110,116,32,97,114,103,32,105,115,32,111,112,116,105,111,110,97,108,44,32,97,110,100,10,100,101,102,97,117,108,116,115,32,116,111,32,48,59,32,105,116,32,109,97,121,32,98,101,32,97,110,32,105,110,116,32,111,114,32,97,32,115,116,114,105,110,103,46,32,32,73,102,32,97,114,103,32,105,115,32,103,105,118,101,110,32,97,115,32,97,32,115,116,114,105,110,103,44,10,116,104,101,32,114,101,116,117,114,110,32,118,97,108,117,101,32,111,102,32,102,99,110,116,108,32,105,115,32,97,32,115,116,114,105,110,103,32,111,102,32,116,104,97,116,32,108,101,110,103,116,104,44,32,99,111,110,116,97,105,110,105,110,103,32,116,104,101,10,114,101,115,117,108,116,105,110,103,32,118,97,108,117,101,32,112,117,116,32,105,110,32,116,104,101,32,97,114,103,32,98,117,102,102,101,114,32,98,121,32,116,104,101,32,111,112,101,114,97,116,105,110,103,32,115,121,115,116,101,109,46,32,32,84,104,101,32,108,101,110,103,116,104,10,111,102,32,116,104,101,32,97,114,103,32,115,116,114,105,110,103,32,105,115,32,110,111,116,32,97,108,108,111,119,101,100,32,116,111,32,101,120,99,101,101,100,32,49,48,50,52,32,98,121,116,101,115,46,32,32,73,102,32,116,104,101,32,97,114,103,32,103,105,118,101,110,10,105,115,32,97,110,32,105,110,116,101,103,101,114,32,111,114,32,105,102,32,110,111,110,101,32,105,115,32,115,112,101,99,105,102,105,101,100,44,32,116,104,101,32,114,101,115,117,108,116,32,118,97,108,117,101,32,105,115,32,97,110,32,105,110,116,101,103,101,114,10,99,111,114,114,101,115,112,111,110,100,105,110,103,32,116,111,32,116,104,101,32,114,101,116,117,114,110,32,118,97,108,117,101,32,111,102,32,116,104,101,32,102,99,110,116,108,32,99,97,108,108,32,105,110,32,116,104,101,32,67,32,99,111,100,101,46,0,0], "i8", ALLOC_NORMAL);
__str9=allocate([70,95,83,69,84,70,76,0], "i8", ALLOC_NORMAL);
__str8=allocate([70,95,71,69,84,70,76,0], "i8", ALLOC_NORMAL);
__str7=allocate([70,95,83,69,84,70,68,0], "i8", ALLOC_NORMAL);
__str6=allocate([70,95,71,69,84,70,68,0], "i8", ALLOC_NORMAL);
__str5=allocate([70,95,68,85,80,70,68,0], "i8", ALLOC_NORMAL);
__str4=allocate([76,79,67,75,95,85,78,0], "i8", ALLOC_NORMAL);
__str35=allocate([79,38,105,124,108,59,102,99,110,116,108,32,114,101,113,117,105,114,101,115,32,97,32,102,105,108,101,32,111,114,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,44,32,97,110,32,105,110,116,101,103,101,114,32,97,110,100,32,111,112,116,105,111,110,97,108,108,121,32,97,32,116,104,105,114,100,32,105,110,116,101,103,101,114,32,111,114,32,97,32,115,116,114,105,110,103,0,0,0], "i8", ALLOC_NORMAL);
__str34=allocate([102,99,110,116,108,32,115,116,114,105,110,103,32,97,114,103,32,116,111,111,32,108,111,110,103,0,0,0], "i8", ALLOC_NORMAL);
__str33=allocate([79,38,105,115,35,58,102,99,110,116,108,0], "i8", ALLOC_NORMAL);
__str32=allocate([79,38,73,124,105,59,105,111,99,116,108,32,114,101,113,117,105,114,101,115,32,97,32,102,105,108,101,32,111,114,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,44,32,97,110,32,105,110,116,101,103,101,114,32,97,110,100,32,111,112,116,105,111,110,97,108,108,121,32,97,110,32,105,110,116,101,103,101,114,32,111,114,32,98,117,102,102,101,114,32,97,114,103,117,109,101,110,116,0], "i8", ALLOC_NORMAL);
__str31=allocate([79,38,73,115,35,58,105,111,99,116,108,0], "i8", ALLOC_NORMAL);
__str30=allocate([105,111,99,116,108,32,115,116,114,105,110,103,32,97,114,103,32,116,111,111,32,108,111,110,103,0,0,0], "i8", ALLOC_NORMAL);
__str3=allocate([76,79,67,75,95,78,66,0], "i8", ALLOC_NORMAL);
__str29=allocate([79,38,73,119,35,124,105,58,105,111,99,116,108,0,0,0], "i8", ALLOC_NORMAL);
__str28=allocate([79,38,105,58,102,108,111,99,107,0,0,0], "i8", ALLOC_NORMAL);
__str27=allocate([117,110,114,101,99,111,103,110,105,122,101,100,32,108,111,99,107,102,32,97,114,103,117,109,101,110,116,0], "i8", ALLOC_NORMAL);
__str26=allocate([79,38,105,124,79,79,105,58,108,111,99,107,102,0,0,0], "i8", ALLOC_NORMAL);
__str25=allocate([108,111,99,107,102,0,0,0], "i8", ALLOC_NORMAL);
__str24=allocate([102,108,111,99,107,0,0,0], "i8", ALLOC_NORMAL);
__str23=allocate([105,111,99,116,108,0,0,0], "i8", ALLOC_NORMAL);
__str22=allocate([70,68,95,67,76,79,69,88,69,67,0,0], "i8", ALLOC_NORMAL);
__str21=allocate([70,65,83,89,78,67,0,0], "i8", ALLOC_NORMAL);
__str20=allocate([70,95,83,69,84,76,75,87,54,52,0,0], "i8", ALLOC_NORMAL);
__str2=allocate([76,79,67,75,95,69,88,0], "i8", ALLOC_NORMAL);
__str19=allocate([70,95,83,69,84,76,75,54,52,0,0,0], "i8", ALLOC_NORMAL);
__str18=allocate([70,95,71,69,84,76,75,54,52,0,0,0], "i8", ALLOC_NORMAL);
__str17=allocate([70,95,85,78,76,67,75,0], "i8", ALLOC_NORMAL);
__str16=allocate([70,95,87,82,76,67,75,0], "i8", ALLOC_NORMAL);
__str15=allocate([70,95,82,68,76,67,75,0], "i8", ALLOC_NORMAL);
__str14=allocate([70,95,83,69,84,79,87,78,0,0,0,0], "i8", ALLOC_NORMAL);
__str13=allocate([70,95,71,69,84,79,87,78,0,0,0,0], "i8", ALLOC_NORMAL);
__str12=allocate([70,95,83,69,84,76,75,87,0,0,0,0], "i8", ALLOC_NORMAL);
__str11=allocate([70,95,83,69,84,76,75,0], "i8", ALLOC_NORMAL);
__str10=allocate([70,95,71,69,84,76,75,0], "i8", ALLOC_NORMAL);
__str1=allocate([76,79,67,75,95,83,72,0], "i8", ALLOC_NORMAL);
__str=allocate([102,99,110,116,108,0,0,0], "i8", ALLOC_NORMAL);
/* no memory initializer */
function runPostSets() {
HEAP32[((_fcntl_methods)>>2)]=((__str)|0);
HEAP32[(((_fcntl_methods)+(4))>>2)]=(FUNCTION_TABLE_OFFSET + 6);
HEAP32[(((_fcntl_methods)+(12))>>2)]=((_fcntl_doc)|0);
HEAP32[(((_fcntl_methods)+(16))>>2)]=((__str23)|0);
HEAP32[(((_fcntl_methods)+(20))>>2)]=(FUNCTION_TABLE_OFFSET + 8);
HEAP32[(((_fcntl_methods)+(28))>>2)]=((_ioctl_doc)|0);
HEAP32[(((_fcntl_methods)+(32))>>2)]=((__str24)|0);
HEAP32[(((_fcntl_methods)+(36))>>2)]=(FUNCTION_TABLE_OFFSET + 10);
HEAP32[(((_fcntl_methods)+(44))>>2)]=((_flock_doc)|0);
HEAP32[(((_fcntl_methods)+(48))>>2)]=((__str25)|0);
HEAP32[(((_fcntl_methods)+(52))>>2)]=(FUNCTION_TABLE_OFFSET + 2);
HEAP32[(((_fcntl_methods)+(60))>>2)]=((_lockf_doc)|0);
}
if (!awaitingMemoryInitializer) runPostSets();
FUNCTION_TABLE.push.apply(FUNCTION_TABLE, [0,0,_fcntl_lockf,0,_conv_descriptor,0,_fcntl_fcntl,0,_fcntl_ioctl,0,_fcntl_flock,0]);
// EMSCRIPTEN_START_FUNCS
function _initfcntl() {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $m;
      var $d;
      var $1=_Py_InitModule4(((__str)|0), ((_fcntl_methods)|0), ((_module_doc)|0), 0, 1013);
      $m=$1;
      var $2=$m;
      var $3=(($2)|(0))==0;
      if ($3) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      var $6=$m;
      var $7=_PyModule_GetDict($6);
      $d=$7;
      var $8=$d;
      var $9=_all_ins($8);
      label = 4; break;
    case 4: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_initfcntl"] = _initfcntl;
function _all_ins($d) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $2=$d;
      var $3=$2;
      var $4=_ins($3, ((__str1)|0), 1);
      var $5=(($4)|(0))!=0;
      if ($5) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=-1;
      label = 46; break;
    case 3: 
      var $8=$2;
      var $9=_ins($8, ((__str2)|0), 2);
      var $10=(($9)|(0))!=0;
      if ($10) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=-1;
      label = 46; break;
    case 5: 
      var $13=$2;
      var $14=_ins($13, ((__str3)|0), 8);
      var $15=(($14)|(0))!=0;
      if ($15) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $1=-1;
      label = 46; break;
    case 7: 
      var $18=$2;
      var $19=_ins($18, ((__str4)|0), 4);
      var $20=(($19)|(0))!=0;
      if ($20) { label = 8; break; } else { label = 9; break; }
    case 8: 
      $1=-1;
      label = 46; break;
    case 9: 
      var $23=$2;
      var $24=_ins($23, ((__str5)|0), 0);
      var $25=(($24)|(0))!=0;
      if ($25) { label = 10; break; } else { label = 11; break; }
    case 10: 
      $1=-1;
      label = 46; break;
    case 11: 
      var $28=$2;
      var $29=_ins($28, ((__str6)|0), 1);
      var $30=(($29)|(0))!=0;
      if ($30) { label = 12; break; } else { label = 13; break; }
    case 12: 
      $1=-1;
      label = 46; break;
    case 13: 
      var $33=$2;
      var $34=_ins($33, ((__str7)|0), 2);
      var $35=(($34)|(0))!=0;
      if ($35) { label = 14; break; } else { label = 15; break; }
    case 14: 
      $1=-1;
      label = 46; break;
    case 15: 
      var $38=$2;
      var $39=_ins($38, ((__str8)|0), 3);
      var $40=(($39)|(0))!=0;
      if ($40) { label = 16; break; } else { label = 17; break; }
    case 16: 
      $1=-1;
      label = 46; break;
    case 17: 
      var $43=$2;
      var $44=_ins($43, ((__str9)|0), 4);
      var $45=(($44)|(0))!=0;
      if ($45) { label = 18; break; } else { label = 19; break; }
    case 18: 
      $1=-1;
      label = 46; break;
    case 19: 
      var $48=$2;
      var $49=_ins($48, ((__str10)|0), 7);
      var $50=(($49)|(0))!=0;
      if ($50) { label = 20; break; } else { label = 21; break; }
    case 20: 
      $1=-1;
      label = 46; break;
    case 21: 
      var $53=$2;
      var $54=_ins($53, ((__str11)|0), 8);
      var $55=(($54)|(0))!=0;
      if ($55) { label = 22; break; } else { label = 23; break; }
    case 22: 
      $1=-1;
      label = 46; break;
    case 23: 
      var $58=$2;
      var $59=_ins($58, ((__str12)|0), 9);
      var $60=(($59)|(0))!=0;
      if ($60) { label = 24; break; } else { label = 25; break; }
    case 24: 
      $1=-1;
      label = 46; break;
    case 25: 
      var $63=$2;
      var $64=_ins($63, ((__str13)|0), 5);
      var $65=(($64)|(0))!=0;
      if ($65) { label = 26; break; } else { label = 27; break; }
    case 26: 
      $1=-1;
      label = 46; break;
    case 27: 
      var $68=$2;
      var $69=_ins($68, ((__str14)|0), 6);
      var $70=(($69)|(0))!=0;
      if ($70) { label = 28; break; } else { label = 29; break; }
    case 28: 
      $1=-1;
      label = 46; break;
    case 29: 
      var $73=$2;
      var $74=_ins($73, ((__str15)|0), 1);
      var $75=(($74)|(0))!=0;
      if ($75) { label = 30; break; } else { label = 31; break; }
    case 30: 
      $1=-1;
      label = 46; break;
    case 31: 
      var $78=$2;
      var $79=_ins($78, ((__str16)|0), 2);
      var $80=(($79)|(0))!=0;
      if ($80) { label = 32; break; } else { label = 33; break; }
    case 32: 
      $1=-1;
      label = 46; break;
    case 33: 
      var $83=$2;
      var $84=_ins($83, ((__str17)|0), 3);
      var $85=(($84)|(0))!=0;
      if ($85) { label = 34; break; } else { label = 35; break; }
    case 34: 
      $1=-1;
      label = 46; break;
    case 35: 
      var $88=$2;
      var $89=_ins($88, ((__str18)|0), 20);
      var $90=(($89)|(0))!=0;
      if ($90) { label = 36; break; } else { label = 37; break; }
    case 36: 
      $1=-1;
      label = 46; break;
    case 37: 
      var $93=$2;
      var $94=_ins($93, ((__str19)|0), 21);
      var $95=(($94)|(0))!=0;
      if ($95) { label = 38; break; } else { label = 39; break; }
    case 38: 
      $1=-1;
      label = 46; break;
    case 39: 
      var $98=$2;
      var $99=_ins($98, ((__str20)|0), 22);
      var $100=(($99)|(0))!=0;
      if ($100) { label = 40; break; } else { label = 41; break; }
    case 40: 
      $1=-1;
      label = 46; break;
    case 41: 
      var $103=$2;
      var $104=_ins($103, ((__str21)|0), 64);
      var $105=(($104)|(0))!=0;
      if ($105) { label = 42; break; } else { label = 43; break; }
    case 42: 
      $1=-1;
      label = 46; break;
    case 43: 
      var $108=$2;
      var $109=_ins($108, ((__str22)|0), 1);
      var $110=(($109)|(0))!=0;
      if ($110) { label = 44; break; } else { label = 45; break; }
    case 44: 
      $1=-1;
      label = 46; break;
    case 45: 
      $1=0;
      label = 46; break;
    case 46: 
      var $114=$1;
      return $114;
    default: assert(0, "bad label: " + label);
  }
}
function _ins($d, $symbol, $value) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $v;
      $2=$d;
      $3=$symbol;
      $4=$value;
      var $5=$4;
      var $6=_PyInt_FromLong($5);
      $v=$6;
      var $7=$v;
      var $8=(($7)|(0))!=0;
      if ($8) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $10=$2;
      var $11=$3;
      var $12=$v;
      var $13=_PyDict_SetItemString($10, $11, $12);
      var $14=(($13)|(0)) < 0;
      if ($14) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=-1;
      label = 10; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $18=$v;
      var $19=(($18)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=((($20)-(1))|0);
      HEAP32[(($19)>>2)]=$21;
      var $22=(($21)|(0))!=0;
      if ($22) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 8; break;
    case 7: 
      var $25=$v;
      var $26=(($25+4)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27+24)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=$v;
      FUNCTION_TABLE[$29]($30);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      $1=0;
      label = 10; break;
    case 10: 
      var $34=$1;
      return $34;
    default: assert(0, "bad label: " + label);
  }
}
function _fcntl_fcntl($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 1044)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $fd=__stackBase__;
      var $code=(__stackBase__)+(4);
      var $arg=(__stackBase__)+(8);
      var $ret;
      var $str=(__stackBase__)+(12);
      var $len=(__stackBase__)+(16);
      var $buf=(__stackBase__)+(20);
      $2=$self;
      $3=$args;
      var $4=$3;
      var $5=__PyArg_ParseTuple_SizeT($4, ((__str33)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=(FUNCTION_TABLE_OFFSET + 4),HEAP32[(((tempInt)+(4))>>2)]=$fd,HEAP32[(((tempInt)+(8))>>2)]=$code,HEAP32[(((tempInt)+(12))>>2)]=$str,HEAP32[(((tempInt)+(16))>>2)]=$len,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 2; break; } else { label = 7; break; }
    case 2: 
      var $8=HEAP32[(($len)>>2)];
      var $9=(($8)>>>(0)) > 1024;
      if ($9) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $11=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($11, ((__str34)|0));
      $1=0;
      label = 12; break;
    case 4: 
      var $13=$buf;
      var $14=HEAP32[(($str)>>2)];
      var $15=HEAP32[(($len)>>2)];
      assert($15 % 1 === 0);_memcpy($13, $14, $15);
      var $16=HEAP32[(($fd)>>2)];
      var $17=HEAP32[(($code)>>2)];
      var $18=(($buf)|0);
      var $19=_fcntl($16, $17, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$18,tempInt));
      $ret=$19;
      var $20=$ret;
      var $21=(($20)|(0)) < 0;
      if ($21) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $23=HEAP32[((_PyExc_IOError)>>2)];
      var $24=_PyErr_SetFromErrno($23);
      $1=0;
      label = 12; break;
    case 6: 
      var $26=(($buf)|0);
      var $27=HEAP32[(($len)>>2)];
      var $28=_PyString_FromStringAndSize($26, $27);
      $1=$28;
      label = 12; break;
    case 7: 
      _PyErr_Clear();
      HEAP32[(($arg)>>2)]=0;
      var $30=$3;
      var $31=__PyArg_ParseTuple_SizeT($30, ((__str35)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=(FUNCTION_TABLE_OFFSET + 4),HEAP32[(((tempInt)+(4))>>2)]=$fd,HEAP32[(((tempInt)+(8))>>2)]=$code,HEAP32[(((tempInt)+(12))>>2)]=$arg,tempInt));
      var $32=(($31)|(0))!=0;
      if ($32) { label = 9; break; } else { label = 8; break; }
    case 8: 
      $1=0;
      label = 12; break;
    case 9: 
      var $35=HEAP32[(($fd)>>2)];
      var $36=HEAP32[(($code)>>2)];
      var $37=HEAP32[(($arg)>>2)];
      var $38=_fcntl($35, $36, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$37,tempInt));
      $ret=$38;
      var $39=$ret;
      var $40=(($39)|(0)) < 0;
      if ($40) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $42=HEAP32[((_PyExc_IOError)>>2)];
      var $43=_PyErr_SetFromErrno($42);
      $1=0;
      label = 12; break;
    case 11: 
      var $45=$ret;
      var $46=_PyInt_FromLong($45);
      $1=$46;
      label = 12; break;
    case 12: 
      var $48=$1;
      STACKTOP = __stackBase__;
      return $48;
    default: assert(0, "bad label: " + label);
  }
}
function _fcntl_ioctl($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 1052)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $fd=__stackBase__;
      var $code=(__stackBase__)+(4);
      var $arg=(__stackBase__)+(8);
      var $ret;
      var $str=(__stackBase__)+(12);
      var $len=(__stackBase__)+(16);
      var $mutate_arg=(__stackBase__)+(20);
      var $buf=(__stackBase__)+(24);
      var $arg1;
      $2=$self;
      $3=$args;
      HEAP32[(($mutate_arg)>>2)]=1;
      var $4=$3;
      var $5=__PyArg_ParseTuple_SizeT($4, ((__str29)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=(FUNCTION_TABLE_OFFSET + 4),HEAP32[(((tempInt)+(4))>>2)]=$fd,HEAP32[(((tempInt)+(8))>>2)]=$code,HEAP32[(((tempInt)+(12))>>2)]=$str,HEAP32[(((tempInt)+(16))>>2)]=$len,HEAP32[(((tempInt)+(20))>>2)]=$mutate_arg,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 2; break; } else { label = 22; break; }
    case 2: 
      var $8=HEAP32[(($mutate_arg)>>2)];
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $11=HEAP32[(($len)>>2)];
      var $12=(($11)|(0)) <= 1024;
      if ($12) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $14=$buf;
      var $15=HEAP32[(($str)>>2)];
      var $16=HEAP32[(($len)>>2)];
      assert($16 % 1 === 0);_memcpy($14, $15, $16);
      var $17=HEAP32[(($len)>>2)];
      var $18=(($buf+$17)|0);
      HEAP8[($18)]=0;
      var $19=(($buf)|0);
      $arg1=$19;
      label = 6; break;
    case 5: 
      var $21=HEAP32[(($str)>>2)];
      $arg1=$21;
      label = 6; break;
    case 6: 
      label = 11; break;
    case 7: 
      var $24=HEAP32[(($len)>>2)];
      var $25=(($24)|(0)) > 1024;
      if ($25) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $27=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($27, ((__str30)|0));
      $1=0;
      label = 33; break;
    case 9: 
      var $29=$buf;
      var $30=HEAP32[(($str)>>2)];
      var $31=HEAP32[(($len)>>2)];
      assert($31 % 1 === 0);_memcpy($29, $30, $31);
      var $32=HEAP32[(($len)>>2)];
      var $33=(($buf+$32)|0);
      HEAP8[($33)]=0;
      var $34=(($buf)|0);
      $arg1=$34;
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $37=(($buf)|0);
      var $38=$arg1;
      var $39=(($37)|(0))==(($38)|(0));
      if ($39) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $41=HEAP32[(($fd)>>2)];
      var $42=HEAP32[(($code)>>2)];
      var $43=$arg1;
      var $44=_ioctl($41, $42, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$43,tempInt));
      $ret=$44;
      label = 14; break;
    case 13: 
      var $46=HEAP32[(($fd)>>2)];
      var $47=HEAP32[(($code)>>2)];
      var $48=$arg1;
      var $49=_ioctl($46, $47, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$48,tempInt));
      $ret=$49;
      label = 14; break;
    case 14: 
      var $51=HEAP32[(($mutate_arg)>>2)];
      var $52=(($51)|(0))!=0;
      if ($52) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $54=HEAP32[(($len)>>2)];
      var $55=(($54)|(0)) <= 1024;
      if ($55) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $57=HEAP32[(($str)>>2)];
      var $58=$buf;
      var $59=HEAP32[(($len)>>2)];
      assert($59 % 1 === 0);_memcpy($57, $58, $59);
      label = 17; break;
    case 17: 
      var $61=$ret;
      var $62=(($61)|(0)) < 0;
      if ($62) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $64=HEAP32[((_PyExc_IOError)>>2)];
      var $65=_PyErr_SetFromErrno($64);
      $1=0;
      label = 33; break;
    case 19: 
      var $67=HEAP32[(($mutate_arg)>>2)];
      var $68=(($67)|(0))!=0;
      if ($68) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $70=$ret;
      var $71=_PyInt_FromLong($70);
      $1=$71;
      label = 33; break;
    case 21: 
      var $73=(($buf)|0);
      var $74=HEAP32[(($len)>>2)];
      var $75=_PyString_FromStringAndSize($73, $74);
      $1=$75;
      label = 33; break;
    case 22: 
      _PyErr_Clear();
      var $77=$3;
      var $78=__PyArg_ParseTuple_SizeT($77, ((__str31)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=(FUNCTION_TABLE_OFFSET + 4),HEAP32[(((tempInt)+(4))>>2)]=$fd,HEAP32[(((tempInt)+(8))>>2)]=$code,HEAP32[(((tempInt)+(12))>>2)]=$str,HEAP32[(((tempInt)+(16))>>2)]=$len,tempInt));
      var $79=(($78)|(0))!=0;
      if ($79) { label = 23; break; } else { label = 28; break; }
    case 23: 
      var $81=HEAP32[(($len)>>2)];
      var $82=(($81)|(0)) > 1024;
      if ($82) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $84=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($84, ((__str30)|0));
      $1=0;
      label = 33; break;
    case 25: 
      var $86=$buf;
      var $87=HEAP32[(($str)>>2)];
      var $88=HEAP32[(($len)>>2)];
      assert($88 % 1 === 0);_memcpy($86, $87, $88);
      var $89=HEAP32[(($len)>>2)];
      var $90=(($buf+$89)|0);
      HEAP8[($90)]=0;
      var $91=HEAP32[(($fd)>>2)];
      var $92=HEAP32[(($code)>>2)];
      var $93=(($buf)|0);
      var $94=_ioctl($91, $92, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$93,tempInt));
      $ret=$94;
      var $95=$ret;
      var $96=(($95)|(0)) < 0;
      if ($96) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $98=HEAP32[((_PyExc_IOError)>>2)];
      var $99=_PyErr_SetFromErrno($98);
      $1=0;
      label = 33; break;
    case 27: 
      var $101=(($buf)|0);
      var $102=HEAP32[(($len)>>2)];
      var $103=_PyString_FromStringAndSize($101, $102);
      $1=$103;
      label = 33; break;
    case 28: 
      _PyErr_Clear();
      HEAP32[(($arg)>>2)]=0;
      var $105=$3;
      var $106=__PyArg_ParseTuple_SizeT($105, ((__str32)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=(FUNCTION_TABLE_OFFSET + 4),HEAP32[(((tempInt)+(4))>>2)]=$fd,HEAP32[(((tempInt)+(8))>>2)]=$code,HEAP32[(((tempInt)+(12))>>2)]=$arg,tempInt));
      var $107=(($106)|(0))!=0;
      if ($107) { label = 30; break; } else { label = 29; break; }
    case 29: 
      $1=0;
      label = 33; break;
    case 30: 
      var $110=HEAP32[(($fd)>>2)];
      var $111=HEAP32[(($code)>>2)];
      var $112=HEAP32[(($arg)>>2)];
      var $113=_ioctl($110, $111, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$112,tempInt));
      $ret=$113;
      var $114=$ret;
      var $115=(($114)|(0)) < 0;
      if ($115) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $117=HEAP32[((_PyExc_IOError)>>2)];
      var $118=_PyErr_SetFromErrno($117);
      $1=0;
      label = 33; break;
    case 32: 
      var $120=$ret;
      var $121=_PyInt_FromLong($120);
      $1=$121;
      label = 33; break;
    case 33: 
      var $123=$1;
      STACKTOP = __stackBase__;
      return $123;
    default: assert(0, "bad label: " + label);
  }
}
function _fcntl_flock($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $fd=__stackBase__;
      var $code=(__stackBase__)+(4);
      var $ret;
      $2=$self;
      $3=$args;
      var $4=$3;
      var $5=__PyArg_ParseTuple_SizeT($4, ((__str28)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=(FUNCTION_TABLE_OFFSET + 4),HEAP32[(((tempInt)+(4))>>2)]=$fd,HEAP32[(((tempInt)+(8))>>2)]=$code,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 6; break;
    case 3: 
      var $9=HEAP32[(($fd)>>2)];
      var $10=HEAP32[(($code)>>2)];
      var $11=_flock($9, $10);
      $ret=$11;
      var $12=$ret;
      var $13=(($12)|(0)) < 0;
      if ($13) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $15=HEAP32[((_PyExc_IOError)>>2)];
      var $16=_PyErr_SetFromErrno($15);
      $1=0;
      label = 6; break;
    case 5: 
      var $18=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $19=((($18)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$19;
      $1=__Py_NoneStruct;
      label = 6; break;
    case 6: 
      var $21=$1;
      STACKTOP = __stackBase__;
      return $21;
    default: assert(0, "bad label: " + label);
  }
}
function _fcntl_lockf($self, $args) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $fd=__stackBase__;
      var $code=(__stackBase__)+(4);
      var $ret;
      var $whence=(__stackBase__)+(8);
      var $lenobj=(__stackBase__)+(12);
      var $startobj=(__stackBase__)+(16);
      var $l=(__stackBase__)+(20);
      $2=$self;
      $3=$args;
      HEAP32[(($whence)>>2)]=0;
      HEAP32[(($lenobj)>>2)]=0;
      HEAP32[(($startobj)>>2)]=0;
      var $4=$3;
      var $5=__PyArg_ParseTuple_SizeT($4, ((__str26)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=(FUNCTION_TABLE_OFFSET + 4),HEAP32[(((tempInt)+(4))>>2)]=$fd,HEAP32[(((tempInt)+(8))>>2)]=$code,HEAP32[(((tempInt)+(12))>>2)]=$lenobj,HEAP32[(((tempInt)+(16))>>2)]=$startobj,HEAP32[(((tempInt)+(20))>>2)]=$whence,tempInt));
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 23; break;
    case 3: 
      var $9=HEAP32[(($code)>>2)];
      var $10=(($9)|(0))==4;
      if ($10) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $12=(($l)|0);
      HEAP16[(($12)>>1)]=3;
      label = 12; break;
    case 5: 
      var $14=HEAP32[(($code)>>2)];
      var $15=$14 & 1;
      var $16=(($15)|(0))!=0;
      if ($16) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $18=(($l)|0);
      HEAP16[(($18)>>1)]=1;
      label = 11; break;
    case 7: 
      var $20=HEAP32[(($code)>>2)];
      var $21=$20 & 2;
      var $22=(($21)|(0))!=0;
      if ($22) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $24=(($l)|0);
      HEAP16[(($24)>>1)]=2;
      label = 10; break;
    case 9: 
      var $26=HEAP32[((_PyExc_ValueError)>>2)];
      _PyErr_SetString($26, ((__str27)|0));
      $1=0;
      label = 23; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $30=(($l+8)|0);
      HEAP32[(($30)>>2)]=0;
      var $31=(($l+4)|0);
      HEAP32[(($31)>>2)]=0;
      var $32=HEAP32[(($startobj)>>2)];
      var $33=(($32)|(0))!=0;
      if ($33) { label = 13; break; } else { label = 16; break; }
    case 13: 
      var $35=HEAP32[(($startobj)>>2)];
      var $36=_PyInt_AsLong($35);
      var $37=(($l+4)|0);
      HEAP32[(($37)>>2)]=$36;
      var $38=_PyErr_Occurred();
      var $39=(($38)|(0))!=0;
      if ($39) { label = 14; break; } else { label = 15; break; }
    case 14: 
      $1=0;
      label = 23; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $43=HEAP32[(($lenobj)>>2)];
      var $44=(($43)|(0))!=0;
      if ($44) { label = 17; break; } else { label = 20; break; }
    case 17: 
      var $46=HEAP32[(($lenobj)>>2)];
      var $47=_PyInt_AsLong($46);
      var $48=(($l+8)|0);
      HEAP32[(($48)>>2)]=$47;
      var $49=_PyErr_Occurred();
      var $50=(($49)|(0))!=0;
      if ($50) { label = 18; break; } else { label = 19; break; }
    case 18: 
      $1=0;
      label = 23; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $54=HEAP32[(($whence)>>2)];
      var $55=(($54) & 65535);
      var $56=(($l+2)|0);
      HEAP16[(($56)>>1)]=$55;
      var $57=HEAP32[(($fd)>>2)];
      var $58=HEAP32[(($code)>>2)];
      var $59=$58 & 8;
      var $60=(($59)|(0))!=0;
      var $61=$60 ? 8 : 9;
      var $62=_fcntl($57, $61, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$l,tempInt));
      $ret=$62;
      var $63=$ret;
      var $64=(($63)|(0)) < 0;
      if ($64) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $66=HEAP32[((_PyExc_IOError)>>2)];
      var $67=_PyErr_SetFromErrno($66);
      $1=0;
      label = 23; break;
    case 22: 
      var $69=HEAP32[((((__Py_NoneStruct)|0))>>2)];
      var $70=((($69)+(1))|0);
      HEAP32[((((__Py_NoneStruct)|0))>>2)]=$70;
      $1=__Py_NoneStruct;
      label = 23; break;
    case 23: 
      var $72=$1;
      STACKTOP = __stackBase__;
      return $72;
    default: assert(0, "bad label: " + label);
  }
}
function _conv_descriptor($object, $target) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $fd;
      $2=$object;
      $3=$target;
      var $4=$2;
      var $5=_PyObject_AsFileDescriptor($4);
      $fd=$5;
      var $6=$fd;
      var $7=(($6)|(0)) < 0;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 4; break;
    case 3: 
      var $10=$fd;
      var $11=$3;
      HEAP32[(($11)>>2)]=$10;
      $1=1;
      label = 4; break;
    case 4: 
      var $13=$1;
      return $13;
    default: assert(0, "bad label: " + label);
  }
}
// EMSCRIPTEN_END_FUNCS
// EMSCRIPTEN_END_FUNCS
// Warning: printing of i64 values may be slightly rounded! No deep i64 math used, so precise i64 code not included
var i64Math = null;
// === Auto-generated postamble setup entry stuff ===
function run(args) {
  initRuntime();
}
Module['run'] = run;
// {{PRE_RUN_ADDITIONS}}
run();
// {{POST_RUN_ADDITIONS}}
  // {{MODULE_ADDITIONS}}
  return Module;
});
